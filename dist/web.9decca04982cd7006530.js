// /*! For license information please see web.9decca04982cd7006530.js.LICENSE.txt */
// var web;
// (() => {
//     var e, t, n, i, a, s, r, o, l = {
//             6486: function(e, t, n) {
//                 var i;
//                 e = n.nmd(e),
//                     function() {
//                         var a, s = "Expected a function",
//                             r = "__lodash_hash_undefined__",
//                             o = "__lodash_placeholder__",
//                             l = 16,
//                             d = 32,
//                             c = 64,
//                             u = 128,
//                             h = 256,
//                             m = 1 / 0,
//                             p = 9007199254740991,
//                             f = NaN,
//                             g = 4294967295,
//                             _ = [
//                                 ["ary", u],
//                                 ["bind", 1],
//                                 ["bindKey", 2],
//                                 ["curry", 8],
//                                 ["curryRight", l],
//                                 ["flip", 512],
//                                 ["partial", d],
//                                 ["partialRight", c],
//                                 ["rearg", h]
//                             ],
//                             v = "[object Arguments]",
//                             y = "[object Array]",
//                             w = "[object Boolean]",
//                             b = "[object Date]",
//                             M = "[object Error]",
//                             x = "[object Function]",
//                             L = "[object GeneratorFunction]",
//                             k = "[object Map]",
//                             T = "[object Number]",
//                             Y = "[object Object]",
//                             S = "[object Promise]",
//                             D = "[object RegExp]",
//                             P = "[object Set]",
//                             E = "[object String]",
//                             C = "[object Symbol]",
//                             H = "[object WeakMap]",
//                             Z = "[object ArrayBuffer]",
//                             A = "[object DataView]",
//                             j = "[object Float32Array]",
//                             O = "[object Float64Array]",
//                             F = "[object Int8Array]",
//                             I = "[object Int16Array]",
//                             N = "[object Int32Array]",
//                             R = "[object Uint8Array]",
//                             z = "[object Uint8ClampedArray]",
//                             $ = "[object Uint16Array]",
//                             W = "[object Uint32Array]",
//                             U = /\b__p \+= '';/g,
//                             B = /\b(__p \+=) '' \+/g,
//                             q = /(__e\(.*?\)|\b__t\)) \+\n'';/g,
//                             G = /&(?:amp|lt|gt|quot|#39);/g,
//                             J = /[&<>"']/g,
//                             V = RegExp(G.source),
//                             K = RegExp(J.source),
//                             X = /<%-([\s\S]+?)%>/g,
//                             Q = /<%([\s\S]+?)%>/g,
//                             ee = /<%=([\s\S]+?)%>/g,
//                             te = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
//                             ne = /^\w*$/,
//                             ie = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,
//                             ae = /[\\^$.*+?()[\]{}|]/g,
//                             se = RegExp(ae.source),
//                             re = /^\s+/,
//                             oe = /\s/,
//                             le = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
//                             de = /\{\n\/\* \[wrapped with (.+)\] \*/,
//                             ce = /,? & /,
//                             ue = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g,
//                             he = /[()=,{}\[\]\/\s]/,
//                             me = /\\(\\)?/g,
//                             pe = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,
//                             fe = /\w*$/,
//                             ge = /^[-+]0x[0-9a-f]+$/i,
//                             _e = /^0b[01]+$/i,
//                             ve = /^\[object .+?Constructor\]$/,
//                             ye = /^0o[0-7]+$/i,
//                             we = /^(?:0|[1-9]\d*)$/,
//                             be = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,
//                             Me = /($^)/,
//                             xe = /['\n\r\u2028\u2029\\]/g,
//                             Le = "\\ud800-\\udfff",
//                             ke = "\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff",
//                             Te = "\\u2700-\\u27bf",
//                             Ye = "a-z\\xdf-\\xf6\\xf8-\\xff",
//                             Se = "A-Z\\xc0-\\xd6\\xd8-\\xde",
//                             De = "\\ufe0e\\ufe0f",
//                             Pe = "\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",
//                             Ee = "['’]",
//                             Ce = "[" + Le + "]",
//                             He = "[" + Pe + "]",
//                             Ze = "[" + ke + "]",
//                             Ae = "\\d+",
//                             je = "[" + Te + "]",
//                             Oe = "[" + Ye + "]",
//                             Fe = "[^" + Le + Pe + Ae + Te + Ye + Se + "]",
//                             Ie = "\\ud83c[\\udffb-\\udfff]",
//                             Ne = "[^" + Le + "]",
//                             Re = "(?:\\ud83c[\\udde6-\\uddff]){2}",
//                             ze = "[\\ud800-\\udbff][\\udc00-\\udfff]",
//                             $e = "[" + Se + "]",
//                             We = "\\u200d",
//                             Ue = "(?:" + Oe + "|" + Fe + ")",
//                             Be = "(?:" + $e + "|" + Fe + ")",
//                             qe = "(?:['’](?:d|ll|m|re|s|t|ve))?",
//                             Ge = "(?:['’](?:D|LL|M|RE|S|T|VE))?",
//                             Je = "(?:" + Ze + "|" + Ie + ")" + "?",
//                             Ve = "[" + De + "]?",
//                             Ke = Ve + Je + ("(?:" + We + "(?:" + [Ne, Re, ze].join("|") + ")" + Ve + Je + ")*"),
//                             Xe = "(?:" + [je, Re, ze].join("|") + ")" + Ke,
//                             Qe = "(?:" + [Ne + Ze + "?", Ze, Re, ze, Ce].join("|") + ")",
//                             et = RegExp(Ee, "g"),
//                             tt = RegExp(Ze, "g"),
//                             nt = RegExp(Ie + "(?=" + Ie + ")|" + Qe + Ke, "g"),
//                             it = RegExp([$e + "?" + Oe + "+" + qe + "(?=" + [He, $e, "$"].join("|") + ")", Be + "+" + Ge + "(?=" + [He, $e + Ue, "$"].join("|") + ")", $e + "?" + Ue + "+" + qe, $e + "+" + Ge, "\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])", "\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])", Ae, Xe].join("|"), "g"),
//                             at = RegExp("[" + We + Le + ke + De + "]"),
//                             st = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/,
//                             rt = ["Array", "Buffer", "DataView", "Date", "Error", "Float32Array", "Float64Array", "Function", "Int8Array", "Int16Array", "Int32Array", "Map", "Math", "Object", "Promise", "RegExp", "Set", "String", "Symbol", "TypeError", "Uint8Array", "Uint8ClampedArray", "Uint16Array", "Uint32Array", "WeakMap", "_", "clearTimeout", "isFinite", "parseInt", "setTimeout"],
//                             ot = -1,
//                             lt = {};
//                         lt[j] = lt[O] = lt[F] = lt[I] = lt[N] = lt[R] = lt[z] = lt[$] = lt[W] = !0, lt[v] = lt[y] = lt[Z] = lt[w] = lt[A] = lt[b] = lt[M] = lt[x] = lt[k] = lt[T] = lt[Y] = lt[D] = lt[P] = lt[E] = lt[H] = !1;
//                         var dt = {};
//                         dt[v] = dt[y] = dt[Z] = dt[A] = dt[w] = dt[b] = dt[j] = dt[O] = dt[F] = dt[I] = dt[N] = dt[k] = dt[T] = dt[Y] = dt[D] = dt[P] = dt[E] = dt[C] = dt[R] = dt[z] = dt[$] = dt[W] = !0, dt[M] = dt[x] = dt[H] = !1;
//                         var ct = {
//                                 "\\": "\\",
//                                 "'": "'",
//                                 "\n": "n",
//                                 "\r": "r",
//                                 "\u2028": "u2028",
//                                 "\u2029": "u2029"
//                             },
//                             ut = parseFloat,
//                             ht = parseInt,
//                             mt = "object" == typeof n.g && n.g && n.g.Object === Object && n.g,
//                             pt = "object" == typeof self && self && self.Object === Object && self,
//                             ft = mt || pt || Function("return this")(),
//                             gt = t && !t.nodeType && t,
//                             _t = gt && e && !e.nodeType && e,
//                             vt = _t && _t.exports === gt,
//                             yt = vt && mt.process,
//                             wt = function() {
//                                 try {
//                                     var e = _t && _t.require && _t.require("util").types;
//                                     return e || yt && yt.binding && yt.binding("util")
//                                 } catch (t) {}
//                             }(),
//                             bt = wt && wt.isArrayBuffer,
//                             Mt = wt && wt.isDate,
//                             xt = wt && wt.isMap,
//                             Lt = wt && wt.isRegExp,
//                             kt = wt && wt.isSet,
//                             Tt = wt && wt.isTypedArray;

//                         function Yt(e, t, n) {
//                             switch (n.length) {
//                                 case 0:
//                                     return e.call(t);
//                                 case 1:
//                                     return e.call(t, n[0]);
//                                 case 2:
//                                     return e.call(t, n[0], n[1]);
//                                 case 3:
//                                     return e.call(t, n[0], n[1], n[2])
//                             }
//                             return e.apply(t, n)
//                         }

//                         function St(e, t, n, i) {
//                             for (var a = -1, s = null == e ? 0 : e.length; ++a < s;) {
//                                 var r = e[a];
//                                 t(i, r, n(r), e)
//                             }
//                             return i
//                         }

//                         function Dt(e, t) {
//                             for (var n = -1, i = null == e ? 0 : e.length; ++n < i && !1 !== t(e[n], n, e););
//                             return e
//                         }

//                         function Pt(e, t) {
//                             for (var n = null == e ? 0 : e.length; n-- && !1 !== t(e[n], n, e););
//                             return e
//                         }

//                         function Et(e, t) {
//                             for (var n = -1, i = null == e ? 0 : e.length; ++n < i;)
//                                 if (!t(e[n], n, e)) return !1;
//                             return !0
//                         }

//                         function Ct(e, t) {
//                             for (var n = -1, i = null == e ? 0 : e.length, a = 0, s = []; ++n < i;) {
//                                 var r = e[n];
//                                 t(r, n, e) && (s[a++] = r)
//                             }
//                             return s
//                         }

//                         function Ht(e, t) {
//                             return !!(null == e ? 0 : e.length) && $t(e, t, 0) > -1
//                         }

//                         function Zt(e, t, n) {
//                             for (var i = -1, a = null == e ? 0 : e.length; ++i < a;)
//                                 if (n(t, e[i])) return !0;
//                             return !1
//                         }

//                         function At(e, t) {
//                             for (var n = -1, i = null == e ? 0 : e.length, a = Array(i); ++n < i;) a[n] = t(e[n], n, e);
//                             return a
//                         }

//                         function jt(e, t) {
//                             for (var n = -1, i = t.length, a = e.length; ++n < i;) e[a + n] = t[n];
//                             return e
//                         }

//                         function Ot(e, t, n, i) {
//                             var a = -1,
//                                 s = null == e ? 0 : e.length;
//                             for (i && s && (n = e[++a]); ++a < s;) n = t(n, e[a], a, e);
//                             return n
//                         }

//                         function Ft(e, t, n, i) {
//                             var a = null == e ? 0 : e.length;
//                             for (i && a && (n = e[--a]); a--;) n = t(n, e[a], a, e);
//                             return n
//                         }

//                         function It(e, t) {
//                             for (var n = -1, i = null == e ? 0 : e.length; ++n < i;)
//                                 if (t(e[n], n, e)) return !0;
//                             return !1
//                         }
//                         var Nt = qt("length");

//                         function Rt(e, t, n) {
//                             var i;
//                             return n(e, (function(e, n, a) {
//                                 if (t(e, n, a)) return i = n, !1
//                             })), i
//                         }

//                         function zt(e, t, n, i) {
//                             for (var a = e.length, s = n + (i ? 1 : -1); i ? s-- : ++s < a;)
//                                 if (t(e[s], s, e)) return s;
//                             return -1
//                         }

//                         function $t(e, t, n) {
//                             return t == t ? function(e, t, n) {
//                                 var i = n - 1,
//                                     a = e.length;
//                                 for (; ++i < a;)
//                                     if (e[i] === t) return i;
//                                 return -1
//                             }(e, t, n) : zt(e, Ut, n)
//                         }

//                         function Wt(e, t, n, i) {
//                             for (var a = n - 1, s = e.length; ++a < s;)
//                                 if (i(e[a], t)) return a;
//                             return -1
//                         }

//                         function Ut(e) {
//                             return e != e
//                         }

//                         function Bt(e, t) {
//                             var n = null == e ? 0 : e.length;
//                             return n ? Vt(e, t) / n : f
//                         }

//                         function qt(e) {
//                             return function(t) {
//                                 return null == t ? a : t[e]
//                             }
//                         }

//                         function Gt(e) {
//                             return function(t) {
//                                 return null == e ? a : e[t]
//                             }
//                         }

//                         function Jt(e, t, n, i, a) {
//                             return a(e, (function(e, a, s) {
//                                 n = i ? (i = !1, e) : t(n, e, a, s)
//                             })), n
//                         }

//                         function Vt(e, t) {
//                             for (var n, i = -1, s = e.length; ++i < s;) {
//                                 var r = t(e[i]);
//                                 r !== a && (n = n === a ? r : n + r)
//                             }
//                             return n
//                         }

//                         function Kt(e, t) {
//                             for (var n = -1, i = Array(e); ++n < e;) i[n] = t(n);
//                             return i
//                         }

//                         function Xt(e) {
//                             return e ? e.slice(0, gn(e) + 1).replace(re, "") : e
//                         }

//                         function Qt(e) {
//                             return function(t) {
//                                 return e(t)
//                             }
//                         }

//                         function en(e, t) {
//                             return At(t, (function(t) {
//                                 return e[t]
//                             }))
//                         }

//                         function tn(e, t) {
//                             return e.has(t)
//                         }

//                         function nn(e, t) {
//                             for (var n = -1, i = e.length; ++n < i && $t(t, e[n], 0) > -1;);
//                             return n
//                         }

//                         function an(e, t) {
//                             for (var n = e.length; n-- && $t(t, e[n], 0) > -1;);
//                             return n
//                         }
//                         var sn = Gt({
//                                 "À": "A",
//                                 "Á": "A",
//                                 "Â": "A",
//                                 "Ã": "A",
//                                 "Ä": "A",
//                                 "Å": "A",
//                                 "à": "a",
//                                 "á": "a",
//                                 "â": "a",
//                                 "ã": "a",
//                                 "ä": "a",
//                                 "å": "a",
//                                 "Ç": "C",
//                                 "ç": "c",
//                                 "Ð": "D",
//                                 "ð": "d",
//                                 "È": "E",
//                                 "É": "E",
//                                 "Ê": "E",
//                                 "Ë": "E",
//                                 "è": "e",
//                                 "é": "e",
//                                 "ê": "e",
//                                 "ë": "e",
//                                 "Ì": "I",
//                                 "Í": "I",
//                                 "Î": "I",
//                                 "Ï": "I",
//                                 "ì": "i",
//                                 "í": "i",
//                                 "î": "i",
//                                 "ï": "i",
//                                 "Ñ": "N",
//                                 "ñ": "n",
//                                 "Ò": "O",
//                                 "Ó": "O",
//                                 "Ô": "O",
//                                 "Õ": "O",
//                                 "Ö": "O",
//                                 "Ø": "O",
//                                 "ò": "o",
//                                 "ó": "o",
//                                 "ô": "o",
//                                 "õ": "o",
//                                 "ö": "o",
//                                 "ø": "o",
//                                 "Ù": "U",
//                                 "Ú": "U",
//                                 "Û": "U",
//                                 "Ü": "U",
//                                 "ù": "u",
//                                 "ú": "u",
//                                 "û": "u",
//                                 "ü": "u",
//                                 "Ý": "Y",
//                                 "ý": "y",
//                                 "ÿ": "y",
//                                 "Æ": "Ae",
//                                 "æ": "ae",
//                                 "Þ": "Th",
//                                 "þ": "th",
//                                 "ß": "ss",
//                                 "Ā": "A",
//                                 "Ă": "A",
//                                 "Ą": "A",
//                                 "ā": "a",
//                                 "ă": "a",
//                                 "ą": "a",
//                                 "Ć": "C",
//                                 "Ĉ": "C",
//                                 "Ċ": "C",
//                                 "Č": "C",
//                                 "ć": "c",
//                                 "ĉ": "c",
//                                 "ċ": "c",
//                                 "č": "c",
//                                 "Ď": "D",
//                                 "Đ": "D",
//                                 "ď": "d",
//                                 "đ": "d",
//                                 "Ē": "E",
//                                 "Ĕ": "E",
//                                 "Ė": "E",
//                                 "Ę": "E",
//                                 "Ě": "E",
//                                 "ē": "e",
//                                 "ĕ": "e",
//                                 "ė": "e",
//                                 "ę": "e",
//                                 "ě": "e",
//                                 "Ĝ": "G",
//                                 "Ğ": "G",
//                                 "Ġ": "G",
//                                 "Ģ": "G",
//                                 "ĝ": "g",
//                                 "ğ": "g",
//                                 "ġ": "g",
//                                 "ģ": "g",
//                                 "Ĥ": "H",
//                                 "Ħ": "H",
//                                 "ĥ": "h",
//                                 "ħ": "h",
//                                 "Ĩ": "I",
//                                 "Ī": "I",
//                                 "Ĭ": "I",
//                                 "Į": "I",
//                                 "İ": "I",
//                                 "ĩ": "i",
//                                 "ī": "i",
//                                 "ĭ": "i",
//                                 "į": "i",
//                                 "ı": "i",
//                                 "Ĵ": "J",
//                                 "ĵ": "j",
//                                 "Ķ": "K",
//                                 "ķ": "k",
//                                 "ĸ": "k",
//                                 "Ĺ": "L",
//                                 "Ļ": "L",
//                                 "Ľ": "L",
//                                 "Ŀ": "L",
//                                 "Ł": "L",
//                                 "ĺ": "l",
//                                 "ļ": "l",
//                                 "ľ": "l",
//                                 "ŀ": "l",
//                                 "ł": "l",
//                                 "Ń": "N",
//                                 "Ņ": "N",
//                                 "Ň": "N",
//                                 "Ŋ": "N",
//                                 "ń": "n",
//                                 "ņ": "n",
//                                 "ň": "n",
//                                 "ŋ": "n",
//                                 "Ō": "O",
//                                 "Ŏ": "O",
//                                 "Ő": "O",
//                                 "ō": "o",
//                                 "ŏ": "o",
//                                 "ő": "o",
//                                 "Ŕ": "R",
//                                 "Ŗ": "R",
//                                 "Ř": "R",
//                                 "ŕ": "r",
//                                 "ŗ": "r",
//                                 "ř": "r",
//                                 "Ś": "S",
//                                 "Ŝ": "S",
//                                 "Ş": "S",
//                                 "Š": "S",
//                                 "ś": "s",
//                                 "ŝ": "s",
//                                 "ş": "s",
//                                 "š": "s",
//                                 "Ţ": "T",
//                                 "Ť": "T",
//                                 "Ŧ": "T",
//                                 "ţ": "t",
//                                 "ť": "t",
//                                 "ŧ": "t",
//                                 "Ũ": "U",
//                                 "Ū": "U",
//                                 "Ŭ": "U",
//                                 "Ů": "U",
//                                 "Ű": "U",
//                                 "Ų": "U",
//                                 "ũ": "u",
//                                 "ū": "u",
//                                 "ŭ": "u",
//                                 "ů": "u",
//                                 "ű": "u",
//                                 "ų": "u",
//                                 "Ŵ": "W",
//                                 "ŵ": "w",
//                                 "Ŷ": "Y",
//                                 "ŷ": "y",
//                                 "Ÿ": "Y",
//                                 "Ź": "Z",
//                                 "Ż": "Z",
//                                 "Ž": "Z",
//                                 "ź": "z",
//                                 "ż": "z",
//                                 "ž": "z",
//                                 "Ĳ": "IJ",
//                                 "ĳ": "ij",
//                                 "Œ": "Oe",
//                                 "œ": "oe",
//                                 "ŉ": "'n",
//                                 "ſ": "s"
//                             }),
//                             rn = Gt({
//                                 "&": "&amp;",
//                                 "<": "&lt;",
//                                 ">": "&gt;",
//                                 '"': "&quot;",
//                                 "'": "&#39;"
//                             });

//                         function on(e) {
//                             return "\\" + ct[e]
//                         }

//                         function ln(e) {
//                             return at.test(e)
//                         }

//                         function dn(e) {
//                             var t = -1,
//                                 n = Array(e.size);
//                             return e.forEach((function(e, i) {
//                                 n[++t] = [i, e]
//                             })), n
//                         }

//                         function cn(e, t) {
//                             return function(n) {
//                                 return e(t(n))
//                             }
//                         }

//                         function un(e, t) {
//                             for (var n = -1, i = e.length, a = 0, s = []; ++n < i;) {
//                                 var r = e[n];
//                                 r !== t && r !== o || (e[n] = o, s[a++] = n)
//                             }
//                             return s
//                         }

//                         function hn(e) {
//                             var t = -1,
//                                 n = Array(e.size);
//                             return e.forEach((function(e) {
//                                 n[++t] = e
//                             })), n
//                         }

//                         function mn(e) {
//                             var t = -1,
//                                 n = Array(e.size);
//                             return e.forEach((function(e) {
//                                 n[++t] = [e, e]
//                             })), n
//                         }

//                         function pn(e) {
//                             return ln(e) ? function(e) {
//                                 var t = nt.lastIndex = 0;
//                                 for (; nt.test(e);) ++t;
//                                 return t
//                             }(e) : Nt(e)
//                         }

//                         function fn(e) {
//                             return ln(e) ? function(e) {
//                                 return e.match(nt) || []
//                             }(e) : function(e) {
//                                 return e.split("")
//                             }(e)
//                         }

//                         function gn(e) {
//                             for (var t = e.length; t-- && oe.test(e.charAt(t)););
//                             return t
//                         }
//                         var _n = Gt({
//                             "&amp;": "&",
//                             "&lt;": "<",
//                             "&gt;": ">",
//                             "&quot;": '"',
//                             "&#39;": "'"
//                         });
//                         var vn = function e(t) {
//                             var n, i = (t = null == t ? ft : vn.defaults(ft.Object(), t, vn.pick(ft, rt))).Array,
//                                 oe = t.Date,
//                                 Le = t.Error,
//                                 ke = t.Function,
//                                 Te = t.Math,
//                                 Ye = t.Object,
//                                 Se = t.RegExp,
//                                 De = t.String,
//                                 Pe = t.TypeError,
//                                 Ee = i.prototype,
//                                 Ce = ke.prototype,
//                                 He = Ye.prototype,
//                                 Ze = t["__core-js_shared__"],
//                                 Ae = Ce.toString,
//                                 je = He.hasOwnProperty,
//                                 Oe = 0,
//                                 Fe = (n = /[^.]+$/.exec(Ze && Ze.keys && Ze.keys.IE_PROTO || "")) ? "Symbol(src)_1." + n : "",
//                                 Ie = He.toString,
//                                 Ne = Ae.call(Ye),
//                                 Re = ft._,
//                                 ze = Se("^" + Ae.call(je).replace(ae, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"),
//                                 $e = vt ? t.Buffer : a,
//                                 We = t.Symbol,
//                                 Ue = t.Uint8Array,
//                                 Be = $e ? $e.allocUnsafe : a,
//                                 qe = cn(Ye.getPrototypeOf, Ye),
//                                 Ge = Ye.create,
//                                 Je = He.propertyIsEnumerable,
//                                 Ve = Ee.splice,
//                                 Ke = We ? We.isConcatSpreadable : a,
//                                 Xe = We ? We.iterator : a,
//                                 Qe = We ? We.toStringTag : a,
//                                 nt = function() {
//                                     try {
//                                         var e = hs(Ye, "defineProperty");
//                                         return e({}, "", {}), e
//                                     } catch (t) {}
//                                 }(),
//                                 at = t.clearTimeout !== ft.clearTimeout && t.clearTimeout,
//                                 ct = oe && oe.now !== ft.Date.now && oe.now,
//                                 mt = t.setTimeout !== ft.setTimeout && t.setTimeout,
//                                 pt = Te.ceil,
//                                 gt = Te.floor,
//                                 _t = Ye.getOwnPropertySymbols,
//                                 yt = $e ? $e.isBuffer : a,
//                                 wt = t.isFinite,
//                                 Nt = Ee.join,
//                                 Gt = cn(Ye.keys, Ye),
//                                 yn = Te.max,
//                                 wn = Te.min,
//                                 bn = oe.now,
//                                 Mn = t.parseInt,
//                                 xn = Te.random,
//                                 Ln = Ee.reverse,
//                                 kn = hs(t, "DataView"),
//                                 Tn = hs(t, "Map"),
//                                 Yn = hs(t, "Promise"),
//                                 Sn = hs(t, "Set"),
//                                 Dn = hs(t, "WeakMap"),
//                                 Pn = hs(Ye, "create"),
//                                 En = Dn && new Dn,
//                                 Cn = {},
//                                 Hn = Fs(kn),
//                                 Zn = Fs(Tn),
//                                 An = Fs(Yn),
//                                 jn = Fs(Sn),
//                                 On = Fs(Dn),
//                                 Fn = We ? We.prototype : a,
//                                 In = Fn ? Fn.valueOf : a,
//                                 Nn = Fn ? Fn.toString : a;

//                             function Rn(e) {
//                                 if (to(e) && !Wr(e) && !(e instanceof Un)) {
//                                     if (e instanceof Wn) return e;
//                                     if (je.call(e, "__wrapped__")) return Is(e)
//                                 }
//                                 return new Wn(e)
//                             }
//                             var zn = function() {
//                                 function e() {}
//                                 return function(t) {
//                                     if (!eo(t)) return {};
//                                     if (Ge) return Ge(t);
//                                     e.prototype = t;
//                                     var n = new e;
//                                     return e.prototype = a, n
//                                 }
//                             }();

//                             function $n() {}

//                             function Wn(e, t) {
//                                 this.__wrapped__ = e, this.__actions__ = [], this.__chain__ = !!t, this.__index__ = 0, this.__values__ = a
//                             }

//                             function Un(e) {
//                                 this.__wrapped__ = e, this.__actions__ = [], this.__dir__ = 1, this.__filtered__ = !1, this.__iteratees__ = [], this.__takeCount__ = g, this.__views__ = []
//                             }

//                             function Bn(e) {
//                                 var t = -1,
//                                     n = null == e ? 0 : e.length;
//                                 for (this.clear(); ++t < n;) {
//                                     var i = e[t];
//                                     this.set(i[0], i[1])
//                                 }
//                             }

//                             function qn(e) {
//                                 var t = -1,
//                                     n = null == e ? 0 : e.length;
//                                 for (this.clear(); ++t < n;) {
//                                     var i = e[t];
//                                     this.set(i[0], i[1])
//                                 }
//                             }

//                             function Gn(e) {
//                                 var t = -1,
//                                     n = null == e ? 0 : e.length;
//                                 for (this.clear(); ++t < n;) {
//                                     var i = e[t];
//                                     this.set(i[0], i[1])
//                                 }
//                             }

//                             function Jn(e) {
//                                 var t = -1,
//                                     n = null == e ? 0 : e.length;
//                                 for (this.__data__ = new Gn; ++t < n;) this.add(e[t])
//                             }

//                             function Vn(e) {
//                                 var t = this.__data__ = new qn(e);
//                                 this.size = t.size
//                             }

//                             function Kn(e, t) {
//                                 var n = Wr(e),
//                                     i = !n && $r(e),
//                                     a = !n && !i && Gr(e),
//                                     s = !n && !i && !a && co(e),
//                                     r = n || i || a || s,
//                                     o = r ? Kt(e.length, De) : [],
//                                     l = o.length;
//                                 for (var d in e) !t && !je.call(e, d) || r && ("length" == d || a && ("offset" == d || "parent" == d) || s && ("buffer" == d || "byteLength" == d || "byteOffset" == d) || ys(d, l)) || o.push(d);
//                                 return o
//                             }

//                             function Xn(e) {
//                                 var t = e.length;
//                                 return t ? e[Ji(0, t - 1)] : a
//                             }

//                             function Qn(e, t) {
//                                 return As(Pa(e), li(t, 0, e.length))
//                             }

//                             function ei(e) {
//                                 return As(Pa(e))
//                             }

//                             function ti(e, t, n) {
//                                 (n !== a && !Nr(e[t], n) || n === a && !(t in e)) && ri(e, t, n)
//                             }

//                             function ni(e, t, n) {
//                                 var i = e[t];
//                                 je.call(e, t) && Nr(i, n) && (n !== a || t in e) || ri(e, t, n)
//                             }

//                             function ii(e, t) {
//                                 for (var n = e.length; n--;)
//                                     if (Nr(e[n][0], t)) return n;
//                                 return -1
//                             }

//                             function ai(e, t, n, i) {
//                                 return mi(e, (function(e, a, s) {
//                                     t(i, e, n(e), s)
//                                 })), i
//                             }

//                             function si(e, t) {
//                                 return e && Ea(t, Co(t), e)
//                             }

//                             function ri(e, t, n) {
//                                 "__proto__" == t && nt ? nt(e, t, {
//                                     configurable: !0,
//                                     enumerable: !0,
//                                     value: n,
//                                     writable: !0
//                                 }) : e[t] = n
//                             }

//                             function oi(e, t) {
//                                 for (var n = -1, s = t.length, r = i(s), o = null == e; ++n < s;) r[n] = o ? a : Yo(e, t[n]);
//                                 return r
//                             }

//                             function li(e, t, n) {
//                                 return e == e && (n !== a && (e = e <= n ? e : n), t !== a && (e = e >= t ? e : t)), e
//                             }

//                             function di(e, t, n, i, s, r) {
//                                 var o, l = 1 & t,
//                                     d = 2 & t,
//                                     c = 4 & t;
//                                 if (n && (o = s ? n(e, i, s, r) : n(e)), o !== a) return o;
//                                 if (!eo(e)) return e;
//                                 var u = Wr(e);
//                                 if (u) {
//                                     if (o = function(e) {
//                                             var t = e.length,
//                                                 n = new e.constructor(t);
//                                             t && "string" == typeof e[0] && je.call(e, "index") && (n.index = e.index, n.input = e.input);
//                                             return n
//                                         }(e), !l) return Pa(e, o)
//                                 } else {
//                                     var h = fs(e),
//                                         m = h == x || h == L;
//                                     if (Gr(e)) return La(e, l);
//                                     if (h == Y || h == v || m && !s) {
//                                         if (o = d || m ? {} : _s(e), !l) return d ? function(e, t) {
//                                             return Ea(e, ps(e), t)
//                                         }(e, function(e, t) {
//                                             return e && Ea(t, Ho(t), e)
//                                         }(o, e)) : function(e, t) {
//                                             return Ea(e, ms(e), t)
//                                         }(e, si(o, e))
//                                     } else {
//                                         if (!dt[h]) return s ? e : {};
//                                         o = function(e, t, n) {
//                                             var i = e.constructor;
//                                             switch (t) {
//                                                 case Z:
//                                                     return ka(e);
//                                                 case w:
//                                                 case b:
//                                                     return new i(+e);
//                                                 case A:
//                                                     return function(e, t) {
//                                                         var n = t ? ka(e.buffer) : e.buffer;
//                                                         return new e.constructor(n, e.byteOffset, e.byteLength)
//                                                     }(e, n);
//                                                 case j:
//                                                 case O:
//                                                 case F:
//                                                 case I:
//                                                 case N:
//                                                 case R:
//                                                 case z:
//                                                 case $:
//                                                 case W:
//                                                     return Ta(e, n);
//                                                 case k:
//                                                     return new i;
//                                                 case T:
//                                                 case E:
//                                                     return new i(e);
//                                                 case D:
//                                                     return function(e) {
//                                                         var t = new e.constructor(e.source, fe.exec(e));
//                                                         return t.lastIndex = e.lastIndex, t
//                                                     }(e);
//                                                 case P:
//                                                     return new i;
//                                                 case C:
//                                                     return a = e, In ? Ye(In.call(a)) : {}
//                                             }
//                                             var a
//                                         }(e, h, l)
//                                     }
//                                 }
//                                 r || (r = new Vn);
//                                 var p = r.get(e);
//                                 if (p) return p;
//                                 r.set(e, o), ro(e) ? e.forEach((function(i) {
//                                     o.add(di(i, t, n, i, e, r))
//                                 })) : no(e) && e.forEach((function(i, a) {
//                                     o.set(a, di(i, t, n, a, e, r))
//                                 }));
//                                 var f = u ? a : (c ? d ? ss : as : d ? Ho : Co)(e);
//                                 return Dt(f || e, (function(i, a) {
//                                     f && (i = e[a = i]), ni(o, a, di(i, t, n, a, e, r))
//                                 })), o
//                             }

//                             function ci(e, t, n) {
//                                 var i = n.length;
//                                 if (null == e) return !i;
//                                 for (e = Ye(e); i--;) {
//                                     var s = n[i],
//                                         r = t[s],
//                                         o = e[s];
//                                     if (o === a && !(s in e) || !r(o)) return !1
//                                 }
//                                 return !0
//                             }

//                             function ui(e, t, n) {
//                                 if ("function" != typeof e) throw new Pe(s);
//                                 return Es((function() {
//                                     e.apply(a, n)
//                                 }), t)
//                             }

//                             function hi(e, t, n, i) {
//                                 var a = -1,
//                                     s = Ht,
//                                     r = !0,
//                                     o = e.length,
//                                     l = [],
//                                     d = t.length;
//                                 if (!o) return l;
//                                 n && (t = At(t, Qt(n))), i ? (s = Zt, r = !1) : t.length >= 200 && (s = tn, r = !1, t = new Jn(t));
//                                 e: for (; ++a < o;) {
//                                     var c = e[a],
//                                         u = null == n ? c : n(c);
//                                     if (c = i || 0 !== c ? c : 0, r && u == u) {
//                                         for (var h = d; h--;)
//                                             if (t[h] === u) continue e;
//                                         l.push(c)
//                                     } else s(t, u, i) || l.push(c)
//                                 }
//                                 return l
//                             }
//                             Rn.templateSettings = {
//                                 escape: X,
//                                 evaluate: Q,
//                                 interpolate: ee,
//                                 variable: "",
//                                 imports: {
//                                     _: Rn
//                                 }
//                             }, Rn.prototype = $n.prototype, Rn.prototype.constructor = Rn, Wn.prototype = zn($n.prototype), Wn.prototype.constructor = Wn, Un.prototype = zn($n.prototype), Un.prototype.constructor = Un, Bn.prototype.clear = function() {
//                                 this.__data__ = Pn ? Pn(null) : {}, this.size = 0
//                             }, Bn.prototype.delete = function(e) {
//                                 var t = this.has(e) && delete this.__data__[e];
//                                 return this.size -= t ? 1 : 0, t
//                             }, Bn.prototype.get = function(e) {
//                                 var t = this.__data__;
//                                 if (Pn) {
//                                     var n = t[e];
//                                     return n === r ? a : n
//                                 }
//                                 return je.call(t, e) ? t[e] : a
//                             }, Bn.prototype.has = function(e) {
//                                 var t = this.__data__;
//                                 return Pn ? t[e] !== a : je.call(t, e)
//                             }, Bn.prototype.set = function(e, t) {
//                                 var n = this.__data__;
//                                 return this.size += this.has(e) ? 0 : 1, n[e] = Pn && t === a ? r : t, this
//                             }, qn.prototype.clear = function() {
//                                 this.__data__ = [], this.size = 0
//                             }, qn.prototype.delete = function(e) {
//                                 var t = this.__data__,
//                                     n = ii(t, e);
//                                 return !(n < 0) && (n == t.length - 1 ? t.pop() : Ve.call(t, n, 1), --this.size, !0)
//                             }, qn.prototype.get = function(e) {
//                                 var t = this.__data__,
//                                     n = ii(t, e);
//                                 return n < 0 ? a : t[n][1]
//                             }, qn.prototype.has = function(e) {
//                                 return ii(this.__data__, e) > -1
//                             }, qn.prototype.set = function(e, t) {
//                                 var n = this.__data__,
//                                     i = ii(n, e);
//                                 return i < 0 ? (++this.size, n.push([e, t])) : n[i][1] = t, this
//                             }, Gn.prototype.clear = function() {
//                                 this.size = 0, this.__data__ = {
//                                     hash: new Bn,
//                                     map: new(Tn || qn),
//                                     string: new Bn
//                                 }
//                             }, Gn.prototype.delete = function(e) {
//                                 var t = cs(this, e).delete(e);
//                                 return this.size -= t ? 1 : 0, t
//                             }, Gn.prototype.get = function(e) {
//                                 return cs(this, e).get(e)
//                             }, Gn.prototype.has = function(e) {
//                                 return cs(this, e).has(e)
//                             }, Gn.prototype.set = function(e, t) {
//                                 var n = cs(this, e),
//                                     i = n.size;
//                                 return n.set(e, t), this.size += n.size == i ? 0 : 1, this
//                             }, Jn.prototype.add = Jn.prototype.push = function(e) {
//                                 return this.__data__.set(e, r), this
//                             }, Jn.prototype.has = function(e) {
//                                 return this.__data__.has(e)
//                             }, Vn.prototype.clear = function() {
//                                 this.__data__ = new qn, this.size = 0
//                             }, Vn.prototype.delete = function(e) {
//                                 var t = this.__data__,
//                                     n = t.delete(e);
//                                 return this.size = t.size, n
//                             }, Vn.prototype.get = function(e) {
//                                 return this.__data__.get(e)
//                             }, Vn.prototype.has = function(e) {
//                                 return this.__data__.has(e)
//                             }, Vn.prototype.set = function(e, t) {
//                                 var n = this.__data__;
//                                 if (n instanceof qn) {
//                                     var i = n.__data__;
//                                     if (!Tn || i.length < 199) return i.push([e, t]), this.size = ++n.size, this;
//                                     n = this.__data__ = new Gn(i)
//                                 }
//                                 return n.set(e, t), this.size = n.size, this
//                             };
//                             var mi = Za(bi),
//                                 pi = Za(Mi, !0);

//                             function fi(e, t) {
//                                 var n = !0;
//                                 return mi(e, (function(e, i, a) {
//                                     return n = !!t(e, i, a)
//                                 })), n
//                             }

//                             function gi(e, t, n) {
//                                 for (var i = -1, s = e.length; ++i < s;) {
//                                     var r = e[i],
//                                         o = t(r);
//                                     if (null != o && (l === a ? o == o && !lo(o) : n(o, l))) var l = o,
//                                         d = r
//                                 }
//                                 return d
//                             }

//                             function _i(e, t) {
//                                 var n = [];
//                                 return mi(e, (function(e, i, a) {
//                                     t(e, i, a) && n.push(e)
//                                 })), n
//                             }

//                             function vi(e, t, n, i, a) {
//                                 var s = -1,
//                                     r = e.length;
//                                 for (n || (n = vs), a || (a = []); ++s < r;) {
//                                     var o = e[s];
//                                     t > 0 && n(o) ? t > 1 ? vi(o, t - 1, n, i, a) : jt(a, o) : i || (a[a.length] = o)
//                                 }
//                                 return a
//                             }
//                             var yi = Aa(),
//                                 wi = Aa(!0);

//                             function bi(e, t) {
//                                 return e && yi(e, t, Co)
//                             }

//                             function Mi(e, t) {
//                                 return e && wi(e, t, Co)
//                             }

//                             function xi(e, t) {
//                                 return Ct(t, (function(t) {
//                                     return Kr(e[t])
//                                 }))
//                             }

//                             function Li(e, t) {
//                                 for (var n = 0, i = (t = wa(t, e)).length; null != e && n < i;) e = e[Os(t[n++])];
//                                 return n && n == i ? e : a
//                             }

//                             function ki(e, t, n) {
//                                 var i = t(e);
//                                 return Wr(e) ? i : jt(i, n(e))
//                             }

//                             function Ti(e) {
//                                 return null == e ? e === a ? "[object Undefined]" : "[object Null]" : Qe && Qe in Ye(e) ? function(e) {
//                                     var t = je.call(e, Qe),
//                                         n = e[Qe];
//                                     try {
//                                         e[Qe] = a;
//                                         var i = !0
//                                     } catch (r) {}
//                                     var s = Ie.call(e);
//                                     i && (t ? e[Qe] = n : delete e[Qe]);
//                                     return s
//                                 }(e) : function(e) {
//                                     return Ie.call(e)
//                                 }(e)
//                             }

//                             function Yi(e, t) {
//                                 return e > t
//                             }

//                             function Si(e, t) {
//                                 return null != e && je.call(e, t)
//                             }

//                             function Di(e, t) {
//                                 return null != e && t in Ye(e)
//                             }

//                             function Pi(e, t, n) {
//                                 for (var s = n ? Zt : Ht, r = e[0].length, o = e.length, l = o, d = i(o), c = 1 / 0, u = []; l--;) {
//                                     var h = e[l];
//                                     l && t && (h = At(h, Qt(t))), c = wn(h.length, c), d[l] = !n && (t || r >= 120 && h.length >= 120) ? new Jn(l && h) : a
//                                 }
//                                 h = e[0];
//                                 var m = -1,
//                                     p = d[0];
//                                 e: for (; ++m < r && u.length < c;) {
//                                     var f = h[m],
//                                         g = t ? t(f) : f;
//                                     if (f = n || 0 !== f ? f : 0, !(p ? tn(p, g) : s(u, g, n))) {
//                                         for (l = o; --l;) {
//                                             var _ = d[l];
//                                             if (!(_ ? tn(_, g) : s(e[l], g, n))) continue e
//                                         }
//                                         p && p.push(g), u.push(f)
//                                     }
//                                 }
//                                 return u
//                             }

//                             function Ei(e, t, n) {
//                                 var i = null == (e = Ss(e, t = wa(t, e))) ? e : e[Os(Vs(t))];
//                                 return null == i ? a : Yt(i, e, n)
//                             }

//                             function Ci(e) {
//                                 return to(e) && Ti(e) == v
//                             }

//                             function Hi(e, t, n, i, s) {
//                                 return e === t || (null == e || null == t || !to(e) && !to(t) ? e != e && t != t : function(e, t, n, i, s, r) {
//                                     var o = Wr(e),
//                                         l = Wr(t),
//                                         d = o ? y : fs(e),
//                                         c = l ? y : fs(t),
//                                         u = (d = d == v ? Y : d) == Y,
//                                         h = (c = c == v ? Y : c) == Y,
//                                         m = d == c;
//                                     if (m && Gr(e)) {
//                                         if (!Gr(t)) return !1;
//                                         o = !0, u = !1
//                                     }
//                                     if (m && !u) return r || (r = new Vn), o || co(e) ? ns(e, t, n, i, s, r) : function(e, t, n, i, a, s, r) {
//                                         switch (n) {
//                                             case A:
//                                                 if (e.byteLength != t.byteLength || e.byteOffset != t.byteOffset) return !1;
//                                                 e = e.buffer, t = t.buffer;
//                                             case Z:
//                                                 return !(e.byteLength != t.byteLength || !s(new Ue(e), new Ue(t)));
//                                             case w:
//                                             case b:
//                                             case T:
//                                                 return Nr(+e, +t);
//                                             case M:
//                                                 return e.name == t.name && e.message == t.message;
//                                             case D:
//                                             case E:
//                                                 return e == t + "";
//                                             case k:
//                                                 var o = dn;
//                                             case P:
//                                                 var l = 1 & i;
//                                                 if (o || (o = hn), e.size != t.size && !l) return !1;
//                                                 var d = r.get(e);
//                                                 if (d) return d == t;
//                                                 i |= 2, r.set(e, t);
//                                                 var c = ns(o(e), o(t), i, a, s, r);
//                                                 return r.delete(e), c;
//                                             case C:
//                                                 if (In) return In.call(e) == In.call(t)
//                                         }
//                                         return !1
//                                     }(e, t, d, n, i, s, r);
//                                     if (!(1 & n)) {
//                                         var p = u && je.call(e, "__wrapped__"),
//                                             f = h && je.call(t, "__wrapped__");
//                                         if (p || f) {
//                                             var g = p ? e.value() : e,
//                                                 _ = f ? t.value() : t;
//                                             return r || (r = new Vn), s(g, _, n, i, r)
//                                         }
//                                     }
//                                     if (!m) return !1;
//                                     return r || (r = new Vn),
//                                         function(e, t, n, i, s, r) {
//                                             var o = 1 & n,
//                                                 l = as(e),
//                                                 d = l.length,
//                                                 c = as(t),
//                                                 u = c.length;
//                                             if (d != u && !o) return !1;
//                                             var h = d;
//                                             for (; h--;) {
//                                                 var m = l[h];
//                                                 if (!(o ? m in t : je.call(t, m))) return !1
//                                             }
//                                             var p = r.get(e),
//                                                 f = r.get(t);
//                                             if (p && f) return p == t && f == e;
//                                             var g = !0;
//                                             r.set(e, t), r.set(t, e);
//                                             var _ = o;
//                                             for (; ++h < d;) {
//                                                 var v = e[m = l[h]],
//                                                     y = t[m];
//                                                 if (i) var w = o ? i(y, v, m, t, e, r) : i(v, y, m, e, t, r);
//                                                 if (!(w === a ? v === y || s(v, y, n, i, r) : w)) {
//                                                     g = !1;
//                                                     break
//                                                 }
//                                                 _ || (_ = "constructor" == m)
//                                             }
//                                             if (g && !_) {
//                                                 var b = e.constructor,
//                                                     M = t.constructor;
//                                                 b == M || !("constructor" in e) || !("constructor" in t) || "function" == typeof b && b instanceof b && "function" == typeof M && M instanceof M || (g = !1)
//                                             }
//                                             return r.delete(e), r.delete(t), g
//                                         }(e, t, n, i, s, r)
//                                 }(e, t, n, i, Hi, s))
//                             }

//                             function Zi(e, t, n, i) {
//                                 var s = n.length,
//                                     r = s,
//                                     o = !i;
//                                 if (null == e) return !r;
//                                 for (e = Ye(e); s--;) {
//                                     var l = n[s];
//                                     if (o && l[2] ? l[1] !== e[l[0]] : !(l[0] in e)) return !1
//                                 }
//                                 for (; ++s < r;) {
//                                     var d = (l = n[s])[0],
//                                         c = e[d],
//                                         u = l[1];
//                                     if (o && l[2]) {
//                                         if (c === a && !(d in e)) return !1
//                                     } else {
//                                         var h = new Vn;
//                                         if (i) var m = i(c, u, d, e, t, h);
//                                         if (!(m === a ? Hi(u, c, 3, i, h) : m)) return !1
//                                     }
//                                 }
//                                 return !0
//                             }

//                             function Ai(e) {
//                                 return !(!eo(e) || (t = e, Fe && Fe in t)) && (Kr(e) ? ze : ve).test(Fs(e));
//                                 var t
//                             }

//                             function ji(e) {
//                                 return "function" == typeof e ? e : null == e ? al : "object" == typeof e ? Wr(e) ? zi(e[0], e[1]) : Ri(e) : ml(e)
//                             }

//                             function Oi(e) {
//                                 if (!Ls(e)) return Gt(e);
//                                 var t = [];
//                                 for (var n in Ye(e)) je.call(e, n) && "constructor" != n && t.push(n);
//                                 return t
//                             }

//                             function Fi(e) {
//                                 if (!eo(e)) return function(e) {
//                                     var t = [];
//                                     if (null != e)
//                                         for (var n in Ye(e)) t.push(n);
//                                     return t
//                                 }(e);
//                                 var t = Ls(e),
//                                     n = [];
//                                 for (var i in e)("constructor" != i || !t && je.call(e, i)) && n.push(i);
//                                 return n
//                             }

//                             function Ii(e, t) {
//                                 return e < t
//                             }

//                             function Ni(e, t) {
//                                 var n = -1,
//                                     a = Br(e) ? i(e.length) : [];
//                                 return mi(e, (function(e, i, s) {
//                                     a[++n] = t(e, i, s)
//                                 })), a
//                             }

//                             function Ri(e) {
//                                 var t = us(e);
//                                 return 1 == t.length && t[0][2] ? Ts(t[0][0], t[0][1]) : function(n) {
//                                     return n === e || Zi(n, e, t)
//                                 }
//                             }

//                             function zi(e, t) {
//                                 return bs(e) && ks(t) ? Ts(Os(e), t) : function(n) {
//                                     var i = Yo(n, e);
//                                     return i === a && i === t ? So(n, e) : Hi(t, i, 3)
//                                 }
//                             }

//                             function $i(e, t, n, i, s) {
//                                 e !== t && yi(t, (function(r, o) {
//                                     if (s || (s = new Vn), eo(r)) ! function(e, t, n, i, s, r, o) {
//                                         var l = Ds(e, n),
//                                             d = Ds(t, n),
//                                             c = o.get(d);
//                                         if (c) return void ti(e, n, c);
//                                         var u = r ? r(l, d, n + "", e, t, o) : a,
//                                             h = u === a;
//                                         if (h) {
//                                             var m = Wr(d),
//                                                 p = !m && Gr(d),
//                                                 f = !m && !p && co(d);
//                                             u = d, m || p || f ? Wr(l) ? u = l : qr(l) ? u = Pa(l) : p ? (h = !1, u = La(d, !0)) : f ? (h = !1, u = Ta(d, !0)) : u = [] : ao(d) || $r(d) ? (u = l, $r(l) ? u = vo(l) : eo(l) && !Kr(l) || (u = _s(d))) : h = !1
//                                         }
//                                         h && (o.set(d, u), s(u, d, i, r, o), o.delete(d));
//                                         ti(e, n, u)
//                                     }(e, t, o, n, $i, i, s);
//                                     else {
//                                         var l = i ? i(Ds(e, o), r, o + "", e, t, s) : a;
//                                         l === a && (l = r), ti(e, o, l)
//                                     }
//                                 }), Ho)
//                             }

//                             function Wi(e, t) {
//                                 var n = e.length;
//                                 if (n) return ys(t += t < 0 ? n : 0, n) ? e[t] : a
//                             }

//                             function Ui(e, t, n) {
//                                 t = t.length ? At(t, (function(e) {
//                                     return Wr(e) ? function(t) {
//                                         return Li(t, 1 === e.length ? e[0] : e)
//                                     } : e
//                                 })) : [al];
//                                 var i = -1;
//                                 t = At(t, Qt(ds()));
//                                 var a = Ni(e, (function(e, n, a) {
//                                     var s = At(t, (function(t) {
//                                         return t(e)
//                                     }));
//                                     return {
//                                         criteria: s,
//                                         index: ++i,
//                                         value: e
//                                     }
//                                 }));
//                                 return function(e, t) {
//                                     var n = e.length;
//                                     for (e.sort(t); n--;) e[n] = e[n].value;
//                                     return e
//                                 }(a, (function(e, t) {
//                                     return function(e, t, n) {
//                                         var i = -1,
//                                             a = e.criteria,
//                                             s = t.criteria,
//                                             r = a.length,
//                                             o = n.length;
//                                         for (; ++i < r;) {
//                                             var l = Ya(a[i], s[i]);
//                                             if (l) return i >= o ? l : l * ("desc" == n[i] ? -1 : 1)
//                                         }
//                                         return e.index - t.index
//                                     }(e, t, n)
//                                 }))
//                             }

//                             function Bi(e, t, n) {
//                                 for (var i = -1, a = t.length, s = {}; ++i < a;) {
//                                     var r = t[i],
//                                         o = Li(e, r);
//                                     n(o, r) && ea(s, wa(r, e), o)
//                                 }
//                                 return s
//                             }

//                             function qi(e, t, n, i) {
//                                 var a = i ? Wt : $t,
//                                     s = -1,
//                                     r = t.length,
//                                     o = e;
//                                 for (e === t && (t = Pa(t)), n && (o = At(e, Qt(n))); ++s < r;)
//                                     for (var l = 0, d = t[s], c = n ? n(d) : d;
//                                         (l = a(o, c, l, i)) > -1;) o !== e && Ve.call(o, l, 1), Ve.call(e, l, 1);
//                                 return e
//                             }

//                             function Gi(e, t) {
//                                 for (var n = e ? t.length : 0, i = n - 1; n--;) {
//                                     var a = t[n];
//                                     if (n == i || a !== s) {
//                                         var s = a;
//                                         ys(a) ? Ve.call(e, a, 1) : ha(e, a)
//                                     }
//                                 }
//                                 return e
//                             }

//                             function Ji(e, t) {
//                                 return e + gt(xn() * (t - e + 1))
//                             }

//                             function Vi(e, t) {
//                                 var n = "";
//                                 if (!e || t < 1 || t > p) return n;
//                                 do {
//                                     t % 2 && (n += e), (t = gt(t / 2)) && (e += e)
//                                 } while (t);
//                                 return n
//                             }

//                             function Ki(e, t) {
//                                 return Cs(Ys(e, t, al), e + "")
//                             }

//                             function Xi(e) {
//                                 return Xn(Ro(e))
//                             }

//                             function Qi(e, t) {
//                                 var n = Ro(e);
//                                 return As(n, li(t, 0, n.length))
//                             }

//                             function ea(e, t, n, i) {
//                                 if (!eo(e)) return e;
//                                 for (var s = -1, r = (t = wa(t, e)).length, o = r - 1, l = e; null != l && ++s < r;) {
//                                     var d = Os(t[s]),
//                                         c = n;
//                                     if ("__proto__" === d || "constructor" === d || "prototype" === d) return e;
//                                     if (s != o) {
//                                         var u = l[d];
//                                         (c = i ? i(u, d, l) : a) === a && (c = eo(u) ? u : ys(t[s + 1]) ? [] : {})
//                                     }
//                                     ni(l, d, c), l = l[d]
//                                 }
//                                 return e
//                             }
//                             var ta = En ? function(e, t) {
//                                     return En.set(e, t), e
//                                 } : al,
//                                 na = nt ? function(e, t) {
//                                     return nt(e, "toString", {
//                                         configurable: !0,
//                                         enumerable: !1,
//                                         value: tl(t),
//                                         writable: !0
//                                     })
//                                 } : al;

//                             function ia(e) {
//                                 return As(Ro(e))
//                             }

//                             function aa(e, t, n) {
//                                 var a = -1,
//                                     s = e.length;
//                                 t < 0 && (t = -t > s ? 0 : s + t), (n = n > s ? s : n) < 0 && (n += s), s = t > n ? 0 : n - t >>> 0, t >>>= 0;
//                                 for (var r = i(s); ++a < s;) r[a] = e[a + t];
//                                 return r
//                             }

//                             function sa(e, t) {
//                                 var n;
//                                 return mi(e, (function(e, i, a) {
//                                     return !(n = t(e, i, a))
//                                 })), !!n
//                             }

//                             function ra(e, t, n) {
//                                 var i = 0,
//                                     a = null == e ? i : e.length;
//                                 if ("number" == typeof t && t == t && a <= 2147483647) {
//                                     for (; i < a;) {
//                                         var s = i + a >>> 1,
//                                             r = e[s];
//                                         null !== r && !lo(r) && (n ? r <= t : r < t) ? i = s + 1 : a = s
//                                     }
//                                     return a
//                                 }
//                                 return oa(e, t, al, n)
//                             }

//                             function oa(e, t, n, i) {
//                                 var s = 0,
//                                     r = null == e ? 0 : e.length;
//                                 if (0 === r) return 0;
//                                 for (var o = (t = n(t)) != t, l = null === t, d = lo(t), c = t === a; s < r;) {
//                                     var u = gt((s + r) / 2),
//                                         h = n(e[u]),
//                                         m = h !== a,
//                                         p = null === h,
//                                         f = h == h,
//                                         g = lo(h);
//                                     if (o) var _ = i || f;
//                                     else _ = c ? f && (i || m) : l ? f && m && (i || !p) : d ? f && m && !p && (i || !g) : !p && !g && (i ? h <= t : h < t);
//                                     _ ? s = u + 1 : r = u
//                                 }
//                                 return wn(r, 4294967294)
//                             }

//                             function la(e, t) {
//                                 for (var n = -1, i = e.length, a = 0, s = []; ++n < i;) {
//                                     var r = e[n],
//                                         o = t ? t(r) : r;
//                                     if (!n || !Nr(o, l)) {
//                                         var l = o;
//                                         s[a++] = 0 === r ? 0 : r
//                                     }
//                                 }
//                                 return s
//                             }

//                             function da(e) {
//                                 return "number" == typeof e ? e : lo(e) ? f : +e
//                             }

//                             function ca(e) {
//                                 if ("string" == typeof e) return e;
//                                 if (Wr(e)) return At(e, ca) + "";
//                                 if (lo(e)) return Nn ? Nn.call(e) : "";
//                                 var t = e + "";
//                                 return "0" == t && 1 / e == -1 / 0 ? "-0" : t
//                             }

//                             function ua(e, t, n) {
//                                 var i = -1,
//                                     a = Ht,
//                                     s = e.length,
//                                     r = !0,
//                                     o = [],
//                                     l = o;
//                                 if (n) r = !1, a = Zt;
//                                 else if (s >= 200) {
//                                     var d = t ? null : Va(e);
//                                     if (d) return hn(d);
//                                     r = !1, a = tn, l = new Jn
//                                 } else l = t ? [] : o;
//                                 e: for (; ++i < s;) {
//                                     var c = e[i],
//                                         u = t ? t(c) : c;
//                                     if (c = n || 0 !== c ? c : 0, r && u == u) {
//                                         for (var h = l.length; h--;)
//                                             if (l[h] === u) continue e;
//                                         t && l.push(u), o.push(c)
//                                     } else a(l, u, n) || (l !== o && l.push(u), o.push(c))
//                                 }
//                                 return o
//                             }

//                             function ha(e, t) {
//                                 return null == (e = Ss(e, t = wa(t, e))) || delete e[Os(Vs(t))]
//                             }

//                             function ma(e, t, n, i) {
//                                 return ea(e, t, n(Li(e, t)), i)
//                             }

//                             function pa(e, t, n, i) {
//                                 for (var a = e.length, s = i ? a : -1;
//                                     (i ? s-- : ++s < a) && t(e[s], s, e););
//                                 return n ? aa(e, i ? 0 : s, i ? s + 1 : a) : aa(e, i ? s + 1 : 0, i ? a : s)
//                             }

//                             function fa(e, t) {
//                                 var n = e;
//                                 return n instanceof Un && (n = n.value()), Ot(t, (function(e, t) {
//                                     return t.func.apply(t.thisArg, jt([e], t.args))
//                                 }), n)
//                             }

//                             function ga(e, t, n) {
//                                 var a = e.length;
//                                 if (a < 2) return a ? ua(e[0]) : [];
//                                 for (var s = -1, r = i(a); ++s < a;)
//                                     for (var o = e[s], l = -1; ++l < a;) l != s && (r[s] = hi(r[s] || o, e[l], t, n));
//                                 return ua(vi(r, 1), t, n)
//                             }

//                             function _a(e, t, n) {
//                                 for (var i = -1, s = e.length, r = t.length, o = {}; ++i < s;) {
//                                     var l = i < r ? t[i] : a;
//                                     n(o, e[i], l)
//                                 }
//                                 return o
//                             }

//                             function va(e) {
//                                 return qr(e) ? e : []
//                             }

//                             function ya(e) {
//                                 return "function" == typeof e ? e : al
//                             }

//                             function wa(e, t) {
//                                 return Wr(e) ? e : bs(e, t) ? [e] : js(yo(e))
//                             }
//                             var ba = Ki;

//                             function Ma(e, t, n) {
//                                 var i = e.length;
//                                 return n = n === a ? i : n, !t && n >= i ? e : aa(e, t, n)
//                             }
//                             var xa = at || function(e) {
//                                 return ft.clearTimeout(e)
//                             };

//                             function La(e, t) {
//                                 if (t) return e.slice();
//                                 var n = e.length,
//                                     i = Be ? Be(n) : new e.constructor(n);
//                                 return e.copy(i), i
//                             }

//                             function ka(e) {
//                                 var t = new e.constructor(e.byteLength);
//                                 return new Ue(t).set(new Ue(e)), t
//                             }

//                             function Ta(e, t) {
//                                 var n = t ? ka(e.buffer) : e.buffer;
//                                 return new e.constructor(n, e.byteOffset, e.length)
//                             }

//                             function Ya(e, t) {
//                                 if (e !== t) {
//                                     var n = e !== a,
//                                         i = null === e,
//                                         s = e == e,
//                                         r = lo(e),
//                                         o = t !== a,
//                                         l = null === t,
//                                         d = t == t,
//                                         c = lo(t);
//                                     if (!l && !c && !r && e > t || r && o && d && !l && !c || i && o && d || !n && d || !s) return 1;
//                                     if (!i && !r && !c && e < t || c && n && s && !i && !r || l && n && s || !o && s || !d) return -1
//                                 }
//                                 return 0
//                             }

//                             function Sa(e, t, n, a) {
//                                 for (var s = -1, r = e.length, o = n.length, l = -1, d = t.length, c = yn(r - o, 0), u = i(d + c), h = !a; ++l < d;) u[l] = t[l];
//                                 for (; ++s < o;)(h || s < r) && (u[n[s]] = e[s]);
//                                 for (; c--;) u[l++] = e[s++];
//                                 return u
//                             }

//                             function Da(e, t, n, a) {
//                                 for (var s = -1, r = e.length, o = -1, l = n.length, d = -1, c = t.length, u = yn(r - l, 0), h = i(u + c), m = !a; ++s < u;) h[s] = e[s];
//                                 for (var p = s; ++d < c;) h[p + d] = t[d];
//                                 for (; ++o < l;)(m || s < r) && (h[p + n[o]] = e[s++]);
//                                 return h
//                             }

//                             function Pa(e, t) {
//                                 var n = -1,
//                                     a = e.length;
//                                 for (t || (t = i(a)); ++n < a;) t[n] = e[n];
//                                 return t
//                             }

//                             function Ea(e, t, n, i) {
//                                 var s = !n;
//                                 n || (n = {});
//                                 for (var r = -1, o = t.length; ++r < o;) {
//                                     var l = t[r],
//                                         d = i ? i(n[l], e[l], l, n, e) : a;
//                                     d === a && (d = e[l]), s ? ri(n, l, d) : ni(n, l, d)
//                                 }
//                                 return n
//                             }

//                             function Ca(e, t) {
//                                 return function(n, i) {
//                                     var a = Wr(n) ? St : ai,
//                                         s = t ? t() : {};
//                                     return a(n, e, ds(i, 2), s)
//                                 }
//                             }

//                             function Ha(e) {
//                                 return Ki((function(t, n) {
//                                     var i = -1,
//                                         s = n.length,
//                                         r = s > 1 ? n[s - 1] : a,
//                                         o = s > 2 ? n[2] : a;
//                                     for (r = e.length > 3 && "function" == typeof r ? (s--, r) : a, o && ws(n[0], n[1], o) && (r = s < 3 ? a : r, s = 1), t = Ye(t); ++i < s;) {
//                                         var l = n[i];
//                                         l && e(t, l, i, r)
//                                     }
//                                     return t
//                                 }))
//                             }

//                             function Za(e, t) {
//                                 return function(n, i) {
//                                     if (null == n) return n;
//                                     if (!Br(n)) return e(n, i);
//                                     for (var a = n.length, s = t ? a : -1, r = Ye(n);
//                                         (t ? s-- : ++s < a) && !1 !== i(r[s], s, r););
//                                     return n
//                                 }
//                             }

//                             function Aa(e) {
//                                 return function(t, n, i) {
//                                     for (var a = -1, s = Ye(t), r = i(t), o = r.length; o--;) {
//                                         var l = r[e ? o : ++a];
//                                         if (!1 === n(s[l], l, s)) break
//                                     }
//                                     return t
//                                 }
//                             }

//                             function ja(e) {
//                                 return function(t) {
//                                     var n = ln(t = yo(t)) ? fn(t) : a,
//                                         i = n ? n[0] : t.charAt(0),
//                                         s = n ? Ma(n, 1).join("") : t.slice(1);
//                                     return i[e]() + s
//                                 }
//                             }

//                             function Oa(e) {
//                                 return function(t) {
//                                     return Ot(Xo(Wo(t).replace(et, "")), e, "")
//                                 }
//                             }

//                             function Fa(e) {
//                                 return function() {
//                                     var t = arguments;
//                                     switch (t.length) {
//                                         case 0:
//                                             return new e;
//                                         case 1:
//                                             return new e(t[0]);
//                                         case 2:
//                                             return new e(t[0], t[1]);
//                                         case 3:
//                                             return new e(t[0], t[1], t[2]);
//                                         case 4:
//                                             return new e(t[0], t[1], t[2], t[3]);
//                                         case 5:
//                                             return new e(t[0], t[1], t[2], t[3], t[4]);
//                                         case 6:
//                                             return new e(t[0], t[1], t[2], t[3], t[4], t[5]);
//                                         case 7:
//                                             return new e(t[0], t[1], t[2], t[3], t[4], t[5], t[6])
//                                     }
//                                     var n = zn(e.prototype),
//                                         i = e.apply(n, t);
//                                     return eo(i) ? i : n
//                                 }
//                             }

//                             function Ia(e) {
//                                 return function(t, n, i) {
//                                     var s = Ye(t);
//                                     if (!Br(t)) {
//                                         var r = ds(n, 3);
//                                         t = Co(t), n = function(e) {
//                                             return r(s[e], e, s)
//                                         }
//                                     }
//                                     var o = e(t, n, i);
//                                     return o > -1 ? s[r ? t[o] : o] : a
//                                 }
//                             }

//                             function Na(e) {
//                                 return is((function(t) {
//                                     var n = t.length,
//                                         i = n,
//                                         r = Wn.prototype.thru;
//                                     for (e && t.reverse(); i--;) {
//                                         var o = t[i];
//                                         if ("function" != typeof o) throw new Pe(s);
//                                         if (r && !l && "wrapper" == os(o)) var l = new Wn([], !0)
//                                     }
//                                     for (i = l ? i : n; ++i < n;) {
//                                         var d = os(o = t[i]),
//                                             c = "wrapper" == d ? rs(o) : a;
//                                         l = c && Ms(c[0]) && 424 == c[1] && !c[4].length && 1 == c[9] ? l[os(c[0])].apply(l, c[3]) : 1 == o.length && Ms(o) ? l[d]() : l.thru(o)
//                                     }
//                                     return function() {
//                                         var e = arguments,
//                                             i = e[0];
//                                         if (l && 1 == e.length && Wr(i)) return l.plant(i).value();
//                                         for (var a = 0, s = n ? t[a].apply(this, e) : i; ++a < n;) s = t[a].call(this, s);
//                                         return s
//                                     }
//                                 }))
//                             }

//                             function Ra(e, t, n, s, r, o, l, d, c, h) {
//                                 var m = t & u,
//                                     p = 1 & t,
//                                     f = 2 & t,
//                                     g = 24 & t,
//                                     _ = 512 & t,
//                                     v = f ? a : Fa(e);
//                                 return function u() {
//                                     for (var y = arguments.length, w = i(y), b = y; b--;) w[b] = arguments[b];
//                                     if (g) var M = ls(u),
//                                         x = function(e, t) {
//                                             for (var n = e.length, i = 0; n--;) e[n] === t && ++i;
//                                             return i
//                                         }(w, M);
//                                     if (s && (w = Sa(w, s, r, g)), o && (w = Da(w, o, l, g)), y -= x, g && y < h) {
//                                         var L = un(w, M);
//                                         return Ga(e, t, Ra, u.placeholder, n, w, L, d, c, h - y)
//                                     }
//                                     var k = p ? n : this,
//                                         T = f ? k[e] : e;
//                                     return y = w.length, d ? w = function(e, t) {
//                                         var n = e.length,
//                                             i = wn(t.length, n),
//                                             s = Pa(e);
//                                         for (; i--;) {
//                                             var r = t[i];
//                                             e[i] = ys(r, n) ? s[r] : a
//                                         }
//                                         return e
//                                     }(w, d) : _ && y > 1 && w.reverse(), m && c < y && (w.length = c), this && this !== ft && this instanceof u && (T = v || Fa(T)), T.apply(k, w)
//                                 }
//                             }

//                             function za(e, t) {
//                                 return function(n, i) {
//                                     return function(e, t, n, i) {
//                                         return bi(e, (function(e, a, s) {
//                                             t(i, n(e), a, s)
//                                         })), i
//                                     }(n, e, t(i), {})
//                                 }
//                             }

//                             function $a(e, t) {
//                                 return function(n, i) {
//                                     var s;
//                                     if (n === a && i === a) return t;
//                                     if (n !== a && (s = n), i !== a) {
//                                         if (s === a) return i;
//                                         "string" == typeof n || "string" == typeof i ? (n = ca(n), i = ca(i)) : (n = da(n), i = da(i)), s = e(n, i)
//                                     }
//                                     return s
//                                 }
//                             }

//                             function Wa(e) {
//                                 return is((function(t) {
//                                     return t = At(t, Qt(ds())), Ki((function(n) {
//                                         var i = this;
//                                         return e(t, (function(e) {
//                                             return Yt(e, i, n)
//                                         }))
//                                     }))
//                                 }))
//                             }

//                             function Ua(e, t) {
//                                 var n = (t = t === a ? " " : ca(t)).length;
//                                 if (n < 2) return n ? Vi(t, e) : t;
//                                 var i = Vi(t, pt(e / pn(t)));
//                                 return ln(t) ? Ma(fn(i), 0, e).join("") : i.slice(0, e)
//                             }

//                             function Ba(e) {
//                                 return function(t, n, s) {
//                                     return s && "number" != typeof s && ws(t, n, s) && (n = s = a), t = po(t), n === a ? (n = t, t = 0) : n = po(n),
//                                         function(e, t, n, a) {
//                                             for (var s = -1, r = yn(pt((t - e) / (n || 1)), 0), o = i(r); r--;) o[a ? r : ++s] = e, e += n;
//                                             return o
//                                         }(t, n, s = s === a ? t < n ? 1 : -1 : po(s), e)
//                                 }
//                             }

//                             function qa(e) {
//                                 return function(t, n) {
//                                     return "string" == typeof t && "string" == typeof n || (t = _o(t), n = _o(n)), e(t, n)
//                                 }
//                             }

//                             function Ga(e, t, n, i, s, r, o, l, u, h) {
//                                 var m = 8 & t;
//                                 t |= m ? d : c, 4 & (t &= ~(m ? c : d)) || (t &= -4);
//                                 var p = [e, t, s, m ? r : a, m ? o : a, m ? a : r, m ? a : o, l, u, h],
//                                     f = n.apply(a, p);
//                                 return Ms(e) && Ps(f, p), f.placeholder = i, Hs(f, e, t)
//                             }

//                             function Ja(e) {
//                                 var t = Te[e];
//                                 return function(e, n) {
//                                     if (e = _o(e), (n = null == n ? 0 : wn(fo(n), 292)) && wt(e)) {
//                                         var i = (yo(e) + "e").split("e");
//                                         return +((i = (yo(t(i[0] + "e" + (+i[1] + n))) + "e").split("e"))[0] + "e" + (+i[1] - n))
//                                     }
//                                     return t(e)
//                                 }
//                             }
//                             var Va = Sn && 1 / hn(new Sn([, -0]))[1] == m ? function(e) {
//                                 return new Sn(e)
//                             } : dl;

//                             function Ka(e) {
//                                 return function(t) {
//                                     var n = fs(t);
//                                     return n == k ? dn(t) : n == P ? mn(t) : function(e, t) {
//                                         return At(t, (function(t) {
//                                             return [t, e[t]]
//                                         }))
//                                     }(t, e(t))
//                                 }
//                             }

//                             function Xa(e, t, n, r, m, p, f, g) {
//                                 var _ = 2 & t;
//                                 if (!_ && "function" != typeof e) throw new Pe(s);
//                                 var v = r ? r.length : 0;
//                                 if (v || (t &= -97, r = m = a), f = f === a ? f : yn(fo(f), 0), g = g === a ? g : fo(g), v -= m ? m.length : 0, t & c) {
//                                     var y = r,
//                                         w = m;
//                                     r = m = a
//                                 }
//                                 var b = _ ? a : rs(e),
//                                     M = [e, t, n, r, m, y, w, p, f, g];
//                                 if (b && function(e, t) {
//                                         var n = e[1],
//                                             i = t[1],
//                                             a = n | i,
//                                             s = a < 131,
//                                             r = i == u && 8 == n || i == u && n == h && e[7].length <= t[8] || 384 == i && t[7].length <= t[8] && 8 == n;
//                                         if (!s && !r) return e;
//                                         1 & i && (e[2] = t[2], a |= 1 & n ? 0 : 4);
//                                         var l = t[3];
//                                         if (l) {
//                                             var d = e[3];
//                                             e[3] = d ? Sa(d, l, t[4]) : l, e[4] = d ? un(e[3], o) : t[4]
//                                         }(l = t[5]) && (d = e[5], e[5] = d ? Da(d, l, t[6]) : l, e[6] = d ? un(e[5], o) : t[6]);
//                                         (l = t[7]) && (e[7] = l);
//                                         i & u && (e[8] = null == e[8] ? t[8] : wn(e[8], t[8]));
//                                         null == e[9] && (e[9] = t[9]);
//                                         e[0] = t[0], e[1] = a
//                                     }(M, b), e = M[0], t = M[1], n = M[2], r = M[3], m = M[4], !(g = M[9] = M[9] === a ? _ ? 0 : e.length : yn(M[9] - v, 0)) && 24 & t && (t &= -25), t && 1 != t) x = 8 == t || t == l ? function(e, t, n) {
//                                     var s = Fa(e);
//                                     return function r() {
//                                         for (var o = arguments.length, l = i(o), d = o, c = ls(r); d--;) l[d] = arguments[d];
//                                         var u = o < 3 && l[0] !== c && l[o - 1] !== c ? [] : un(l, c);
//                                         return (o -= u.length) < n ? Ga(e, t, Ra, r.placeholder, a, l, u, a, a, n - o) : Yt(this && this !== ft && this instanceof r ? s : e, this, l)
//                                     }
//                                 }(e, t, g) : t != d && 33 != t || m.length ? Ra.apply(a, M) : function(e, t, n, a) {
//                                     var s = 1 & t,
//                                         r = Fa(e);
//                                     return function t() {
//                                         for (var o = -1, l = arguments.length, d = -1, c = a.length, u = i(c + l), h = this && this !== ft && this instanceof t ? r : e; ++d < c;) u[d] = a[d];
//                                         for (; l--;) u[d++] = arguments[++o];
//                                         return Yt(h, s ? n : this, u)
//                                     }
//                                 }(e, t, n, r);
//                                 else var x = function(e, t, n) {
//                                     var i = 1 & t,
//                                         a = Fa(e);
//                                     return function t() {
//                                         return (this && this !== ft && this instanceof t ? a : e).apply(i ? n : this, arguments)
//                                     }
//                                 }(e, t, n);
//                                 return Hs((b ? ta : Ps)(x, M), e, t)
//                             }

//                             function Qa(e, t, n, i) {
//                                 return e === a || Nr(e, He[n]) && !je.call(i, n) ? t : e
//                             }

//                             function es(e, t, n, i, s, r) {
//                                 return eo(e) && eo(t) && (r.set(t, e), $i(e, t, a, es, r), r.delete(t)), e
//                             }

//                             function ts(e) {
//                                 return ao(e) ? a : e
//                             }

//                             function ns(e, t, n, i, s, r) {
//                                 var o = 1 & n,
//                                     l = e.length,
//                                     d = t.length;
//                                 if (l != d && !(o && d > l)) return !1;
//                                 var c = r.get(e),
//                                     u = r.get(t);
//                                 if (c && u) return c == t && u == e;
//                                 var h = -1,
//                                     m = !0,
//                                     p = 2 & n ? new Jn : a;
//                                 for (r.set(e, t), r.set(t, e); ++h < l;) {
//                                     var f = e[h],
//                                         g = t[h];
//                                     if (i) var _ = o ? i(g, f, h, t, e, r) : i(f, g, h, e, t, r);
//                                     if (_ !== a) {
//                                         if (_) continue;
//                                         m = !1;
//                                         break
//                                     }
//                                     if (p) {
//                                         if (!It(t, (function(e, t) {
//                                                 if (!tn(p, t) && (f === e || s(f, e, n, i, r))) return p.push(t)
//                                             }))) {
//                                             m = !1;
//                                             break
//                                         }
//                                     } else if (f !== g && !s(f, g, n, i, r)) {
//                                         m = !1;
//                                         break
//                                     }
//                                 }
//                                 return r.delete(e), r.delete(t), m
//                             }

//                             function is(e) {
//                                 return Cs(Ys(e, a, Us), e + "")
//                             }

//                             function as(e) {
//                                 return ki(e, Co, ms)
//                             }

//                             function ss(e) {
//                                 return ki(e, Ho, ps)
//                             }
//                             var rs = En ? function(e) {
//                                 return En.get(e)
//                             } : dl;

//                             function os(e) {
//                                 for (var t = e.name + "", n = Cn[t], i = je.call(Cn, t) ? n.length : 0; i--;) {
//                                     var a = n[i],
//                                         s = a.func;
//                                     if (null == s || s == e) return a.name
//                                 }
//                                 return t
//                             }

//                             function ls(e) {
//                                 return (je.call(Rn, "placeholder") ? Rn : e).placeholder
//                             }

//                             function ds() {
//                                 var e = Rn.iteratee || sl;
//                                 return e = e === sl ? ji : e, arguments.length ? e(arguments[0], arguments[1]) : e
//                             }

//                             function cs(e, t) {
//                                 var n, i, a = e.__data__;
//                                 return ("string" == (i = typeof(n = t)) || "number" == i || "symbol" == i || "boolean" == i ? "__proto__" !== n : null === n) ? a["string" == typeof t ? "string" : "hash"] : a.map
//                             }

//                             function us(e) {
//                                 for (var t = Co(e), n = t.length; n--;) {
//                                     var i = t[n],
//                                         a = e[i];
//                                     t[n] = [i, a, ks(a)]
//                                 }
//                                 return t
//                             }

//                             function hs(e, t) {
//                                 var n = function(e, t) {
//                                     return null == e ? a : e[t]
//                                 }(e, t);
//                                 return Ai(n) ? n : a
//                             }
//                             var ms = _t ? function(e) {
//                                     return null == e ? [] : (e = Ye(e), Ct(_t(e), (function(t) {
//                                         return Je.call(e, t)
//                                     })))
//                                 } : gl,
//                                 ps = _t ? function(e) {
//                                     for (var t = []; e;) jt(t, ms(e)), e = qe(e);
//                                     return t
//                                 } : gl,
//                                 fs = Ti;

//                             function gs(e, t, n) {
//                                 for (var i = -1, a = (t = wa(t, e)).length, s = !1; ++i < a;) {
//                                     var r = Os(t[i]);
//                                     if (!(s = null != e && n(e, r))) break;
//                                     e = e[r]
//                                 }
//                                 return s || ++i != a ? s : !!(a = null == e ? 0 : e.length) && Qr(a) && ys(r, a) && (Wr(e) || $r(e))
//                             }

//                             function _s(e) {
//                                 return "function" != typeof e.constructor || Ls(e) ? {} : zn(qe(e))
//                             }

//                             function vs(e) {
//                                 return Wr(e) || $r(e) || !!(Ke && e && e[Ke])
//                             }

//                             function ys(e, t) {
//                                 var n = typeof e;
//                                 return !!(t = null == t ? p : t) && ("number" == n || "symbol" != n && we.test(e)) && e > -1 && e % 1 == 0 && e < t
//                             }

//                             function ws(e, t, n) {
//                                 if (!eo(n)) return !1;
//                                 var i = typeof t;
//                                 return !!("number" == i ? Br(n) && ys(t, n.length) : "string" == i && t in n) && Nr(n[t], e)
//                             }

//                             function bs(e, t) {
//                                 if (Wr(e)) return !1;
//                                 var n = typeof e;
//                                 return !("number" != n && "symbol" != n && "boolean" != n && null != e && !lo(e)) || (ne.test(e) || !te.test(e) || null != t && e in Ye(t))
//                             }

//                             function Ms(e) {
//                                 var t = os(e),
//                                     n = Rn[t];
//                                 if ("function" != typeof n || !(t in Un.prototype)) return !1;
//                                 if (e === n) return !0;
//                                 var i = rs(n);
//                                 return !!i && e === i[0]
//                             }(kn && fs(new kn(new ArrayBuffer(1))) != A || Tn && fs(new Tn) != k || Yn && fs(Yn.resolve()) != S || Sn && fs(new Sn) != P || Dn && fs(new Dn) != H) && (fs = function(e) {
//                                 var t = Ti(e),
//                                     n = t == Y ? e.constructor : a,
//                                     i = n ? Fs(n) : "";
//                                 if (i) switch (i) {
//                                     case Hn:
//                                         return A;
//                                     case Zn:
//                                         return k;
//                                     case An:
//                                         return S;
//                                     case jn:
//                                         return P;
//                                     case On:
//                                         return H
//                                 }
//                                 return t
//                             });
//                             var xs = Ze ? Kr : _l;

//                             function Ls(e) {
//                                 var t = e && e.constructor;
//                                 return e === ("function" == typeof t && t.prototype || He)
//                             }

//                             function ks(e) {
//                                 return e == e && !eo(e)
//                             }

//                             function Ts(e, t) {
//                                 return function(n) {
//                                     return null != n && (n[e] === t && (t !== a || e in Ye(n)))
//                                 }
//                             }

//                             function Ys(e, t, n) {
//                                 return t = yn(t === a ? e.length - 1 : t, 0),
//                                     function() {
//                                         for (var a = arguments, s = -1, r = yn(a.length - t, 0), o = i(r); ++s < r;) o[s] = a[t + s];
//                                         s = -1;
//                                         for (var l = i(t + 1); ++s < t;) l[s] = a[s];
//                                         return l[t] = n(o), Yt(e, this, l)
//                                     }
//                             }

//                             function Ss(e, t) {
//                                 return t.length < 2 ? e : Li(e, aa(t, 0, -1))
//                             }

//                             function Ds(e, t) {
//                                 if (("constructor" !== t || "function" != typeof e[t]) && "__proto__" != t) return e[t]
//                             }
//                             var Ps = Zs(ta),
//                                 Es = mt || function(e, t) {
//                                     return ft.setTimeout(e, t)
//                                 },
//                                 Cs = Zs(na);

//                             function Hs(e, t, n) {
//                                 var i = t + "";
//                                 return Cs(e, function(e, t) {
//                                     var n = t.length;
//                                     if (!n) return e;
//                                     var i = n - 1;
//                                     return t[i] = (n > 1 ? "& " : "") + t[i], t = t.join(n > 2 ? ", " : " "), e.replace(le, "{\n/* [wrapped with " + t + "] */\n")
//                                 }(i, function(e, t) {
//                                     return Dt(_, (function(n) {
//                                         var i = "_." + n[0];
//                                         t & n[1] && !Ht(e, i) && e.push(i)
//                                     })), e.sort()
//                                 }(function(e) {
//                                     var t = e.match(de);
//                                     return t ? t[1].split(ce) : []
//                                 }(i), n)))
//                             }

//                             function Zs(e) {
//                                 var t = 0,
//                                     n = 0;
//                                 return function() {
//                                     var i = bn(),
//                                         s = 16 - (i - n);
//                                     if (n = i, s > 0) {
//                                         if (++t >= 800) return arguments[0]
//                                     } else t = 0;
//                                     return e.apply(a, arguments)
//                                 }
//                             }

//                             function As(e, t) {
//                                 var n = -1,
//                                     i = e.length,
//                                     s = i - 1;
//                                 for (t = t === a ? i : t; ++n < t;) {
//                                     var r = Ji(n, s),
//                                         o = e[r];
//                                     e[r] = e[n], e[n] = o
//                                 }
//                                 return e.length = t, e
//                             }
//                             var js = function(e) {
//                                 var t = Zr(e, (function(e) {
//                                         return 500 === n.size && n.clear(), e
//                                     })),
//                                     n = t.cache;
//                                 return t
//                             }((function(e) {
//                                 var t = [];
//                                 return 46 === e.charCodeAt(0) && t.push(""), e.replace(ie, (function(e, n, i, a) {
//                                     t.push(i ? a.replace(me, "$1") : n || e)
//                                 })), t
//                             }));

//                             function Os(e) {
//                                 if ("string" == typeof e || lo(e)) return e;
//                                 var t = e + "";
//                                 return "0" == t && 1 / e == -1 / 0 ? "-0" : t
//                             }

//                             function Fs(e) {
//                                 if (null != e) {
//                                     try {
//                                         return Ae.call(e)
//                                     } catch (t) {}
//                                     try {
//                                         return e + ""
//                                     } catch (t) {}
//                                 }
//                                 return ""
//                             }

//                             function Is(e) {
//                                 if (e instanceof Un) return e.clone();
//                                 var t = new Wn(e.__wrapped__, e.__chain__);
//                                 return t.__actions__ = Pa(e.__actions__), t.__index__ = e.__index__, t.__values__ = e.__values__, t
//                             }
//                             var Ns = Ki((function(e, t) {
//                                     return qr(e) ? hi(e, vi(t, 1, qr, !0)) : []
//                                 })),
//                                 Rs = Ki((function(e, t) {
//                                     var n = Vs(t);
//                                     return qr(n) && (n = a), qr(e) ? hi(e, vi(t, 1, qr, !0), ds(n, 2)) : []
//                                 })),
//                                 zs = Ki((function(e, t) {
//                                     var n = Vs(t);
//                                     return qr(n) && (n = a), qr(e) ? hi(e, vi(t, 1, qr, !0), a, n) : []
//                                 }));

//                             function $s(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 if (!i) return -1;
//                                 var a = null == n ? 0 : fo(n);
//                                 return a < 0 && (a = yn(i + a, 0)), zt(e, ds(t, 3), a)
//                             }

//                             function Ws(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 if (!i) return -1;
//                                 var s = i - 1;
//                                 return n !== a && (s = fo(n), s = n < 0 ? yn(i + s, 0) : wn(s, i - 1)), zt(e, ds(t, 3), s, !0)
//                             }

//                             function Us(e) {
//                                 return (null == e ? 0 : e.length) ? vi(e, 1) : []
//                             }

//                             function Bs(e) {
//                                 return e && e.length ? e[0] : a
//                             }
//                             var qs = Ki((function(e) {
//                                     var t = At(e, va);
//                                     return t.length && t[0] === e[0] ? Pi(t) : []
//                                 })),
//                                 Gs = Ki((function(e) {
//                                     var t = Vs(e),
//                                         n = At(e, va);
//                                     return t === Vs(n) ? t = a : n.pop(), n.length && n[0] === e[0] ? Pi(n, ds(t, 2)) : []
//                                 })),
//                                 Js = Ki((function(e) {
//                                     var t = Vs(e),
//                                         n = At(e, va);
//                                     return (t = "function" == typeof t ? t : a) && n.pop(), n.length && n[0] === e[0] ? Pi(n, a, t) : []
//                                 }));

//                             function Vs(e) {
//                                 var t = null == e ? 0 : e.length;
//                                 return t ? e[t - 1] : a
//                             }
//                             var Ks = Ki(Xs);

//                             function Xs(e, t) {
//                                 return e && e.length && t && t.length ? qi(e, t) : e
//                             }
//                             var Qs = is((function(e, t) {
//                                 var n = null == e ? 0 : e.length,
//                                     i = oi(e, t);
//                                 return Gi(e, At(t, (function(e) {
//                                     return ys(e, n) ? +e : e
//                                 })).sort(Ya)), i
//                             }));

//                             function er(e) {
//                                 return null == e ? e : Ln.call(e)
//                             }
//                             var tr = Ki((function(e) {
//                                     return ua(vi(e, 1, qr, !0))
//                                 })),
//                                 nr = Ki((function(e) {
//                                     var t = Vs(e);
//                                     return qr(t) && (t = a), ua(vi(e, 1, qr, !0), ds(t, 2))
//                                 })),
//                                 ir = Ki((function(e) {
//                                     var t = Vs(e);
//                                     return t = "function" == typeof t ? t : a, ua(vi(e, 1, qr, !0), a, t)
//                                 }));

//                             function ar(e) {
//                                 if (!e || !e.length) return [];
//                                 var t = 0;
//                                 return e = Ct(e, (function(e) {
//                                     if (qr(e)) return t = yn(e.length, t), !0
//                                 })), Kt(t, (function(t) {
//                                     return At(e, qt(t))
//                                 }))
//                             }

//                             function sr(e, t) {
//                                 if (!e || !e.length) return [];
//                                 var n = ar(e);
//                                 return null == t ? n : At(n, (function(e) {
//                                     return Yt(t, a, e)
//                                 }))
//                             }
//                             var rr = Ki((function(e, t) {
//                                     return qr(e) ? hi(e, t) : []
//                                 })),
//                                 or = Ki((function(e) {
//                                     return ga(Ct(e, qr))
//                                 })),
//                                 lr = Ki((function(e) {
//                                     var t = Vs(e);
//                                     return qr(t) && (t = a), ga(Ct(e, qr), ds(t, 2))
//                                 })),
//                                 dr = Ki((function(e) {
//                                     var t = Vs(e);
//                                     return t = "function" == typeof t ? t : a, ga(Ct(e, qr), a, t)
//                                 })),
//                                 cr = Ki(ar);
//                             var ur = Ki((function(e) {
//                                 var t = e.length,
//                                     n = t > 1 ? e[t - 1] : a;
//                                 return n = "function" == typeof n ? (e.pop(), n) : a, sr(e, n)
//                             }));

//                             function hr(e) {
//                                 var t = Rn(e);
//                                 return t.__chain__ = !0, t
//                             }

//                             function mr(e, t) {
//                                 return t(e)
//                             }
//                             var pr = is((function(e) {
//                                 var t = e.length,
//                                     n = t ? e[0] : 0,
//                                     i = this.__wrapped__,
//                                     s = function(t) {
//                                         return oi(t, e)
//                                     };
//                                 return !(t > 1 || this.__actions__.length) && i instanceof Un && ys(n) ? ((i = i.slice(n, +n + (t ? 1 : 0))).__actions__.push({
//                                     func: mr,
//                                     args: [s],
//                                     thisArg: a
//                                 }), new Wn(i, this.__chain__).thru((function(e) {
//                                     return t && !e.length && e.push(a), e
//                                 }))) : this.thru(s)
//                             }));
//                             var fr = Ca((function(e, t, n) {
//                                 je.call(e, n) ? ++e[n] : ri(e, n, 1)
//                             }));
//                             var gr = Ia($s),
//                                 _r = Ia(Ws);

//                             function vr(e, t) {
//                                 return (Wr(e) ? Dt : mi)(e, ds(t, 3))
//                             }

//                             function yr(e, t) {
//                                 return (Wr(e) ? Pt : pi)(e, ds(t, 3))
//                             }
//                             var wr = Ca((function(e, t, n) {
//                                 je.call(e, n) ? e[n].push(t) : ri(e, n, [t])
//                             }));
//                             var br = Ki((function(e, t, n) {
//                                     var a = -1,
//                                         s = "function" == typeof t,
//                                         r = Br(e) ? i(e.length) : [];
//                                     return mi(e, (function(e) {
//                                         r[++a] = s ? Yt(t, e, n) : Ei(e, t, n)
//                                     })), r
//                                 })),
//                                 Mr = Ca((function(e, t, n) {
//                                     ri(e, n, t)
//                                 }));

//                             function xr(e, t) {
//                                 return (Wr(e) ? At : Ni)(e, ds(t, 3))
//                             }
//                             var Lr = Ca((function(e, t, n) {
//                                 e[n ? 0 : 1].push(t)
//                             }), (function() {
//                                 return [
//                                     [],
//                                     []
//                                 ]
//                             }));
//                             var kr = Ki((function(e, t) {
//                                     if (null == e) return [];
//                                     var n = t.length;
//                                     return n > 1 && ws(e, t[0], t[1]) ? t = [] : n > 2 && ws(t[0], t[1], t[2]) && (t = [t[0]]), Ui(e, vi(t, 1), [])
//                                 })),
//                                 Tr = ct || function() {
//                                     return ft.Date.now()
//                                 };

//                             function Yr(e, t, n) {
//                                 return t = n ? a : t, t = e && null == t ? e.length : t, Xa(e, u, a, a, a, a, t)
//                             }

//                             function Sr(e, t) {
//                                 var n;
//                                 if ("function" != typeof t) throw new Pe(s);
//                                 return e = fo(e),
//                                     function() {
//                                         return --e > 0 && (n = t.apply(this, arguments)), e <= 1 && (t = a), n
//                                     }
//                             }
//                             var Dr = Ki((function(e, t, n) {
//                                     var i = 1;
//                                     if (n.length) {
//                                         var a = un(n, ls(Dr));
//                                         i |= d
//                                     }
//                                     return Xa(e, i, t, n, a)
//                                 })),
//                                 Pr = Ki((function(e, t, n) {
//                                     var i = 3;
//                                     if (n.length) {
//                                         var a = un(n, ls(Pr));
//                                         i |= d
//                                     }
//                                     return Xa(t, i, e, n, a)
//                                 }));

//                             function Er(e, t, n) {
//                                 var i, r, o, l, d, c, u = 0,
//                                     h = !1,
//                                     m = !1,
//                                     p = !0;
//                                 if ("function" != typeof e) throw new Pe(s);

//                                 function f(t) {
//                                     var n = i,
//                                         s = r;
//                                     return i = r = a, u = t, l = e.apply(s, n)
//                                 }

//                                 function g(e) {
//                                     var n = e - c;
//                                     return c === a || n >= t || n < 0 || m && e - u >= o
//                                 }

//                                 function _() {
//                                     var e = Tr();
//                                     if (g(e)) return v(e);
//                                     d = Es(_, function(e) {
//                                         var n = t - (e - c);
//                                         return m ? wn(n, o - (e - u)) : n
//                                     }(e))
//                                 }

//                                 function v(e) {
//                                     return d = a, p && i ? f(e) : (i = r = a, l)
//                                 }

//                                 function y() {
//                                     var e = Tr(),
//                                         n = g(e);
//                                     if (i = arguments, r = this, c = e, n) {
//                                         if (d === a) return function(e) {
//                                             return u = e, d = Es(_, t), h ? f(e) : l
//                                         }(c);
//                                         if (m) return xa(d), d = Es(_, t), f(c)
//                                     }
//                                     return d === a && (d = Es(_, t)), l
//                                 }
//                                 return t = _o(t) || 0, eo(n) && (h = !!n.leading, o = (m = "maxWait" in n) ? yn(_o(n.maxWait) || 0, t) : o, p = "trailing" in n ? !!n.trailing : p), y.cancel = function() {
//                                     d !== a && xa(d), u = 0, i = c = r = d = a
//                                 }, y.flush = function() {
//                                     return d === a ? l : v(Tr())
//                                 }, y
//                             }
//                             var Cr = Ki((function(e, t) {
//                                     return ui(e, 1, t)
//                                 })),
//                                 Hr = Ki((function(e, t, n) {
//                                     return ui(e, _o(t) || 0, n)
//                                 }));

//                             function Zr(e, t) {
//                                 if ("function" != typeof e || null != t && "function" != typeof t) throw new Pe(s);
//                                 var n = function() {
//                                     var i = arguments,
//                                         a = t ? t.apply(this, i) : i[0],
//                                         s = n.cache;
//                                     if (s.has(a)) return s.get(a);
//                                     var r = e.apply(this, i);
//                                     return n.cache = s.set(a, r) || s, r
//                                 };
//                                 return n.cache = new(Zr.Cache || Gn), n
//                             }

//                             function Ar(e) {
//                                 if ("function" != typeof e) throw new Pe(s);
//                                 return function() {
//                                     var t = arguments;
//                                     switch (t.length) {
//                                         case 0:
//                                             return !e.call(this);
//                                         case 1:
//                                             return !e.call(this, t[0]);
//                                         case 2:
//                                             return !e.call(this, t[0], t[1]);
//                                         case 3:
//                                             return !e.call(this, t[0], t[1], t[2])
//                                     }
//                                     return !e.apply(this, t)
//                                 }
//                             }
//                             Zr.Cache = Gn;
//                             var jr = ba((function(e, t) {
//                                     var n = (t = 1 == t.length && Wr(t[0]) ? At(t[0], Qt(ds())) : At(vi(t, 1), Qt(ds()))).length;
//                                     return Ki((function(i) {
//                                         for (var a = -1, s = wn(i.length, n); ++a < s;) i[a] = t[a].call(this, i[a]);
//                                         return Yt(e, this, i)
//                                     }))
//                                 })),
//                                 Or = Ki((function(e, t) {
//                                     var n = un(t, ls(Or));
//                                     return Xa(e, d, a, t, n)
//                                 })),
//                                 Fr = Ki((function(e, t) {
//                                     var n = un(t, ls(Fr));
//                                     return Xa(e, c, a, t, n)
//                                 })),
//                                 Ir = is((function(e, t) {
//                                     return Xa(e, h, a, a, a, t)
//                                 }));

//                             function Nr(e, t) {
//                                 return e === t || e != e && t != t
//                             }
//                             var Rr = qa(Yi),
//                                 zr = qa((function(e, t) {
//                                     return e >= t
//                                 })),
//                                 $r = Ci(function() {
//                                     return arguments
//                                 }()) ? Ci : function(e) {
//                                     return to(e) && je.call(e, "callee") && !Je.call(e, "callee")
//                                 },
//                                 Wr = i.isArray,
//                                 Ur = bt ? Qt(bt) : function(e) {
//                                     return to(e) && Ti(e) == Z
//                                 };

//                             function Br(e) {
//                                 return null != e && Qr(e.length) && !Kr(e)
//                             }

//                             function qr(e) {
//                                 return to(e) && Br(e)
//                             }
//                             var Gr = yt || _l,
//                                 Jr = Mt ? Qt(Mt) : function(e) {
//                                     return to(e) && Ti(e) == b
//                                 };

//                             function Vr(e) {
//                                 if (!to(e)) return !1;
//                                 var t = Ti(e);
//                                 return t == M || "[object DOMException]" == t || "string" == typeof e.message && "string" == typeof e.name && !ao(e)
//                             }

//                             function Kr(e) {
//                                 if (!eo(e)) return !1;
//                                 var t = Ti(e);
//                                 return t == x || t == L || "[object AsyncFunction]" == t || "[object Proxy]" == t
//                             }

//                             function Xr(e) {
//                                 return "number" == typeof e && e == fo(e)
//                             }

//                             function Qr(e) {
//                                 return "number" == typeof e && e > -1 && e % 1 == 0 && e <= p
//                             }

//                             function eo(e) {
//                                 var t = typeof e;
//                                 return null != e && ("object" == t || "function" == t)
//                             }

//                             function to(e) {
//                                 return null != e && "object" == typeof e
//                             }
//                             var no = xt ? Qt(xt) : function(e) {
//                                 return to(e) && fs(e) == k
//                             };

//                             function io(e) {
//                                 return "number" == typeof e || to(e) && Ti(e) == T
//                             }

//                             function ao(e) {
//                                 if (!to(e) || Ti(e) != Y) return !1;
//                                 var t = qe(e);
//                                 if (null === t) return !0;
//                                 var n = je.call(t, "constructor") && t.constructor;
//                                 return "function" == typeof n && n instanceof n && Ae.call(n) == Ne
//                             }
//                             var so = Lt ? Qt(Lt) : function(e) {
//                                 return to(e) && Ti(e) == D
//                             };
//                             var ro = kt ? Qt(kt) : function(e) {
//                                 return to(e) && fs(e) == P
//                             };

//                             function oo(e) {
//                                 return "string" == typeof e || !Wr(e) && to(e) && Ti(e) == E
//                             }

//                             function lo(e) {
//                                 return "symbol" == typeof e || to(e) && Ti(e) == C
//                             }
//                             var co = Tt ? Qt(Tt) : function(e) {
//                                 return to(e) && Qr(e.length) && !!lt[Ti(e)]
//                             };
//                             var uo = qa(Ii),
//                                 ho = qa((function(e, t) {
//                                     return e <= t
//                                 }));

//                             function mo(e) {
//                                 if (!e) return [];
//                                 if (Br(e)) return oo(e) ? fn(e) : Pa(e);
//                                 if (Xe && e[Xe]) return function(e) {
//                                     for (var t, n = []; !(t = e.next()).done;) n.push(t.value);
//                                     return n
//                                 }(e[Xe]());
//                                 var t = fs(e);
//                                 return (t == k ? dn : t == P ? hn : Ro)(e)
//                             }

//                             function po(e) {
//                                 return e ? (e = _o(e)) === m || e === -1 / 0 ? 17976931348623157e292 * (e < 0 ? -1 : 1) : e == e ? e : 0 : 0 === e ? e : 0
//                             }

//                             function fo(e) {
//                                 var t = po(e),
//                                     n = t % 1;
//                                 return t == t ? n ? t - n : t : 0
//                             }

//                             function go(e) {
//                                 return e ? li(fo(e), 0, g) : 0
//                             }

//                             function _o(e) {
//                                 if ("number" == typeof e) return e;
//                                 if (lo(e)) return f;
//                                 if (eo(e)) {
//                                     var t = "function" == typeof e.valueOf ? e.valueOf() : e;
//                                     e = eo(t) ? t + "" : t
//                                 }
//                                 if ("string" != typeof e) return 0 === e ? e : +e;
//                                 e = Xt(e);
//                                 var n = _e.test(e);
//                                 return n || ye.test(e) ? ht(e.slice(2), n ? 2 : 8) : ge.test(e) ? f : +e
//                             }

//                             function vo(e) {
//                                 return Ea(e, Ho(e))
//                             }

//                             function yo(e) {
//                                 return null == e ? "" : ca(e)
//                             }
//                             var wo = Ha((function(e, t) {
//                                     if (Ls(t) || Br(t)) Ea(t, Co(t), e);
//                                     else
//                                         for (var n in t) je.call(t, n) && ni(e, n, t[n])
//                                 })),
//                                 bo = Ha((function(e, t) {
//                                     Ea(t, Ho(t), e)
//                                 })),
//                                 Mo = Ha((function(e, t, n, i) {
//                                     Ea(t, Ho(t), e, i)
//                                 })),
//                                 xo = Ha((function(e, t, n, i) {
//                                     Ea(t, Co(t), e, i)
//                                 })),
//                                 Lo = is(oi);
//                             var ko = Ki((function(e, t) {
//                                     e = Ye(e);
//                                     var n = -1,
//                                         i = t.length,
//                                         s = i > 2 ? t[2] : a;
//                                     for (s && ws(t[0], t[1], s) && (i = 1); ++n < i;)
//                                         for (var r = t[n], o = Ho(r), l = -1, d = o.length; ++l < d;) {
//                                             var c = o[l],
//                                                 u = e[c];
//                                             (u === a || Nr(u, He[c]) && !je.call(e, c)) && (e[c] = r[c])
//                                         }
//                                     return e
//                                 })),
//                                 To = Ki((function(e) {
//                                     return e.push(a, es), Yt(Ao, a, e)
//                                 }));

//                             function Yo(e, t, n) {
//                                 var i = null == e ? a : Li(e, t);
//                                 return i === a ? n : i
//                             }

//                             function So(e, t) {
//                                 return null != e && gs(e, t, Di)
//                             }
//                             var Do = za((function(e, t, n) {
//                                     null != t && "function" != typeof t.toString && (t = Ie.call(t)), e[t] = n
//                                 }), tl(al)),
//                                 Po = za((function(e, t, n) {
//                                     null != t && "function" != typeof t.toString && (t = Ie.call(t)), je.call(e, t) ? e[t].push(n) : e[t] = [n]
//                                 }), ds),
//                                 Eo = Ki(Ei);

//                             function Co(e) {
//                                 return Br(e) ? Kn(e) : Oi(e)
//                             }

//                             function Ho(e) {
//                                 return Br(e) ? Kn(e, !0) : Fi(e)
//                             }
//                             var Zo = Ha((function(e, t, n) {
//                                     $i(e, t, n)
//                                 })),
//                                 Ao = Ha((function(e, t, n, i) {
//                                     $i(e, t, n, i)
//                                 })),
//                                 jo = is((function(e, t) {
//                                     var n = {};
//                                     if (null == e) return n;
//                                     var i = !1;
//                                     t = At(t, (function(t) {
//                                         return t = wa(t, e), i || (i = t.length > 1), t
//                                     })), Ea(e, ss(e), n), i && (n = di(n, 7, ts));
//                                     for (var a = t.length; a--;) ha(n, t[a]);
//                                     return n
//                                 }));
//                             var Oo = is((function(e, t) {
//                                 return null == e ? {} : function(e, t) {
//                                     return Bi(e, t, (function(t, n) {
//                                         return So(e, n)
//                                     }))
//                                 }(e, t)
//                             }));

//                             function Fo(e, t) {
//                                 if (null == e) return {};
//                                 var n = At(ss(e), (function(e) {
//                                     return [e]
//                                 }));
//                                 return t = ds(t), Bi(e, n, (function(e, n) {
//                                     return t(e, n[0])
//                                 }))
//                             }
//                             var Io = Ka(Co),
//                                 No = Ka(Ho);

//                             function Ro(e) {
//                                 return null == e ? [] : en(e, Co(e))
//                             }
//                             var zo = Oa((function(e, t, n) {
//                                 return t = t.toLowerCase(), e + (n ? $o(t) : t)
//                             }));

//                             function $o(e) {
//                                 return Ko(yo(e).toLowerCase())
//                             }

//                             function Wo(e) {
//                                 return (e = yo(e)) && e.replace(be, sn).replace(tt, "")
//                             }
//                             var Uo = Oa((function(e, t, n) {
//                                     return e + (n ? "-" : "") + t.toLowerCase()
//                                 })),
//                                 Bo = Oa((function(e, t, n) {
//                                     return e + (n ? " " : "") + t.toLowerCase()
//                                 })),
//                                 qo = ja("toLowerCase");
//                             var Go = Oa((function(e, t, n) {
//                                 return e + (n ? "_" : "") + t.toLowerCase()
//                             }));
//                             var Jo = Oa((function(e, t, n) {
//                                 return e + (n ? " " : "") + Ko(t)
//                             }));
//                             var Vo = Oa((function(e, t, n) {
//                                     return e + (n ? " " : "") + t.toUpperCase()
//                                 })),
//                                 Ko = ja("toUpperCase");

//                             function Xo(e, t, n) {
//                                 return e = yo(e), (t = n ? a : t) === a ? function(e) {
//                                     return st.test(e)
//                                 }(e) ? function(e) {
//                                     return e.match(it) || []
//                                 }(e) : function(e) {
//                                     return e.match(ue) || []
//                                 }(e) : e.match(t) || []
//                             }
//                             var Qo = Ki((function(e, t) {
//                                     try {
//                                         return Yt(e, a, t)
//                                     } catch (n) {
//                                         return Vr(n) ? n : new Le(n)
//                                     }
//                                 })),
//                                 el = is((function(e, t) {
//                                     return Dt(t, (function(t) {
//                                         t = Os(t), ri(e, t, Dr(e[t], e))
//                                     })), e
//                                 }));

//                             function tl(e) {
//                                 return function() {
//                                     return e
//                                 }
//                             }
//                             var nl = Na(),
//                                 il = Na(!0);

//                             function al(e) {
//                                 return e
//                             }

//                             function sl(e) {
//                                 return ji("function" == typeof e ? e : di(e, 1))
//                             }
//                             var rl = Ki((function(e, t) {
//                                     return function(n) {
//                                         return Ei(n, e, t)
//                                     }
//                                 })),
//                                 ol = Ki((function(e, t) {
//                                     return function(n) {
//                                         return Ei(e, n, t)
//                                     }
//                                 }));

//                             function ll(e, t, n) {
//                                 var i = Co(t),
//                                     a = xi(t, i);
//                                 null != n || eo(t) && (a.length || !i.length) || (n = t, t = e, e = this, a = xi(t, Co(t)));
//                                 var s = !(eo(n) && "chain" in n && !n.chain),
//                                     r = Kr(e);
//                                 return Dt(a, (function(n) {
//                                     var i = t[n];
//                                     e[n] = i, r && (e.prototype[n] = function() {
//                                         var t = this.__chain__;
//                                         if (s || t) {
//                                             var n = e(this.__wrapped__);
//                                             return (n.__actions__ = Pa(this.__actions__)).push({
//                                                 func: i,
//                                                 args: arguments,
//                                                 thisArg: e
//                                             }), n.__chain__ = t, n
//                                         }
//                                         return i.apply(e, jt([this.value()], arguments))
//                                     })
//                                 })), e
//                             }

//                             function dl() {}
//                             var cl = Wa(At),
//                                 ul = Wa(Et),
//                                 hl = Wa(It);

//                             function ml(e) {
//                                 return bs(e) ? qt(Os(e)) : function(e) {
//                                     return function(t) {
//                                         return Li(t, e)
//                                     }
//                                 }(e)
//                             }
//                             var pl = Ba(),
//                                 fl = Ba(!0);

//                             function gl() {
//                                 return []
//                             }

//                             function _l() {
//                                 return !1
//                             }
//                             var vl = $a((function(e, t) {
//                                     return e + t
//                                 }), 0),
//                                 yl = Ja("ceil"),
//                                 wl = $a((function(e, t) {
//                                     return e / t
//                                 }), 1),
//                                 bl = Ja("floor");
//                             var Ml, xl = $a((function(e, t) {
//                                     return e * t
//                                 }), 1),
//                                 Ll = Ja("round"),
//                                 kl = $a((function(e, t) {
//                                     return e - t
//                                 }), 0);
//                             return Rn.after = function(e, t) {
//                                 if ("function" != typeof t) throw new Pe(s);
//                                 return e = fo(e),
//                                     function() {
//                                         if (--e < 1) return t.apply(this, arguments)
//                                     }
//                             }, Rn.ary = Yr, Rn.assign = wo, Rn.assignIn = bo, Rn.assignInWith = Mo, Rn.assignWith = xo, Rn.at = Lo, Rn.before = Sr, Rn.bind = Dr, Rn.bindAll = el, Rn.bindKey = Pr, Rn.castArray = function() {
//                                 if (!arguments.length) return [];
//                                 var e = arguments[0];
//                                 return Wr(e) ? e : [e]
//                             }, Rn.chain = hr, Rn.chunk = function(e, t, n) {
//                                 t = (n ? ws(e, t, n) : t === a) ? 1 : yn(fo(t), 0);
//                                 var s = null == e ? 0 : e.length;
//                                 if (!s || t < 1) return [];
//                                 for (var r = 0, o = 0, l = i(pt(s / t)); r < s;) l[o++] = aa(e, r, r += t);
//                                 return l
//                             }, Rn.compact = function(e) {
//                                 for (var t = -1, n = null == e ? 0 : e.length, i = 0, a = []; ++t < n;) {
//                                     var s = e[t];
//                                     s && (a[i++] = s)
//                                 }
//                                 return a
//                             }, Rn.concat = function() {
//                                 var e = arguments.length;
//                                 if (!e) return [];
//                                 for (var t = i(e - 1), n = arguments[0], a = e; a--;) t[a - 1] = arguments[a];
//                                 return jt(Wr(n) ? Pa(n) : [n], vi(t, 1))
//                             }, Rn.cond = function(e) {
//                                 var t = null == e ? 0 : e.length,
//                                     n = ds();
//                                 return e = t ? At(e, (function(e) {
//                                     if ("function" != typeof e[1]) throw new Pe(s);
//                                     return [n(e[0]), e[1]]
//                                 })) : [], Ki((function(n) {
//                                     for (var i = -1; ++i < t;) {
//                                         var a = e[i];
//                                         if (Yt(a[0], this, n)) return Yt(a[1], this, n)
//                                     }
//                                 }))
//                             }, Rn.conforms = function(e) {
//                                 return function(e) {
//                                     var t = Co(e);
//                                     return function(n) {
//                                         return ci(n, e, t)
//                                     }
//                                 }(di(e, 1))
//                             }, Rn.constant = tl, Rn.countBy = fr, Rn.create = function(e, t) {
//                                 var n = zn(e);
//                                 return null == t ? n : si(n, t)
//                             }, Rn.curry = function e(t, n, i) {
//                                 var s = Xa(t, 8, a, a, a, a, a, n = i ? a : n);
//                                 return s.placeholder = e.placeholder, s
//                             }, Rn.curryRight = function e(t, n, i) {
//                                 var s = Xa(t, l, a, a, a, a, a, n = i ? a : n);
//                                 return s.placeholder = e.placeholder, s
//                             }, Rn.debounce = Er, Rn.defaults = ko, Rn.defaultsDeep = To, Rn.defer = Cr, Rn.delay = Hr, Rn.difference = Ns, Rn.differenceBy = Rs, Rn.differenceWith = zs, Rn.drop = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 return i ? aa(e, (t = n || t === a ? 1 : fo(t)) < 0 ? 0 : t, i) : []
//                             }, Rn.dropRight = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 return i ? aa(e, 0, (t = i - (t = n || t === a ? 1 : fo(t))) < 0 ? 0 : t) : []
//                             }, Rn.dropRightWhile = function(e, t) {
//                                 return e && e.length ? pa(e, ds(t, 3), !0, !0) : []
//                             }, Rn.dropWhile = function(e, t) {
//                                 return e && e.length ? pa(e, ds(t, 3), !0) : []
//                             }, Rn.fill = function(e, t, n, i) {
//                                 var s = null == e ? 0 : e.length;
//                                 return s ? (n && "number" != typeof n && ws(e, t, n) && (n = 0, i = s), function(e, t, n, i) {
//                                     var s = e.length;
//                                     for ((n = fo(n)) < 0 && (n = -n > s ? 0 : s + n), (i = i === a || i > s ? s : fo(i)) < 0 && (i += s), i = n > i ? 0 : go(i); n < i;) e[n++] = t;
//                                     return e
//                                 }(e, t, n, i)) : []
//                             }, Rn.filter = function(e, t) {
//                                 return (Wr(e) ? Ct : _i)(e, ds(t, 3))
//                             }, Rn.flatMap = function(e, t) {
//                                 return vi(xr(e, t), 1)
//                             }, Rn.flatMapDeep = function(e, t) {
//                                 return vi(xr(e, t), m)
//                             }, Rn.flatMapDepth = function(e, t, n) {
//                                 return n = n === a ? 1 : fo(n), vi(xr(e, t), n)
//                             }, Rn.flatten = Us, Rn.flattenDeep = function(e) {
//                                 return (null == e ? 0 : e.length) ? vi(e, m) : []
//                             }, Rn.flattenDepth = function(e, t) {
//                                 return (null == e ? 0 : e.length) ? vi(e, t = t === a ? 1 : fo(t)) : []
//                             }, Rn.flip = function(e) {
//                                 return Xa(e, 512)
//                             }, Rn.flow = nl, Rn.flowRight = il, Rn.fromPairs = function(e) {
//                                 for (var t = -1, n = null == e ? 0 : e.length, i = {}; ++t < n;) {
//                                     var a = e[t];
//                                     i[a[0]] = a[1]
//                                 }
//                                 return i
//                             }, Rn.functions = function(e) {
//                                 return null == e ? [] : xi(e, Co(e))
//                             }, Rn.functionsIn = function(e) {
//                                 return null == e ? [] : xi(e, Ho(e))
//                             }, Rn.groupBy = wr, Rn.initial = function(e) {
//                                 return (null == e ? 0 : e.length) ? aa(e, 0, -1) : []
//                             }, Rn.intersection = qs, Rn.intersectionBy = Gs, Rn.intersectionWith = Js, Rn.invert = Do, Rn.invertBy = Po, Rn.invokeMap = br, Rn.iteratee = sl, Rn.keyBy = Mr, Rn.keys = Co, Rn.keysIn = Ho, Rn.map = xr, Rn.mapKeys = function(e, t) {
//                                 var n = {};
//                                 return t = ds(t, 3), bi(e, (function(e, i, a) {
//                                     ri(n, t(e, i, a), e)
//                                 })), n
//                             }, Rn.mapValues = function(e, t) {
//                                 var n = {};
//                                 return t = ds(t, 3), bi(e, (function(e, i, a) {
//                                     ri(n, i, t(e, i, a))
//                                 })), n
//                             }, Rn.matches = function(e) {
//                                 return Ri(di(e, 1))
//                             }, Rn.matchesProperty = function(e, t) {
//                                 return zi(e, di(t, 1))
//                             }, Rn.memoize = Zr, Rn.merge = Zo, Rn.mergeWith = Ao, Rn.method = rl, Rn.methodOf = ol, Rn.mixin = ll, Rn.negate = Ar, Rn.nthArg = function(e) {
//                                 return e = fo(e), Ki((function(t) {
//                                     return Wi(t, e)
//                                 }))
//                             }, Rn.omit = jo, Rn.omitBy = function(e, t) {
//                                 return Fo(e, Ar(ds(t)))
//                             }, Rn.once = function(e) {
//                                 return Sr(2, e)
//                             }, Rn.orderBy = function(e, t, n, i) {
//                                 return null == e ? [] : (Wr(t) || (t = null == t ? [] : [t]), Wr(n = i ? a : n) || (n = null == n ? [] : [n]), Ui(e, t, n))
//                             }, Rn.over = cl, Rn.overArgs = jr, Rn.overEvery = ul, Rn.overSome = hl, Rn.partial = Or, Rn.partialRight = Fr, Rn.partition = Lr, Rn.pick = Oo, Rn.pickBy = Fo, Rn.property = ml, Rn.propertyOf = function(e) {
//                                 return function(t) {
//                                     return null == e ? a : Li(e, t)
//                                 }
//                             }, Rn.pull = Ks, Rn.pullAll = Xs, Rn.pullAllBy = function(e, t, n) {
//                                 return e && e.length && t && t.length ? qi(e, t, ds(n, 2)) : e
//                             }, Rn.pullAllWith = function(e, t, n) {
//                                 return e && e.length && t && t.length ? qi(e, t, a, n) : e
//                             }, Rn.pullAt = Qs, Rn.range = pl, Rn.rangeRight = fl, Rn.rearg = Ir, Rn.reject = function(e, t) {
//                                 return (Wr(e) ? Ct : _i)(e, Ar(ds(t, 3)))
//                             }, Rn.remove = function(e, t) {
//                                 var n = [];
//                                 if (!e || !e.length) return n;
//                                 var i = -1,
//                                     a = [],
//                                     s = e.length;
//                                 for (t = ds(t, 3); ++i < s;) {
//                                     var r = e[i];
//                                     t(r, i, e) && (n.push(r), a.push(i))
//                                 }
//                                 return Gi(e, a), n
//                             }, Rn.rest = function(e, t) {
//                                 if ("function" != typeof e) throw new Pe(s);
//                                 return Ki(e, t = t === a ? t : fo(t))
//                             }, Rn.reverse = er, Rn.sampleSize = function(e, t, n) {
//                                 return t = (n ? ws(e, t, n) : t === a) ? 1 : fo(t), (Wr(e) ? Qn : Qi)(e, t)
//                             }, Rn.set = function(e, t, n) {
//                                 return null == e ? e : ea(e, t, n)
//                             }, Rn.setWith = function(e, t, n, i) {
//                                 return i = "function" == typeof i ? i : a, null == e ? e : ea(e, t, n, i)
//                             }, Rn.shuffle = function(e) {
//                                 return (Wr(e) ? ei : ia)(e)
//                             }, Rn.slice = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 return i ? (n && "number" != typeof n && ws(e, t, n) ? (t = 0, n = i) : (t = null == t ? 0 : fo(t), n = n === a ? i : fo(n)), aa(e, t, n)) : []
//                             }, Rn.sortBy = kr, Rn.sortedUniq = function(e) {
//                                 return e && e.length ? la(e) : []
//                             }, Rn.sortedUniqBy = function(e, t) {
//                                 return e && e.length ? la(e, ds(t, 2)) : []
//                             }, Rn.split = function(e, t, n) {
//                                 return n && "number" != typeof n && ws(e, t, n) && (t = n = a), (n = n === a ? g : n >>> 0) ? (e = yo(e)) && ("string" == typeof t || null != t && !so(t)) && !(t = ca(t)) && ln(e) ? Ma(fn(e), 0, n) : e.split(t, n) : []
//                             }, Rn.spread = function(e, t) {
//                                 if ("function" != typeof e) throw new Pe(s);
//                                 return t = null == t ? 0 : yn(fo(t), 0), Ki((function(n) {
//                                     var i = n[t],
//                                         a = Ma(n, 0, t);
//                                     return i && jt(a, i), Yt(e, this, a)
//                                 }))
//                             }, Rn.tail = function(e) {
//                                 var t = null == e ? 0 : e.length;
//                                 return t ? aa(e, 1, t) : []
//                             }, Rn.take = function(e, t, n) {
//                                 return e && e.length ? aa(e, 0, (t = n || t === a ? 1 : fo(t)) < 0 ? 0 : t) : []
//                             }, Rn.takeRight = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 return i ? aa(e, (t = i - (t = n || t === a ? 1 : fo(t))) < 0 ? 0 : t, i) : []
//                             }, Rn.takeRightWhile = function(e, t) {
//                                 return e && e.length ? pa(e, ds(t, 3), !1, !0) : []
//                             }, Rn.takeWhile = function(e, t) {
//                                 return e && e.length ? pa(e, ds(t, 3)) : []
//                             }, Rn.tap = function(e, t) {
//                                 return t(e), e
//                             }, Rn.throttle = function(e, t, n) {
//                                 var i = !0,
//                                     a = !0;
//                                 if ("function" != typeof e) throw new Pe(s);
//                                 return eo(n) && (i = "leading" in n ? !!n.leading : i, a = "trailing" in n ? !!n.trailing : a), Er(e, t, {
//                                     leading: i,
//                                     maxWait: t,
//                                     trailing: a
//                                 })
//                             }, Rn.thru = mr, Rn.toArray = mo, Rn.toPairs = Io, Rn.toPairsIn = No, Rn.toPath = function(e) {
//                                 return Wr(e) ? At(e, Os) : lo(e) ? [e] : Pa(js(yo(e)))
//                             }, Rn.toPlainObject = vo, Rn.transform = function(e, t, n) {
//                                 var i = Wr(e),
//                                     a = i || Gr(e) || co(e);
//                                 if (t = ds(t, 4), null == n) {
//                                     var s = e && e.constructor;
//                                     n = a ? i ? new s : [] : eo(e) && Kr(s) ? zn(qe(e)) : {}
//                                 }
//                                 return (a ? Dt : bi)(e, (function(e, i, a) {
//                                     return t(n, e, i, a)
//                                 })), n
//                             }, Rn.unary = function(e) {
//                                 return Yr(e, 1)
//                             }, Rn.union = tr, Rn.unionBy = nr, Rn.unionWith = ir, Rn.uniq = function(e) {
//                                 return e && e.length ? ua(e) : []
//                             }, Rn.uniqBy = function(e, t) {
//                                 return e && e.length ? ua(e, ds(t, 2)) : []
//                             }, Rn.uniqWith = function(e, t) {
//                                 return t = "function" == typeof t ? t : a, e && e.length ? ua(e, a, t) : []
//                             }, Rn.unset = function(e, t) {
//                                 return null == e || ha(e, t)
//                             }, Rn.unzip = ar, Rn.unzipWith = sr, Rn.update = function(e, t, n) {
//                                 return null == e ? e : ma(e, t, ya(n))
//                             }, Rn.updateWith = function(e, t, n, i) {
//                                 return i = "function" == typeof i ? i : a, null == e ? e : ma(e, t, ya(n), i)
//                             }, Rn.values = Ro, Rn.valuesIn = function(e) {
//                                 return null == e ? [] : en(e, Ho(e))
//                             }, Rn.without = rr, Rn.words = Xo, Rn.wrap = function(e, t) {
//                                 return Or(ya(t), e)
//                             }, Rn.xor = or, Rn.xorBy = lr, Rn.xorWith = dr, Rn.zip = cr, Rn.zipObject = function(e, t) {
//                                 return _a(e || [], t || [], ni)
//                             }, Rn.zipObjectDeep = function(e, t) {
//                                 return _a(e || [], t || [], ea)
//                             }, Rn.zipWith = ur, Rn.entries = Io, Rn.entriesIn = No, Rn.extend = bo, Rn.extendWith = Mo, ll(Rn, Rn), Rn.add = vl, Rn.attempt = Qo, Rn.camelCase = zo, Rn.capitalize = $o, Rn.ceil = yl, Rn.clamp = function(e, t, n) {
//                                 return n === a && (n = t, t = a), n !== a && (n = (n = _o(n)) == n ? n : 0), t !== a && (t = (t = _o(t)) == t ? t : 0), li(_o(e), t, n)
//                             }, Rn.clone = function(e) {
//                                 return di(e, 4)
//                             }, Rn.cloneDeep = function(e) {
//                                 return di(e, 5)
//                             }, Rn.cloneDeepWith = function(e, t) {
//                                 return di(e, 5, t = "function" == typeof t ? t : a)
//                             }, Rn.cloneWith = function(e, t) {
//                                 return di(e, 4, t = "function" == typeof t ? t : a)
//                             }, Rn.conformsTo = function(e, t) {
//                                 return null == t || ci(e, t, Co(t))
//                             }, Rn.deburr = Wo, Rn.defaultTo = function(e, t) {
//                                 return null == e || e != e ? t : e
//                             }, Rn.divide = wl, Rn.endsWith = function(e, t, n) {
//                                 e = yo(e), t = ca(t);
//                                 var i = e.length,
//                                     s = n = n === a ? i : li(fo(n), 0, i);
//                                 return (n -= t.length) >= 0 && e.slice(n, s) == t
//                             }, Rn.eq = Nr, Rn.escape = function(e) {
//                                 return (e = yo(e)) && K.test(e) ? e.replace(J, rn) : e
//                             }, Rn.escapeRegExp = function(e) {
//                                 return (e = yo(e)) && se.test(e) ? e.replace(ae, "\\$&") : e
//                             }, Rn.every = function(e, t, n) {
//                                 var i = Wr(e) ? Et : fi;
//                                 return n && ws(e, t, n) && (t = a), i(e, ds(t, 3))
//                             }, Rn.find = gr, Rn.findIndex = $s, Rn.findKey = function(e, t) {
//                                 return Rt(e, ds(t, 3), bi)
//                             }, Rn.findLast = _r, Rn.findLastIndex = Ws, Rn.findLastKey = function(e, t) {
//                                 return Rt(e, ds(t, 3), Mi)
//                             }, Rn.floor = bl, Rn.forEach = vr, Rn.forEachRight = yr, Rn.forIn = function(e, t) {
//                                 return null == e ? e : yi(e, ds(t, 3), Ho)
//                             }, Rn.forInRight = function(e, t) {
//                                 return null == e ? e : wi(e, ds(t, 3), Ho)
//                             }, Rn.forOwn = function(e, t) {
//                                 return e && bi(e, ds(t, 3))
//                             }, Rn.forOwnRight = function(e, t) {
//                                 return e && Mi(e, ds(t, 3))
//                             }, Rn.get = Yo, Rn.gt = Rr, Rn.gte = zr, Rn.has = function(e, t) {
//                                 return null != e && gs(e, t, Si)
//                             }, Rn.hasIn = So, Rn.head = Bs, Rn.identity = al, Rn.includes = function(e, t, n, i) {
//                                 e = Br(e) ? e : Ro(e), n = n && !i ? fo(n) : 0;
//                                 var a = e.length;
//                                 return n < 0 && (n = yn(a + n, 0)), oo(e) ? n <= a && e.indexOf(t, n) > -1 : !!a && $t(e, t, n) > -1
//                             }, Rn.indexOf = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 if (!i) return -1;
//                                 var a = null == n ? 0 : fo(n);
//                                 return a < 0 && (a = yn(i + a, 0)), $t(e, t, a)
//                             }, Rn.inRange = function(e, t, n) {
//                                 return t = po(t), n === a ? (n = t, t = 0) : n = po(n),
//                                     function(e, t, n) {
//                                         return e >= wn(t, n) && e < yn(t, n)
//                                     }(e = _o(e), t, n)
//                             }, Rn.invoke = Eo, Rn.isArguments = $r, Rn.isArray = Wr, Rn.isArrayBuffer = Ur, Rn.isArrayLike = Br, Rn.isArrayLikeObject = qr, Rn.isBoolean = function(e) {
//                                 return !0 === e || !1 === e || to(e) && Ti(e) == w
//                             }, Rn.isBuffer = Gr, Rn.isDate = Jr, Rn.isElement = function(e) {
//                                 return to(e) && 1 === e.nodeType && !ao(e)
//                             }, Rn.isEmpty = function(e) {
//                                 if (null == e) return !0;
//                                 if (Br(e) && (Wr(e) || "string" == typeof e || "function" == typeof e.splice || Gr(e) || co(e) || $r(e))) return !e.length;
//                                 var t = fs(e);
//                                 if (t == k || t == P) return !e.size;
//                                 if (Ls(e)) return !Oi(e).length;
//                                 for (var n in e)
//                                     if (je.call(e, n)) return !1;
//                                 return !0
//                             }, Rn.isEqual = function(e, t) {
//                                 return Hi(e, t)
//                             }, Rn.isEqualWith = function(e, t, n) {
//                                 var i = (n = "function" == typeof n ? n : a) ? n(e, t) : a;
//                                 return i === a ? Hi(e, t, a, n) : !!i
//                             }, Rn.isError = Vr, Rn.isFinite = function(e) {
//                                 return "number" == typeof e && wt(e)
//                             }, Rn.isFunction = Kr, Rn.isInteger = Xr, Rn.isLength = Qr, Rn.isMap = no, Rn.isMatch = function(e, t) {
//                                 return e === t || Zi(e, t, us(t))
//                             }, Rn.isMatchWith = function(e, t, n) {
//                                 return n = "function" == typeof n ? n : a, Zi(e, t, us(t), n)
//                             }, Rn.isNaN = function(e) {
//                                 return io(e) && e != +e
//                             }, Rn.isNative = function(e) {
//                                 if (xs(e)) throw new Le("Unsupported core-js use. Try https://npms.io/search?q=ponyfill.");
//                                 return Ai(e)
//                             }, Rn.isNil = function(e) {
//                                 return null == e
//                             }, Rn.isNull = function(e) {
//                                 return null === e
//                             }, Rn.isNumber = io, Rn.isObject = eo, Rn.isObjectLike = to, Rn.isPlainObject = ao, Rn.isRegExp = so, Rn.isSafeInteger = function(e) {
//                                 return Xr(e) && e >= -9007199254740991 && e <= p
//                             }, Rn.isSet = ro, Rn.isString = oo, Rn.isSymbol = lo, Rn.isTypedArray = co, Rn.isUndefined = function(e) {
//                                 return e === a
//                             }, Rn.isWeakMap = function(e) {
//                                 return to(e) && fs(e) == H
//                             }, Rn.isWeakSet = function(e) {
//                                 return to(e) && "[object WeakSet]" == Ti(e)
//                             }, Rn.join = function(e, t) {
//                                 return null == e ? "" : Nt.call(e, t)
//                             }, Rn.kebabCase = Uo, Rn.last = Vs, Rn.lastIndexOf = function(e, t, n) {
//                                 var i = null == e ? 0 : e.length;
//                                 if (!i) return -1;
//                                 var s = i;
//                                 return n !== a && (s = (s = fo(n)) < 0 ? yn(i + s, 0) : wn(s, i - 1)), t == t ? function(e, t, n) {
//                                     for (var i = n + 1; i--;)
//                                         if (e[i] === t) return i;
//                                     return i
//                                 }(e, t, s) : zt(e, Ut, s, !0)
//                             }, Rn.lowerCase = Bo, Rn.lowerFirst = qo, Rn.lt = uo, Rn.lte = ho, Rn.max = function(e) {
//                                 return e && e.length ? gi(e, al, Yi) : a
//                             }, Rn.maxBy = function(e, t) {
//                                 return e && e.length ? gi(e, ds(t, 2), Yi) : a
//                             }, Rn.mean = function(e) {
//                                 return Bt(e, al)
//                             }, Rn.meanBy = function(e, t) {
//                                 return Bt(e, ds(t, 2))
//                             }, Rn.min = function(e) {
//                                 return e && e.length ? gi(e, al, Ii) : a
//                             }, Rn.minBy = function(e, t) {
//                                 return e && e.length ? gi(e, ds(t, 2), Ii) : a
//                             }, Rn.stubArray = gl, Rn.stubFalse = _l, Rn.stubObject = function() {
//                                 return {}
//                             }, Rn.stubString = function() {
//                                 return ""
//                             }, Rn.stubTrue = function() {
//                                 return !0
//                             }, Rn.multiply = xl, Rn.nth = function(e, t) {
//                                 return e && e.length ? Wi(e, fo(t)) : a
//                             }, Rn.noConflict = function() {
//                                 return ft._ === this && (ft._ = Re), this
//                             }, Rn.noop = dl, Rn.now = Tr, Rn.pad = function(e, t, n) {
//                                 e = yo(e);
//                                 var i = (t = fo(t)) ? pn(e) : 0;
//                                 if (!t || i >= t) return e;
//                                 var a = (t - i) / 2;
//                                 return Ua(gt(a), n) + e + Ua(pt(a), n)
//                             }, Rn.padEnd = function(e, t, n) {
//                                 e = yo(e);
//                                 var i = (t = fo(t)) ? pn(e) : 0;
//                                 return t && i < t ? e + Ua(t - i, n) : e
//                             }, Rn.padStart = function(e, t, n) {
//                                 e = yo(e);
//                                 var i = (t = fo(t)) ? pn(e) : 0;
//                                 return t && i < t ? Ua(t - i, n) + e : e
//                             }, Rn.parseInt = function(e, t, n) {
//                                 return n || null == t ? t = 0 : t && (t = +t), Mn(yo(e).replace(re, ""), t || 0)
//                             }, Rn.random = function(e, t, n) {
//                                 if (n && "boolean" != typeof n && ws(e, t, n) && (t = n = a), n === a && ("boolean" == typeof t ? (n = t, t = a) : "boolean" == typeof e && (n = e, e = a)), e === a && t === a ? (e = 0, t = 1) : (e = po(e), t === a ? (t = e, e = 0) : t = po(t)), e > t) {
//                                     var i = e;
//                                     e = t, t = i
//                                 }
//                                 if (n || e % 1 || t % 1) {
//                                     var s = xn();
//                                     return wn(e + s * (t - e + ut("1e-" + ((s + "").length - 1))), t)
//                                 }
//                                 return Ji(e, t)
//                             }, Rn.reduce = function(e, t, n) {
//                                 var i = Wr(e) ? Ot : Jt,
//                                     a = arguments.length < 3;
//                                 return i(e, ds(t, 4), n, a, mi)
//                             }, Rn.reduceRight = function(e, t, n) {
//                                 var i = Wr(e) ? Ft : Jt,
//                                     a = arguments.length < 3;
//                                 return i(e, ds(t, 4), n, a, pi)
//                             }, Rn.repeat = function(e, t, n) {
//                                 return t = (n ? ws(e, t, n) : t === a) ? 1 : fo(t), Vi(yo(e), t)
//                             }, Rn.replace = function() {
//                                 var e = arguments,
//                                     t = yo(e[0]);
//                                 return e.length < 3 ? t : t.replace(e[1], e[2])
//                             }, Rn.result = function(e, t, n) {
//                                 var i = -1,
//                                     s = (t = wa(t, e)).length;
//                                 for (s || (s = 1, e = a); ++i < s;) {
//                                     var r = null == e ? a : e[Os(t[i])];
//                                     r === a && (i = s, r = n), e = Kr(r) ? r.call(e) : r
//                                 }
//                                 return e
//                             }, Rn.round = Ll, Rn.runInContext = e, Rn.sample = function(e) {
//                                 return (Wr(e) ? Xn : Xi)(e)
//                             }, Rn.size = function(e) {
//                                 if (null == e) return 0;
//                                 if (Br(e)) return oo(e) ? pn(e) : e.length;
//                                 var t = fs(e);
//                                 return t == k || t == P ? e.size : Oi(e).length
//                             }, Rn.snakeCase = Go, Rn.some = function(e, t, n) {
//                                 var i = Wr(e) ? It : sa;
//                                 return n && ws(e, t, n) && (t = a), i(e, ds(t, 3))
//                             }, Rn.sortedIndex = function(e, t) {
//                                 return ra(e, t)
//                             }, Rn.sortedIndexBy = function(e, t, n) {
//                                 return oa(e, t, ds(n, 2))
//                             }, Rn.sortedIndexOf = function(e, t) {
//                                 var n = null == e ? 0 : e.length;
//                                 if (n) {
//                                     var i = ra(e, t);
//                                     if (i < n && Nr(e[i], t)) return i
//                                 }
//                                 return -1
//                             }, Rn.sortedLastIndex = function(e, t) {
//                                 return ra(e, t, !0)
//                             }, Rn.sortedLastIndexBy = function(e, t, n) {
//                                 return oa(e, t, ds(n, 2), !0)
//                             }, Rn.sortedLastIndexOf = function(e, t) {
//                                 if (null == e ? 0 : e.length) {
//                                     var n = ra(e, t, !0) - 1;
//                                     if (Nr(e[n], t)) return n
//                                 }
//                                 return -1
//                             }, Rn.startCase = Jo, Rn.startsWith = function(e, t, n) {
//                                 return e = yo(e), n = null == n ? 0 : li(fo(n), 0, e.length), t = ca(t), e.slice(n, n + t.length) == t
//                             }, Rn.subtract = kl, Rn.sum = function(e) {
//                                 return e && e.length ? Vt(e, al) : 0
//                             }, Rn.sumBy = function(e, t) {
//                                 return e && e.length ? Vt(e, ds(t, 2)) : 0
//                             }, Rn.template = function(e, t, n) {
//                                 var i = Rn.templateSettings;
//                                 n && ws(e, t, n) && (t = a), e = yo(e), t = Mo({}, t, i, Qa);
//                                 var s, r, o = Mo({}, t.imports, i.imports, Qa),
//                                     l = Co(o),
//                                     d = en(o, l),
//                                     c = 0,
//                                     u = t.interpolate || Me,
//                                     h = "__p += '",
//                                     m = Se((t.escape || Me).source + "|" + u.source + "|" + (u === ee ? pe : Me).source + "|" + (t.evaluate || Me).source + "|$", "g"),
//                                     p = "//# sourceURL=" + (je.call(t, "sourceURL") ? (t.sourceURL + "").replace(/\s/g, " ") : "lodash.templateSources[" + ++ot + "]") + "\n";
//                                 e.replace(m, (function(t, n, i, a, o, l) {
//                                     return i || (i = a), h += e.slice(c, l).replace(xe, on), n && (s = !0, h += "' +\n__e(" + n + ") +\n'"), o && (r = !0, h += "';\n" + o + ";\n__p += '"), i && (h += "' +\n((__t = (" + i + ")) == null ? '' : __t) +\n'"), c = l + t.length, t
//                                 })), h += "';\n";
//                                 var f = je.call(t, "variable") && t.variable;
//                                 if (f) {
//                                     if (he.test(f)) throw new Le("Invalid `variable` option passed into `_.template`")
//                                 } else h = "with (obj) {\n" + h + "\n}\n";
//                                 h = (r ? h.replace(U, "") : h).replace(B, "$1").replace(q, "$1;"), h = "function(" + (f || "obj") + ") {\n" + (f ? "" : "obj || (obj = {});\n") + "var __t, __p = ''" + (s ? ", __e = _.escape" : "") + (r ? ", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n" : ";\n") + h + "return __p\n}";
//                                 var g = Qo((function() {
//                                     return ke(l, p + "return " + h).apply(a, d)
//                                 }));
//                                 if (g.source = h, Vr(g)) throw g;
//                                 return g
//                             }, Rn.times = function(e, t) {
//                                 if ((e = fo(e)) < 1 || e > p) return [];
//                                 var n = g,
//                                     i = wn(e, g);
//                                 t = ds(t), e -= g;
//                                 for (var a = Kt(i, t); ++n < e;) t(n);
//                                 return a
//                             }, Rn.toFinite = po, Rn.toInteger = fo, Rn.toLength = go, Rn.toLower = function(e) {
//                                 return yo(e).toLowerCase()
//                             }, Rn.toNumber = _o, Rn.toSafeInteger = function(e) {
//                                 return e ? li(fo(e), -9007199254740991, p) : 0 === e ? e : 0
//                             }, Rn.toString = yo, Rn.toUpper = function(e) {
//                                 return yo(e).toUpperCase()
//                             }, Rn.trim = function(e, t, n) {
//                                 if ((e = yo(e)) && (n || t === a)) return Xt(e);
//                                 if (!e || !(t = ca(t))) return e;
//                                 var i = fn(e),
//                                     s = fn(t);
//                                 return Ma(i, nn(i, s), an(i, s) + 1).join("")
//                             }, Rn.trimEnd = function(e, t, n) {
//                                 if ((e = yo(e)) && (n || t === a)) return e.slice(0, gn(e) + 1);
//                                 if (!e || !(t = ca(t))) return e;
//                                 var i = fn(e);
//                                 return Ma(i, 0, an(i, fn(t)) + 1).join("")
//                             }, Rn.trimStart = function(e, t, n) {
//                                 if ((e = yo(e)) && (n || t === a)) return e.replace(re, "");
//                                 if (!e || !(t = ca(t))) return e;
//                                 var i = fn(e);
//                                 return Ma(i, nn(i, fn(t))).join("")
//                             }, Rn.truncate = function(e, t) {
//                                 var n = 30,
//                                     i = "...";
//                                 if (eo(t)) {
//                                     var s = "separator" in t ? t.separator : s;
//                                     n = "length" in t ? fo(t.length) : n, i = "omission" in t ? ca(t.omission) : i
//                                 }
//                                 var r = (e = yo(e)).length;
//                                 if (ln(e)) {
//                                     var o = fn(e);
//                                     r = o.length
//                                 }
//                                 if (n >= r) return e;
//                                 var l = n - pn(i);
//                                 if (l < 1) return i;
//                                 var d = o ? Ma(o, 0, l).join("") : e.slice(0, l);
//                                 if (s === a) return d + i;
//                                 if (o && (l += d.length - l), so(s)) {
//                                     if (e.slice(l).search(s)) {
//                                         var c, u = d;
//                                         for (s.global || (s = Se(s.source, yo(fe.exec(s)) + "g")), s.lastIndex = 0; c = s.exec(u);) var h = c.index;
//                                         d = d.slice(0, h === a ? l : h)
//                                     }
//                                 } else if (e.indexOf(ca(s), l) != l) {
//                                     var m = d.lastIndexOf(s);
//                                     m > -1 && (d = d.slice(0, m))
//                                 }
//                                 return d + i
//                             }, Rn.unescape = function(e) {
//                                 return (e = yo(e)) && V.test(e) ? e.replace(G, _n) : e
//                             }, Rn.uniqueId = function(e) {
//                                 var t = ++Oe;
//                                 return yo(e) + t
//                             }, Rn.upperCase = Vo, Rn.upperFirst = Ko, Rn.each = vr, Rn.eachRight = yr, Rn.first = Bs, ll(Rn, (Ml = {}, bi(Rn, (function(e, t) {
//                                 je.call(Rn.prototype, t) || (Ml[t] = e)
//                             })), Ml), {
//                                 chain: !1
//                             }), Rn.VERSION = "4.17.21", Dt(["bind", "bindKey", "curry", "curryRight", "partial", "partialRight"], (function(e) {
//                                 Rn[e].placeholder = Rn
//                             })), Dt(["drop", "take"], (function(e, t) {
//                                 Un.prototype[e] = function(n) {
//                                     n = n === a ? 1 : yn(fo(n), 0);
//                                     var i = this.__filtered__ && !t ? new Un(this) : this.clone();
//                                     return i.__filtered__ ? i.__takeCount__ = wn(n, i.__takeCount__) : i.__views__.push({
//                                         size: wn(n, g),
//                                         type: e + (i.__dir__ < 0 ? "Right" : "")
//                                     }), i
//                                 }, Un.prototype[e + "Right"] = function(t) {
//                                     return this.reverse()[e](t).reverse()
//                                 }
//                             })), Dt(["filter", "map", "takeWhile"], (function(e, t) {
//                                 var n = t + 1,
//                                     i = 1 == n || 3 == n;
//                                 Un.prototype[e] = function(e) {
//                                     var t = this.clone();
//                                     return t.__iteratees__.push({
//                                         iteratee: ds(e, 3),
//                                         type: n
//                                     }), t.__filtered__ = t.__filtered__ || i, t
//                                 }
//                             })), Dt(["head", "last"], (function(e, t) {
//                                 var n = "take" + (t ? "Right" : "");
//                                 Un.prototype[e] = function() {
//                                     return this[n](1).value()[0]
//                                 }
//                             })), Dt(["initial", "tail"], (function(e, t) {
//                                 var n = "drop" + (t ? "" : "Right");
//                                 Un.prototype[e] = function() {
//                                     return this.__filtered__ ? new Un(this) : this[n](1)
//                                 }
//                             })), Un.prototype.compact = function() {
//                                 return this.filter(al)
//                             }, Un.prototype.find = function(e) {
//                                 return this.filter(e).head()
//                             }, Un.prototype.findLast = function(e) {
//                                 return this.reverse().find(e)
//                             }, Un.prototype.invokeMap = Ki((function(e, t) {
//                                 return "function" == typeof e ? new Un(this) : this.map((function(n) {
//                                     return Ei(n, e, t)
//                                 }))
//                             })), Un.prototype.reject = function(e) {
//                                 return this.filter(Ar(ds(e)))
//                             }, Un.prototype.slice = function(e, t) {
//                                 e = fo(e);
//                                 var n = this;
//                                 return n.__filtered__ && (e > 0 || t < 0) ? new Un(n) : (e < 0 ? n = n.takeRight(-e) : e && (n = n.drop(e)), t !== a && (n = (t = fo(t)) < 0 ? n.dropRight(-t) : n.take(t - e)), n)
//                             }, Un.prototype.takeRightWhile = function(e) {
//                                 return this.reverse().takeWhile(e).reverse()
//                             }, Un.prototype.toArray = function() {
//                                 return this.take(g)
//                             }, bi(Un.prototype, (function(e, t) {
//                                 var n = /^(?:filter|find|map|reject)|While$/.test(t),
//                                     i = /^(?:head|last)$/.test(t),
//                                     s = Rn[i ? "take" + ("last" == t ? "Right" : "") : t],
//                                     r = i || /^find/.test(t);
//                                 s && (Rn.prototype[t] = function() {
//                                     var t = this.__wrapped__,
//                                         o = i ? [1] : arguments,
//                                         l = t instanceof Un,
//                                         d = o[0],
//                                         c = l || Wr(t),
//                                         u = function(e) {
//                                             var t = s.apply(Rn, jt([e], o));
//                                             return i && h ? t[0] : t
//                                         };
//                                     c && n && "function" == typeof d && 1 != d.length && (l = c = !1);
//                                     var h = this.__chain__,
//                                         m = !!this.__actions__.length,
//                                         p = r && !h,
//                                         f = l && !m;
//                                     if (!r && c) {
//                                         t = f ? t : new Un(this);
//                                         var g = e.apply(t, o);
//                                         return g.__actions__.push({
//                                             func: mr,
//                                             args: [u],
//                                             thisArg: a
//                                         }), new Wn(g, h)
//                                     }
//                                     return p && f ? e.apply(this, o) : (g = this.thru(u), p ? i ? g.value()[0] : g.value() : g)
//                                 })
//                             })), Dt(["pop", "push", "shift", "sort", "splice", "unshift"], (function(e) {
//                                 var t = Ee[e],
//                                     n = /^(?:push|sort|unshift)$/.test(e) ? "tap" : "thru",
//                                     i = /^(?:pop|shift)$/.test(e);
//                                 Rn.prototype[e] = function() {
//                                     var e = arguments;
//                                     if (i && !this.__chain__) {
//                                         var a = this.value();
//                                         return t.apply(Wr(a) ? a : [], e)
//                                     }
//                                     return this[n]((function(n) {
//                                         return t.apply(Wr(n) ? n : [], e)
//                                     }))
//                                 }
//                             })), bi(Un.prototype, (function(e, t) {
//                                 var n = Rn[t];
//                                 if (n) {
//                                     var i = n.name + "";
//                                     je.call(Cn, i) || (Cn[i] = []), Cn[i].push({
//                                         name: t,
//                                         func: n
//                                     })
//                                 }
//                             })), Cn[Ra(a, 2).name] = [{
//                                 name: "wrapper",
//                                 func: a
//                             }], Un.prototype.clone = function() {
//                                 var e = new Un(this.__wrapped__);
//                                 return e.__actions__ = Pa(this.__actions__), e.__dir__ = this.__dir__, e.__filtered__ = this.__filtered__, e.__iteratees__ = Pa(this.__iteratees__), e.__takeCount__ = this.__takeCount__, e.__views__ = Pa(this.__views__), e
//                             }, Un.prototype.reverse = function() {
//                                 if (this.__filtered__) {
//                                     var e = new Un(this);
//                                     e.__dir__ = -1, e.__filtered__ = !0
//                                 } else(e = this.clone()).__dir__ *= -1;
//                                 return e
//                             }, Un.prototype.value = function() {
//                                 var e = this.__wrapped__.value(),
//                                     t = this.__dir__,
//                                     n = Wr(e),
//                                     i = t < 0,
//                                     a = n ? e.length : 0,
//                                     s = function(e, t, n) {
//                                         var i = -1,
//                                             a = n.length;
//                                         for (; ++i < a;) {
//                                             var s = n[i],
//                                                 r = s.size;
//                                             switch (s.type) {
//                                                 case "drop":
//                                                     e += r;
//                                                     break;
//                                                 case "dropRight":
//                                                     t -= r;
//                                                     break;
//                                                 case "take":
//                                                     t = wn(t, e + r);
//                                                     break;
//                                                 case "takeRight":
//                                                     e = yn(e, t - r)
//                                             }
//                                         }
//                                         return {
//                                             start: e,
//                                             end: t
//                                         }
//                                     }(0, a, this.__views__),
//                                     r = s.start,
//                                     o = s.end,
//                                     l = o - r,
//                                     d = i ? o : r - 1,
//                                     c = this.__iteratees__,
//                                     u = c.length,
//                                     h = 0,
//                                     m = wn(l, this.__takeCount__);
//                                 if (!n || !i && a == l && m == l) return fa(e, this.__actions__);
//                                 var p = [];
//                                 e: for (; l-- && h < m;) {
//                                     for (var f = -1, g = e[d += t]; ++f < u;) {
//                                         var _ = c[f],
//                                             v = _.iteratee,
//                                             y = _.type,
//                                             w = v(g);
//                                         if (2 == y) g = w;
//                                         else if (!w) {
//                                             if (1 == y) continue e;
//                                             break e
//                                         }
//                                     }
//                                     p[h++] = g
//                                 }
//                                 return p
//                             }, Rn.prototype.at = pr, Rn.prototype.chain = function() {
//                                 return hr(this)
//                             }, Rn.prototype.commit = function() {
//                                 return new Wn(this.value(), this.__chain__)
//                             }, Rn.prototype.next = function() {
//                                 this.__values__ === a && (this.__values__ = mo(this.value()));
//                                 var e = this.__index__ >= this.__values__.length;
//                                 return {
//                                     done: e,
//                                     value: e ? a : this.__values__[this.__index__++]
//                                 }
//                             }, Rn.prototype.plant = function(e) {
//                                 for (var t, n = this; n instanceof $n;) {
//                                     var i = Is(n);
//                                     i.__index__ = 0, i.__values__ = a, t ? s.__wrapped__ = i : t = i;
//                                     var s = i;
//                                     n = n.__wrapped__
//                                 }
//                                 return s.__wrapped__ = e, t
//                             }, Rn.prototype.reverse = function() {
//                                 var e = this.__wrapped__;
//                                 if (e instanceof Un) {
//                                     var t = e;
//                                     return this.__actions__.length && (t = new Un(this)), (t = t.reverse()).__actions__.push({
//                                         func: mr,
//                                         args: [er],
//                                         thisArg: a
//                                     }), new Wn(t, this.__chain__)
//                                 }
//                                 return this.thru(er)
//                             }, Rn.prototype.toJSON = Rn.prototype.valueOf = Rn.prototype.value = function() {
//                                 return fa(this.__wrapped__, this.__actions__)
//                             }, Rn.prototype.first = Rn.prototype.head, Xe && (Rn.prototype[Xe] = function() {
//                                 return this
//                             }), Rn
//                         }();
//                         ft._ = vn, (i = function() {
//                             return vn
//                         }.call(t, n, t, e)) === a || (e.exports = i)
//                     }.call(this)
//             },
//             2786: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("af", {
//                         months: "Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),
//                         monthsShort: "Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),
//                         weekdays: "Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),
//                         weekdaysShort: "Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),
//                         weekdaysMin: "So_Ma_Di_Wo_Do_Vr_Sa".split("_"),
//                         meridiemParse: /vm|nm/i,
//                         isPM: function(e) {
//                             return /^nm$/i.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? n ? "vm" : "VM" : n ? "nm" : "NM"
//                         },
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Vandag om] LT",
//                             nextDay: "[Môre om] LT",
//                             nextWeek: "dddd [om] LT",
//                             lastDay: "[Gister om] LT",
//                             lastWeek: "[Laas] dddd [om] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "oor %s",
//                             past: "%s gelede",
//                             s: "'n paar sekondes",
//                             ss: "%d sekondes",
//                             m: "'n minuut",
//                             mm: "%d minute",
//                             h: "'n uur",
//                             hh: "%d ure",
//                             d: "'n dag",
//                             dd: "%d dae",
//                             M: "'n maand",
//                             MM: "%d maande",
//                             y: "'n jaar",
//                             yy: "%d jaar"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
//                         ordinal: function(e) {
//                             return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4130: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = function(e) {
//                             return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5
//                         },
//                         n = {
//                             s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
//                             m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
//                             h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
//                             d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
//                             M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
//                             y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
//                         },
//                         i = function(e) {
//                             return function(i, a, s, r) {
//                                 var o = t(i),
//                                     l = n[e][t(i)];
//                                 return 2 === o && (l = l[a ? 0 : 1]), l.replace(/%d/i, i)
//                             }
//                         },
//                         a = ["جانفي", "فيفري", "مارس", "أفريل", "ماي", "جوان", "جويلية", "أوت", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"];
//                     e.defineLocale("ar-dz", {
//                         months: a,
//                         monthsShort: a,
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "D/‏M/‏YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ص|م/,
//                         isPM: function(e) {
//                             return "م" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ص" : "م"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم عند الساعة] LT",
//                             nextDay: "[غدًا عند الساعة] LT",
//                             nextWeek: "dddd [عند الساعة] LT",
//                             lastDay: "[أمس عند الساعة] LT",
//                             lastWeek: "dddd [عند الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "بعد %s",
//                             past: "منذ %s",
//                             s: i("s"),
//                             ss: i("s"),
//                             m: i("m"),
//                             mm: i("m"),
//                             h: i("h"),
//                             hh: i("h"),
//                             d: i("d"),
//                             dd: i("d"),
//                             M: i("M"),
//                             MM: i("M"),
//                             y: i("y"),
//                             yy: i("y")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6135: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ar-kw", {
//                         months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
//                         monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
//                         weekdays: "الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم على الساعة] LT",
//                             nextDay: "[غدا على الساعة] LT",
//                             nextWeek: "dddd [على الساعة] LT",
//                             lastDay: "[أمس على الساعة] LT",
//                             lastWeek: "dddd [على الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "في %s",
//                             past: "منذ %s",
//                             s: "ثوان",
//                             ss: "%d ثانية",
//                             m: "دقيقة",
//                             mm: "%d دقائق",
//                             h: "ساعة",
//                             hh: "%d ساعات",
//                             d: "يوم",
//                             dd: "%d أيام",
//                             M: "شهر",
//                             MM: "%d أشهر",
//                             y: "سنة",
//                             yy: "%d سنوات"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             6440: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "1",
//                             2: "2",
//                             3: "3",
//                             4: "4",
//                             5: "5",
//                             6: "6",
//                             7: "7",
//                             8: "8",
//                             9: "9",
//                             0: "0"
//                         },
//                         n = function(e) {
//                             return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5
//                         },
//                         i = {
//                             s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
//                             m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
//                             h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
//                             d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
//                             M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
//                             y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
//                         },
//                         a = function(e) {
//                             return function(t, a, s, r) {
//                                 var o = n(t),
//                                     l = i[e][n(t)];
//                                 return 2 === o && (l = l[a ? 0 : 1]), l.replace(/%d/i, t)
//                             }
//                         },
//                         s = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"];
//                     e.defineLocale("ar-ly", {
//                         months: s,
//                         monthsShort: s,
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "D/‏M/‏YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ص|م/,
//                         isPM: function(e) {
//                             return "م" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ص" : "م"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم عند الساعة] LT",
//                             nextDay: "[غدًا عند الساعة] LT",
//                             nextWeek: "dddd [عند الساعة] LT",
//                             lastDay: "[أمس عند الساعة] LT",
//                             lastWeek: "dddd [عند الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "بعد %s",
//                             past: "منذ %s",
//                             s: a("s"),
//                             ss: a("s"),
//                             m: a("m"),
//                             mm: a("m"),
//                             h: a("h"),
//                             hh: a("h"),
//                             d: a("d"),
//                             dd: a("d"),
//                             M: a("M"),
//                             MM: a("M"),
//                             y: a("y"),
//                             yy: a("y")
//                         },
//                         preparse: function(e) {
//                             return e.replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             })).replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             7702: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ar-ma", {
//                         months: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
//                         monthsShort: "يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم على الساعة] LT",
//                             nextDay: "[غدا على الساعة] LT",
//                             nextWeek: "dddd [على الساعة] LT",
//                             lastDay: "[أمس على الساعة] LT",
//                             lastWeek: "dddd [على الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "في %s",
//                             past: "منذ %s",
//                             s: "ثوان",
//                             ss: "%d ثانية",
//                             m: "دقيقة",
//                             mm: "%d دقائق",
//                             h: "ساعة",
//                             hh: "%d ساعات",
//                             d: "يوم",
//                             dd: "%d أيام",
//                             M: "شهر",
//                             MM: "%d أشهر",
//                             y: "سنة",
//                             yy: "%d سنوات"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6040: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "١",
//                             2: "٢",
//                             3: "٣",
//                             4: "٤",
//                             5: "٥",
//                             6: "٦",
//                             7: "٧",
//                             8: "٨",
//                             9: "٩",
//                             0: "٠"
//                         },
//                         n = {
//                             "١": "1",
//                             "٢": "2",
//                             "٣": "3",
//                             "٤": "4",
//                             "٥": "5",
//                             "٦": "6",
//                             "٧": "7",
//                             "٨": "8",
//                             "٩": "9",
//                             "٠": "0"
//                         };
//                     e.defineLocale("ar-sa", {
//                         months: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
//                         monthsShort: "يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ص|م/,
//                         isPM: function(e) {
//                             return "م" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ص" : "م"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم على الساعة] LT",
//                             nextDay: "[غدا على الساعة] LT",
//                             nextWeek: "dddd [على الساعة] LT",
//                             lastDay: "[أمس على الساعة] LT",
//                             lastWeek: "dddd [على الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "في %s",
//                             past: "منذ %s",
//                             s: "ثوان",
//                             ss: "%d ثانية",
//                             m: "دقيقة",
//                             mm: "%d دقائق",
//                             h: "ساعة",
//                             hh: "%d ساعات",
//                             d: "يوم",
//                             dd: "%d أيام",
//                             M: "شهر",
//                             MM: "%d أشهر",
//                             y: "سنة",
//                             yy: "%d سنوات"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, (function(e) {
//                                 return n[e]
//                             })).replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             })).replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             7100: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ar-tn", {
//                         months: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
//                         monthsShort: "جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم على الساعة] LT",
//                             nextDay: "[غدا على الساعة] LT",
//                             nextWeek: "dddd [على الساعة] LT",
//                             lastDay: "[أمس على الساعة] LT",
//                             lastWeek: "dddd [على الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "في %s",
//                             past: "منذ %s",
//                             s: "ثوان",
//                             ss: "%d ثانية",
//                             m: "دقيقة",
//                             mm: "%d دقائق",
//                             h: "ساعة",
//                             hh: "%d ساعات",
//                             d: "يوم",
//                             dd: "%d أيام",
//                             M: "شهر",
//                             MM: "%d أشهر",
//                             y: "سنة",
//                             yy: "%d سنوات"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             867: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "١",
//                             2: "٢",
//                             3: "٣",
//                             4: "٤",
//                             5: "٥",
//                             6: "٦",
//                             7: "٧",
//                             8: "٨",
//                             9: "٩",
//                             0: "٠"
//                         },
//                         n = {
//                             "١": "1",
//                             "٢": "2",
//                             "٣": "3",
//                             "٤": "4",
//                             "٥": "5",
//                             "٦": "6",
//                             "٧": "7",
//                             "٨": "8",
//                             "٩": "9",
//                             "٠": "0"
//                         },
//                         i = function(e) {
//                             return 0 === e ? 0 : 1 === e ? 1 : 2 === e ? 2 : e % 100 >= 3 && e % 100 <= 10 ? 3 : e % 100 >= 11 ? 4 : 5
//                         },
//                         a = {
//                             s: ["أقل من ثانية", "ثانية واحدة", ["ثانيتان", "ثانيتين"], "%d ثوان", "%d ثانية", "%d ثانية"],
//                             m: ["أقل من دقيقة", "دقيقة واحدة", ["دقيقتان", "دقيقتين"], "%d دقائق", "%d دقيقة", "%d دقيقة"],
//                             h: ["أقل من ساعة", "ساعة واحدة", ["ساعتان", "ساعتين"], "%d ساعات", "%d ساعة", "%d ساعة"],
//                             d: ["أقل من يوم", "يوم واحد", ["يومان", "يومين"], "%d أيام", "%d يومًا", "%d يوم"],
//                             M: ["أقل من شهر", "شهر واحد", ["شهران", "شهرين"], "%d أشهر", "%d شهرا", "%d شهر"],
//                             y: ["أقل من عام", "عام واحد", ["عامان", "عامين"], "%d أعوام", "%d عامًا", "%d عام"]
//                         },
//                         s = function(e) {
//                             return function(t, n, s, r) {
//                                 var o = i(t),
//                                     l = a[e][i(t)];
//                                 return 2 === o && (l = l[n ? 0 : 1]), l.replace(/%d/i, t)
//                             }
//                         },
//                         r = ["يناير", "فبراير", "مارس", "أبريل", "مايو", "يونيو", "يوليو", "أغسطس", "سبتمبر", "أكتوبر", "نوفمبر", "ديسمبر"];
//                     e.defineLocale("ar", {
//                         months: r,
//                         monthsShort: r,
//                         weekdays: "الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),
//                         weekdaysShort: "أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),
//                         weekdaysMin: "ح_ن_ث_ر_خ_ج_س".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "D/‏M/‏YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ص|م/,
//                         isPM: function(e) {
//                             return "م" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ص" : "م"
//                         },
//                         calendar: {
//                             sameDay: "[اليوم عند الساعة] LT",
//                             nextDay: "[غدًا عند الساعة] LT",
//                             nextWeek: "dddd [عند الساعة] LT",
//                             lastDay: "[أمس عند الساعة] LT",
//                             lastWeek: "dddd [عند الساعة] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "بعد %s",
//                             past: "منذ %s",
//                             s: s("s"),
//                             ss: s("s"),
//                             m: s("m"),
//                             mm: s("m"),
//                             h: s("h"),
//                             hh: s("h"),
//                             d: s("d"),
//                             dd: s("d"),
//                             M: s("M"),
//                             MM: s("M"),
//                             y: s("y"),
//                             yy: s("y")
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, (function(e) {
//                                 return n[e]
//                             })).replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             })).replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             1083: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         1: "-inci",
//                         5: "-inci",
//                         8: "-inci",
//                         70: "-inci",
//                         80: "-inci",
//                         2: "-nci",
//                         7: "-nci",
//                         20: "-nci",
//                         50: "-nci",
//                         3: "-üncü",
//                         4: "-üncü",
//                         100: "-üncü",
//                         6: "-ncı",
//                         9: "-uncu",
//                         10: "-uncu",
//                         30: "-uncu",
//                         60: "-ıncı",
//                         90: "-ıncı"
//                     };
//                     e.defineLocale("az", {
//                         months: "yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),
//                         monthsShort: "yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),
//                         weekdays: "Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),
//                         weekdaysShort: "Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),
//                         weekdaysMin: "Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[bugün saat] LT",
//                             nextDay: "[sabah saat] LT",
//                             nextWeek: "[gələn həftə] dddd [saat] LT",
//                             lastDay: "[dünən] LT",
//                             lastWeek: "[keçən həftə] dddd [saat] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s sonra",
//                             past: "%s əvvəl",
//                             s: "bir neçə saniyə",
//                             ss: "%d saniyə",
//                             m: "bir dəqiqə",
//                             mm: "%d dəqiqə",
//                             h: "bir saat",
//                             hh: "%d saat",
//                             d: "bir gün",
//                             dd: "%d gün",
//                             M: "bir ay",
//                             MM: "%d ay",
//                             y: "bir il",
//                             yy: "%d il"
//                         },
//                         meridiemParse: /gecə|səhər|gündüz|axşam/,
//                         isPM: function(e) {
//                             return /^(gündüz|axşam)$/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "gecə" : e < 12 ? "səhər" : e < 17 ? "gündüz" : "axşam"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
//                         ordinal: function(e) {
//                             if (0 === e) return e + "-ıncı";
//                             var n = e % 10,
//                                 i = e % 100 - n,
//                                 a = e >= 100 ? 100 : null;
//                             return e + (t[n] || t[i] || t[a])
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             9808: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t) {
//                         var n = e.split("_");
//                         return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2]
//                     }

//                     function n(e, n, i) {
//                         return "m" === i ? n ? "хвіліна" : "хвіліну" : "h" === i ? n ? "гадзіна" : "гадзіну" : e + " " + t({
//                             ss: n ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
//                             mm: n ? "хвіліна_хвіліны_хвілін" : "хвіліну_хвіліны_хвілін",
//                             hh: n ? "гадзіна_гадзіны_гадзін" : "гадзіну_гадзіны_гадзін",
//                             dd: "дзень_дні_дзён",
//                             MM: "месяц_месяцы_месяцаў",
//                             yy: "год_гады_гадоў"
//                         }[i], +e)
//                     }
//                     e.defineLocale("be", {
//                         months: {
//                             format: "студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),
//                             standalone: "студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")
//                         },
//                         monthsShort: "студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),
//                         weekdays: {
//                             format: "нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),
//                             standalone: "нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),
//                             isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
//                         },
//                         weekdaysShort: "нд_пн_ат_ср_чц_пт_сб".split("_"),
//                         weekdaysMin: "нд_пн_ат_ср_чц_пт_сб".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY г.",
//                             LLL: "D MMMM YYYY г., HH:mm",
//                             LLLL: "dddd, D MMMM YYYY г., HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Сёння ў] LT",
//                             nextDay: "[Заўтра ў] LT",
//                             lastDay: "[Учора ў] LT",
//                             nextWeek: function() {
//                                 return "[У] dddd [ў] LT"
//                             },
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                     case 3:
//                                     case 5:
//                                     case 6:
//                                         return "[У мінулую] dddd [ў] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                         return "[У мінулы] dddd [ў] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "праз %s",
//                             past: "%s таму",
//                             s: "некалькі секунд",
//                             m: n,
//                             mm: n,
//                             h: n,
//                             hh: n,
//                             d: "дзень",
//                             dd: n,
//                             M: "месяц",
//                             MM: n,
//                             y: "год",
//                             yy: n
//                         },
//                         meridiemParse: /ночы|раніцы|дня|вечара/,
//                         isPM: function(e) {
//                             return /^(дня|вечара)$/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "ночы" : e < 12 ? "раніцы" : e < 17 ? "дня" : "вечара"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "M":
//                                 case "d":
//                                 case "DDD":
//                                 case "w":
//                                 case "W":
//                                     return e % 10 != 2 && e % 10 != 3 || e % 100 == 12 || e % 100 == 13 ? e + "-ы" : e + "-і";
//                                 case "D":
//                                     return e + "-га";
//                                 default:
//                                     return e
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             8338: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("bg", {
//                         months: "януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),
//                         monthsShort: "яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),
//                         weekdays: "неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),
//                         weekdaysShort: "нед_пон_вто_сря_чет_пет_съб".split("_"),
//                         weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "D.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY H:mm",
//                             LLLL: "dddd, D MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Днес в] LT",
//                             nextDay: "[Утре в] LT",
//                             nextWeek: "dddd [в] LT",
//                             lastDay: "[Вчера в] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                     case 3:
//                                     case 6:
//                                         return "[Миналата] dddd [в] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[Миналия] dddd [в] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "след %s",
//                             past: "преди %s",
//                             s: "няколко секунди",
//                             ss: "%d секунди",
//                             m: "минута",
//                             mm: "%d минути",
//                             h: "час",
//                             hh: "%d часа",
//                             d: "ден",
//                             dd: "%d дена",
//                             w: "седмица",
//                             ww: "%d седмици",
//                             M: "месец",
//                             MM: "%d месеца",
//                             y: "година",
//                             yy: "%d години"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
//                         ordinal: function(e) {
//                             var t = e % 10,
//                                 n = e % 100;
//                             return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7438: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("bm", {
//                         months: "Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),
//                         monthsShort: "Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),
//                         weekdays: "Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),
//                         weekdaysShort: "Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),
//                         weekdaysMin: "Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "MMMM [tile] D [san] YYYY",
//                             LLL: "MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",
//                             LLLL: "dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Bi lɛrɛ] LT",
//                             nextDay: "[Sini lɛrɛ] LT",
//                             nextWeek: "dddd [don lɛrɛ] LT",
//                             lastDay: "[Kunu lɛrɛ] LT",
//                             lastWeek: "dddd [tɛmɛnen lɛrɛ] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s kɔnɔ",
//                             past: "a bɛ %s bɔ",
//                             s: "sanga dama dama",
//                             ss: "sekondi %d",
//                             m: "miniti kelen",
//                             mm: "miniti %d",
//                             h: "lɛrɛ kelen",
//                             hh: "lɛrɛ %d",
//                             d: "tile kelen",
//                             dd: "tile %d",
//                             M: "kalo kelen",
//                             MM: "kalo %d",
//                             y: "san kelen",
//                             yy: "san %d"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6225: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "১",
//                             2: "২",
//                             3: "৩",
//                             4: "৪",
//                             5: "৫",
//                             6: "৬",
//                             7: "৭",
//                             8: "৮",
//                             9: "৯",
//                             0: "০"
//                         },
//                         n = {
//                             "১": "1",
//                             "২": "2",
//                             "৩": "3",
//                             "৪": "4",
//                             "৫": "5",
//                             "৬": "6",
//                             "৭": "7",
//                             "৮": "8",
//                             "৯": "9",
//                             "০": "0"
//                         };
//                     e.defineLocale("bn-bd", {
//                         months: "জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
//                         monthsShort: "জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
//                         weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
//                         weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
//                         weekdaysMin: "রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm সময়",
//                             LTS: "A h:mm:ss সময়",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm সময়",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
//                         },
//                         calendar: {
//                             sameDay: "[আজ] LT",
//                             nextDay: "[আগামীকাল] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[গতকাল] LT",
//                             lastWeek: "[গত] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s পরে",
//                             past: "%s আগে",
//                             s: "কয়েক সেকেন্ড",
//                             ss: "%d সেকেন্ড",
//                             m: "এক মিনিট",
//                             mm: "%d মিনিট",
//                             h: "এক ঘন্টা",
//                             hh: "%d ঘন্টা",
//                             d: "এক দিন",
//                             dd: "%d দিন",
//                             M: "এক মাস",
//                             MM: "%d মাস",
//                             y: "এক বছর",
//                             yy: "%d বছর"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[১২৩৪৫৬৭৮৯০]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "রাত" === t ? e < 4 ? e : e + 12 : "ভোর" === t || "সকাল" === t ? e : "দুপুর" === t ? e >= 3 ? e : e + 12 : "বিকাল" === t || "সন্ধ্যা" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "রাত" : e < 6 ? "ভোর" : e < 12 ? "সকাল" : e < 15 ? "দুপুর" : e < 18 ? "বিকাল" : e < 20 ? "সন্ধ্যা" : "রাত"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             8905: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "১",
//                             2: "২",
//                             3: "৩",
//                             4: "৪",
//                             5: "৫",
//                             6: "৬",
//                             7: "৭",
//                             8: "৮",
//                             9: "৯",
//                             0: "০"
//                         },
//                         n = {
//                             "১": "1",
//                             "২": "2",
//                             "৩": "3",
//                             "৪": "4",
//                             "৫": "5",
//                             "৬": "6",
//                             "৭": "7",
//                             "৮": "8",
//                             "৯": "9",
//                             "০": "0"
//                         };
//                     e.defineLocale("bn", {
//                         months: "জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),
//                         monthsShort: "জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),
//                         weekdays: "রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),
//                         weekdaysShort: "রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),
//                         weekdaysMin: "রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm সময়",
//                             LTS: "A h:mm:ss সময়",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm সময়",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm সময়"
//                         },
//                         calendar: {
//                             sameDay: "[আজ] LT",
//                             nextDay: "[আগামীকাল] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[গতকাল] LT",
//                             lastWeek: "[গত] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s পরে",
//                             past: "%s আগে",
//                             s: "কয়েক সেকেন্ড",
//                             ss: "%d সেকেন্ড",
//                             m: "এক মিনিট",
//                             mm: "%d মিনিট",
//                             h: "এক ঘন্টা",
//                             hh: "%d ঘন্টা",
//                             d: "এক দিন",
//                             dd: "%d দিন",
//                             M: "এক মাস",
//                             MM: "%d মাস",
//                             y: "এক বছর",
//                             yy: "%d বছর"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[১২৩৪৫৬৭৮৯০]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "রাত" === t && e >= 4 || "দুপুর" === t && e < 5 || "বিকাল" === t ? e + 12 : e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "রাত" : e < 10 ? "সকাল" : e < 17 ? "দুপুর" : e < 20 ? "বিকাল" : "রাত"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             1560: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "༡",
//                             2: "༢",
//                             3: "༣",
//                             4: "༤",
//                             5: "༥",
//                             6: "༦",
//                             7: "༧",
//                             8: "༨",
//                             9: "༩",
//                             0: "༠"
//                         },
//                         n = {
//                             "༡": "1",
//                             "༢": "2",
//                             "༣": "3",
//                             "༤": "4",
//                             "༥": "5",
//                             "༦": "6",
//                             "༧": "7",
//                             "༨": "8",
//                             "༩": "9",
//                             "༠": "0"
//                         };
//                     e.defineLocale("bo", {
//                         months: "ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),
//                         monthsShort: "ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),
//                         monthsShortRegex: /^(ཟླ་\d{1,2})/,
//                         monthsParseExact: !0,
//                         weekdays: "གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),
//                         weekdaysShort: "ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),
//                         weekdaysMin: "ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm",
//                             LTS: "A h:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm"
//                         },
//                         calendar: {
//                             sameDay: "[དི་རིང] LT",
//                             nextDay: "[སང་ཉིན] LT",
//                             nextWeek: "[བདུན་ཕྲག་རྗེས་མ], LT",
//                             lastDay: "[ཁ་སང] LT",
//                             lastWeek: "[བདུན་ཕྲག་མཐའ་མ] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s ལ་",
//                             past: "%s སྔན་ལ",
//                             s: "ལམ་སང",
//                             ss: "%d སྐར་ཆ།",
//                             m: "སྐར་མ་གཅིག",
//                             mm: "%d སྐར་མ",
//                             h: "ཆུ་ཚོད་གཅིག",
//                             hh: "%d ཆུ་ཚོད",
//                             d: "ཉིན་གཅིག",
//                             dd: "%d ཉིན་",
//                             M: "ཟླ་བ་གཅིག",
//                             MM: "%d ཟླ་བ",
//                             y: "ལོ་གཅིག",
//                             yy: "%d ལོ"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "མཚན་མོ" === t && e >= 4 || "ཉིན་གུང" === t && e < 5 || "དགོང་དག" === t ? e + 12 : e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "མཚན་མོ" : e < 10 ? "ཞོགས་ཀས" : e < 17 ? "ཉིན་གུང" : e < 20 ? "དགོང་དག" : "མཚན་མོ"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             1278: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n) {
//                         return e + " " + a({
//                             mm: "munutenn",
//                             MM: "miz",
//                             dd: "devezh"
//                         }[n], e)
//                     }

//                     function n(e) {
//                         switch (i(e)) {
//                             case 1:
//                             case 3:
//                             case 4:
//                             case 5:
//                             case 9:
//                                 return e + " bloaz";
//                             default:
//                                 return e + " vloaz"
//                         }
//                     }

//                     function i(e) {
//                         return e > 9 ? i(e % 10) : e
//                     }

//                     function a(e, t) {
//                         return 2 === t ? s(e) : e
//                     }

//                     function s(e) {
//                         var t = {
//                             m: "v",
//                             b: "v",
//                             d: "z"
//                         };
//                         return void 0 === t[e.charAt(0)] ? e : t[e.charAt(0)] + e.substring(1)
//                     }
//                     var r = [/^gen/i, /^c[ʼ\']hwe/i, /^meu/i, /^ebr/i, /^mae/i, /^(mez|eve)/i, /^gou/i, /^eos/i, /^gwe/i, /^her/i, /^du/i, /^ker/i],
//                         o = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
//                         l = /^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,
//                         d = /^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,
//                         c = [/^sul/i, /^lun/i, /^meurzh/i, /^merc[ʼ\']her/i, /^yaou/i, /^gwener/i, /^sadorn/i],
//                         u = [/^Sul/i, /^Lun/i, /^Meu/i, /^Mer/i, /^Yao/i, /^Gwe/i, /^Sad/i],
//                         h = [/^Su/i, /^Lu/i, /^Me([^r]|$)/i, /^Mer/i, /^Ya/i, /^Gw/i, /^Sa/i];
//                     e.defineLocale("br", {
//                         months: "Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),
//                         monthsShort: "Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),
//                         weekdays: "Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),
//                         weekdaysShort: "Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),
//                         weekdaysMin: "Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),
//                         weekdaysParse: h,
//                         fullWeekdaysParse: c,
//                         shortWeekdaysParse: u,
//                         minWeekdaysParse: h,
//                         monthsRegex: o,
//                         monthsShortRegex: o,
//                         monthsStrictRegex: l,
//                         monthsShortStrictRegex: d,
//                         monthsParse: r,
//                         longMonthsParse: r,
//                         shortMonthsParse: r,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [a viz] MMMM YYYY",
//                             LLL: "D [a viz] MMMM YYYY HH:mm",
//                             LLLL: "dddd, D [a viz] MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Hiziv da] LT",
//                             nextDay: "[Warcʼhoazh da] LT",
//                             nextWeek: "dddd [da] LT",
//                             lastDay: "[Decʼh da] LT",
//                             lastWeek: "dddd [paset da] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "a-benn %s",
//                             past: "%s ʼzo",
//                             s: "un nebeud segondennoù",
//                             ss: "%d eilenn",
//                             m: "ur vunutenn",
//                             mm: t,
//                             h: "un eur",
//                             hh: "%d eur",
//                             d: "un devezh",
//                             dd: t,
//                             M: "ur miz",
//                             MM: t,
//                             y: "ur bloaz",
//                             yy: n
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
//                         ordinal: function(e) {
//                             return e + (1 === e ? "añ" : "vet")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         },
//                         meridiemParse: /a.m.|g.m./,
//                         isPM: function(e) {
//                             return "g.m." === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "a.m." : "g.m."
//                         }
//                     })
//                 }(n(381))
//             },
//             622: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n) {
//                         var i = e + " ";
//                         switch (n) {
//                             case "ss":
//                                 return i += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";
//                             case "m":
//                                 return t ? "jedna minuta" : "jedne minute";
//                             case "mm":
//                                 return i += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";
//                             case "h":
//                                 return t ? "jedan sat" : "jednog sata";
//                             case "hh":
//                                 return i += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";
//                             case "dd":
//                                 return i += 1 === e ? "dan" : "dana";
//                             case "MM":
//                                 return i += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";
//                             case "yy":
//                                 return i += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina"
//                         }
//                     }
//                     e.defineLocale("bs", {
//                         months: "januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),
//                         monthsShort: "jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
//                         weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
//                         weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd, D. MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[danas u] LT",
//                             nextDay: "[sutra u] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[u] [nedjelju] [u] LT";
//                                     case 3:
//                                         return "[u] [srijedu] [u] LT";
//                                     case 6:
//                                         return "[u] [subotu] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[u] dddd [u] LT"
//                                 }
//                             },
//                             lastDay: "[jučer u] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                     case 3:
//                                         return "[prošlu] dddd [u] LT";
//                                     case 6:
//                                         return "[prošle] [subote] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[prošli] dddd [u] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "prije %s",
//                             s: "par sekundi",
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: "dan",
//                             dd: t,
//                             M: "mjesec",
//                             MM: t,
//                             y: "godinu",
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             4360: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ca", {
//                         months: {
//                             standalone: "gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),
//                             format: "de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),
//                             isFormat: /D[oD]?(\s)+MMMM/
//                         },
//                         monthsShort: "gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),
//                         weekdaysShort: "dg._dl._dt._dc._dj._dv._ds.".split("_"),
//                         weekdaysMin: "dg_dl_dt_dc_dj_dv_ds".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM [de] YYYY",
//                             ll: "D MMM YYYY",
//                             LLL: "D MMMM [de] YYYY [a les] H:mm",
//                             lll: "D MMM YYYY, H:mm",
//                             LLLL: "dddd D MMMM [de] YYYY [a les] H:mm",
//                             llll: "ddd D MMM YYYY, H:mm"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[avui a " + (1 !== this.hours() ? "les" : "la") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[demà a " + (1 !== this.hours() ? "les" : "la") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a " + (1 !== this.hours() ? "les" : "la") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[ahir a " + (1 !== this.hours() ? "les" : "la") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[el] dddd [passat a " + (1 !== this.hours() ? "les" : "la") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "d'aquí %s",
//                             past: "fa %s",
//                             s: "uns segons",
//                             ss: "%d segons",
//                             m: "un minut",
//                             mm: "%d minuts",
//                             h: "una hora",
//                             hh: "%d hores",
//                             d: "un dia",
//                             dd: "%d dies",
//                             M: "un mes",
//                             MM: "%d mesos",
//                             y: "un any",
//                             yy: "%d anys"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
//                         ordinal: function(e, t) {
//                             var n = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è";
//                             return "w" !== t && "W" !== t || (n = "a"), e + n
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5822: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             format: "leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),
//                             standalone: "ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_")
//                         },
//                         n = "led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),
//                         i = [/^led/i, /^úno/i, /^bře/i, /^dub/i, /^kvě/i, /^(čvn|červen$|června)/i, /^(čvc|červenec|července)/i, /^srp/i, /^zář/i, /^říj/i, /^lis/i, /^pro/i],
//                         a = /^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;

//                     function s(e) {
//                         return e > 1 && e < 5 && 1 != ~~(e / 10)
//                     }

//                     function r(e, t, n, i) {
//                         var a = e + " ";
//                         switch (n) {
//                             case "s":
//                                 return t || i ? "pár sekund" : "pár sekundami";
//                             case "ss":
//                                 return t || i ? a + (s(e) ? "sekundy" : "sekund") : a + "sekundami";
//                             case "m":
//                                 return t ? "minuta" : i ? "minutu" : "minutou";
//                             case "mm":
//                                 return t || i ? a + (s(e) ? "minuty" : "minut") : a + "minutami";
//                             case "h":
//                                 return t ? "hodina" : i ? "hodinu" : "hodinou";
//                             case "hh":
//                                 return t || i ? a + (s(e) ? "hodiny" : "hodin") : a + "hodinami";
//                             case "d":
//                                 return t || i ? "den" : "dnem";
//                             case "dd":
//                                 return t || i ? a + (s(e) ? "dny" : "dní") : a + "dny";
//                             case "M":
//                                 return t || i ? "měsíc" : "měsícem";
//                             case "MM":
//                                 return t || i ? a + (s(e) ? "měsíce" : "měsíců") : a + "měsíci";
//                             case "y":
//                                 return t || i ? "rok" : "rokem";
//                             case "yy":
//                                 return t || i ? a + (s(e) ? "roky" : "let") : a + "lety"
//                         }
//                     }
//                     e.defineLocale("cs", {
//                         months: t,
//                         monthsShort: n,
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,
//                         monthsShortStrictRegex: /^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),
//                         weekdaysShort: "ne_po_út_st_čt_pá_so".split("_"),
//                         weekdaysMin: "ne_po_út_st_čt_pá_so".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd D. MMMM YYYY H:mm",
//                             l: "D. M. YYYY"
//                         },
//                         calendar: {
//                             sameDay: "[dnes v] LT",
//                             nextDay: "[zítra v] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[v neděli v] LT";
//                                     case 1:
//                                     case 2:
//                                         return "[v] dddd [v] LT";
//                                     case 3:
//                                         return "[ve středu v] LT";
//                                     case 4:
//                                         return "[ve čtvrtek v] LT";
//                                     case 5:
//                                         return "[v pátek v] LT";
//                                     case 6:
//                                         return "[v sobotu v] LT"
//                                 }
//                             },
//                             lastDay: "[včera v] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[minulou neděli v] LT";
//                                     case 1:
//                                     case 2:
//                                         return "[minulé] dddd [v] LT";
//                                     case 3:
//                                         return "[minulou středu v] LT";
//                                     case 4:
//                                     case 5:
//                                         return "[minulý] dddd [v] LT";
//                                     case 6:
//                                         return "[minulou sobotu v] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "před %s",
//                             s: r,
//                             ss: r,
//                             m: r,
//                             mm: r,
//                             h: r,
//                             hh: r,
//                             d: r,
//                             dd: r,
//                             M: r,
//                             MM: r,
//                             y: r,
//                             yy: r
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             877: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("cv", {
//                         months: "кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),
//                         monthsShort: "кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),
//                         weekdays: "вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),
//                         weekdaysShort: "выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),
//                         weekdaysMin: "вр_тн_ыт_юн_кҫ_эр_шм".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD-MM-YYYY",
//                             LL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",
//                             LLL: "YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",
//                             LLLL: "dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Паян] LT [сехетре]",
//                             nextDay: "[Ыран] LT [сехетре]",
//                             lastDay: "[Ӗнер] LT [сехетре]",
//                             nextWeek: "[Ҫитес] dddd LT [сехетре]",
//                             lastWeek: "[Иртнӗ] dddd LT [сехетре]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: function(e) {
//                                 return e + (/сехет$/i.exec(e) ? "рен" : /ҫул$/i.exec(e) ? "тан" : "ран")
//                             },
//                             past: "%s каялла",
//                             s: "пӗр-ик ҫеккунт",
//                             ss: "%d ҫеккунт",
//                             m: "пӗр минут",
//                             mm: "%d минут",
//                             h: "пӗр сехет",
//                             hh: "%d сехет",
//                             d: "пӗр кун",
//                             dd: "%d кун",
//                             M: "пӗр уйӑх",
//                             MM: "%d уйӑх",
//                             y: "пӗр ҫул",
//                             yy: "%d ҫул"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
//                         ordinal: "%d-мӗш",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7373: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("cy", {
//                         months: "Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),
//                         monthsShort: "Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),
//                         weekdays: "Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),
//                         weekdaysShort: "Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),
//                         weekdaysMin: "Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Heddiw am] LT",
//                             nextDay: "[Yfory am] LT",
//                             nextWeek: "dddd [am] LT",
//                             lastDay: "[Ddoe am] LT",
//                             lastWeek: "dddd [diwethaf am] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "mewn %s",
//                             past: "%s yn ôl",
//                             s: "ychydig eiliadau",
//                             ss: "%d eiliad",
//                             m: "munud",
//                             mm: "%d munud",
//                             h: "awr",
//                             hh: "%d awr",
//                             d: "diwrnod",
//                             dd: "%d diwrnod",
//                             M: "mis",
//                             MM: "%d mis",
//                             y: "blwyddyn",
//                             yy: "%d flynedd"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
//                         ordinal: function(e) {
//                             var t = "";
//                             return e > 20 ? t = 40 === e || 50 === e || 60 === e || 80 === e || 100 === e ? "fed" : "ain" : e > 0 && (t = ["", "af", "il", "ydd", "ydd", "ed", "ed", "ed", "fed", "fed", "fed", "eg", "fed", "eg", "eg", "fed", "eg", "eg", "fed", "eg", "fed"][e]), e + t
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4780: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("da", {
//                         months: "januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),
//                         monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
//                         weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
//                         weekdaysShort: "søn_man_tir_ons_tor_fre_lør".split("_"),
//                         weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY HH:mm",
//                             LLLL: "dddd [d.] D. MMMM YYYY [kl.] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[i dag kl.] LT",
//                             nextDay: "[i morgen kl.] LT",
//                             nextWeek: "på dddd [kl.] LT",
//                             lastDay: "[i går kl.] LT",
//                             lastWeek: "[i] dddd[s kl.] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "om %s",
//                             past: "%s siden",
//                             s: "få sekunder",
//                             ss: "%d sekunder",
//                             m: "et minut",
//                             mm: "%d minutter",
//                             h: "en time",
//                             hh: "%d timer",
//                             d: "en dag",
//                             dd: "%d dage",
//                             M: "en måned",
//                             MM: "%d måneder",
//                             y: "et år",
//                             yy: "%d år"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             217: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             m: ["eine Minute", "einer Minute"],
//                             h: ["eine Stunde", "einer Stunde"],
//                             d: ["ein Tag", "einem Tag"],
//                             dd: [e + " Tage", e + " Tagen"],
//                             w: ["eine Woche", "einer Woche"],
//                             M: ["ein Monat", "einem Monat"],
//                             MM: [e + " Monate", e + " Monaten"],
//                             y: ["ein Jahr", "einem Jahr"],
//                             yy: [e + " Jahre", e + " Jahren"]
//                         };
//                         return t ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("de-at", {
//                         months: "Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
//                         monthsShort: "Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
//                         weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
//                         weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY HH:mm",
//                             LLLL: "dddd, D. MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[heute um] LT [Uhr]",
//                             sameElse: "L",
//                             nextDay: "[morgen um] LT [Uhr]",
//                             nextWeek: "dddd [um] LT [Uhr]",
//                             lastDay: "[gestern um] LT [Uhr]",
//                             lastWeek: "[letzten] dddd [um] LT [Uhr]"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "vor %s",
//                             s: "ein paar Sekunden",
//                             ss: "%d Sekunden",
//                             m: t,
//                             mm: "%d Minuten",
//                             h: t,
//                             hh: "%d Stunden",
//                             d: t,
//                             dd: t,
//                             w: t,
//                             ww: "%d Wochen",
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             894: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             m: ["eine Minute", "einer Minute"],
//                             h: ["eine Stunde", "einer Stunde"],
//                             d: ["ein Tag", "einem Tag"],
//                             dd: [e + " Tage", e + " Tagen"],
//                             w: ["eine Woche", "einer Woche"],
//                             M: ["ein Monat", "einem Monat"],
//                             MM: [e + " Monate", e + " Monaten"],
//                             y: ["ein Jahr", "einem Jahr"],
//                             yy: [e + " Jahre", e + " Jahren"]
//                         };
//                         return t ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("de-ch", {
//                         months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
//                         monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
//                         weekdaysShort: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
//                         weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY HH:mm",
//                             LLLL: "dddd, D. MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[heute um] LT [Uhr]",
//                             sameElse: "L",
//                             nextDay: "[morgen um] LT [Uhr]",
//                             nextWeek: "dddd [um] LT [Uhr]",
//                             lastDay: "[gestern um] LT [Uhr]",
//                             lastWeek: "[letzten] dddd [um] LT [Uhr]"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "vor %s",
//                             s: "ein paar Sekunden",
//                             ss: "%d Sekunden",
//                             m: t,
//                             mm: "%d Minuten",
//                             h: t,
//                             hh: "%d Stunden",
//                             d: t,
//                             dd: t,
//                             w: t,
//                             ww: "%d Wochen",
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9740: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             m: ["eine Minute", "einer Minute"],
//                             h: ["eine Stunde", "einer Stunde"],
//                             d: ["ein Tag", "einem Tag"],
//                             dd: [e + " Tage", e + " Tagen"],
//                             w: ["eine Woche", "einer Woche"],
//                             M: ["ein Monat", "einem Monat"],
//                             MM: [e + " Monate", e + " Monaten"],
//                             y: ["ein Jahr", "einem Jahr"],
//                             yy: [e + " Jahre", e + " Jahren"]
//                         };
//                         return t ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("de", {
//                         months: "Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
//                         monthsShort: "Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),
//                         weekdaysShort: "So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),
//                         weekdaysMin: "So_Mo_Di_Mi_Do_Fr_Sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY HH:mm",
//                             LLLL: "dddd, D. MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[heute um] LT [Uhr]",
//                             sameElse: "L",
//                             nextDay: "[morgen um] LT [Uhr]",
//                             nextWeek: "dddd [um] LT [Uhr]",
//                             lastDay: "[gestern um] LT [Uhr]",
//                             lastWeek: "[letzten] dddd [um] LT [Uhr]"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "vor %s",
//                             s: "ein paar Sekunden",
//                             ss: "%d Sekunden",
//                             m: t,
//                             mm: "%d Minuten",
//                             h: t,
//                             hh: "%d Stunden",
//                             d: t,
//                             dd: t,
//                             w: t,
//                             ww: "%d Wochen",
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5300: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = ["ޖެނުއަރީ", "ފެބްރުއަރީ", "މާރިޗު", "އޭޕްރީލު", "މޭ", "ޖޫން", "ޖުލައި", "އޯގަސްޓު", "ސެޕްޓެމްބަރު", "އޮކްޓޯބަރު", "ނޮވެމްބަރު", "ޑިސެމްބަރު"],
//                         n = ["އާދިއްތަ", "ހޯމަ", "އަންގާރަ", "ބުދަ", "ބުރާސްފަތި", "ހުކުރު", "ހޮނިހިރު"];
//                     e.defineLocale("dv", {
//                         months: t,
//                         monthsShort: t,
//                         weekdays: n,
//                         weekdaysShort: n,
//                         weekdaysMin: "އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "D/M/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /މކ|މފ/,
//                         isPM: function(e) {
//                             return "މފ" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "މކ" : "މފ"
//                         },
//                         calendar: {
//                             sameDay: "[މިއަދު] LT",
//                             nextDay: "[މާދަމާ] LT",
//                             nextWeek: "dddd LT",
//                             lastDay: "[އިއްޔެ] LT",
//                             lastWeek: "[ފާއިތުވި] dddd LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "ތެރޭގައި %s",
//                             past: "ކުރިން %s",
//                             s: "ސިކުންތުކޮޅެއް",
//                             ss: "d% ސިކުންތު",
//                             m: "މިނިޓެއް",
//                             mm: "މިނިޓު %d",
//                             h: "ގަޑިއިރެއް",
//                             hh: "ގަޑިއިރު %d",
//                             d: "ދުވަހެއް",
//                             dd: "ދުވަސް %d",
//                             M: "މަހެއް",
//                             MM: "މަސް %d",
//                             y: "އަހަރެއް",
//                             yy: "އަހަރު %d"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 7,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             837: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e) {
//                         return "undefined" != typeof Function && e instanceof Function || "[object Function]" === Object.prototype.toString.call(e)
//                     }
//                     e.defineLocale("el", {
//                         monthsNominativeEl: "Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),
//                         monthsGenitiveEl: "Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),
//                         months: function(e, t) {
//                             return e ? "string" == typeof t && /D/.test(t.substring(0, t.indexOf("MMMM"))) ? this._monthsGenitiveEl[e.month()] : this._monthsNominativeEl[e.month()] : this._monthsNominativeEl
//                         },
//                         monthsShort: "Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),
//                         weekdays: "Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),
//                         weekdaysShort: "Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),
//                         weekdaysMin: "Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),
//                         meridiem: function(e, t, n) {
//                             return e > 11 ? n ? "μμ" : "ΜΜ" : n ? "πμ" : "ΠΜ"
//                         },
//                         isPM: function(e) {
//                             return "μ" === (e + "").toLowerCase()[0]
//                         },
//                         meridiemParse: /[ΠΜ]\.?Μ?\.?/i,
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendarEl: {
//                             sameDay: "[Σήμερα {}] LT",
//                             nextDay: "[Αύριο {}] LT",
//                             nextWeek: "dddd [{}] LT",
//                             lastDay: "[Χθες {}] LT",
//                             lastWeek: function() {
//                                 return 6 === this.day() ? "[το προηγούμενο] dddd [{}] LT" : "[την προηγούμενη] dddd [{}] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         calendar: function(e, n) {
//                             var i = this._calendarEl[e],
//                                 a = n && n.hours();
//                             return t(i) && (i = i.apply(n)), i.replace("{}", a % 12 == 1 ? "στη" : "στις")
//                         },
//                         relativeTime: {
//                             future: "σε %s",
//                             past: "%s πριν",
//                             s: "λίγα δευτερόλεπτα",
//                             ss: "%d δευτερόλεπτα",
//                             m: "ένα λεπτό",
//                             mm: "%d λεπτά",
//                             h: "μία ώρα",
//                             hh: "%d ώρες",
//                             d: "μία μέρα",
//                             dd: "%d μέρες",
//                             M: "ένας μήνας",
//                             MM: "%d μήνες",
//                             y: "ένας χρόνος",
//                             yy: "%d χρόνια"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}η/,
//                         ordinal: "%dη",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             8348: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-au", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7925: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-ca", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "YYYY-MM-DD",
//                             LL: "MMMM D, YYYY",
//                             LLL: "MMMM D, YYYY h:mm A",
//                             LLLL: "dddd, MMMM D, YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         }
//                     })
//                 }(n(381))
//             },
//             2243: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-gb", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6436: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-ie", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7207: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-il", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         }
//                     })
//                 }(n(381))
//             },
//             4175: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-in", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             6319: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-nz", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             1626: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("en-sg", {
//                         months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Today at] LT",
//                             nextDay: "[Tomorrow at] LT",
//                             nextWeek: "dddd [at] LT",
//                             lastDay: "[Yesterday at] LT",
//                             lastWeek: "[Last] dddd [at] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "in %s",
//                             past: "%s ago",
//                             s: "a few seconds",
//                             ss: "%d seconds",
//                             m: "a minute",
//                             mm: "%d minutes",
//                             h: "an hour",
//                             hh: "%d hours",
//                             d: "a day",
//                             dd: "%d days",
//                             M: "a month",
//                             MM: "%d months",
//                             y: "a year",
//                             yy: "%d years"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             2915: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("eo", {
//                         months: "januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),
//                         monthsShort: "jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),
//                         weekdays: "dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),
//                         weekdaysShort: "dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),
//                         weekdaysMin: "di_lu_ma_me_ĵa_ve_sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "[la] D[-an de] MMMM, YYYY",
//                             LLL: "[la] D[-an de] MMMM, YYYY HH:mm",
//                             LLLL: "dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",
//                             llll: "ddd, [la] D[-an de] MMM, YYYY HH:mm"
//                         },
//                         meridiemParse: /[ap]\.t\.m/i,
//                         isPM: function(e) {
//                             return "p" === e.charAt(0).toLowerCase()
//                         },
//                         meridiem: function(e, t, n) {
//                             return e > 11 ? n ? "p.t.m." : "P.T.M." : n ? "a.t.m." : "A.T.M."
//                         },
//                         calendar: {
//                             sameDay: "[Hodiaŭ je] LT",
//                             nextDay: "[Morgaŭ je] LT",
//                             nextWeek: "dddd[n je] LT",
//                             lastDay: "[Hieraŭ je] LT",
//                             lastWeek: "[pasintan] dddd[n je] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "post %s",
//                             past: "antaŭ %s",
//                             s: "kelkaj sekundoj",
//                             ss: "%d sekundoj",
//                             m: "unu minuto",
//                             mm: "%d minutoj",
//                             h: "unu horo",
//                             hh: "%d horoj",
//                             d: "unu tago",
//                             dd: "%d tagoj",
//                             M: "unu monato",
//                             MM: "%d monatoj",
//                             y: "unu jaro",
//                             yy: "%d jaroj"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}a/,
//                         ordinal: "%da",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             2088: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
//                         n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
//                         i = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
//                         a = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
//                     e.defineLocale("es-do", {
//                         months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
//                         monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
//                         weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
//                         weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY h:mm A",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "en %s",
//                             past: "hace %s",
//                             s: "unos segundos",
//                             ss: "%d segundos",
//                             m: "un minuto",
//                             mm: "%d minutos",
//                             h: "una hora",
//                             hh: "%d horas",
//                             d: "un día",
//                             dd: "%d días",
//                             w: "una semana",
//                             ww: "%d semanas",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un año",
//                             yy: "%d años"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6112: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
//                         n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
//                         i = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
//                         a = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
//                     e.defineLocale("es-mx", {
//                         months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
//                         monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
//                         weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
//                         weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY H:mm",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "en %s",
//                             past: "hace %s",
//                             s: "unos segundos",
//                             ss: "%d segundos",
//                             m: "un minuto",
//                             mm: "%d minutos",
//                             h: "una hora",
//                             hh: "%d horas",
//                             d: "un día",
//                             dd: "%d días",
//                             w: "una semana",
//                             ww: "%d semanas",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un año",
//                             yy: "%d años"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 0,
//                             doy: 4
//                         },
//                         invalidDate: "Fecha inválida"
//                     })
//                 }(n(381))
//             },
//             1146: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
//                         n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
//                         i = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
//                         a = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
//                     e.defineLocale("es-us", {
//                         months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
//                         monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
//                         weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
//                         weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "MM/DD/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY h:mm A",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "en %s",
//                             past: "hace %s",
//                             s: "unos segundos",
//                             ss: "%d segundos",
//                             m: "un minuto",
//                             mm: "%d minutos",
//                             h: "una hora",
//                             hh: "%d horas",
//                             d: "un día",
//                             dd: "%d días",
//                             w: "una semana",
//                             ww: "%d semanas",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un año",
//                             yy: "%d años"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             5655: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),
//                         n = "ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),
//                         i = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i],
//                         a = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;
//                     e.defineLocale("es", {
//                         months: "enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
//                         monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),
//                         weekdaysShort: "dom._lun._mar._mié._jue._vie._sáb.".split("_"),
//                         weekdaysMin: "do_lu_ma_mi_ju_vi_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY H:mm",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[hoy a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[mañana a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[ayer a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[el] dddd [pasado a la" + (1 !== this.hours() ? "s" : "") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "en %s",
//                             past: "hace %s",
//                             s: "unos segundos",
//                             ss: "%d segundos",
//                             m: "un minuto",
//                             mm: "%d minutos",
//                             h: "una hora",
//                             hh: "%d horas",
//                             d: "un día",
//                             dd: "%d días",
//                             w: "una semana",
//                             ww: "%d semanas",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un año",
//                             yy: "%d años"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         },
//                         invalidDate: "Fecha inválida"
//                     })
//                 }(n(381))
//             },
//             5603: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             s: ["mõne sekundi", "mõni sekund", "paar sekundit"],
//                             ss: [e + "sekundi", e + "sekundit"],
//                             m: ["ühe minuti", "üks minut"],
//                             mm: [e + " minuti", e + " minutit"],
//                             h: ["ühe tunni", "tund aega", "üks tund"],
//                             hh: [e + " tunni", e + " tundi"],
//                             d: ["ühe päeva", "üks päev"],
//                             M: ["kuu aja", "kuu aega", "üks kuu"],
//                             MM: [e + " kuu", e + " kuud"],
//                             y: ["ühe aasta", "aasta", "üks aasta"],
//                             yy: [e + " aasta", e + " aastat"]
//                         };
//                         return t ? a[n][2] ? a[n][2] : a[n][1] : i ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("et", {
//                         months: "jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),
//                         monthsShort: "jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),
//                         weekdays: "pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),
//                         weekdaysShort: "P_E_T_K_N_R_L".split("_"),
//                         weekdaysMin: "P_E_T_K_N_R_L".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd, D. MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Täna,] LT",
//                             nextDay: "[Homme,] LT",
//                             nextWeek: "[Järgmine] dddd LT",
//                             lastDay: "[Eile,] LT",
//                             lastWeek: "[Eelmine] dddd LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s pärast",
//                             past: "%s tagasi",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: "%d päeva",
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7763: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("eu", {
//                         months: "urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),
//                         monthsShort: "urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),
//                         weekdaysShort: "ig._al._ar._az._og._ol._lr.".split("_"),
//                         weekdaysMin: "ig_al_ar_az_og_ol_lr".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "YYYY[ko] MMMM[ren] D[a]",
//                             LLL: "YYYY[ko] MMMM[ren] D[a] HH:mm",
//                             LLLL: "dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",
//                             l: "YYYY-M-D",
//                             ll: "YYYY[ko] MMM D[a]",
//                             lll: "YYYY[ko] MMM D[a] HH:mm",
//                             llll: "ddd, YYYY[ko] MMM D[a] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[gaur] LT[etan]",
//                             nextDay: "[bihar] LT[etan]",
//                             nextWeek: "dddd LT[etan]",
//                             lastDay: "[atzo] LT[etan]",
//                             lastWeek: "[aurreko] dddd LT[etan]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s barru",
//                             past: "duela %s",
//                             s: "segundo batzuk",
//                             ss: "%d segundo",
//                             m: "minutu bat",
//                             mm: "%d minutu",
//                             h: "ordu bat",
//                             hh: "%d ordu",
//                             d: "egun bat",
//                             dd: "%d egun",
//                             M: "hilabete bat",
//                             MM: "%d hilabete",
//                             y: "urte bat",
//                             yy: "%d urte"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             6959: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "۱",
//                             2: "۲",
//                             3: "۳",
//                             4: "۴",
//                             5: "۵",
//                             6: "۶",
//                             7: "۷",
//                             8: "۸",
//                             9: "۹",
//                             0: "۰"
//                         },
//                         n = {
//                             "۱": "1",
//                             "۲": "2",
//                             "۳": "3",
//                             "۴": "4",
//                             "۵": "5",
//                             "۶": "6",
//                             "۷": "7",
//                             "۸": "8",
//                             "۹": "9",
//                             "۰": "0"
//                         };
//                     e.defineLocale("fa", {
//                         months: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
//                         monthsShort: "ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),
//                         weekdays: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
//                         weekdaysShort: "یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),
//                         weekdaysMin: "ی_د_س_چ_پ_ج_ش".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /قبل از ظهر|بعد از ظهر/,
//                         isPM: function(e) {
//                             return /بعد از ظهر/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "قبل از ظهر" : "بعد از ظهر"
//                         },
//                         calendar: {
//                             sameDay: "[امروز ساعت] LT",
//                             nextDay: "[فردا ساعت] LT",
//                             nextWeek: "dddd [ساعت] LT",
//                             lastDay: "[دیروز ساعت] LT",
//                             lastWeek: "dddd [پیش] [ساعت] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "در %s",
//                             past: "%s پیش",
//                             s: "چند ثانیه",
//                             ss: "%d ثانیه",
//                             m: "یک دقیقه",
//                             mm: "%d دقیقه",
//                             h: "یک ساعت",
//                             hh: "%d ساعت",
//                             d: "یک روز",
//                             dd: "%d روز",
//                             M: "یک ماه",
//                             MM: "%d ماه",
//                             y: "یک سال",
//                             yy: "%d سال"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[۰-۹]/g, (function(e) {
//                                 return n[e]
//                             })).replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             })).replace(/,/g, "،")
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}م/,
//                         ordinal: "%dم",
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             1897: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),
//                         n = ["nolla", "yhden", "kahden", "kolmen", "neljän", "viiden", "kuuden", t[7], t[8], t[9]];

//                     function i(e, t, n, i) {
//                         var s = "";
//                         switch (n) {
//                             case "s":
//                                 return i ? "muutaman sekunnin" : "muutama sekunti";
//                             case "ss":
//                                 s = i ? "sekunnin" : "sekuntia";
//                                 break;
//                             case "m":
//                                 return i ? "minuutin" : "minuutti";
//                             case "mm":
//                                 s = i ? "minuutin" : "minuuttia";
//                                 break;
//                             case "h":
//                                 return i ? "tunnin" : "tunti";
//                             case "hh":
//                                 s = i ? "tunnin" : "tuntia";
//                                 break;
//                             case "d":
//                                 return i ? "päivän" : "päivä";
//                             case "dd":
//                                 s = i ? "päivän" : "päivää";
//                                 break;
//                             case "M":
//                                 return i ? "kuukauden" : "kuukausi";
//                             case "MM":
//                                 s = i ? "kuukauden" : "kuukautta";
//                                 break;
//                             case "y":
//                                 return i ? "vuoden" : "vuosi";
//                             case "yy":
//                                 s = i ? "vuoden" : "vuotta"
//                         }
//                         return s = a(e, i) + " " + s
//                     }

//                     function a(e, i) {
//                         return e < 10 ? i ? n[e] : t[e] : e
//                     }
//                     e.defineLocale("fi", {
//                         months: "tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),
//                         monthsShort: "tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),
//                         weekdays: "sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),
//                         weekdaysShort: "su_ma_ti_ke_to_pe_la".split("_"),
//                         weekdaysMin: "su_ma_ti_ke_to_pe_la".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD.MM.YYYY",
//                             LL: "Do MMMM[ta] YYYY",
//                             LLL: "Do MMMM[ta] YYYY, [klo] HH.mm",
//                             LLLL: "dddd, Do MMMM[ta] YYYY, [klo] HH.mm",
//                             l: "D.M.YYYY",
//                             ll: "Do MMM YYYY",
//                             lll: "Do MMM YYYY, [klo] HH.mm",
//                             llll: "ddd, Do MMM YYYY, [klo] HH.mm"
//                         },
//                         calendar: {
//                             sameDay: "[tänään] [klo] LT",
//                             nextDay: "[huomenna] [klo] LT",
//                             nextWeek: "dddd [klo] LT",
//                             lastDay: "[eilen] [klo] LT",
//                             lastWeek: "[viime] dddd[na] [klo] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s päästä",
//                             past: "%s sitten",
//                             s: i,
//                             ss: i,
//                             m: i,
//                             mm: i,
//                             h: i,
//                             hh: i,
//                             d: i,
//                             dd: i,
//                             M: i,
//                             MM: i,
//                             y: i,
//                             yy: i
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             2549: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("fil", {
//                         months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
//                         monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
//                         weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
//                         weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
//                         weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "MM/D/YYYY",
//                             LL: "MMMM D, YYYY",
//                             LLL: "MMMM D, YYYY HH:mm",
//                             LLLL: "dddd, MMMM DD, YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "LT [ngayong araw]",
//                             nextDay: "[Bukas ng] LT",
//                             nextWeek: "LT [sa susunod na] dddd",
//                             lastDay: "LT [kahapon]",
//                             lastWeek: "LT [noong nakaraang] dddd",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "sa loob ng %s",
//                             past: "%s ang nakalipas",
//                             s: "ilang segundo",
//                             ss: "%d segundo",
//                             m: "isang minuto",
//                             mm: "%d minuto",
//                             h: "isang oras",
//                             hh: "%d oras",
//                             d: "isang araw",
//                             dd: "%d araw",
//                             M: "isang buwan",
//                             MM: "%d buwan",
//                             y: "isang taon",
//                             yy: "%d taon"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}/,
//                         ordinal: function(e) {
//                             return e
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4694: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("fo", {
//                         months: "januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),
//                         monthsShort: "jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),
//                         weekdays: "sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),
//                         weekdaysShort: "sun_mán_týs_mik_hós_frí_ley".split("_"),
//                         weekdaysMin: "su_má_tý_mi_hó_fr_le".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D. MMMM, YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Í dag kl.] LT",
//                             nextDay: "[Í morgin kl.] LT",
//                             nextWeek: "dddd [kl.] LT",
//                             lastDay: "[Í gjár kl.] LT",
//                             lastWeek: "[síðstu] dddd [kl] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "um %s",
//                             past: "%s síðani",
//                             s: "fá sekund",
//                             ss: "%d sekundir",
//                             m: "ein minuttur",
//                             mm: "%d minuttir",
//                             h: "ein tími",
//                             hh: "%d tímar",
//                             d: "ein dagur",
//                             dd: "%d dagar",
//                             M: "ein mánaður",
//                             MM: "%d mánaðir",
//                             y: "eitt ár",
//                             yy: "%d ár"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7524: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("fr-ca", {
//                         months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
//                         monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
//                         weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
//                         weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Aujourd’hui à] LT",
//                             nextDay: "[Demain à] LT",
//                             nextWeek: "dddd [à] LT",
//                             lastDay: "[Hier à] LT",
//                             lastWeek: "dddd [dernier à] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dans %s",
//                             past: "il y a %s",
//                             s: "quelques secondes",
//                             ss: "%d secondes",
//                             m: "une minute",
//                             mm: "%d minutes",
//                             h: "une heure",
//                             hh: "%d heures",
//                             d: "un jour",
//                             dd: "%d jours",
//                             M: "un mois",
//                             MM: "%d mois",
//                             y: "un an",
//                             yy: "%d ans"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 default:
//                                     case "M":
//                                     case "Q":
//                                     case "D":
//                                     case "DDD":
//                                     case "d":
//                                     return e + (1 === e ? "er" : "e");
//                                 case "w":
//                                         case "W":
//                                         return e + (1 === e ? "re" : "e")
//                             }
//                         }
//                     })
//                 }(n(381))
//             },
//             2330: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("fr-ch", {
//                         months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
//                         monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
//                         weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
//                         weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Aujourd’hui à] LT",
//                             nextDay: "[Demain à] LT",
//                             nextWeek: "dddd [à] LT",
//                             lastDay: "[Hier à] LT",
//                             lastWeek: "dddd [dernier à] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dans %s",
//                             past: "il y a %s",
//                             s: "quelques secondes",
//                             ss: "%d secondes",
//                             m: "une minute",
//                             mm: "%d minutes",
//                             h: "une heure",
//                             hh: "%d heures",
//                             d: "un jour",
//                             dd: "%d jours",
//                             M: "un mois",
//                             MM: "%d mois",
//                             y: "un an",
//                             yy: "%d ans"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 default:
//                                     case "M":
//                                     case "Q":
//                                     case "D":
//                                     case "DDD":
//                                     case "d":
//                                     return e + (1 === e ? "er" : "e");
//                                 case "w":
//                                         case "W":
//                                         return e + (1 === e ? "re" : "e")
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4470: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
//                         n = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,
//                         i = /(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,
//                         a = [/^janv/i, /^févr/i, /^mars/i, /^avr/i, /^mai/i, /^juin/i, /^juil/i, /^août/i, /^sept/i, /^oct/i, /^nov/i, /^déc/i];
//                     e.defineLocale("fr", {
//                         months: "janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),
//                         monthsShort: "janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),
//                         monthsRegex: i,
//                         monthsShortRegex: i,
//                         monthsStrictRegex: t,
//                         monthsShortStrictRegex: n,
//                         monthsParse: a,
//                         longMonthsParse: a,
//                         shortMonthsParse: a,
//                         weekdays: "dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),
//                         weekdaysShort: "dim._lun._mar._mer._jeu._ven._sam.".split("_"),
//                         weekdaysMin: "di_lu_ma_me_je_ve_sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Aujourd’hui à] LT",
//                             nextDay: "[Demain à] LT",
//                             nextWeek: "dddd [à] LT",
//                             lastDay: "[Hier à] LT",
//                             lastWeek: "dddd [dernier à] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dans %s",
//                             past: "il y a %s",
//                             s: "quelques secondes",
//                             ss: "%d secondes",
//                             m: "une minute",
//                             mm: "%d minutes",
//                             h: "une heure",
//                             hh: "%d heures",
//                             d: "un jour",
//                             dd: "%d jours",
//                             w: "une semaine",
//                             ww: "%d semaines",
//                             M: "un mois",
//                             MM: "%d mois",
//                             y: "un an",
//                             yy: "%d ans"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "D":
//                                     return e + (1 === e ? "er" : "");
//                                 default:
//                                 case "M":
//                                 case "Q":
//                                 case "DDD":
//                                 case "d":
//                                     return e + (1 === e ? "er" : "e");
//                                 case "w":
//                                 case "W":
//                                     return e + (1 === e ? "re" : "e")
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5044: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),
//                         n = "jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");
//                     e.defineLocale("fy", {
//                         months: "jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsParseExact: !0,
//                         weekdays: "snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),
//                         weekdaysShort: "si._mo._ti._wo._to._fr._so.".split("_"),
//                         weekdaysMin: "Si_Mo_Ti_Wo_To_Fr_So".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD-MM-YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[hjoed om] LT",
//                             nextDay: "[moarn om] LT",
//                             nextWeek: "dddd [om] LT",
//                             lastDay: "[juster om] LT",
//                             lastWeek: "[ôfrûne] dddd [om] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "oer %s",
//                             past: "%s lyn",
//                             s: "in pear sekonden",
//                             ss: "%d sekonden",
//                             m: "ien minút",
//                             mm: "%d minuten",
//                             h: "ien oere",
//                             hh: "%d oeren",
//                             d: "ien dei",
//                             dd: "%d dagen",
//                             M: "ien moanne",
//                             MM: "%d moannen",
//                             y: "ien jier",
//                             yy: "%d jierren"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
//                         ordinal: function(e) {
//                             return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9295: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = ["Eanáir", "Feabhra", "Márta", "Aibreán", "Bealtaine", "Meitheamh", "Iúil", "Lúnasa", "Meán Fómhair", "Deireadh Fómhair", "Samhain", "Nollaig"],
//                         n = ["Ean", "Feabh", "Márt", "Aib", "Beal", "Meith", "Iúil", "Lún", "M.F.", "D.F.", "Samh", "Noll"],
//                         i = ["Dé Domhnaigh", "Dé Luain", "Dé Máirt", "Dé Céadaoin", "Déardaoin", "Dé hAoine", "Dé Sathairn"],
//                         a = ["Domh", "Luan", "Máirt", "Céad", "Déar", "Aoine", "Sath"],
//                         s = ["Do", "Lu", "Má", "Cé", "Dé", "A", "Sa"];
//                     e.defineLocale("ga", {
//                         months: t,
//                         monthsShort: n,
//                         monthsParseExact: !0,
//                         weekdays: i,
//                         weekdaysShort: a,
//                         weekdaysMin: s,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Inniu ag] LT",
//                             nextDay: "[Amárach ag] LT",
//                             nextWeek: "dddd [ag] LT",
//                             lastDay: "[Inné ag] LT",
//                             lastWeek: "dddd [seo caite] [ag] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "i %s",
//                             past: "%s ó shin",
//                             s: "cúpla soicind",
//                             ss: "%d soicind",
//                             m: "nóiméad",
//                             mm: "%d nóiméad",
//                             h: "uair an chloig",
//                             hh: "%d uair an chloig",
//                             d: "lá",
//                             dd: "%d lá",
//                             M: "mí",
//                             MM: "%d míonna",
//                             y: "bliain",
//                             yy: "%d bliain"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
//                         ordinal: function(e) {
//                             return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             2101: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = ["Am Faoilleach", "An Gearran", "Am Màrt", "An Giblean", "An Cèitean", "An t-Ògmhios", "An t-Iuchar", "An Lùnastal", "An t-Sultain", "An Dàmhair", "An t-Samhain", "An Dùbhlachd"],
//                         n = ["Faoi", "Gear", "Màrt", "Gibl", "Cèit", "Ògmh", "Iuch", "Lùn", "Sult", "Dàmh", "Samh", "Dùbh"],
//                         i = ["Didòmhnaich", "Diluain", "Dimàirt", "Diciadain", "Diardaoin", "Dihaoine", "Disathairne"],
//                         a = ["Did", "Dil", "Dim", "Dic", "Dia", "Dih", "Dis"],
//                         s = ["Dò", "Lu", "Mà", "Ci", "Ar", "Ha", "Sa"];
//                     e.defineLocale("gd", {
//                         months: t,
//                         monthsShort: n,
//                         monthsParseExact: !0,
//                         weekdays: i,
//                         weekdaysShort: a,
//                         weekdaysMin: s,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[An-diugh aig] LT",
//                             nextDay: "[A-màireach aig] LT",
//                             nextWeek: "dddd [aig] LT",
//                             lastDay: "[An-dè aig] LT",
//                             lastWeek: "dddd [seo chaidh] [aig] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "ann an %s",
//                             past: "bho chionn %s",
//                             s: "beagan diogan",
//                             ss: "%d diogan",
//                             m: "mionaid",
//                             mm: "%d mionaidean",
//                             h: "uair",
//                             hh: "%d uairean",
//                             d: "latha",
//                             dd: "%d latha",
//                             M: "mìos",
//                             MM: "%d mìosan",
//                             y: "bliadhna",
//                             yy: "%d bliadhna"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(d|na|mh)/,
//                         ordinal: function(e) {
//                             return e + (1 === e ? "d" : e % 10 == 2 ? "na" : "mh")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             8794: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("gl", {
//                         months: "xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),
//                         monthsShort: "xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),
//                         weekdaysShort: "dom._lun._mar._mér._xov._ven._sáb.".split("_"),
//                         weekdaysMin: "do_lu_ma_mé_xo_ve_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY H:mm",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[hoxe " + (1 !== this.hours() ? "ás" : "á") + "] LT"
//                             },
//                             nextDay: function() {
//                                 return "[mañá " + (1 !== this.hours() ? "ás" : "á") + "] LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [" + (1 !== this.hours() ? "ás" : "a") + "] LT"
//                             },
//                             lastDay: function() {
//                                 return "[onte " + (1 !== this.hours() ? "á" : "a") + "] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[o] dddd [pasado " + (1 !== this.hours() ? "ás" : "a") + "] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: function(e) {
//                                 return 0 === e.indexOf("un") ? "n" + e : "en " + e
//                             },
//                             past: "hai %s",
//                             s: "uns segundos",
//                             ss: "%d segundos",
//                             m: "un minuto",
//                             mm: "%d minutos",
//                             h: "unha hora",
//                             hh: "%d horas",
//                             d: "un día",
//                             dd: "%d días",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un ano",
//                             yy: "%d anos"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7884: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             s: ["थोडया सॅकंडांनी", "थोडे सॅकंड"],
//                             ss: [e + " सॅकंडांनी", e + " सॅकंड"],
//                             m: ["एका मिणटान", "एक मिनूट"],
//                             mm: [e + " मिणटांनी", e + " मिणटां"],
//                             h: ["एका वरान", "एक वर"],
//                             hh: [e + " वरांनी", e + " वरां"],
//                             d: ["एका दिसान", "एक दीस"],
//                             dd: [e + " दिसांनी", e + " दीस"],
//                             M: ["एका म्हयन्यान", "एक म्हयनो"],
//                             MM: [e + " म्हयन्यानी", e + " म्हयने"],
//                             y: ["एका वर्सान", "एक वर्स"],
//                             yy: [e + " वर्सांनी", e + " वर्सां"]
//                         };
//                         return i ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("gom-deva", {
//                         months: {
//                             standalone: "जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
//                             format: "जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),
//                             isFormat: /MMMM(\s)+D[oD]?/
//                         },
//                         monthsShort: "जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),
//                         weekdaysShort: "आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),
//                         weekdaysMin: "आ_सो_मं_बु_ब्रे_सु_शे".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "A h:mm [वाजतां]",
//                             LTS: "A h:mm:ss [वाजतां]",
//                             L: "DD-MM-YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY A h:mm [वाजतां]",
//                             LLLL: "dddd, MMMM Do, YYYY, A h:mm [वाजतां]",
//                             llll: "ddd, D MMM YYYY, A h:mm [वाजतां]"
//                         },
//                         calendar: {
//                             sameDay: "[आयज] LT",
//                             nextDay: "[फाल्यां] LT",
//                             nextWeek: "[फुडलो] dddd[,] LT",
//                             lastDay: "[काल] LT",
//                             lastWeek: "[फाटलो] dddd[,] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s",
//                             past: "%s आदीं",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: t,
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(वेर)/,
//                         ordinal: function(e, t) {
//                             return "D" === t ? e + "वेर" : e
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 3
//                         },
//                         meridiemParse: /राती|सकाळीं|दनपारां|सांजे/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "राती" === t ? e < 4 ? e : e + 12 : "सकाळीं" === t ? e : "दनपारां" === t ? e > 12 ? e : e + 12 : "सांजे" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "राती" : e < 12 ? "सकाळीं" : e < 16 ? "दनपारां" : e < 20 ? "सांजे" : "राती"
//                         }
//                     })
//                 }(n(381))
//             },
//             3168: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             s: ["thoddea sekondamni", "thodde sekond"],
//                             ss: [e + " sekondamni", e + " sekond"],
//                             m: ["eka mintan", "ek minut"],
//                             mm: [e + " mintamni", e + " mintam"],
//                             h: ["eka voran", "ek vor"],
//                             hh: [e + " voramni", e + " voram"],
//                             d: ["eka disan", "ek dis"],
//                             dd: [e + " disamni", e + " dis"],
//                             M: ["eka mhoinean", "ek mhoino"],
//                             MM: [e + " mhoineamni", e + " mhoine"],
//                             y: ["eka vorsan", "ek voros"],
//                             yy: [e + " vorsamni", e + " vorsam"]
//                         };
//                         return i ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("gom-latn", {
//                         months: {
//                             standalone: "Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),
//                             format: "Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),
//                             isFormat: /MMMM(\s)+D[oD]?/
//                         },
//                         monthsShort: "Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),
//                         weekdaysShort: "Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),
//                         weekdaysMin: "Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "A h:mm [vazta]",
//                             LTS: "A h:mm:ss [vazta]",
//                             L: "DD-MM-YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY A h:mm [vazta]",
//                             LLLL: "dddd, MMMM Do, YYYY, A h:mm [vazta]",
//                             llll: "ddd, D MMM YYYY, A h:mm [vazta]"
//                         },
//                         calendar: {
//                             sameDay: "[Aiz] LT",
//                             nextDay: "[Faleam] LT",
//                             nextWeek: "[Fuddlo] dddd[,] LT",
//                             lastDay: "[Kal] LT",
//                             lastWeek: "[Fattlo] dddd[,] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s",
//                             past: "%s adim",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: t,
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(er)/,
//                         ordinal: function(e, t) {
//                             return "D" === t ? e + "er" : e
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 3
//                         },
//                         meridiemParse: /rati|sokallim|donparam|sanje/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "rati" === t ? e < 4 ? e : e + 12 : "sokallim" === t ? e : "donparam" === t ? e > 12 ? e : e + 12 : "sanje" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "rati" : e < 12 ? "sokallim" : e < 16 ? "donparam" : e < 20 ? "sanje" : "rati"
//                         }
//                     })
//                 }(n(381))
//             },
//             5349: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "૧",
//                             2: "૨",
//                             3: "૩",
//                             4: "૪",
//                             5: "૫",
//                             6: "૬",
//                             7: "૭",
//                             8: "૮",
//                             9: "૯",
//                             0: "૦"
//                         },
//                         n = {
//                             "૧": "1",
//                             "૨": "2",
//                             "૩": "3",
//                             "૪": "4",
//                             "૫": "5",
//                             "૬": "6",
//                             "૭": "7",
//                             "૮": "8",
//                             "૯": "9",
//                             "૦": "0"
//                         };
//                     e.defineLocale("gu", {
//                         months: "જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),
//                         monthsShort: "જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),
//                         weekdaysShort: "રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),
//                         weekdaysMin: "ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm વાગ્યે",
//                             LTS: "A h:mm:ss વાગ્યે",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm વાગ્યે",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm વાગ્યે"
//                         },
//                         calendar: {
//                             sameDay: "[આજ] LT",
//                             nextDay: "[કાલે] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[ગઇકાલે] LT",
//                             lastWeek: "[પાછલા] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s મા",
//                             past: "%s પહેલા",
//                             s: "અમુક પળો",
//                             ss: "%d સેકંડ",
//                             m: "એક મિનિટ",
//                             mm: "%d મિનિટ",
//                             h: "એક કલાક",
//                             hh: "%d કલાક",
//                             d: "એક દિવસ",
//                             dd: "%d દિવસ",
//                             M: "એક મહિનો",
//                             MM: "%d મહિનો",
//                             y: "એક વર્ષ",
//                             yy: "%d વર્ષ"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "રાત" === t ? e < 4 ? e : e + 12 : "સવાર" === t ? e : "બપોર" === t ? e >= 10 ? e : e + 12 : "સાંજ" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "રાત" : e < 10 ? "સવાર" : e < 17 ? "બપોર" : e < 20 ? "સાંજ" : "રાત"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             4206: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("he", {
//                         months: "ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),
//                         monthsShort: "ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),
//                         weekdays: "ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),
//                         weekdaysShort: "א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),
//                         weekdaysMin: "א_ב_ג_ד_ה_ו_ש".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [ב]MMMM YYYY",
//                             LLL: "D [ב]MMMM YYYY HH:mm",
//                             LLLL: "dddd, D [ב]MMMM YYYY HH:mm",
//                             l: "D/M/YYYY",
//                             ll: "D MMM YYYY",
//                             lll: "D MMM YYYY HH:mm",
//                             llll: "ddd, D MMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[היום ב־]LT",
//                             nextDay: "[מחר ב־]LT",
//                             nextWeek: "dddd [בשעה] LT",
//                             lastDay: "[אתמול ב־]LT",
//                             lastWeek: "[ביום] dddd [האחרון בשעה] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "בעוד %s",
//                             past: "לפני %s",
//                             s: "מספר שניות",
//                             ss: "%d שניות",
//                             m: "דקה",
//                             mm: "%d דקות",
//                             h: "שעה",
//                             hh: function(e) {
//                                 return 2 === e ? "שעתיים" : e + " שעות"
//                             },
//                             d: "יום",
//                             dd: function(e) {
//                                 return 2 === e ? "יומיים" : e + " ימים"
//                             },
//                             M: "חודש",
//                             MM: function(e) {
//                                 return 2 === e ? "חודשיים" : e + " חודשים"
//                             },
//                             y: "שנה",
//                             yy: function(e) {
//                                 return 2 === e ? "שנתיים" : e % 10 == 0 && 10 !== e ? e + " שנה" : e + " שנים"
//                             }
//                         },
//                         meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
//                         isPM: function(e) {
//                             return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 5 ? "לפנות בוקר" : e < 10 ? "בבוקר" : e < 12 ? n ? 'לפנה"צ' : "לפני הצהריים" : e < 18 ? n ? 'אחה"צ' : "אחרי הצהריים" : "בערב"
//                         }
//                     })
//                 }(n(381))
//             },
//             94: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "१",
//                             2: "२",
//                             3: "३",
//                             4: "४",
//                             5: "५",
//                             6: "६",
//                             7: "७",
//                             8: "८",
//                             9: "९",
//                             0: "०"
//                         },
//                         n = {
//                             "१": "1",
//                             "२": "2",
//                             "३": "3",
//                             "४": "4",
//                             "५": "5",
//                             "६": "6",
//                             "७": "7",
//                             "८": "8",
//                             "९": "9",
//                             "०": "0"
//                         },
//                         i = [/^जन/i, /^फ़र|फर/i, /^मार्च/i, /^अप्रै/i, /^मई/i, /^जून/i, /^जुल/i, /^अग/i, /^सितं|सित/i, /^अक्टू/i, /^नव|नवं/i, /^दिसं|दिस/i],
//                         a = [/^जन/i, /^फ़र/i, /^मार्च/i, /^अप्रै/i, /^मई/i, /^जून/i, /^जुल/i, /^अग/i, /^सित/i, /^अक्टू/i, /^नव/i, /^दिस/i];
//                     e.defineLocale("hi", {
//                         months: {
//                             format: "जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),
//                             standalone: "जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")
//                         },
//                         monthsShort: "जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),
//                         weekdays: "रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
//                         weekdaysShort: "रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),
//                         weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm बजे",
//                             LTS: "A h:mm:ss बजे",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm बजे",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm बजे"
//                         },
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: a,
//                         monthsRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
//                         monthsShortRegex: /^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,
//                         monthsStrictRegex: /^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,
//                         monthsShortStrictRegex: /^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,
//                         calendar: {
//                             sameDay: "[आज] LT",
//                             nextDay: "[कल] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[कल] LT",
//                             lastWeek: "[पिछले] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s में",
//                             past: "%s पहले",
//                             s: "कुछ ही क्षण",
//                             ss: "%d सेकंड",
//                             m: "एक मिनट",
//                             mm: "%d मिनट",
//                             h: "एक घंटा",
//                             hh: "%d घंटे",
//                             d: "एक दिन",
//                             dd: "%d दिन",
//                             M: "एक महीने",
//                             MM: "%d महीने",
//                             y: "एक वर्ष",
//                             yy: "%d वर्ष"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[१२३४५६७८९०]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /रात|सुबह|दोपहर|शाम/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "रात" === t ? e < 4 ? e : e + 12 : "सुबह" === t ? e : "दोपहर" === t ? e >= 10 ? e : e + 12 : "शाम" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "रात" : e < 10 ? "सुबह" : e < 17 ? "दोपहर" : e < 20 ? "शाम" : "रात"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             316: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n) {
//                         var i = e + " ";
//                         switch (n) {
//                             case "ss":
//                                 return i += 1 === e ? "sekunda" : 2 === e || 3 === e || 4 === e ? "sekunde" : "sekundi";
//                             case "m":
//                                 return t ? "jedna minuta" : "jedne minute";
//                             case "mm":
//                                 return i += 1 === e ? "minuta" : 2 === e || 3 === e || 4 === e ? "minute" : "minuta";
//                             case "h":
//                                 return t ? "jedan sat" : "jednog sata";
//                             case "hh":
//                                 return i += 1 === e ? "sat" : 2 === e || 3 === e || 4 === e ? "sata" : "sati";
//                             case "dd":
//                                 return i += 1 === e ? "dan" : "dana";
//                             case "MM":
//                                 return i += 1 === e ? "mjesec" : 2 === e || 3 === e || 4 === e ? "mjeseca" : "mjeseci";
//                             case "yy":
//                                 return i += 1 === e ? "godina" : 2 === e || 3 === e || 4 === e ? "godine" : "godina"
//                         }
//                     }
//                     e.defineLocale("hr", {
//                         months: {
//                             format: "siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),
//                             standalone: "siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")
//                         },
//                         monthsShort: "sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
//                         weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
//                         weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "Do MMMM YYYY",
//                             LLL: "Do MMMM YYYY H:mm",
//                             LLLL: "dddd, Do MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[danas u] LT",
//                             nextDay: "[sutra u] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[u] [nedjelju] [u] LT";
//                                     case 3:
//                                         return "[u] [srijedu] [u] LT";
//                                     case 6:
//                                         return "[u] [subotu] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[u] dddd [u] LT"
//                                 }
//                             },
//                             lastDay: "[jučer u] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[prošlu] [nedjelju] [u] LT";
//                                     case 3:
//                                         return "[prošlu] [srijedu] [u] LT";
//                                     case 6:
//                                         return "[prošle] [subote] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[prošli] dddd [u] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "prije %s",
//                             s: "par sekundi",
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: "dan",
//                             dd: t,
//                             M: "mjesec",
//                             MM: t,
//                             y: "godinu",
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             2138: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");

//                     function n(e, t, n, i) {
//                         var a = e;
//                         switch (n) {
//                             case "s":
//                                 return i || t ? "néhány másodperc" : "néhány másodperce";
//                             case "ss":
//                                 return a + (i || t) ? " másodperc" : " másodperce";
//                             case "m":
//                                 return "egy" + (i || t ? " perc" : " perce");
//                             case "mm":
//                                 return a + (i || t ? " perc" : " perce");
//                             case "h":
//                                 return "egy" + (i || t ? " óra" : " órája");
//                             case "hh":
//                                 return a + (i || t ? " óra" : " órája");
//                             case "d":
//                                 return "egy" + (i || t ? " nap" : " napja");
//                             case "dd":
//                                 return a + (i || t ? " nap" : " napja");
//                             case "M":
//                                 return "egy" + (i || t ? " hónap" : " hónapja");
//                             case "MM":
//                                 return a + (i || t ? " hónap" : " hónapja");
//                             case "y":
//                                 return "egy" + (i || t ? " év" : " éve");
//                             case "yy":
//                                 return a + (i || t ? " év" : " éve")
//                         }
//                         return ""
//                     }

//                     function i(e) {
//                         return (e ? "" : "[múlt] ") + "[" + t[this.day()] + "] LT[-kor]"
//                     }
//                     e.defineLocale("hu", {
//                         months: "január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),
//                         monthsShort: "jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),
//                         weekdaysShort: "vas_hét_kedd_sze_csüt_pén_szo".split("_"),
//                         weekdaysMin: "v_h_k_sze_cs_p_szo".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "YYYY.MM.DD.",
//                             LL: "YYYY. MMMM D.",
//                             LLL: "YYYY. MMMM D. H:mm",
//                             LLLL: "YYYY. MMMM D., dddd H:mm"
//                         },
//                         meridiemParse: /de|du/i,
//                         isPM: function(e) {
//                             return "u" === e.charAt(1).toLowerCase()
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? !0 === n ? "de" : "DE" : !0 === n ? "du" : "DU"
//                         },
//                         calendar: {
//                             sameDay: "[ma] LT[-kor]",
//                             nextDay: "[holnap] LT[-kor]",
//                             nextWeek: function() {
//                                 return i.call(this, !0)
//                             },
//                             lastDay: "[tegnap] LT[-kor]",
//                             lastWeek: function() {
//                                 return i.call(this, !1)
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s múlva",
//                             past: "%s",
//                             s: n,
//                             ss: n,
//                             m: n,
//                             mm: n,
//                             h: n,
//                             hh: n,
//                             d: n,
//                             dd: n,
//                             M: n,
//                             MM: n,
//                             y: n,
//                             yy: n
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             1423: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("hy-am", {
//                         months: {
//                             format: "հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),
//                             standalone: "հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")
//                         },
//                         monthsShort: "հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),
//                         weekdays: "կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),
//                         weekdaysShort: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
//                         weekdaysMin: "կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY թ.",
//                             LLL: "D MMMM YYYY թ., HH:mm",
//                             LLLL: "dddd, D MMMM YYYY թ., HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[այսօր] LT",
//                             nextDay: "[վաղը] LT",
//                             lastDay: "[երեկ] LT",
//                             nextWeek: function() {
//                                 return "dddd [օրը ժամը] LT"
//                             },
//                             lastWeek: function() {
//                                 return "[անցած] dddd [օրը ժամը] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s հետո",
//                             past: "%s առաջ",
//                             s: "մի քանի վայրկյան",
//                             ss: "%d վայրկյան",
//                             m: "րոպե",
//                             mm: "%d րոպե",
//                             h: "ժամ",
//                             hh: "%d ժամ",
//                             d: "օր",
//                             dd: "%d օր",
//                             M: "ամիս",
//                             MM: "%d ամիս",
//                             y: "տարի",
//                             yy: "%d տարի"
//                         },
//                         meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
//                         isPM: function(e) {
//                             return /^(ցերեկվա|երեկոյան)$/.test(e)
//                         },
//                         meridiem: function(e) {
//                             return e < 4 ? "գիշերվա" : e < 12 ? "առավոտվա" : e < 17 ? "ցերեկվա" : "երեկոյան"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "DDD":
//                                 case "w":
//                                 case "W":
//                                 case "DDDo":
//                                     return 1 === e ? e + "-ին" : e + "-րդ";
//                                 default:
//                                     return e
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             9218: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("id", {
//                         months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),
//                         weekdays: "Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),
//                         weekdaysShort: "Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),
//                         weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [pukul] HH.mm",
//                             LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
//                         },
//                         meridiemParse: /pagi|siang|sore|malam/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "pagi" === t ? e : "siang" === t ? e >= 11 ? e : e + 12 : "sore" === t || "malam" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 11 ? "pagi" : e < 15 ? "siang" : e < 19 ? "sore" : "malam"
//                         },
//                         calendar: {
//                             sameDay: "[Hari ini pukul] LT",
//                             nextDay: "[Besok pukul] LT",
//                             nextWeek: "dddd [pukul] LT",
//                             lastDay: "[Kemarin pukul] LT",
//                             lastWeek: "dddd [lalu pukul] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dalam %s",
//                             past: "%s yang lalu",
//                             s: "beberapa detik",
//                             ss: "%d detik",
//                             m: "semenit",
//                             mm: "%d menit",
//                             h: "sejam",
//                             hh: "%d jam",
//                             d: "sehari",
//                             dd: "%d hari",
//                             M: "sebulan",
//                             MM: "%d bulan",
//                             y: "setahun",
//                             yy: "%d tahun"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             135: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e) {
//                         return e % 100 == 11 || e % 10 != 1
//                     }

//                     function n(e, n, i, a) {
//                         var s = e + " ";
//                         switch (i) {
//                             case "s":
//                                 return n || a ? "nokkrar sekúndur" : "nokkrum sekúndum";
//                             case "ss":
//                                 return t(e) ? s + (n || a ? "sekúndur" : "sekúndum") : s + "sekúnda";
//                             case "m":
//                                 return n ? "mínúta" : "mínútu";
//                             case "mm":
//                                 return t(e) ? s + (n || a ? "mínútur" : "mínútum") : n ? s + "mínúta" : s + "mínútu";
//                             case "hh":
//                                 return t(e) ? s + (n || a ? "klukkustundir" : "klukkustundum") : s + "klukkustund";
//                             case "d":
//                                 return n ? "dagur" : a ? "dag" : "degi";
//                             case "dd":
//                                 return t(e) ? n ? s + "dagar" : s + (a ? "daga" : "dögum") : n ? s + "dagur" : s + (a ? "dag" : "degi");
//                             case "M":
//                                 return n ? "mánuður" : a ? "mánuð" : "mánuði";
//                             case "MM":
//                                 return t(e) ? n ? s + "mánuðir" : s + (a ? "mánuði" : "mánuðum") : n ? s + "mánuður" : s + (a ? "mánuð" : "mánuði");
//                             case "y":
//                                 return n || a ? "ár" : "ári";
//                             case "yy":
//                                 return t(e) ? s + (n || a ? "ár" : "árum") : s + (n || a ? "ár" : "ári")
//                         }
//                     }
//                     e.defineLocale("is", {
//                         months: "janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),
//                         monthsShort: "jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),
//                         weekdays: "sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),
//                         weekdaysShort: "sun_mán_þri_mið_fim_fös_lau".split("_"),
//                         weekdaysMin: "Su_Má_Þr_Mi_Fi_Fö_La".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY [kl.] H:mm",
//                             LLLL: "dddd, D. MMMM YYYY [kl.] H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[í dag kl.] LT",
//                             nextDay: "[á morgun kl.] LT",
//                             nextWeek: "dddd [kl.] LT",
//                             lastDay: "[í gær kl.] LT",
//                             lastWeek: "[síðasta] dddd [kl.] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "eftir %s",
//                             past: "fyrir %s síðan",
//                             s: n,
//                             ss: n,
//                             m: n,
//                             mm: n,
//                             h: "klukkustund",
//                             hh: n,
//                             d: n,
//                             dd: n,
//                             M: n,
//                             MM: n,
//                             y: n,
//                             yy: n
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             150: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("it-ch", {
//                         months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
//                         monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
//                         weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),
//                         weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
//                         weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Oggi alle] LT",
//                             nextDay: "[Domani alle] LT",
//                             nextWeek: "dddd [alle] LT",
//                             lastDay: "[Ieri alle] LT",
//                             lastWeek: function() {
//                                 return 0 === this.day() ? "[la scorsa] dddd [alle] LT" : "[lo scorso] dddd [alle] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: function(e) {
//                                 return (/^[0-9].+$/.test(e) ? "tra" : "in") + " " + e
//                             },
//                             past: "%s fa",
//                             s: "alcuni secondi",
//                             ss: "%d secondi",
//                             m: "un minuto",
//                             mm: "%d minuti",
//                             h: "un'ora",
//                             hh: "%d ore",
//                             d: "un giorno",
//                             dd: "%d giorni",
//                             M: "un mese",
//                             MM: "%d mesi",
//                             y: "un anno",
//                             yy: "%d anni"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             626: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("it", {
//                         months: "gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),
//                         monthsShort: "gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),
//                         weekdays: "domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),
//                         weekdaysShort: "dom_lun_mar_mer_gio_ven_sab".split("_"),
//                         weekdaysMin: "do_lu_ma_me_gi_ve_sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: function() {
//                                 return "[Oggi a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT"
//                             },
//                             nextDay: function() {
//                                 return "[Domani a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT"
//                             },
//                             nextWeek: function() {
//                                 return "dddd [a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT"
//                             },
//                             lastDay: function() {
//                                 return "[Ieri a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT"
//                             },
//                             lastWeek: function() {
//                                 return 0 === this.day() ? "[La scorsa] dddd [a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT" : "[Lo scorso] dddd [a" + (this.hours() > 1 ? "lle " : 0 === this.hours() ? " " : "ll'") + "]LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "tra %s",
//                             past: "%s fa",
//                             s: "alcuni secondi",
//                             ss: "%d secondi",
//                             m: "un minuto",
//                             mm: "%d minuti",
//                             h: "un'ora",
//                             hh: "%d ore",
//                             d: "un giorno",
//                             dd: "%d giorni",
//                             w: "una settimana",
//                             ww: "%d settimane",
//                             M: "un mese",
//                             MM: "%d mesi",
//                             y: "un anno",
//                             yy: "%d anni"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9183: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ja", {
//                         eras: [{
//                             since: "2019-05-01",
//                             offset: 1,
//                             name: "令和",
//                             narrow: "㋿",
//                             abbr: "R"
//                         }, {
//                             since: "1989-01-08",
//                             until: "2019-04-30",
//                             offset: 1,
//                             name: "平成",
//                             narrow: "㍻",
//                             abbr: "H"
//                         }, {
//                             since: "1926-12-25",
//                             until: "1989-01-07",
//                             offset: 1,
//                             name: "昭和",
//                             narrow: "㍼",
//                             abbr: "S"
//                         }, {
//                             since: "1912-07-30",
//                             until: "1926-12-24",
//                             offset: 1,
//                             name: "大正",
//                             narrow: "㍽",
//                             abbr: "T"
//                         }, {
//                             since: "1873-01-01",
//                             until: "1912-07-29",
//                             offset: 6,
//                             name: "明治",
//                             narrow: "㍾",
//                             abbr: "M"
//                         }, {
//                             since: "0001-01-01",
//                             until: "1873-12-31",
//                             offset: 1,
//                             name: "西暦",
//                             narrow: "AD",
//                             abbr: "AD"
//                         }, {
//                             since: "0000-12-31",
//                             until: -1 / 0,
//                             offset: 1,
//                             name: "紀元前",
//                             narrow: "BC",
//                             abbr: "BC"
//                         }],
//                         eraYearOrdinalRegex: /(元|\d+)年/,
//                         eraYearOrdinalParse: function(e, t) {
//                             return "元" === t[1] ? 1 : parseInt(t[1] || e, 10)
//                         },
//                         months: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         weekdays: "日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),
//                         weekdaysShort: "日_月_火_水_木_金_土".split("_"),
//                         weekdaysMin: "日_月_火_水_木_金_土".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY/MM/DD",
//                             LL: "YYYY年M月D日",
//                             LLL: "YYYY年M月D日 HH:mm",
//                             LLLL: "YYYY年M月D日 dddd HH:mm",
//                             l: "YYYY/MM/DD",
//                             ll: "YYYY年M月D日",
//                             lll: "YYYY年M月D日 HH:mm",
//                             llll: "YYYY年M月D日(ddd) HH:mm"
//                         },
//                         meridiemParse: /午前|午後/i,
//                         isPM: function(e) {
//                             return "午後" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "午前" : "午後"
//                         },
//                         calendar: {
//                             sameDay: "[今日] LT",
//                             nextDay: "[明日] LT",
//                             nextWeek: function(e) {
//                                 return e.week() !== this.week() ? "[来週]dddd LT" : "dddd LT"
//                             },
//                             lastDay: "[昨日] LT",
//                             lastWeek: function(e) {
//                                 return this.week() !== e.week() ? "[先週]dddd LT" : "dddd LT"
//                             },
//                             sameElse: "L"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}日/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "y":
//                                     return 1 === e ? "元年" : e + "年";
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "日";
//                                 default:
//                                     return e
//                             }
//                         },
//                         relativeTime: {
//                             future: "%s後",
//                             past: "%s前",
//                             s: "数秒",
//                             ss: "%d秒",
//                             m: "1分",
//                             mm: "%d分",
//                             h: "1時間",
//                             hh: "%d時間",
//                             d: "1日",
//                             dd: "%d日",
//                             M: "1ヶ月",
//                             MM: "%dヶ月",
//                             y: "1年",
//                             yy: "%d年"
//                         }
//                     })
//                 }(n(381))
//             },
//             4286: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("jv", {
//                         months: "Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),
//                         monthsShort: "Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),
//                         weekdays: "Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),
//                         weekdaysShort: "Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),
//                         weekdaysMin: "Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [pukul] HH.mm",
//                             LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
//                         },
//                         meridiemParse: /enjing|siyang|sonten|ndalu/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "enjing" === t ? e : "siyang" === t ? e >= 11 ? e : e + 12 : "sonten" === t || "ndalu" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 11 ? "enjing" : e < 15 ? "siyang" : e < 19 ? "sonten" : "ndalu"
//                         },
//                         calendar: {
//                             sameDay: "[Dinten puniko pukul] LT",
//                             nextDay: "[Mbenjang pukul] LT",
//                             nextWeek: "dddd [pukul] LT",
//                             lastDay: "[Kala wingi pukul] LT",
//                             lastWeek: "dddd [kepengker pukul] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "wonten ing %s",
//                             past: "%s ingkang kepengker",
//                             s: "sawetawis detik",
//                             ss: "%d detik",
//                             m: "setunggal menit",
//                             mm: "%d menit",
//                             h: "setunggal jam",
//                             hh: "%d jam",
//                             d: "sedinten",
//                             dd: "%d dinten",
//                             M: "sewulan",
//                             MM: "%d wulan",
//                             y: "setaun",
//                             yy: "%d taun"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             2105: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ka", {
//                         months: "იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),
//                         monthsShort: "იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),
//                         weekdays: {
//                             standalone: "კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),
//                             format: "კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),
//                             isFormat: /(წინა|შემდეგ)/
//                         },
//                         weekdaysShort: "კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),
//                         weekdaysMin: "კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[დღეს] LT[-ზე]",
//                             nextDay: "[ხვალ] LT[-ზე]",
//                             lastDay: "[გუშინ] LT[-ზე]",
//                             nextWeek: "[შემდეგ] dddd LT[-ზე]",
//                             lastWeek: "[წინა] dddd LT-ზე",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: function(e) {
//                                 return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/, (function(e, t, n) {
//                                     return "ი" === n ? t + "ში" : t + n + "ში"
//                                 }))
//                             },
//                             past: function(e) {
//                                 return /(წამი|წუთი|საათი|დღე|თვე)/.test(e) ? e.replace(/(ი|ე)$/, "ის წინ") : /წელი/.test(e) ? e.replace(/წელი$/, "წლის წინ") : e
//                             },
//                             s: "რამდენიმე წამი",
//                             ss: "%d წამი",
//                             m: "წუთი",
//                             mm: "%d წუთი",
//                             h: "საათი",
//                             hh: "%d საათი",
//                             d: "დღე",
//                             dd: "%d დღე",
//                             M: "თვე",
//                             MM: "%d თვე",
//                             y: "წელი",
//                             yy: "%d წელი"
//                         },
//                         dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
//                         ordinal: function(e) {
//                             return 0 === e ? e : 1 === e ? e + "-ლი" : e < 20 || e <= 100 && e % 20 == 0 || e % 100 == 0 ? "მე-" + e : e + "-ე"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7772: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         0: "-ші",
//                         1: "-ші",
//                         2: "-ші",
//                         3: "-ші",
//                         4: "-ші",
//                         5: "-ші",
//                         6: "-шы",
//                         7: "-ші",
//                         8: "-ші",
//                         9: "-шы",
//                         10: "-шы",
//                         20: "-шы",
//                         30: "-шы",
//                         40: "-шы",
//                         50: "-ші",
//                         60: "-шы",
//                         70: "-ші",
//                         80: "-ші",
//                         90: "-шы",
//                         100: "-ші"
//                     };
//                     e.defineLocale("kk", {
//                         months: "қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),
//                         monthsShort: "қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),
//                         weekdays: "жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),
//                         weekdaysShort: "жек_дүй_сей_сәр_бей_жұм_сен".split("_"),
//                         weekdaysMin: "жк_дй_сй_ср_бй_жм_сн".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Бүгін сағат] LT",
//                             nextDay: "[Ертең сағат] LT",
//                             nextWeek: "dddd [сағат] LT",
//                             lastDay: "[Кеше сағат] LT",
//                             lastWeek: "[Өткен аптаның] dddd [сағат] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s ішінде",
//                             past: "%s бұрын",
//                             s: "бірнеше секунд",
//                             ss: "%d секунд",
//                             m: "бір минут",
//                             mm: "%d минут",
//                             h: "бір сағат",
//                             hh: "%d сағат",
//                             d: "бір күн",
//                             dd: "%d күн",
//                             M: "бір ай",
//                             MM: "%d ай",
//                             y: "бір жыл",
//                             yy: "%d жыл"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
//                         ordinal: function(e) {
//                             var n = e % 10,
//                                 i = e >= 100 ? 100 : null;
//                             return e + (t[e] || t[n] || t[i])
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             8758: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "១",
//                             2: "២",
//                             3: "៣",
//                             4: "៤",
//                             5: "៥",
//                             6: "៦",
//                             7: "៧",
//                             8: "៨",
//                             9: "៩",
//                             0: "០"
//                         },
//                         n = {
//                             "១": "1",
//                             "២": "2",
//                             "៣": "3",
//                             "៤": "4",
//                             "៥": "5",
//                             "៦": "6",
//                             "៧": "7",
//                             "៨": "8",
//                             "៩": "9",
//                             "០": "0"
//                         };
//                     e.defineLocale("km", {
//                         months: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
//                         monthsShort: "មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),
//                         weekdays: "អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),
//                         weekdaysShort: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
//                         weekdaysMin: "អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ព្រឹក|ល្ងាច/,
//                         isPM: function(e) {
//                             return "ល្ងាច" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ព្រឹក" : "ល្ងាច"
//                         },
//                         calendar: {
//                             sameDay: "[ថ្ងៃនេះ ម៉ោង] LT",
//                             nextDay: "[ស្អែក ម៉ោង] LT",
//                             nextWeek: "dddd [ម៉ោង] LT",
//                             lastDay: "[ម្សិលមិញ ម៉ោង] LT",
//                             lastWeek: "dddd [សប្តាហ៍មុន] [ម៉ោង] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%sទៀត",
//                             past: "%sមុន",
//                             s: "ប៉ុន្មានវិនាទី",
//                             ss: "%d វិនាទី",
//                             m: "មួយនាទី",
//                             mm: "%d នាទី",
//                             h: "មួយម៉ោង",
//                             hh: "%d ម៉ោង",
//                             d: "មួយថ្ងៃ",
//                             dd: "%d ថ្ងៃ",
//                             M: "មួយខែ",
//                             MM: "%d ខែ",
//                             y: "មួយឆ្នាំ",
//                             yy: "%d ឆ្នាំ"
//                         },
//                         dayOfMonthOrdinalParse: /ទី\d{1,2}/,
//                         ordinal: "ទី%d",
//                         preparse: function(e) {
//                             return e.replace(/[១២៣៤៥៦៧៨៩០]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9282: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "೧",
//                             2: "೨",
//                             3: "೩",
//                             4: "೪",
//                             5: "೫",
//                             6: "೬",
//                             7: "೭",
//                             8: "೮",
//                             9: "೯",
//                             0: "೦"
//                         },
//                         n = {
//                             "೧": "1",
//                             "೨": "2",
//                             "೩": "3",
//                             "೪": "4",
//                             "೫": "5",
//                             "೬": "6",
//                             "೭": "7",
//                             "೮": "8",
//                             "೯": "9",
//                             "೦": "0"
//                         };
//                     e.defineLocale("kn", {
//                         months: "ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),
//                         monthsShort: "ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),
//                         weekdaysShort: "ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),
//                         weekdaysMin: "ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm",
//                             LTS: "A h:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm"
//                         },
//                         calendar: {
//                             sameDay: "[ಇಂದು] LT",
//                             nextDay: "[ನಾಳೆ] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[ನಿನ್ನೆ] LT",
//                             lastWeek: "[ಕೊನೆಯ] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s ನಂತರ",
//                             past: "%s ಹಿಂದೆ",
//                             s: "ಕೆಲವು ಕ್ಷಣಗಳು",
//                             ss: "%d ಸೆಕೆಂಡುಗಳು",
//                             m: "ಒಂದು ನಿಮಿಷ",
//                             mm: "%d ನಿಮಿಷ",
//                             h: "ಒಂದು ಗಂಟೆ",
//                             hh: "%d ಗಂಟೆ",
//                             d: "ಒಂದು ದಿನ",
//                             dd: "%d ದಿನ",
//                             M: "ಒಂದು ತಿಂಗಳು",
//                             MM: "%d ತಿಂಗಳು",
//                             y: "ಒಂದು ವರ್ಷ",
//                             yy: "%d ವರ್ಷ"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "ರಾತ್ರಿ" === t ? e < 4 ? e : e + 12 : "ಬೆಳಿಗ್ಗೆ" === t ? e : "ಮಧ್ಯಾಹ್ನ" === t ? e >= 10 ? e : e + 12 : "ಸಂಜೆ" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "ರಾತ್ರಿ" : e < 10 ? "ಬೆಳಿಗ್ಗೆ" : e < 17 ? "ಮಧ್ಯಾಹ್ನ" : e < 20 ? "ಸಂಜೆ" : "ರಾತ್ರಿ"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
//                         ordinal: function(e) {
//                             return e + "ನೇ"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             3730: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ko", {
//                         months: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
//                         monthsShort: "1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),
//                         weekdays: "일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),
//                         weekdaysShort: "일_월_화_수_목_금_토".split("_"),
//                         weekdaysMin: "일_월_화_수_목_금_토".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm",
//                             LTS: "A h:mm:ss",
//                             L: "YYYY.MM.DD.",
//                             LL: "YYYY년 MMMM D일",
//                             LLL: "YYYY년 MMMM D일 A h:mm",
//                             LLLL: "YYYY년 MMMM D일 dddd A h:mm",
//                             l: "YYYY.MM.DD.",
//                             ll: "YYYY년 MMMM D일",
//                             lll: "YYYY년 MMMM D일 A h:mm",
//                             llll: "YYYY년 MMMM D일 dddd A h:mm"
//                         },
//                         calendar: {
//                             sameDay: "오늘 LT",
//                             nextDay: "내일 LT",
//                             nextWeek: "dddd LT",
//                             lastDay: "어제 LT",
//                             lastWeek: "지난주 dddd LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s 후",
//                             past: "%s 전",
//                             s: "몇 초",
//                             ss: "%d초",
//                             m: "1분",
//                             mm: "%d분",
//                             h: "한 시간",
//                             hh: "%d시간",
//                             d: "하루",
//                             dd: "%d일",
//                             M: "한 달",
//                             MM: "%d달",
//                             y: "일 년",
//                             yy: "%d년"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(일|월|주)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "일";
//                                 case "M":
//                                     return e + "월";
//                                 case "w":
//                                 case "W":
//                                     return e + "주";
//                                 default:
//                                     return e
//                             }
//                         },
//                         meridiemParse: /오전|오후/,
//                         isPM: function(e) {
//                             return "오후" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "오전" : "오후"
//                         }
//                     })
//                 }(n(381))
//             },
//             1408: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "١",
//                             2: "٢",
//                             3: "٣",
//                             4: "٤",
//                             5: "٥",
//                             6: "٦",
//                             7: "٧",
//                             8: "٨",
//                             9: "٩",
//                             0: "٠"
//                         },
//                         n = {
//                             "١": "1",
//                             "٢": "2",
//                             "٣": "3",
//                             "٤": "4",
//                             "٥": "5",
//                             "٦": "6",
//                             "٧": "7",
//                             "٨": "8",
//                             "٩": "9",
//                             "٠": "0"
//                         },
//                         i = ["کانونی دووەم", "شوبات", "ئازار", "نیسان", "ئایار", "حوزەیران", "تەمموز", "ئاب", "ئەیلوول", "تشرینی یەكەم", "تشرینی دووەم", "كانونی یەکەم"];
//                     e.defineLocale("ku", {
//                         months: i,
//                         monthsShort: i,
//                         weekdays: "یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),
//                         weekdaysShort: "یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),
//                         weekdaysMin: "ی_د_س_چ_پ_ه_ش".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ئێواره‌|به‌یانی/,
//                         isPM: function(e) {
//                             return /ئێواره‌/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "به‌یانی" : "ئێواره‌"
//                         },
//                         calendar: {
//                             sameDay: "[ئه‌مرۆ كاتژمێر] LT",
//                             nextDay: "[به‌یانی كاتژمێر] LT",
//                             nextWeek: "dddd [كاتژمێر] LT",
//                             lastDay: "[دوێنێ كاتژمێر] LT",
//                             lastWeek: "dddd [كاتژمێر] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "له‌ %s",
//                             past: "%s",
//                             s: "چه‌ند چركه‌یه‌ك",
//                             ss: "چركه‌ %d",
//                             m: "یه‌ك خوله‌ك",
//                             mm: "%d خوله‌ك",
//                             h: "یه‌ك كاتژمێر",
//                             hh: "%d كاتژمێر",
//                             d: "یه‌ك ڕۆژ",
//                             dd: "%d ڕۆژ",
//                             M: "یه‌ك مانگ",
//                             MM: "%d مانگ",
//                             y: "یه‌ك ساڵ",
//                             yy: "%d ساڵ"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g, (function(e) {
//                                 return n[e]
//                             })).replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             })).replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             3291: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         0: "-чү",
//                         1: "-чи",
//                         2: "-чи",
//                         3: "-чү",
//                         4: "-чү",
//                         5: "-чи",
//                         6: "-чы",
//                         7: "-чи",
//                         8: "-чи",
//                         9: "-чу",
//                         10: "-чу",
//                         20: "-чы",
//                         30: "-чу",
//                         40: "-чы",
//                         50: "-чү",
//                         60: "-чы",
//                         70: "-чи",
//                         80: "-чи",
//                         90: "-чу",
//                         100: "-чү"
//                     };
//                     e.defineLocale("ky", {
//                         months: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),
//                         monthsShort: "янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),
//                         weekdays: "Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),
//                         weekdaysShort: "Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),
//                         weekdaysMin: "Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Бүгүн саат] LT",
//                             nextDay: "[Эртең саат] LT",
//                             nextWeek: "dddd [саат] LT",
//                             lastDay: "[Кечээ саат] LT",
//                             lastWeek: "[Өткөн аптанын] dddd [күнү] [саат] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s ичинде",
//                             past: "%s мурун",
//                             s: "бирнече секунд",
//                             ss: "%d секунд",
//                             m: "бир мүнөт",
//                             mm: "%d мүнөт",
//                             h: "бир саат",
//                             hh: "%d саат",
//                             d: "бир күн",
//                             dd: "%d күн",
//                             M: "бир ай",
//                             MM: "%d ай",
//                             y: "бир жыл",
//                             yy: "%d жыл"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
//                         ordinal: function(e) {
//                             var n = e % 10,
//                                 i = e >= 100 ? 100 : null;
//                             return e + (t[e] || t[n] || t[i])
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             6841: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             m: ["eng Minutt", "enger Minutt"],
//                             h: ["eng Stonn", "enger Stonn"],
//                             d: ["een Dag", "engem Dag"],
//                             M: ["ee Mount", "engem Mount"],
//                             y: ["ee Joer", "engem Joer"]
//                         };
//                         return t ? a[n][0] : a[n][1]
//                     }

//                     function n(e) {
//                         return a(e.substr(0, e.indexOf(" "))) ? "a " + e : "an " + e
//                     }

//                     function i(e) {
//                         return a(e.substr(0, e.indexOf(" "))) ? "viru " + e : "virun " + e
//                     }

//                     function a(e) {
//                         if (e = parseInt(e, 10), isNaN(e)) return !1;
//                         if (e < 0) return !0;
//                         if (e < 10) return 4 <= e && e <= 7;
//                         if (e < 100) {
//                             var t = e % 10;
//                             return a(0 === t ? e / 10 : t)
//                         }
//                         if (e < 1e4) {
//                             for (; e >= 10;) e /= 10;
//                             return a(e)
//                         }
//                         return a(e /= 1e3)
//                     }
//                     e.defineLocale("lb", {
//                         months: "Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),
//                         monthsShort: "Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),
//                         weekdaysShort: "So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),
//                         weekdaysMin: "So_Mé_Dë_Më_Do_Fr_Sa".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm [Auer]",
//                             LTS: "H:mm:ss [Auer]",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm [Auer]",
//                             LLLL: "dddd, D. MMMM YYYY H:mm [Auer]"
//                         },
//                         calendar: {
//                             sameDay: "[Haut um] LT",
//                             sameElse: "L",
//                             nextDay: "[Muer um] LT",
//                             nextWeek: "dddd [um] LT",
//                             lastDay: "[Gëschter um] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 2:
//                                     case 4:
//                                         return "[Leschten] dddd [um] LT";
//                                     default:
//                                         return "[Leschte] dddd [um] LT"
//                                 }
//                             }
//                         },
//                         relativeTime: {
//                             future: n,
//                             past: i,
//                             s: "e puer Sekonnen",
//                             ss: "%d Sekonnen",
//                             m: t,
//                             mm: "%d Minutten",
//                             h: t,
//                             hh: "%d Stonnen",
//                             d: t,
//                             dd: "%d Deeg",
//                             M: t,
//                             MM: "%d Méint",
//                             y: t,
//                             yy: "%d Joer"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5466: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("lo", {
//                         months: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
//                         monthsShort: "ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),
//                         weekdays: "ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
//                         weekdaysShort: "ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),
//                         weekdaysMin: "ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "ວັນdddd D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
//                         isPM: function(e) {
//                             return "ຕອນແລງ" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ຕອນເຊົ້າ" : "ຕອນແລງ"
//                         },
//                         calendar: {
//                             sameDay: "[ມື້ນີ້ເວລາ] LT",
//                             nextDay: "[ມື້ອື່ນເວລາ] LT",
//                             nextWeek: "[ວັນ]dddd[ໜ້າເວລາ] LT",
//                             lastDay: "[ມື້ວານນີ້ເວລາ] LT",
//                             lastWeek: "[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "ອີກ %s",
//                             past: "%sຜ່ານມາ",
//                             s: "ບໍ່ເທົ່າໃດວິນາທີ",
//                             ss: "%d ວິນາທີ",
//                             m: "1 ນາທີ",
//                             mm: "%d ນາທີ",
//                             h: "1 ຊົ່ວໂມງ",
//                             hh: "%d ຊົ່ວໂມງ",
//                             d: "1 ມື້",
//                             dd: "%d ມື້",
//                             M: "1 ເດືອນ",
//                             MM: "%d ເດືອນ",
//                             y: "1 ປີ",
//                             yy: "%d ປີ"
//                         },
//                         dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
//                         ordinal: function(e) {
//                             return "ທີ່" + e
//                         }
//                     })
//                 }(n(381))
//             },
//             7010: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         ss: "sekundė_sekundžių_sekundes",
//                         m: "minutė_minutės_minutę",
//                         mm: "minutės_minučių_minutes",
//                         h: "valanda_valandos_valandą",
//                         hh: "valandos_valandų_valandas",
//                         d: "diena_dienos_dieną",
//                         dd: "dienos_dienų_dienas",
//                         M: "mėnuo_mėnesio_mėnesį",
//                         MM: "mėnesiai_mėnesių_mėnesius",
//                         y: "metai_metų_metus",
//                         yy: "metai_metų_metus"
//                     };

//                     function n(e, t, n, i) {
//                         return t ? "kelios sekundės" : i ? "kelių sekundžių" : "kelias sekundes"
//                     }

//                     function i(e, t, n, i) {
//                         return t ? s(n)[0] : i ? s(n)[1] : s(n)[2]
//                     }

//                     function a(e) {
//                         return e % 10 == 0 || e > 10 && e < 20
//                     }

//                     function s(e) {
//                         return t[e].split("_")
//                     }

//                     function r(e, t, n, r) {
//                         var o = e + " ";
//                         return 1 === e ? o + i(e, t, n[0], r) : t ? o + (a(e) ? s(n)[1] : s(n)[0]) : r ? o + s(n)[1] : o + (a(e) ? s(n)[1] : s(n)[2])
//                     }
//                     e.defineLocale("lt", {
//                         months: {
//                             format: "sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),
//                             standalone: "sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),
//                             isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
//                         },
//                         monthsShort: "sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),
//                         weekdays: {
//                             format: "sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),
//                             standalone: "sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),
//                             isFormat: /dddd HH:mm/
//                         },
//                         weekdaysShort: "Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),
//                         weekdaysMin: "S_P_A_T_K_Pn_Š".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "YYYY [m.] MMMM D [d.]",
//                             LLL: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
//                             LLLL: "YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",
//                             l: "YYYY-MM-DD",
//                             ll: "YYYY [m.] MMMM D [d.]",
//                             lll: "YYYY [m.] MMMM D [d.], HH:mm [val.]",
//                             llll: "YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"
//                         },
//                         calendar: {
//                             sameDay: "[Šiandien] LT",
//                             nextDay: "[Rytoj] LT",
//                             nextWeek: "dddd LT",
//                             lastDay: "[Vakar] LT",
//                             lastWeek: "[Praėjusį] dddd LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "po %s",
//                             past: "prieš %s",
//                             s: n,
//                             ss: r,
//                             m: i,
//                             mm: r,
//                             h: i,
//                             hh: r,
//                             d: i,
//                             dd: r,
//                             M: i,
//                             MM: r,
//                             y: i,
//                             yy: r
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-oji/,
//                         ordinal: function(e) {
//                             return e + "-oji"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7595: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         ss: "sekundes_sekundēm_sekunde_sekundes".split("_"),
//                         m: "minūtes_minūtēm_minūte_minūtes".split("_"),
//                         mm: "minūtes_minūtēm_minūte_minūtes".split("_"),
//                         h: "stundas_stundām_stunda_stundas".split("_"),
//                         hh: "stundas_stundām_stunda_stundas".split("_"),
//                         d: "dienas_dienām_diena_dienas".split("_"),
//                         dd: "dienas_dienām_diena_dienas".split("_"),
//                         M: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
//                         MM: "mēneša_mēnešiem_mēnesis_mēneši".split("_"),
//                         y: "gada_gadiem_gads_gadi".split("_"),
//                         yy: "gada_gadiem_gads_gadi".split("_")
//                     };

//                     function n(e, t, n) {
//                         return n ? t % 10 == 1 && t % 100 != 11 ? e[2] : e[3] : t % 10 == 1 && t % 100 != 11 ? e[0] : e[1]
//                     }

//                     function i(e, i, a) {
//                         return e + " " + n(t[a], e, i)
//                     }

//                     function a(e, i, a) {
//                         return n(t[a], e, i)
//                     }

//                     function s(e, t) {
//                         return t ? "dažas sekundes" : "dažām sekundēm"
//                     }
//                     e.defineLocale("lv", {
//                         months: "janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),
//                         monthsShort: "jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),
//                         weekdays: "svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),
//                         weekdaysShort: "Sv_P_O_T_C_Pk_S".split("_"),
//                         weekdaysMin: "Sv_P_O_T_C_Pk_S".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY.",
//                             LL: "YYYY. [gada] D. MMMM",
//                             LLL: "YYYY. [gada] D. MMMM, HH:mm",
//                             LLLL: "YYYY. [gada] D. MMMM, dddd, HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Šodien pulksten] LT",
//                             nextDay: "[Rīt pulksten] LT",
//                             nextWeek: "dddd [pulksten] LT",
//                             lastDay: "[Vakar pulksten] LT",
//                             lastWeek: "[Pagājušā] dddd [pulksten] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "pēc %s",
//                             past: "pirms %s",
//                             s,
//                             ss: i,
//                             m: a,
//                             mm: i,
//                             h: a,
//                             hh: i,
//                             d: a,
//                             dd: i,
//                             M: a,
//                             MM: i,
//                             y: a,
//                             yy: i
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9861: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         words: {
//                             ss: ["sekund", "sekunda", "sekundi"],
//                             m: ["jedan minut", "jednog minuta"],
//                             mm: ["minut", "minuta", "minuta"],
//                             h: ["jedan sat", "jednog sata"],
//                             hh: ["sat", "sata", "sati"],
//                             dd: ["dan", "dana", "dana"],
//                             MM: ["mjesec", "mjeseca", "mjeseci"],
//                             yy: ["godina", "godine", "godina"]
//                         },
//                         correctGrammaticalCase: function(e, t) {
//                             return 1 === e ? t[0] : e >= 2 && e <= 4 ? t[1] : t[2]
//                         },
//                         translate: function(e, n, i) {
//                             var a = t.words[i];
//                             return 1 === i.length ? n ? a[0] : a[1] : e + " " + t.correctGrammaticalCase(e, a)
//                         }
//                     };
//                     e.defineLocale("me", {
//                         months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
//                         monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),
//                         weekdaysShort: "ned._pon._uto._sri._čet._pet._sub.".split("_"),
//                         weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd, D. MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[danas u] LT",
//                             nextDay: "[sjutra u] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[u] [nedjelju] [u] LT";
//                                     case 3:
//                                         return "[u] [srijedu] [u] LT";
//                                     case 6:
//                                         return "[u] [subotu] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[u] dddd [u] LT"
//                                 }
//                             },
//                             lastDay: "[juče u] LT",
//                             lastWeek: function() {
//                                 return ["[prošle] [nedjelje] [u] LT", "[prošlog] [ponedjeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srijede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()]
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "prije %s",
//                             s: "nekoliko sekundi",
//                             ss: t.translate,
//                             m: t.translate,
//                             mm: t.translate,
//                             h: t.translate,
//                             hh: t.translate,
//                             d: "dan",
//                             dd: t.translate,
//                             M: "mjesec",
//                             MM: t.translate,
//                             y: "godinu",
//                             yy: t.translate
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             5493: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("mi", {
//                         months: "Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),
//                         monthsShort: "Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),
//                         monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
//                         monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
//                         monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
//                         monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
//                         weekdays: "Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),
//                         weekdaysShort: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
//                         weekdaysMin: "Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [i] HH:mm",
//                             LLLL: "dddd, D MMMM YYYY [i] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[i teie mahana, i] LT",
//                             nextDay: "[apopo i] LT",
//                             nextWeek: "dddd [i] LT",
//                             lastDay: "[inanahi i] LT",
//                             lastWeek: "dddd [whakamutunga i] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "i roto i %s",
//                             past: "%s i mua",
//                             s: "te hēkona ruarua",
//                             ss: "%d hēkona",
//                             m: "he meneti",
//                             mm: "%d meneti",
//                             h: "te haora",
//                             hh: "%d haora",
//                             d: "he ra",
//                             dd: "%d ra",
//                             M: "he marama",
//                             MM: "%d marama",
//                             y: "he tau",
//                             yy: "%d tau"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5966: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("mk", {
//                         months: "јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),
//                         monthsShort: "јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),
//                         weekdays: "недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),
//                         weekdaysShort: "нед_пон_вто_сре_чет_пет_саб".split("_"),
//                         weekdaysMin: "нe_пo_вт_ср_че_пе_сa".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "D.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY H:mm",
//                             LLLL: "dddd, D MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Денес во] LT",
//                             nextDay: "[Утре во] LT",
//                             nextWeek: "[Во] dddd [во] LT",
//                             lastDay: "[Вчера во] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                     case 3:
//                                     case 6:
//                                         return "[Изминатата] dddd [во] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[Изминатиот] dddd [во] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "за %s",
//                             past: "пред %s",
//                             s: "неколку секунди",
//                             ss: "%d секунди",
//                             m: "една минута",
//                             mm: "%d минути",
//                             h: "еден час",
//                             hh: "%d часа",
//                             d: "еден ден",
//                             dd: "%d дена",
//                             M: "еден месец",
//                             MM: "%d месеци",
//                             y: "една година",
//                             yy: "%d години"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
//                         ordinal: function(e) {
//                             var t = e % 10,
//                                 n = e % 100;
//                             return 0 === e ? e + "-ев" : 0 === n ? e + "-ен" : n > 10 && n < 20 ? e + "-ти" : 1 === t ? e + "-ви" : 2 === t ? e + "-ри" : 7 === t || 8 === t ? e + "-ми" : e + "-ти"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7341: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ml", {
//                         months: "ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),
//                         monthsShort: "ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),
//                         weekdaysShort: "ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),
//                         weekdaysMin: "ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm -നു",
//                             LTS: "A h:mm:ss -നു",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm -നു",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm -നു"
//                         },
//                         calendar: {
//                             sameDay: "[ഇന്ന്] LT",
//                             nextDay: "[നാളെ] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[ഇന്നലെ] LT",
//                             lastWeek: "[കഴിഞ്ഞ] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s കഴിഞ്ഞ്",
//                             past: "%s മുൻപ്",
//                             s: "അൽപ നിമിഷങ്ങൾ",
//                             ss: "%d സെക്കൻഡ്",
//                             m: "ഒരു മിനിറ്റ്",
//                             mm: "%d മിനിറ്റ്",
//                             h: "ഒരു മണിക്കൂർ",
//                             hh: "%d മണിക്കൂർ",
//                             d: "ഒരു ദിവസം",
//                             dd: "%d ദിവസം",
//                             M: "ഒരു മാസം",
//                             MM: "%d മാസം",
//                             y: "ഒരു വർഷം",
//                             yy: "%d വർഷം"
//                         },
//                         meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "രാത്രി" === t && e >= 4 || "ഉച്ച കഴിഞ്ഞ്" === t || "വൈകുന്നേരം" === t ? e + 12 : e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "രാത്രി" : e < 12 ? "രാവിലെ" : e < 17 ? "ഉച്ച കഴിഞ്ഞ്" : e < 20 ? "വൈകുന്നേരം" : "രാത്രി"
//                         }
//                     })
//                 }(n(381))
//             },
//             5115: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         switch (n) {
//                             case "s":
//                                 return t ? "хэдхэн секунд" : "хэдхэн секундын";
//                             case "ss":
//                                 return e + (t ? " секунд" : " секундын");
//                             case "m":
//                             case "mm":
//                                 return e + (t ? " минут" : " минутын");
//                             case "h":
//                             case "hh":
//                                 return e + (t ? " цаг" : " цагийн");
//                             case "d":
//                             case "dd":
//                                 return e + (t ? " өдөр" : " өдрийн");
//                             case "M":
//                             case "MM":
//                                 return e + (t ? " сар" : " сарын");
//                             case "y":
//                             case "yy":
//                                 return e + (t ? " жил" : " жилийн");
//                             default:
//                                 return e
//                         }
//                     }
//                     e.defineLocale("mn", {
//                         months: "Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),
//                         monthsShort: "1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),
//                         weekdaysShort: "Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),
//                         weekdaysMin: "Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "YYYY оны MMMMын D",
//                             LLL: "YYYY оны MMMMын D HH:mm",
//                             LLLL: "dddd, YYYY оны MMMMын D HH:mm"
//                         },
//                         meridiemParse: /ҮӨ|ҮХ/i,
//                         isPM: function(e) {
//                             return "ҮХ" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ҮӨ" : "ҮХ"
//                         },
//                         calendar: {
//                             sameDay: "[Өнөөдөр] LT",
//                             nextDay: "[Маргааш] LT",
//                             nextWeek: "[Ирэх] dddd LT",
//                             lastDay: "[Өчигдөр] LT",
//                             lastWeek: "[Өнгөрсөн] dddd LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s дараа",
//                             past: "%s өмнө",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: t,
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + " өдөр";
//                                 default:
//                                     return e
//                             }
//                         }
//                     })
//                 }(n(381))
//             },
//             370: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "१",
//                             2: "२",
//                             3: "३",
//                             4: "४",
//                             5: "५",
//                             6: "६",
//                             7: "७",
//                             8: "८",
//                             9: "९",
//                             0: "०"
//                         },
//                         n = {
//                             "१": "1",
//                             "२": "2",
//                             "३": "3",
//                             "४": "4",
//                             "५": "5",
//                             "६": "6",
//                             "७": "7",
//                             "८": "8",
//                             "९": "9",
//                             "०": "0"
//                         };

//                     function i(e, t, n, i) {
//                         var a = "";
//                         if (t) switch (n) {
//                             case "s":
//                                 a = "काही सेकंद";
//                                 break;
//                             case "ss":
//                                 a = "%d सेकंद";
//                                 break;
//                             case "m":
//                                 a = "एक मिनिट";
//                                 break;
//                             case "mm":
//                                 a = "%d मिनिटे";
//                                 break;
//                             case "h":
//                                 a = "एक तास";
//                                 break;
//                             case "hh":
//                                 a = "%d तास";
//                                 break;
//                             case "d":
//                                 a = "एक दिवस";
//                                 break;
//                             case "dd":
//                                 a = "%d दिवस";
//                                 break;
//                             case "M":
//                                 a = "एक महिना";
//                                 break;
//                             case "MM":
//                                 a = "%d महिने";
//                                 break;
//                             case "y":
//                                 a = "एक वर्ष";
//                                 break;
//                             case "yy":
//                                 a = "%d वर्षे"
//                         } else switch (n) {
//                             case "s":
//                                 a = "काही सेकंदां";
//                                 break;
//                             case "ss":
//                                 a = "%d सेकंदां";
//                                 break;
//                             case "m":
//                                 a = "एका मिनिटा";
//                                 break;
//                             case "mm":
//                                 a = "%d मिनिटां";
//                                 break;
//                             case "h":
//                                 a = "एका तासा";
//                                 break;
//                             case "hh":
//                                 a = "%d तासां";
//                                 break;
//                             case "d":
//                                 a = "एका दिवसा";
//                                 break;
//                             case "dd":
//                                 a = "%d दिवसां";
//                                 break;
//                             case "M":
//                                 a = "एका महिन्या";
//                                 break;
//                             case "MM":
//                                 a = "%d महिन्यां";
//                                 break;
//                             case "y":
//                                 a = "एका वर्षा";
//                                 break;
//                             case "yy":
//                                 a = "%d वर्षां"
//                         }
//                         return a.replace(/%d/i, e)
//                     }
//                     e.defineLocale("mr", {
//                         months: "जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),
//                         monthsShort: "जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),
//                         weekdaysShort: "रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),
//                         weekdaysMin: "र_सो_मं_बु_गु_शु_श".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm वाजता",
//                             LTS: "A h:mm:ss वाजता",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm वाजता",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm वाजता"
//                         },
//                         calendar: {
//                             sameDay: "[आज] LT",
//                             nextDay: "[उद्या] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[काल] LT",
//                             lastWeek: "[मागील] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%sमध्ये",
//                             past: "%sपूर्वी",
//                             s: i,
//                             ss: i,
//                             m: i,
//                             mm: i,
//                             h: i,
//                             hh: i,
//                             d: i,
//                             dd: i,
//                             M: i,
//                             MM: i,
//                             y: i,
//                             yy: i
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[१२३४५६७८९०]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "पहाटे" === t || "सकाळी" === t ? e : "दुपारी" === t || "सायंकाळी" === t || "रात्री" === t ? e >= 12 ? e : e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e >= 0 && e < 6 ? "पहाटे" : e < 12 ? "सकाळी" : e < 17 ? "दुपारी" : e < 20 ? "सायंकाळी" : "रात्री"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             1237: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ms-my", {
//                         months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
//                         monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
//                         weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
//                         weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
//                         weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [pukul] HH.mm",
//                             LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
//                         },
//                         meridiemParse: /pagi|tengahari|petang|malam/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam"
//                         },
//                         calendar: {
//                             sameDay: "[Hari ini pukul] LT",
//                             nextDay: "[Esok pukul] LT",
//                             nextWeek: "dddd [pukul] LT",
//                             lastDay: "[Kelmarin pukul] LT",
//                             lastWeek: "dddd [lepas pukul] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dalam %s",
//                             past: "%s yang lepas",
//                             s: "beberapa saat",
//                             ss: "%d saat",
//                             m: "seminit",
//                             mm: "%d minit",
//                             h: "sejam",
//                             hh: "%d jam",
//                             d: "sehari",
//                             dd: "%d hari",
//                             M: "sebulan",
//                             MM: "%d bulan",
//                             y: "setahun",
//                             yy: "%d tahun"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             9847: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ms", {
//                         months: "Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),
//                         monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),
//                         weekdays: "Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),
//                         weekdaysShort: "Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),
//                         weekdaysMin: "Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [pukul] HH.mm",
//                             LLLL: "dddd, D MMMM YYYY [pukul] HH.mm"
//                         },
//                         meridiemParse: /pagi|tengahari|petang|malam/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "pagi" === t ? e : "tengahari" === t ? e >= 11 ? e : e + 12 : "petang" === t || "malam" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 11 ? "pagi" : e < 15 ? "tengahari" : e < 19 ? "petang" : "malam"
//                         },
//                         calendar: {
//                             sameDay: "[Hari ini pukul] LT",
//                             nextDay: "[Esok pukul] LT",
//                             nextWeek: "dddd [pukul] LT",
//                             lastDay: "[Kelmarin pukul] LT",
//                             lastWeek: "dddd [lepas pukul] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dalam %s",
//                             past: "%s yang lepas",
//                             s: "beberapa saat",
//                             ss: "%d saat",
//                             m: "seminit",
//                             mm: "%d minit",
//                             h: "sejam",
//                             hh: "%d jam",
//                             d: "sehari",
//                             dd: "%d hari",
//                             M: "sebulan",
//                             MM: "%d bulan",
//                             y: "setahun",
//                             yy: "%d tahun"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             2126: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("mt", {
//                         months: "Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),
//                         monthsShort: "Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),
//                         weekdays: "Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),
//                         weekdaysShort: "Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),
//                         weekdaysMin: "Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Illum fil-]LT",
//                             nextDay: "[Għada fil-]LT",
//                             nextWeek: "dddd [fil-]LT",
//                             lastDay: "[Il-bieraħ fil-]LT",
//                             lastWeek: "dddd [li għadda] [fil-]LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "f’ %s",
//                             past: "%s ilu",
//                             s: "ftit sekondi",
//                             ss: "%d sekondi",
//                             m: "minuta",
//                             mm: "%d minuti",
//                             h: "siegħa",
//                             hh: "%d siegħat",
//                             d: "ġurnata",
//                             dd: "%d ġranet",
//                             M: "xahar",
//                             MM: "%d xhur",
//                             y: "sena",
//                             yy: "%d sni"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6165: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "၁",
//                             2: "၂",
//                             3: "၃",
//                             4: "၄",
//                             5: "၅",
//                             6: "၆",
//                             7: "၇",
//                             8: "၈",
//                             9: "၉",
//                             0: "၀"
//                         },
//                         n = {
//                             "၁": "1",
//                             "၂": "2",
//                             "၃": "3",
//                             "၄": "4",
//                             "၅": "5",
//                             "၆": "6",
//                             "၇": "7",
//                             "၈": "8",
//                             "၉": "9",
//                             "၀": "0"
//                         };
//                     e.defineLocale("my", {
//                         months: "ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),
//                         monthsShort: "ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),
//                         weekdays: "တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),
//                         weekdaysShort: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
//                         weekdaysMin: "နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[ယနေ.] LT [မှာ]",
//                             nextDay: "[မနက်ဖြန်] LT [မှာ]",
//                             nextWeek: "dddd LT [မှာ]",
//                             lastDay: "[မနေ.က] LT [မှာ]",
//                             lastWeek: "[ပြီးခဲ့သော] dddd LT [မှာ]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "လာမည့် %s မှာ",
//                             past: "လွန်ခဲ့သော %s က",
//                             s: "စက္ကန်.အနည်းငယ်",
//                             ss: "%d စက္ကန့်",
//                             m: "တစ်မိနစ်",
//                             mm: "%d မိနစ်",
//                             h: "တစ်နာရီ",
//                             hh: "%d နာရီ",
//                             d: "တစ်ရက်",
//                             dd: "%d ရက်",
//                             M: "တစ်လ",
//                             MM: "%d လ",
//                             y: "တစ်နှစ်",
//                             yy: "%d နှစ်"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4924: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("nb", {
//                         months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
//                         monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),
//                         weekdaysShort: "sø._ma._ti._on._to._fr._lø.".split("_"),
//                         weekdaysMin: "sø_ma_ti_on_to_fr_lø".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY [kl.] HH:mm",
//                             LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[i dag kl.] LT",
//                             nextDay: "[i morgen kl.] LT",
//                             nextWeek: "dddd [kl.] LT",
//                             lastDay: "[i går kl.] LT",
//                             lastWeek: "[forrige] dddd [kl.] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "om %s",
//                             past: "%s siden",
//                             s: "noen sekunder",
//                             ss: "%d sekunder",
//                             m: "ett minutt",
//                             mm: "%d minutter",
//                             h: "en time",
//                             hh: "%d timer",
//                             d: "en dag",
//                             dd: "%d dager",
//                             w: "en uke",
//                             ww: "%d uker",
//                             M: "en måned",
//                             MM: "%d måneder",
//                             y: "ett år",
//                             yy: "%d år"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6744: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "१",
//                             2: "२",
//                             3: "३",
//                             4: "४",
//                             5: "५",
//                             6: "६",
//                             7: "७",
//                             8: "८",
//                             9: "९",
//                             0: "०"
//                         },
//                         n = {
//                             "१": "1",
//                             "२": "2",
//                             "३": "3",
//                             "४": "4",
//                             "५": "5",
//                             "६": "6",
//                             "७": "7",
//                             "८": "8",
//                             "९": "9",
//                             "०": "0"
//                         };
//                     e.defineLocale("ne", {
//                         months: "जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),
//                         monthsShort: "जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),
//                         weekdaysShort: "आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),
//                         weekdaysMin: "आ._सो._मं._बु._बि._शु._श.".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "Aको h:mm बजे",
//                             LTS: "Aको h:mm:ss बजे",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, Aको h:mm बजे",
//                             LLLL: "dddd, D MMMM YYYY, Aको h:mm बजे"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[१२३४५६७८९०]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "राति" === t ? e < 4 ? e : e + 12 : "बिहान" === t ? e : "दिउँसो" === t ? e >= 10 ? e : e + 12 : "साँझ" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 3 ? "राति" : e < 12 ? "बिहान" : e < 16 ? "दिउँसो" : e < 20 ? "साँझ" : "राति"
//                         },
//                         calendar: {
//                             sameDay: "[आज] LT",
//                             nextDay: "[भोलि] LT",
//                             nextWeek: "[आउँदो] dddd[,] LT",
//                             lastDay: "[हिजो] LT",
//                             lastWeek: "[गएको] dddd[,] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%sमा",
//                             past: "%s अगाडि",
//                             s: "केही क्षण",
//                             ss: "%d सेकेण्ड",
//                             m: "एक मिनेट",
//                             mm: "%d मिनेट",
//                             h: "एक घण्टा",
//                             hh: "%d घण्टा",
//                             d: "एक दिन",
//                             dd: "%d दिन",
//                             M: "एक महिना",
//                             MM: "%d महिना",
//                             y: "एक बर्ष",
//                             yy: "%d बर्ष"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             9814: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
//                         n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
//                         i = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
//                         a = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
//                     e.defineLocale("nl-be", {
//                         months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
//                         monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
//                         weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
//                         weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[vandaag om] LT",
//                             nextDay: "[morgen om] LT",
//                             nextWeek: "dddd [om] LT",
//                             lastDay: "[gisteren om] LT",
//                             lastWeek: "[afgelopen] dddd [om] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "over %s",
//                             past: "%s geleden",
//                             s: "een paar seconden",
//                             ss: "%d seconden",
//                             m: "één minuut",
//                             mm: "%d minuten",
//                             h: "één uur",
//                             hh: "%d uur",
//                             d: "één dag",
//                             dd: "%d dagen",
//                             M: "één maand",
//                             MM: "%d maanden",
//                             y: "één jaar",
//                             yy: "%d jaar"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
//                         ordinal: function(e) {
//                             return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             3901: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),
//                         n = "jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),
//                         i = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i],
//                         a = /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;
//                     e.defineLocale("nl", {
//                         months: "januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),
//                         monthsShort: function(e, i) {
//                             return e ? /-MMM-/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsRegex: a,
//                         monthsShortRegex: a,
//                         monthsStrictRegex: /^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,
//                         monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),
//                         weekdaysShort: "zo._ma._di._wo._do._vr._za.".split("_"),
//                         weekdaysMin: "zo_ma_di_wo_do_vr_za".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD-MM-YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[vandaag om] LT",
//                             nextDay: "[morgen om] LT",
//                             nextWeek: "dddd [om] LT",
//                             lastDay: "[gisteren om] LT",
//                             lastWeek: "[afgelopen] dddd [om] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "over %s",
//                             past: "%s geleden",
//                             s: "een paar seconden",
//                             ss: "%d seconden",
//                             m: "één minuut",
//                             mm: "%d minuten",
//                             h: "één uur",
//                             hh: "%d uur",
//                             d: "één dag",
//                             dd: "%d dagen",
//                             w: "één week",
//                             ww: "%d weken",
//                             M: "één maand",
//                             MM: "%d maanden",
//                             y: "één jaar",
//                             yy: "%d jaar"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
//                         ordinal: function(e) {
//                             return e + (1 === e || 8 === e || e >= 20 ? "ste" : "de")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             3877: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("nn", {
//                         months: "januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),
//                         monthsShort: "jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),
//                         weekdaysShort: "su._må._ty._on._to._fr._lau.".split("_"),
//                         weekdaysMin: "su_må_ty_on_to_fr_la".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY [kl.] H:mm",
//                             LLLL: "dddd D. MMMM YYYY [kl.] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[I dag klokka] LT",
//                             nextDay: "[I morgon klokka] LT",
//                             nextWeek: "dddd [klokka] LT",
//                             lastDay: "[I går klokka] LT",
//                             lastWeek: "[Føregåande] dddd [klokka] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "om %s",
//                             past: "%s sidan",
//                             s: "nokre sekund",
//                             ss: "%d sekund",
//                             m: "eit minutt",
//                             mm: "%d minutt",
//                             h: "ein time",
//                             hh: "%d timar",
//                             d: "ein dag",
//                             dd: "%d dagar",
//                             w: "ei veke",
//                             ww: "%d veker",
//                             M: "ein månad",
//                             MM: "%d månader",
//                             y: "eit år",
//                             yy: "%d år"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             2135: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("oc-lnc", {
//                         months: {
//                             standalone: "genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),
//                             format: "de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),
//                             isFormat: /D[oD]?(\s)+MMMM/
//                         },
//                         monthsShort: "gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),
//                         weekdaysShort: "dg._dl._dm._dc._dj._dv._ds.".split("_"),
//                         weekdaysMin: "dg_dl_dm_dc_dj_dv_ds".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM [de] YYYY",
//                             ll: "D MMM YYYY",
//                             LLL: "D MMMM [de] YYYY [a] H:mm",
//                             lll: "D MMM YYYY, H:mm",
//                             LLLL: "dddd D MMMM [de] YYYY [a] H:mm",
//                             llll: "ddd D MMM YYYY, H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[uèi a] LT",
//                             nextDay: "[deman a] LT",
//                             nextWeek: "dddd [a] LT",
//                             lastDay: "[ièr a] LT",
//                             lastWeek: "dddd [passat a] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "d'aquí %s",
//                             past: "fa %s",
//                             s: "unas segondas",
//                             ss: "%d segondas",
//                             m: "una minuta",
//                             mm: "%d minutas",
//                             h: "una ora",
//                             hh: "%d oras",
//                             d: "un jorn",
//                             dd: "%d jorns",
//                             M: "un mes",
//                             MM: "%d meses",
//                             y: "un an",
//                             yy: "%d ans"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
//                         ordinal: function(e, t) {
//                             var n = 1 === e ? "r" : 2 === e ? "n" : 3 === e ? "r" : 4 === e ? "t" : "è";
//                             return "w" !== t && "W" !== t || (n = "a"), e + n
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5858: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "੧",
//                             2: "੨",
//                             3: "੩",
//                             4: "੪",
//                             5: "੫",
//                             6: "੬",
//                             7: "੭",
//                             8: "੮",
//                             9: "੯",
//                             0: "੦"
//                         },
//                         n = {
//                             "੧": "1",
//                             "੨": "2",
//                             "੩": "3",
//                             "੪": "4",
//                             "੫": "5",
//                             "੬": "6",
//                             "੭": "7",
//                             "੮": "8",
//                             "੯": "9",
//                             "੦": "0"
//                         };
//                     e.defineLocale("pa-in", {
//                         months: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
//                         monthsShort: "ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),
//                         weekdays: "ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),
//                         weekdaysShort: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
//                         weekdaysMin: "ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm ਵਜੇ",
//                             LTS: "A h:mm:ss ਵਜੇ",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm ਵਜੇ",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm ਵਜੇ"
//                         },
//                         calendar: {
//                             sameDay: "[ਅਜ] LT",
//                             nextDay: "[ਕਲ] LT",
//                             nextWeek: "[ਅਗਲਾ] dddd, LT",
//                             lastDay: "[ਕਲ] LT",
//                             lastWeek: "[ਪਿਛਲੇ] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s ਵਿੱਚ",
//                             past: "%s ਪਿਛਲੇ",
//                             s: "ਕੁਝ ਸਕਿੰਟ",
//                             ss: "%d ਸਕਿੰਟ",
//                             m: "ਇਕ ਮਿੰਟ",
//                             mm: "%d ਮਿੰਟ",
//                             h: "ਇੱਕ ਘੰਟਾ",
//                             hh: "%d ਘੰਟੇ",
//                             d: "ਇੱਕ ਦਿਨ",
//                             dd: "%d ਦਿਨ",
//                             M: "ਇੱਕ ਮਹੀਨਾ",
//                             MM: "%d ਮਹੀਨੇ",
//                             y: "ਇੱਕ ਸਾਲ",
//                             yy: "%d ਸਾਲ"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "ਰਾਤ" === t ? e < 4 ? e : e + 12 : "ਸਵੇਰ" === t ? e : "ਦੁਪਹਿਰ" === t ? e >= 10 ? e : e + 12 : "ਸ਼ਾਮ" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "ਰਾਤ" : e < 10 ? "ਸਵੇਰ" : e < 17 ? "ਦੁਪਹਿਰ" : e < 20 ? "ਸ਼ਾਮ" : "ਰਾਤ"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             4495: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),
//                         n = "stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),
//                         i = [/^sty/i, /^lut/i, /^mar/i, /^kwi/i, /^maj/i, /^cze/i, /^lip/i, /^sie/i, /^wrz/i, /^paź/i, /^lis/i, /^gru/i];

//                     function a(e) {
//                         return e % 10 < 5 && e % 10 > 1 && ~~(e / 10) % 10 != 1
//                     }

//                     function s(e, t, n) {
//                         var i = e + " ";
//                         switch (n) {
//                             case "ss":
//                                 return i + (a(e) ? "sekundy" : "sekund");
//                             case "m":
//                                 return t ? "minuta" : "minutę";
//                             case "mm":
//                                 return i + (a(e) ? "minuty" : "minut");
//                             case "h":
//                                 return t ? "godzina" : "godzinę";
//                             case "hh":
//                                 return i + (a(e) ? "godziny" : "godzin");
//                             case "ww":
//                                 return i + (a(e) ? "tygodnie" : "tygodni");
//                             case "MM":
//                                 return i + (a(e) ? "miesiące" : "miesięcy");
//                             case "yy":
//                                 return i + (a(e) ? "lata" : "lat")
//                         }
//                     }
//                     e.defineLocale("pl", {
//                         months: function(e, i) {
//                             return e ? /D MMMM/.test(i) ? n[e.month()] : t[e.month()] : t
//                         },
//                         monthsShort: "sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         weekdays: "niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),
//                         weekdaysShort: "ndz_pon_wt_śr_czw_pt_sob".split("_"),
//                         weekdaysMin: "Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Dziś o] LT",
//                             nextDay: "[Jutro o] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[W niedzielę o] LT";
//                                     case 2:
//                                         return "[We wtorek o] LT";
//                                     case 3:
//                                         return "[W środę o] LT";
//                                     case 6:
//                                         return "[W sobotę o] LT";
//                                     default:
//                                         return "[W] dddd [o] LT"
//                                 }
//                             },
//                             lastDay: "[Wczoraj o] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[W zeszłą niedzielę o] LT";
//                                     case 3:
//                                         return "[W zeszłą środę o] LT";
//                                     case 6:
//                                         return "[W zeszłą sobotę o] LT";
//                                     default:
//                                         return "[W zeszły] dddd [o] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "%s temu",
//                             s: "kilka sekund",
//                             ss: s,
//                             m: s,
//                             mm: s,
//                             h: s,
//                             hh: s,
//                             d: "1 dzień",
//                             dd: "%d dni",
//                             w: "tydzień",
//                             ww: s,
//                             M: "miesiąc",
//                             MM: s,
//                             y: "rok",
//                             yy: s
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7971: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("pt-br", {
//                         months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
//                         monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
//                         weekdays: "domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),
//                         weekdaysShort: "dom_seg_ter_qua_qui_sex_sáb".split("_"),
//                         weekdaysMin: "do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY [às] HH:mm",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY [às] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Hoje às] LT",
//                             nextDay: "[Amanhã às] LT",
//                             nextWeek: "dddd [às] LT",
//                             lastDay: "[Ontem às] LT",
//                             lastWeek: function() {
//                                 return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "em %s",
//                             past: "há %s",
//                             s: "poucos segundos",
//                             ss: "%d segundos",
//                             m: "um minuto",
//                             mm: "%d minutos",
//                             h: "uma hora",
//                             hh: "%d horas",
//                             d: "um dia",
//                             dd: "%d dias",
//                             M: "um mês",
//                             MM: "%d meses",
//                             y: "um ano",
//                             yy: "%d anos"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         invalidDate: "Data inválida"
//                     })
//                 }(n(381))
//             },
//             9520: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("pt", {
//                         months: "janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),
//                         monthsShort: "jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),
//                         weekdays: "Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),
//                         weekdaysShort: "Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),
//                         weekdaysMin: "Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D [de] MMMM [de] YYYY",
//                             LLL: "D [de] MMMM [de] YYYY HH:mm",
//                             LLLL: "dddd, D [de] MMMM [de] YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Hoje às] LT",
//                             nextDay: "[Amanhã às] LT",
//                             nextWeek: "dddd [às] LT",
//                             lastDay: "[Ontem às] LT",
//                             lastWeek: function() {
//                                 return 0 === this.day() || 6 === this.day() ? "[Último] dddd [às] LT" : "[Última] dddd [às] LT"
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "em %s",
//                             past: "há %s",
//                             s: "segundos",
//                             ss: "%d segundos",
//                             m: "um minuto",
//                             mm: "%d minutos",
//                             h: "uma hora",
//                             hh: "%d horas",
//                             d: "um dia",
//                             dd: "%d dias",
//                             w: "uma semana",
//                             ww: "%d semanas",
//                             M: "um mês",
//                             MM: "%d meses",
//                             y: "um ano",
//                             yy: "%d anos"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}º/,
//                         ordinal: "%dº",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6459: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n) {
//                         var i = " ";
//                         return (e % 100 >= 20 || e >= 100 && e % 100 == 0) && (i = " de "), e + i + {
//                             ss: "secunde",
//                             mm: "minute",
//                             hh: "ore",
//                             dd: "zile",
//                             ww: "săptămâni",
//                             MM: "luni",
//                             yy: "ani"
//                         }[n]
//                     }
//                     e.defineLocale("ro", {
//                         months: "ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),
//                         monthsShort: "ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),
//                         weekdaysShort: "Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),
//                         weekdaysMin: "Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY H:mm",
//                             LLLL: "dddd, D MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[azi la] LT",
//                             nextDay: "[mâine la] LT",
//                             nextWeek: "dddd [la] LT",
//                             lastDay: "[ieri la] LT",
//                             lastWeek: "[fosta] dddd [la] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "peste %s",
//                             past: "%s în urmă",
//                             s: "câteva secunde",
//                             ss: t,
//                             m: "un minut",
//                             mm: t,
//                             h: "o oră",
//                             hh: t,
//                             d: "o zi",
//                             dd: t,
//                             w: "o săptămână",
//                             ww: t,
//                             M: "o lună",
//                             MM: t,
//                             y: "un an",
//                             yy: t
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             1793: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t) {
//                         var n = e.split("_");
//                         return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2]
//                     }

//                     function n(e, n, i) {
//                         return "m" === i ? n ? "минута" : "минуту" : e + " " + t({
//                             ss: n ? "секунда_секунды_секунд" : "секунду_секунды_секунд",
//                             mm: n ? "минута_минуты_минут" : "минуту_минуты_минут",
//                             hh: "час_часа_часов",
//                             dd: "день_дня_дней",
//                             ww: "неделя_недели_недель",
//                             MM: "месяц_месяца_месяцев",
//                             yy: "год_года_лет"
//                         }[i], +e)
//                     }
//                     var i = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];
//                     e.defineLocale("ru", {
//                         months: {
//                             format: "января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),
//                             standalone: "январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")
//                         },
//                         monthsShort: {
//                             format: "янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),
//                             standalone: "янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")
//                         },
//                         weekdays: {
//                             standalone: "воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),
//                             format: "воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),
//                             isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/
//                         },
//                         weekdaysShort: "вс_пн_вт_ср_чт_пт_сб".split("_"),
//                         weekdaysMin: "вс_пн_вт_ср_чт_пт_сб".split("_"),
//                         monthsParse: i,
//                         longMonthsParse: i,
//                         shortMonthsParse: i,
//                         monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
//                         monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,
//                         monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,
//                         monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY г.",
//                             LLL: "D MMMM YYYY г., H:mm",
//                             LLLL: "dddd, D MMMM YYYY г., H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Сегодня, в] LT",
//                             nextDay: "[Завтра, в] LT",
//                             lastDay: "[Вчера, в] LT",
//                             nextWeek: function(e) {
//                                 if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[В следующее] dddd, [в] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                         return "[В следующий] dddd, [в] LT";
//                                     case 3:
//                                     case 5:
//                                     case 6:
//                                         return "[В следующую] dddd, [в] LT"
//                                 }
//                             },
//                             lastWeek: function(e) {
//                                 if (e.week() === this.week()) return 2 === this.day() ? "[Во] dddd, [в] LT" : "[В] dddd, [в] LT";
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[В прошлое] dddd, [в] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                         return "[В прошлый] dddd, [в] LT";
//                                     case 3:
//                                     case 5:
//                                     case 6:
//                                         return "[В прошлую] dddd, [в] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "через %s",
//                             past: "%s назад",
//                             s: "несколько секунд",
//                             ss: n,
//                             m: n,
//                             mm: n,
//                             h: "час",
//                             hh: n,
//                             d: "день",
//                             dd: n,
//                             w: "неделя",
//                             ww: n,
//                             M: "месяц",
//                             MM: n,
//                             y: "год",
//                             yy: n
//                         },
//                         meridiemParse: /ночи|утра|дня|вечера/i,
//                         isPM: function(e) {
//                             return /^(дня|вечера)$/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "ночи" : e < 12 ? "утра" : e < 17 ? "дня" : "вечера"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "M":
//                                 case "d":
//                                 case "DDD":
//                                     return e + "-й";
//                                 case "D":
//                                     return e + "-го";
//                                 case "w":
//                                 case "W":
//                                     return e + "-я";
//                                 default:
//                                     return e
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             950: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = ["جنوري", "فيبروري", "مارچ", "اپريل", "مئي", "جون", "جولاءِ", "آگسٽ", "سيپٽمبر", "آڪٽوبر", "نومبر", "ڊسمبر"],
//                         n = ["آچر", "سومر", "اڱارو", "اربع", "خميس", "جمع", "ڇنڇر"];
//                     e.defineLocale("sd", {
//                         months: t,
//                         monthsShort: t,
//                         weekdays: n,
//                         weekdaysShort: n,
//                         weekdaysMin: n,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd، D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /صبح|شام/,
//                         isPM: function(e) {
//                             return "شام" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "صبح" : "شام"
//                         },
//                         calendar: {
//                             sameDay: "[اڄ] LT",
//                             nextDay: "[سڀاڻي] LT",
//                             nextWeek: "dddd [اڳين هفتي تي] LT",
//                             lastDay: "[ڪالهه] LT",
//                             lastWeek: "[گزريل هفتي] dddd [تي] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s پوء",
//                             past: "%s اڳ",
//                             s: "چند سيڪنڊ",
//                             ss: "%d سيڪنڊ",
//                             m: "هڪ منٽ",
//                             mm: "%d منٽ",
//                             h: "هڪ ڪلاڪ",
//                             hh: "%d ڪلاڪ",
//                             d: "هڪ ڏينهن",
//                             dd: "%d ڏينهن",
//                             M: "هڪ مهينو",
//                             MM: "%d مهينا",
//                             y: "هڪ سال",
//                             yy: "%d سال"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             490: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("se", {
//                         months: "ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),
//                         monthsShort: "ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),
//                         weekdays: "sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),
//                         weekdaysShort: "sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),
//                         weekdaysMin: "s_v_m_g_d_b_L".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "MMMM D. [b.] YYYY",
//                             LLL: "MMMM D. [b.] YYYY [ti.] HH:mm",
//                             LLLL: "dddd, MMMM D. [b.] YYYY [ti.] HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[otne ti] LT",
//                             nextDay: "[ihttin ti] LT",
//                             nextWeek: "dddd [ti] LT",
//                             lastDay: "[ikte ti] LT",
//                             lastWeek: "[ovddit] dddd [ti] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s geažes",
//                             past: "maŋit %s",
//                             s: "moadde sekunddat",
//                             ss: "%d sekunddat",
//                             m: "okta minuhta",
//                             mm: "%d minuhtat",
//                             h: "okta diimmu",
//                             hh: "%d diimmut",
//                             d: "okta beaivi",
//                             dd: "%d beaivvit",
//                             M: "okta mánnu",
//                             MM: "%d mánut",
//                             y: "okta jahki",
//                             yy: "%d jagit"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             124: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("si", {
//                         months: "ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),
//                         monthsShort: "ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),
//                         weekdays: "ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),
//                         weekdaysShort: "ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),
//                         weekdaysMin: "ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "a h:mm",
//                             LTS: "a h:mm:ss",
//                             L: "YYYY/MM/DD",
//                             LL: "YYYY MMMM D",
//                             LLL: "YYYY MMMM D, a h:mm",
//                             LLLL: "YYYY MMMM D [වැනි] dddd, a h:mm:ss"
//                         },
//                         calendar: {
//                             sameDay: "[අද] LT[ට]",
//                             nextDay: "[හෙට] LT[ට]",
//                             nextWeek: "dddd LT[ට]",
//                             lastDay: "[ඊයේ] LT[ට]",
//                             lastWeek: "[පසුගිය] dddd LT[ට]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%sකින්",
//                             past: "%sකට පෙර",
//                             s: "තත්පර කිහිපය",
//                             ss: "තත්පර %d",
//                             m: "මිනිත්තුව",
//                             mm: "මිනිත්තු %d",
//                             h: "පැය",
//                             hh: "පැය %d",
//                             d: "දිනය",
//                             dd: "දින %d",
//                             M: "මාසය",
//                             MM: "මාස %d",
//                             y: "වසර",
//                             yy: "වසර %d"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
//                         ordinal: function(e) {
//                             return e + " වැනි"
//                         },
//                         meridiemParse: /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
//                         isPM: function(e) {
//                             return "ප.ව." === e || "පස් වරු" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e > 11 ? n ? "ප.ව." : "පස් වරු" : n ? "පෙ.ව." : "පෙර වරු"
//                         }
//                     })
//                 }(n(381))
//             },
//             4249: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),
//                         n = "jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");

//                     function i(e) {
//                         return e > 1 && e < 5
//                     }

//                     function a(e, t, n, a) {
//                         var s = e + " ";
//                         switch (n) {
//                             case "s":
//                                 return t || a ? "pár sekúnd" : "pár sekundami";
//                             case "ss":
//                                 return t || a ? s + (i(e) ? "sekundy" : "sekúnd") : s + "sekundami";
//                             case "m":
//                                 return t ? "minúta" : a ? "minútu" : "minútou";
//                             case "mm":
//                                 return t || a ? s + (i(e) ? "minúty" : "minút") : s + "minútami";
//                             case "h":
//                                 return t ? "hodina" : a ? "hodinu" : "hodinou";
//                             case "hh":
//                                 return t || a ? s + (i(e) ? "hodiny" : "hodín") : s + "hodinami";
//                             case "d":
//                                 return t || a ? "deň" : "dňom";
//                             case "dd":
//                                 return t || a ? s + (i(e) ? "dni" : "dní") : s + "dňami";
//                             case "M":
//                                 return t || a ? "mesiac" : "mesiacom";
//                             case "MM":
//                                 return t || a ? s + (i(e) ? "mesiace" : "mesiacov") : s + "mesiacmi";
//                             case "y":
//                                 return t || a ? "rok" : "rokom";
//                             case "yy":
//                                 return t || a ? s + (i(e) ? "roky" : "rokov") : s + "rokmi"
//                         }
//                     }
//                     e.defineLocale("sk", {
//                         months: t,
//                         monthsShort: n,
//                         weekdays: "nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),
//                         weekdaysShort: "ne_po_ut_st_št_pi_so".split("_"),
//                         weekdaysMin: "ne_po_ut_st_št_pi_so".split("_"),
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd D. MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[dnes o] LT",
//                             nextDay: "[zajtra o] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[v nedeľu o] LT";
//                                     case 1:
//                                     case 2:
//                                         return "[v] dddd [o] LT";
//                                     case 3:
//                                         return "[v stredu o] LT";
//                                     case 4:
//                                         return "[vo štvrtok o] LT";
//                                     case 5:
//                                         return "[v piatok o] LT";
//                                     case 6:
//                                         return "[v sobotu o] LT"
//                                 }
//                             },
//                             lastDay: "[včera o] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[minulú nedeľu o] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[minulý] dddd [o] LT";
//                                     case 3:
//                                         return "[minulú stredu o] LT";
//                                     case 6:
//                                         return "[minulú sobotu o] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "pred %s",
//                             s: a,
//                             ss: a,
//                             m: a,
//                             mm: a,
//                             h: a,
//                             hh: a,
//                             d: a,
//                             dd: a,
//                             M: a,
//                             MM: a,
//                             y: a,
//                             yy: a
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4985: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = e + " ";
//                         switch (n) {
//                             case "s":
//                                 return t || i ? "nekaj sekund" : "nekaj sekundami";
//                             case "ss":
//                                 return a += 1 === e ? t ? "sekundo" : "sekundi" : 2 === e ? t || i ? "sekundi" : "sekundah" : e < 5 ? t || i ? "sekunde" : "sekundah" : "sekund";
//                             case "m":
//                                 return t ? "ena minuta" : "eno minuto";
//                             case "mm":
//                                 return a += 1 === e ? t ? "minuta" : "minuto" : 2 === e ? t || i ? "minuti" : "minutama" : e < 5 ? t || i ? "minute" : "minutami" : t || i ? "minut" : "minutami";
//                             case "h":
//                                 return t ? "ena ura" : "eno uro";
//                             case "hh":
//                                 return a += 1 === e ? t ? "ura" : "uro" : 2 === e ? t || i ? "uri" : "urama" : e < 5 ? t || i ? "ure" : "urami" : t || i ? "ur" : "urami";
//                             case "d":
//                                 return t || i ? "en dan" : "enim dnem";
//                             case "dd":
//                                 return a += 1 === e ? t || i ? "dan" : "dnem" : 2 === e ? t || i ? "dni" : "dnevoma" : t || i ? "dni" : "dnevi";
//                             case "M":
//                                 return t || i ? "en mesec" : "enim mesecem";
//                             case "MM":
//                                 return a += 1 === e ? t || i ? "mesec" : "mesecem" : 2 === e ? t || i ? "meseca" : "mesecema" : e < 5 ? t || i ? "mesece" : "meseci" : t || i ? "mesecev" : "meseci";
//                             case "y":
//                                 return t || i ? "eno leto" : "enim letom";
//                             case "yy":
//                                 return a += 1 === e ? t || i ? "leto" : "letom" : 2 === e ? t || i ? "leti" : "letoma" : e < 5 ? t || i ? "leta" : "leti" : t || i ? "let" : "leti"
//                         }
//                     }
//                     e.defineLocale("sl", {
//                         months: "januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),
//                         monthsShort: "jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),
//                         weekdaysShort: "ned._pon._tor._sre._čet._pet._sob.".split("_"),
//                         weekdaysMin: "ne_po_to_sr_če_pe_so".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD. MM. YYYY",
//                             LL: "D. MMMM YYYY",
//                             LLL: "D. MMMM YYYY H:mm",
//                             LLLL: "dddd, D. MMMM YYYY H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[danes ob] LT",
//                             nextDay: "[jutri ob] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[v] [nedeljo] [ob] LT";
//                                     case 3:
//                                         return "[v] [sredo] [ob] LT";
//                                     case 6:
//                                         return "[v] [soboto] [ob] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[v] dddd [ob] LT"
//                                 }
//                             },
//                             lastDay: "[včeraj ob] LT",
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[prejšnjo] [nedeljo] [ob] LT";
//                                     case 3:
//                                         return "[prejšnjo] [sredo] [ob] LT";
//                                     case 6:
//                                         return "[prejšnjo] [soboto] [ob] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[prejšnji] dddd [ob] LT"
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "čez %s",
//                             past: "pred %s",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: t,
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             1104: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("sq", {
//                         months: "Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),
//                         monthsShort: "Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),
//                         weekdays: "E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),
//                         weekdaysShort: "Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),
//                         weekdaysMin: "D_H_Ma_Më_E_P_Sh".split("_"),
//                         weekdaysParseExact: !0,
//                         meridiemParse: /PD|MD/,
//                         isPM: function(e) {
//                             return "M" === e.charAt(0)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "PD" : "MD"
//                         },
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Sot në] LT",
//                             nextDay: "[Nesër në] LT",
//                             nextWeek: "dddd [në] LT",
//                             lastDay: "[Dje në] LT",
//                             lastWeek: "dddd [e kaluar në] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "në %s",
//                             past: "%s më parë",
//                             s: "disa sekonda",
//                             ss: "%d sekonda",
//                             m: "një minutë",
//                             mm: "%d minuta",
//                             h: "një orë",
//                             hh: "%d orë",
//                             d: "një ditë",
//                             dd: "%d ditë",
//                             M: "një muaj",
//                             MM: "%d muaj",
//                             y: "një vit",
//                             yy: "%d vite"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9915: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         words: {
//                             ss: ["секунда", "секунде", "секунди"],
//                             m: ["један минут", "једног минута"],
//                             mm: ["минут", "минута", "минута"],
//                             h: ["један сат", "једног сата"],
//                             hh: ["сат", "сата", "сати"],
//                             d: ["један дан", "једног дана"],
//                             dd: ["дан", "дана", "дана"],
//                             M: ["један месец", "једног месеца"],
//                             MM: ["месец", "месеца", "месеци"],
//                             y: ["једну годину", "једне године"],
//                             yy: ["годину", "године", "година"]
//                         },
//                         correctGrammaticalCase: function(e, t) {
//                             return e % 10 >= 1 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? e % 10 == 1 ? t[0] : t[1] : t[2]
//                         },
//                         translate: function(e, n, i, a) {
//                             var s, r = t.words[i];
//                             return 1 === i.length ? "y" === i && n ? "једна година" : a || n ? r[0] : r[1] : (s = t.correctGrammaticalCase(e, r), "yy" === i && n && "годину" === s ? e + " година" : e + " " + s)
//                         }
//                     };
//                     e.defineLocale("sr-cyrl", {
//                         months: "јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),
//                         monthsShort: "јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),
//                         weekdaysShort: "нед._пон._уто._сре._чет._пет._суб.".split("_"),
//                         weekdaysMin: "не_по_ут_ср_че_пе_су".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "D. M. YYYY.",
//                             LL: "D. MMMM YYYY.",
//                             LLL: "D. MMMM YYYY. H:mm",
//                             LLLL: "dddd, D. MMMM YYYY. H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[данас у] LT",
//                             nextDay: "[сутра у] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[у] [недељу] [у] LT";
//                                     case 3:
//                                         return "[у] [среду] [у] LT";
//                                     case 6:
//                                         return "[у] [суботу] [у] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[у] dddd [у] LT"
//                                 }
//                             },
//                             lastDay: "[јуче у] LT",
//                             lastWeek: function() {
//                                 return ["[прошле] [недеље] [у] LT", "[прошлог] [понедељка] [у] LT", "[прошлог] [уторка] [у] LT", "[прошле] [среде] [у] LT", "[прошлог] [четвртка] [у] LT", "[прошлог] [петка] [у] LT", "[прошле] [суботе] [у] LT"][this.day()]
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "за %s",
//                             past: "пре %s",
//                             s: "неколико секунди",
//                             ss: t.translate,
//                             m: t.translate,
//                             mm: t.translate,
//                             h: t.translate,
//                             hh: t.translate,
//                             d: t.translate,
//                             dd: t.translate,
//                             M: t.translate,
//                             MM: t.translate,
//                             y: t.translate,
//                             yy: t.translate
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             9131: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         words: {
//                             ss: ["sekunda", "sekunde", "sekundi"],
//                             m: ["jedan minut", "jednog minuta"],
//                             mm: ["minut", "minuta", "minuta"],
//                             h: ["jedan sat", "jednog sata"],
//                             hh: ["sat", "sata", "sati"],
//                             d: ["jedan dan", "jednog dana"],
//                             dd: ["dan", "dana", "dana"],
//                             M: ["jedan mesec", "jednog meseca"],
//                             MM: ["mesec", "meseca", "meseci"],
//                             y: ["jednu godinu", "jedne godine"],
//                             yy: ["godinu", "godine", "godina"]
//                         },
//                         correctGrammaticalCase: function(e, t) {
//                             return e % 10 >= 1 && e % 10 <= 4 && (e % 100 < 10 || e % 100 >= 20) ? e % 10 == 1 ? t[0] : t[1] : t[2]
//                         },
//                         translate: function(e, n, i, a) {
//                             var s, r = t.words[i];
//                             return 1 === i.length ? "y" === i && n ? "jedna godina" : a || n ? r[0] : r[1] : (s = t.correctGrammaticalCase(e, r), "yy" === i && n && "godinu" === s ? e + " godina" : e + " " + s)
//                         }
//                     };
//                     e.defineLocale("sr", {
//                         months: "januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),
//                         monthsShort: "jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),
//                         weekdaysShort: "ned._pon._uto._sre._čet._pet._sub.".split("_"),
//                         weekdaysMin: "ne_po_ut_sr_če_pe_su".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "D. M. YYYY.",
//                             LL: "D. MMMM YYYY.",
//                             LLL: "D. MMMM YYYY. H:mm",
//                             LLLL: "dddd, D. MMMM YYYY. H:mm"
//                         },
//                         calendar: {
//                             sameDay: "[danas u] LT",
//                             nextDay: "[sutra u] LT",
//                             nextWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                         return "[u] [nedelju] [u] LT";
//                                     case 3:
//                                         return "[u] [sredu] [u] LT";
//                                     case 6:
//                                         return "[u] [subotu] [u] LT";
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                     case 5:
//                                         return "[u] dddd [u] LT"
//                                 }
//                             },
//                             lastDay: "[juče u] LT",
//                             lastWeek: function() {
//                                 return ["[prošle] [nedelje] [u] LT", "[prošlog] [ponedeljka] [u] LT", "[prošlog] [utorka] [u] LT", "[prošle] [srede] [u] LT", "[prošlog] [četvrtka] [u] LT", "[prošlog] [petka] [u] LT", "[prošle] [subote] [u] LT"][this.day()]
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "za %s",
//                             past: "pre %s",
//                             s: "nekoliko sekundi",
//                             ss: t.translate,
//                             m: t.translate,
//                             mm: t.translate,
//                             h: t.translate,
//                             hh: t.translate,
//                             d: t.translate,
//                             dd: t.translate,
//                             M: t.translate,
//                             MM: t.translate,
//                             y: t.translate,
//                             yy: t.translate
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             5606: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ss", {
//                         months: "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),
//                         monthsShort: "Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),
//                         weekdays: "Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),
//                         weekdaysShort: "Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),
//                         weekdaysMin: "Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Namuhla nga] LT",
//                             nextDay: "[Kusasa nga] LT",
//                             nextWeek: "dddd [nga] LT",
//                             lastDay: "[Itolo nga] LT",
//                             lastWeek: "dddd [leliphelile] [nga] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "nga %s",
//                             past: "wenteka nga %s",
//                             s: "emizuzwana lomcane",
//                             ss: "%d mzuzwana",
//                             m: "umzuzu",
//                             mm: "%d emizuzu",
//                             h: "lihora",
//                             hh: "%d emahora",
//                             d: "lilanga",
//                             dd: "%d emalanga",
//                             M: "inyanga",
//                             MM: "%d tinyanga",
//                             y: "umnyaka",
//                             yy: "%d iminyaka"
//                         },
//                         meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
//                         meridiem: function(e, t, n) {
//                             return e < 11 ? "ekuseni" : e < 15 ? "emini" : e < 19 ? "entsambama" : "ebusuku"
//                         },
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "ekuseni" === t ? e : "emini" === t ? e >= 11 ? e : e + 12 : "entsambama" === t || "ebusuku" === t ? 0 === e ? 0 : e + 12 : void 0
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}/,
//                         ordinal: "%d",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             8760: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("sv", {
//                         months: "januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),
//                         monthsShort: "jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),
//                         weekdays: "söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),
//                         weekdaysShort: "sön_mån_tis_ons_tor_fre_lör".split("_"),
//                         weekdaysMin: "sö_må_ti_on_to_fr_lö".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY [kl.] HH:mm",
//                             LLLL: "dddd D MMMM YYYY [kl.] HH:mm",
//                             lll: "D MMM YYYY HH:mm",
//                             llll: "ddd D MMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Idag] LT",
//                             nextDay: "[Imorgon] LT",
//                             lastDay: "[Igår] LT",
//                             nextWeek: "[På] dddd LT",
//                             lastWeek: "[I] dddd[s] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "om %s",
//                             past: "för %s sedan",
//                             s: "några sekunder",
//                             ss: "%d sekunder",
//                             m: "en minut",
//                             mm: "%d minuter",
//                             h: "en timme",
//                             hh: "%d timmar",
//                             d: "en dag",
//                             dd: "%d dagar",
//                             M: "en månad",
//                             MM: "%d månader",
//                             y: "ett år",
//                             yy: "%d år"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(\:e|\:a)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? ":e" : 1 === t || 2 === t ? ":a" : ":e")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             1172: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("sw", {
//                         months: "Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),
//                         monthsShort: "Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),
//                         weekdays: "Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),
//                         weekdaysShort: "Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),
//                         weekdaysMin: "J2_J3_J4_J5_Al_Ij_J1".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "hh:mm A",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[leo saa] LT",
//                             nextDay: "[kesho saa] LT",
//                             nextWeek: "[wiki ijayo] dddd [saat] LT",
//                             lastDay: "[jana] LT",
//                             lastWeek: "[wiki iliyopita] dddd [saat] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s baadaye",
//                             past: "tokea %s",
//                             s: "hivi punde",
//                             ss: "sekunde %d",
//                             m: "dakika moja",
//                             mm: "dakika %d",
//                             h: "saa limoja",
//                             hh: "masaa %d",
//                             d: "siku moja",
//                             dd: "siku %d",
//                             M: "mwezi mmoja",
//                             MM: "miezi %d",
//                             y: "mwaka mmoja",
//                             yy: "miaka %d"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7333: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                             1: "௧",
//                             2: "௨",
//                             3: "௩",
//                             4: "௪",
//                             5: "௫",
//                             6: "௬",
//                             7: "௭",
//                             8: "௮",
//                             9: "௯",
//                             0: "௦"
//                         },
//                         n = {
//                             "௧": "1",
//                             "௨": "2",
//                             "௩": "3",
//                             "௪": "4",
//                             "௫": "5",
//                             "௬": "6",
//                             "௭": "7",
//                             "௮": "8",
//                             "௯": "9",
//                             "௦": "0"
//                         };
//                     e.defineLocale("ta", {
//                         months: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
//                         monthsShort: "ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),
//                         weekdays: "ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),
//                         weekdaysShort: "ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),
//                         weekdaysMin: "ஞா_தி_செ_பு_வி_வெ_ச".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, HH:mm",
//                             LLLL: "dddd, D MMMM YYYY, HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[இன்று] LT",
//                             nextDay: "[நாளை] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[நேற்று] LT",
//                             lastWeek: "[கடந்த வாரம்] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s இல்",
//                             past: "%s முன்",
//                             s: "ஒரு சில விநாடிகள்",
//                             ss: "%d விநாடிகள்",
//                             m: "ஒரு நிமிடம்",
//                             mm: "%d நிமிடங்கள்",
//                             h: "ஒரு மணி நேரம்",
//                             hh: "%d மணி நேரம்",
//                             d: "ஒரு நாள்",
//                             dd: "%d நாட்கள்",
//                             M: "ஒரு மாதம்",
//                             MM: "%d மாதங்கள்",
//                             y: "ஒரு வருடம்",
//                             yy: "%d ஆண்டுகள்"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}வது/,
//                         ordinal: function(e) {
//                             return e + "வது"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, (function(e) {
//                                 return n[e]
//                             }))
//                         },
//                         postformat: function(e) {
//                             return e.replace(/\d/g, (function(e) {
//                                 return t[e]
//                             }))
//                         },
//                         meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
//                         meridiem: function(e, t, n) {
//                             return e < 2 ? " யாமம்" : e < 6 ? " வைகறை" : e < 10 ? " காலை" : e < 14 ? " நண்பகல்" : e < 18 ? " எற்பாடு" : e < 22 ? " மாலை" : " யாமம்"
//                         },
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "யாமம்" === t ? e < 2 ? e : e + 12 : "வைகறை" === t || "காலை" === t || "நண்பகல்" === t && e >= 10 ? e : e + 12
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             3110: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("te", {
//                         months: "జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),
//                         monthsShort: "జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),
//                         weekdaysShort: "ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),
//                         weekdaysMin: "ఆ_సో_మం_బు_గు_శు_శ".split("_"),
//                         longDateFormat: {
//                             LT: "A h:mm",
//                             LTS: "A h:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY, A h:mm",
//                             LLLL: "dddd, D MMMM YYYY, A h:mm"
//                         },
//                         calendar: {
//                             sameDay: "[నేడు] LT",
//                             nextDay: "[రేపు] LT",
//                             nextWeek: "dddd, LT",
//                             lastDay: "[నిన్న] LT",
//                             lastWeek: "[గత] dddd, LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s లో",
//                             past: "%s క్రితం",
//                             s: "కొన్ని క్షణాలు",
//                             ss: "%d సెకన్లు",
//                             m: "ఒక నిమిషం",
//                             mm: "%d నిమిషాలు",
//                             h: "ఒక గంట",
//                             hh: "%d గంటలు",
//                             d: "ఒక రోజు",
//                             dd: "%d రోజులు",
//                             M: "ఒక నెల",
//                             MM: "%d నెలలు",
//                             y: "ఒక సంవత్సరం",
//                             yy: "%d సంవత్సరాలు"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}వ/,
//                         ordinal: "%dవ",
//                         meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "రాత్రి" === t ? e < 4 ? e : e + 12 : "ఉదయం" === t ? e : "మధ్యాహ్నం" === t ? e >= 10 ? e : e + 12 : "సాయంత్రం" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "రాత్రి" : e < 10 ? "ఉదయం" : e < 17 ? "మధ్యాహ్నం" : e < 20 ? "సాయంత్రం" : "రాత్రి"
//                         },
//                         week: {
//                             dow: 0,
//                             doy: 6
//                         }
//                     })
//                 }(n(381))
//             },
//             2095: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("tet", {
//                         months: "Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),
//                         monthsShort: "Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),
//                         weekdays: "Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),
//                         weekdaysShort: "Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),
//                         weekdaysMin: "Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Ohin iha] LT",
//                             nextDay: "[Aban iha] LT",
//                             nextWeek: "dddd [iha] LT",
//                             lastDay: "[Horiseik iha] LT",
//                             lastWeek: "dddd [semana kotuk] [iha] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "iha %s",
//                             past: "%s liuba",
//                             s: "segundu balun",
//                             ss: "segundu %d",
//                             m: "minutu ida",
//                             mm: "minutu %d",
//                             h: "oras ida",
//                             hh: "oras %d",
//                             d: "loron ida",
//                             dd: "loron %d",
//                             M: "fulan ida",
//                             MM: "fulan %d",
//                             y: "tinan ida",
//                             yy: "tinan %d"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             7321: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         0: "-ум",
//                         1: "-ум",
//                         2: "-юм",
//                         3: "-юм",
//                         4: "-ум",
//                         5: "-ум",
//                         6: "-ум",
//                         7: "-ум",
//                         8: "-ум",
//                         9: "-ум",
//                         10: "-ум",
//                         12: "-ум",
//                         13: "-ум",
//                         20: "-ум",
//                         30: "-юм",
//                         40: "-ум",
//                         50: "-ум",
//                         60: "-ум",
//                         70: "-ум",
//                         80: "-ум",
//                         90: "-ум",
//                         100: "-ум"
//                     };
//                     e.defineLocale("tg", {
//                         months: {
//                             format: "январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),
//                             standalone: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")
//                         },
//                         monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
//                         weekdays: "якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),
//                         weekdaysShort: "яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),
//                         weekdaysMin: "яш_дш_сш_чш_пш_ҷм_шб".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Имрӯз соати] LT",
//                             nextDay: "[Фардо соати] LT",
//                             lastDay: "[Дирӯз соати] LT",
//                             nextWeek: "dddd[и] [ҳафтаи оянда соати] LT",
//                             lastWeek: "dddd[и] [ҳафтаи гузашта соати] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "баъди %s",
//                             past: "%s пеш",
//                             s: "якчанд сония",
//                             m: "як дақиқа",
//                             mm: "%d дақиқа",
//                             h: "як соат",
//                             hh: "%d соат",
//                             d: "як рӯз",
//                             dd: "%d рӯз",
//                             M: "як моҳ",
//                             MM: "%d моҳ",
//                             y: "як сол",
//                             yy: "%d сол"
//                         },
//                         meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "шаб" === t ? e < 4 ? e : e + 12 : "субҳ" === t ? e : "рӯз" === t ? e >= 11 ? e : e + 12 : "бегоҳ" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "шаб" : e < 11 ? "субҳ" : e < 16 ? "рӯз" : e < 19 ? "бегоҳ" : "шаб"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
//                         ordinal: function(e) {
//                             var n = e % 10,
//                                 i = e >= 100 ? 100 : null;
//                             return e + (t[e] || t[n] || t[i])
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             9041: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("th", {
//                         months: "มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),
//                         monthsShort: "ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),
//                         weekdaysShort: "อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),
//                         weekdaysMin: "อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "H:mm",
//                             LTS: "H:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY เวลา H:mm",
//                             LLLL: "วันddddที่ D MMMM YYYY เวลา H:mm"
//                         },
//                         meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
//                         isPM: function(e) {
//                             return "หลังเที่ยง" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "ก่อนเที่ยง" : "หลังเที่ยง"
//                         },
//                         calendar: {
//                             sameDay: "[วันนี้ เวลา] LT",
//                             nextDay: "[พรุ่งนี้ เวลา] LT",
//                             nextWeek: "dddd[หน้า เวลา] LT",
//                             lastDay: "[เมื่อวานนี้ เวลา] LT",
//                             lastWeek: "[วัน]dddd[ที่แล้ว เวลา] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "อีก %s",
//                             past: "%sที่แล้ว",
//                             s: "ไม่กี่วินาที",
//                             ss: "%d วินาที",
//                             m: "1 นาที",
//                             mm: "%d นาที",
//                             h: "1 ชั่วโมง",
//                             hh: "%d ชั่วโมง",
//                             d: "1 วัน",
//                             dd: "%d วัน",
//                             w: "1 สัปดาห์",
//                             ww: "%d สัปดาห์",
//                             M: "1 เดือน",
//                             MM: "%d เดือน",
//                             y: "1 ปี",
//                             yy: "%d ปี"
//                         }
//                     })
//                 }(n(381))
//             },
//             9005: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         1: "'inji",
//                         5: "'inji",
//                         8: "'inji",
//                         70: "'inji",
//                         80: "'inji",
//                         2: "'nji",
//                         7: "'nji",
//                         20: "'nji",
//                         50: "'nji",
//                         3: "'ünji",
//                         4: "'ünji",
//                         100: "'ünji",
//                         6: "'njy",
//                         9: "'unjy",
//                         10: "'unjy",
//                         30: "'unjy",
//                         60: "'ynjy",
//                         90: "'ynjy"
//                     };
//                     e.defineLocale("tk", {
//                         months: "Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),
//                         monthsShort: "Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),
//                         weekdays: "Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),
//                         weekdaysShort: "Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),
//                         weekdaysMin: "Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[bugün sagat] LT",
//                             nextDay: "[ertir sagat] LT",
//                             nextWeek: "[indiki] dddd [sagat] LT",
//                             lastDay: "[düýn] LT",
//                             lastWeek: "[geçen] dddd [sagat] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s soň",
//                             past: "%s öň",
//                             s: "birnäçe sekunt",
//                             m: "bir minut",
//                             mm: "%d minut",
//                             h: "bir sagat",
//                             hh: "%d sagat",
//                             d: "bir gün",
//                             dd: "%d gün",
//                             M: "bir aý",
//                             MM: "%d aý",
//                             y: "bir ýyl",
//                             yy: "%d ýyl"
//                         },
//                         ordinal: function(e, n) {
//                             switch (n) {
//                                 case "d":
//                                 case "D":
//                                 case "Do":
//                                 case "DD":
//                                     return e;
//                                 default:
//                                     if (0 === e) return e + "'unjy";
//                                     var i = e % 10,
//                                         a = e % 100 - i,
//                                         s = e >= 100 ? 100 : null;
//                                     return e + (t[i] || t[a] || t[s])
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             5768: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("tl-ph", {
//                         months: "Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),
//                         monthsShort: "Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),
//                         weekdays: "Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),
//                         weekdaysShort: "Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),
//                         weekdaysMin: "Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "MM/D/YYYY",
//                             LL: "MMMM D, YYYY",
//                             LLL: "MMMM D, YYYY HH:mm",
//                             LLLL: "dddd, MMMM DD, YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "LT [ngayong araw]",
//                             nextDay: "[Bukas ng] LT",
//                             nextWeek: "LT [sa susunod na] dddd",
//                             lastDay: "LT [kahapon]",
//                             lastWeek: "LT [noong nakaraang] dddd",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "sa loob ng %s",
//                             past: "%s ang nakalipas",
//                             s: "ilang segundo",
//                             ss: "%d segundo",
//                             m: "isang minuto",
//                             mm: "%d minuto",
//                             h: "isang oras",
//                             hh: "%d oras",
//                             d: "isang araw",
//                             dd: "%d araw",
//                             M: "isang buwan",
//                             MM: "%d buwan",
//                             y: "isang taon",
//                             yy: "%d taon"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}/,
//                         ordinal: function(e) {
//                             return e
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             9444: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = "pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");

//                     function n(e) {
//                         var t = e;
//                         return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "leS" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "waQ" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "nem" : t + " pIq"
//                     }

//                     function i(e) {
//                         var t = e;
//                         return t = -1 !== e.indexOf("jaj") ? t.slice(0, -3) + "Hu’" : -1 !== e.indexOf("jar") ? t.slice(0, -3) + "wen" : -1 !== e.indexOf("DIS") ? t.slice(0, -3) + "ben" : t + " ret"
//                     }

//                     function a(e, t, n, i) {
//                         var a = s(e);
//                         switch (n) {
//                             case "ss":
//                                 return a + " lup";
//                             case "mm":
//                                 return a + " tup";
//                             case "hh":
//                                 return a + " rep";
//                             case "dd":
//                                 return a + " jaj";
//                             case "MM":
//                                 return a + " jar";
//                             case "yy":
//                                 return a + " DIS"
//                         }
//                     }

//                     function s(e) {
//                         var n = Math.floor(e % 1e3 / 100),
//                             i = Math.floor(e % 100 / 10),
//                             a = e % 10,
//                             s = "";
//                         return n > 0 && (s += t[n] + "vatlh"), i > 0 && (s += ("" !== s ? " " : "") + t[i] + "maH"), a > 0 && (s += ("" !== s ? " " : "") + t[a]), "" === s ? "pagh" : s
//                     }
//                     e.defineLocale("tlh", {
//                         months: "tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),
//                         monthsShort: "jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
//                         weekdaysShort: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
//                         weekdaysMin: "lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[DaHjaj] LT",
//                             nextDay: "[wa’leS] LT",
//                             nextWeek: "LLL",
//                             lastDay: "[wa’Hu’] LT",
//                             lastWeek: "LLL",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: n,
//                             past: i,
//                             s: "puS lup",
//                             ss: a,
//                             m: "wa’ tup",
//                             mm: a,
//                             h: "wa’ rep",
//                             hh: a,
//                             d: "wa’ jaj",
//                             dd: a,
//                             M: "wa’ jar",
//                             MM: a,
//                             y: "wa’ DIS",
//                             yy: a
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             6329: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = {
//                         1: "'inci",
//                         5: "'inci",
//                         8: "'inci",
//                         70: "'inci",
//                         80: "'inci",
//                         2: "'nci",
//                         7: "'nci",
//                         20: "'nci",
//                         50: "'nci",
//                         3: "'üncü",
//                         4: "'üncü",
//                         100: "'üncü",
//                         6: "'ncı",
//                         9: "'uncu",
//                         10: "'uncu",
//                         30: "'uncu",
//                         60: "'ıncı",
//                         90: "'ıncı"
//                     };
//                     e.defineLocale("tr", {
//                         months: "Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),
//                         monthsShort: "Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),
//                         weekdays: "Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),
//                         weekdaysShort: "Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),
//                         weekdaysMin: "Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? n ? "öö" : "ÖÖ" : n ? "ös" : "ÖS"
//                         },
//                         meridiemParse: /öö|ÖÖ|ös|ÖS/,
//                         isPM: function(e) {
//                             return "ös" === e || "ÖS" === e
//                         },
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[bugün saat] LT",
//                             nextDay: "[yarın saat] LT",
//                             nextWeek: "[gelecek] dddd [saat] LT",
//                             lastDay: "[dün] LT",
//                             lastWeek: "[geçen] dddd [saat] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s sonra",
//                             past: "%s önce",
//                             s: "birkaç saniye",
//                             ss: "%d saniye",
//                             m: "bir dakika",
//                             mm: "%d dakika",
//                             h: "bir saat",
//                             hh: "%d saat",
//                             d: "bir gün",
//                             dd: "%d gün",
//                             w: "bir hafta",
//                             ww: "%d hafta",
//                             M: "bir ay",
//                             MM: "%d ay",
//                             y: "bir yıl",
//                             yy: "%d yıl"
//                         },
//                         ordinal: function(e, n) {
//                             switch (n) {
//                                 case "d":
//                                 case "D":
//                                 case "Do":
//                                 case "DD":
//                                     return e;
//                                 default:
//                                     if (0 === e) return e + "'ıncı";
//                                     var i = e % 10,
//                                         a = e % 100 - i,
//                                         s = e >= 100 ? 100 : null;
//                                     return e + (t[i] || t[a] || t[s])
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             8254: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t, n, i) {
//                         var a = {
//                             s: ["viensas secunds", "'iensas secunds"],
//                             ss: [e + " secunds", e + " secunds"],
//                             m: ["'n míut", "'iens míut"],
//                             mm: [e + " míuts", e + " míuts"],
//                             h: ["'n þora", "'iensa þora"],
//                             hh: [e + " þoras", e + " þoras"],
//                             d: ["'n ziua", "'iensa ziua"],
//                             dd: [e + " ziuas", e + " ziuas"],
//                             M: ["'n mes", "'iens mes"],
//                             MM: [e + " mesen", e + " mesen"],
//                             y: ["'n ar", "'iens ar"],
//                             yy: [e + " ars", e + " ars"]
//                         };
//                         return i || t ? a[n][0] : a[n][1]
//                     }
//                     e.defineLocale("tzl", {
//                         months: "Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),
//                         monthsShort: "Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),
//                         weekdays: "Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),
//                         weekdaysShort: "Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),
//                         weekdaysMin: "Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),
//                         longDateFormat: {
//                             LT: "HH.mm",
//                             LTS: "HH.mm.ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D. MMMM [dallas] YYYY",
//                             LLL: "D. MMMM [dallas] YYYY HH.mm",
//                             LLLL: "dddd, [li] D. MMMM [dallas] YYYY HH.mm"
//                         },
//                         meridiemParse: /d\'o|d\'a/i,
//                         isPM: function(e) {
//                             return "d'o" === e.toLowerCase()
//                         },
//                         meridiem: function(e, t, n) {
//                             return e > 11 ? n ? "d'o" : "D'O" : n ? "d'a" : "D'A"
//                         },
//                         calendar: {
//                             sameDay: "[oxhi à] LT",
//                             nextDay: "[demà à] LT",
//                             nextWeek: "dddd [à] LT",
//                             lastDay: "[ieiri à] LT",
//                             lastWeek: "[sür el] dddd [lasteu à] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "osprei %s",
//                             past: "ja%s",
//                             s: t,
//                             ss: t,
//                             m: t,
//                             mm: t,
//                             h: t,
//                             hh: t,
//                             d: t,
//                             dd: t,
//                             M: t,
//                             MM: t,
//                             y: t,
//                             yy: t
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}\./,
//                         ordinal: "%d.",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             699: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("tzm-latn", {
//                         months: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
//                         monthsShort: "innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),
//                         weekdays: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
//                         weekdaysShort: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
//                         weekdaysMin: "asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[asdkh g] LT",
//                             nextDay: "[aska g] LT",
//                             nextWeek: "dddd [g] LT",
//                             lastDay: "[assant g] LT",
//                             lastWeek: "dddd [g] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "dadkh s yan %s",
//                             past: "yan %s",
//                             s: "imik",
//                             ss: "%d imik",
//                             m: "minuḍ",
//                             mm: "%d minuḍ",
//                             h: "saɛa",
//                             hh: "%d tassaɛin",
//                             d: "ass",
//                             dd: "%d ossan",
//                             M: "ayowr",
//                             MM: "%d iyyirn",
//                             y: "asgas",
//                             yy: "%d isgasn"
//                         },
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             1106: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("tzm", {
//                         months: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
//                         monthsShort: "ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),
//                         weekdays: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
//                         weekdaysShort: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
//                         weekdaysMin: "ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[ⴰⵙⴷⵅ ⴴ] LT",
//                             nextDay: "[ⴰⵙⴽⴰ ⴴ] LT",
//                             nextWeek: "dddd [ⴴ] LT",
//                             lastDay: "[ⴰⵚⴰⵏⵜ ⴴ] LT",
//                             lastWeek: "dddd [ⴴ] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",
//                             past: "ⵢⴰⵏ %s",
//                             s: "ⵉⵎⵉⴽ",
//                             ss: "%d ⵉⵎⵉⴽ",
//                             m: "ⵎⵉⵏⵓⴺ",
//                             mm: "%d ⵎⵉⵏⵓⴺ",
//                             h: "ⵙⴰⵄⴰ",
//                             hh: "%d ⵜⴰⵙⵙⴰⵄⵉⵏ",
//                             d: "ⴰⵙⵙ",
//                             dd: "%d oⵙⵙⴰⵏ",
//                             M: "ⴰⵢoⵓⵔ",
//                             MM: "%d ⵉⵢⵢⵉⵔⵏ",
//                             y: "ⴰⵙⴳⴰⵙ",
//                             yy: "%d ⵉⵙⴳⴰⵙⵏ"
//                         },
//                         week: {
//                             dow: 6,
//                             doy: 12
//                         }
//                     })
//                 }(n(381))
//             },
//             9288: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("ug-cn", {
//                         months: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
//                         monthsShort: "يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),
//                         weekdays: "يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),
//                         weekdaysShort: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
//                         weekdaysMin: "يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY-MM-DD",
//                             LL: "YYYY-يىلىM-ئاينىڭD-كۈنى",
//                             LLL: "YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",
//                             LLLL: "dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"
//                         },
//                         meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "يېرىم كېچە" === t || "سەھەر" === t || "چۈشتىن بۇرۇن" === t ? e : "چۈشتىن كېيىن" === t || "كەچ" === t ? e + 12 : e >= 11 ? e : e + 12
//                         },
//                         meridiem: function(e, t, n) {
//                             var i = 100 * e + t;
//                             return i < 600 ? "يېرىم كېچە" : i < 900 ? "سەھەر" : i < 1130 ? "چۈشتىن بۇرۇن" : i < 1230 ? "چۈش" : i < 1800 ? "چۈشتىن كېيىن" : "كەچ"
//                         },
//                         calendar: {
//                             sameDay: "[بۈگۈن سائەت] LT",
//                             nextDay: "[ئەتە سائەت] LT",
//                             nextWeek: "[كېلەركى] dddd [سائەت] LT",
//                             lastDay: "[تۆنۈگۈن] LT",
//                             lastWeek: "[ئالدىنقى] dddd [سائەت] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s كېيىن",
//                             past: "%s بۇرۇن",
//                             s: "نەچچە سېكونت",
//                             ss: "%d سېكونت",
//                             m: "بىر مىنۇت",
//                             mm: "%d مىنۇت",
//                             h: "بىر سائەت",
//                             hh: "%d سائەت",
//                             d: "بىر كۈن",
//                             dd: "%d كۈن",
//                             M: "بىر ئاي",
//                             MM: "%d ئاي",
//                             y: "بىر يىل",
//                             yy: "%d يىل"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "-كۈنى";
//                                 case "w":
//                                 case "W":
//                                     return e + "-ھەپتە";
//                                 default:
//                                     return e
//                             }
//                         },
//                         preparse: function(e) {
//                             return e.replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             7691: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";

//                     function t(e, t) {
//                         var n = e.split("_");
//                         return t % 10 == 1 && t % 100 != 11 ? n[0] : t % 10 >= 2 && t % 10 <= 4 && (t % 100 < 10 || t % 100 >= 20) ? n[1] : n[2]
//                     }

//                     function n(e, n, i) {
//                         return "m" === i ? n ? "хвилина" : "хвилину" : "h" === i ? n ? "година" : "годину" : e + " " + t({
//                             ss: n ? "секунда_секунди_секунд" : "секунду_секунди_секунд",
//                             mm: n ? "хвилина_хвилини_хвилин" : "хвилину_хвилини_хвилин",
//                             hh: n ? "година_години_годин" : "годину_години_годин",
//                             dd: "день_дні_днів",
//                             MM: "місяць_місяці_місяців",
//                             yy: "рік_роки_років"
//                         }[i], +e)
//                     }

//                     function i(e, t) {
//                         var n = {
//                             nominative: "неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),
//                             accusative: "неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),
//                             genitive: "неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")
//                         };
//                         return !0 === e ? n.nominative.slice(1, 7).concat(n.nominative.slice(0, 1)) : e ? n[/(\[[ВвУу]\]) ?dddd/.test(t) ? "accusative" : /\[?(?:минулої|наступної)? ?\] ?dddd/.test(t) ? "genitive" : "nominative"][e.day()] : n.nominative
//                     }

//                     function a(e) {
//                         return function() {
//                             return e + "о" + (11 === this.hours() ? "б" : "") + "] LT"
//                         }
//                     }
//                     e.defineLocale("uk", {
//                         months: {
//                             format: "січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),
//                             standalone: "січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")
//                         },
//                         monthsShort: "січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),
//                         weekdays: i,
//                         weekdaysShort: "нд_пн_вт_ср_чт_пт_сб".split("_"),
//                         weekdaysMin: "нд_пн_вт_ср_чт_пт_сб".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD.MM.YYYY",
//                             LL: "D MMMM YYYY р.",
//                             LLL: "D MMMM YYYY р., HH:mm",
//                             LLLL: "dddd, D MMMM YYYY р., HH:mm"
//                         },
//                         calendar: {
//                             sameDay: a("[Сьогодні "),
//                             nextDay: a("[Завтра "),
//                             lastDay: a("[Вчора "),
//                             nextWeek: a("[У] dddd ["),
//                             lastWeek: function() {
//                                 switch (this.day()) {
//                                     case 0:
//                                     case 3:
//                                     case 5:
//                                     case 6:
//                                         return a("[Минулої] dddd [").call(this);
//                                     case 1:
//                                     case 2:
//                                     case 4:
//                                         return a("[Минулого] dddd [").call(this)
//                                 }
//                             },
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "за %s",
//                             past: "%s тому",
//                             s: "декілька секунд",
//                             ss: n,
//                             m: n,
//                             mm: n,
//                             h: "годину",
//                             hh: n,
//                             d: "день",
//                             dd: n,
//                             M: "місяць",
//                             MM: n,
//                             y: "рік",
//                             yy: n
//                         },
//                         meridiemParse: /ночі|ранку|дня|вечора/,
//                         isPM: function(e) {
//                             return /^(дня|вечора)$/.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 4 ? "ночі" : e < 12 ? "ранку" : e < 17 ? "дня" : "вечора"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "M":
//                                 case "d":
//                                 case "DDD":
//                                 case "w":
//                                 case "W":
//                                     return e + "-й";
//                                 case "D":
//                                     return e + "-го";
//                                 default:
//                                     return e
//                             }
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             3795: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     var t = ["جنوری", "فروری", "مارچ", "اپریل", "مئی", "جون", "جولائی", "اگست", "ستمبر", "اکتوبر", "نومبر", "دسمبر"],
//                         n = ["اتوار", "پیر", "منگل", "بدھ", "جمعرات", "جمعہ", "ہفتہ"];
//                     e.defineLocale("ur", {
//                         months: t,
//                         monthsShort: t,
//                         weekdays: n,
//                         weekdaysShort: n,
//                         weekdaysMin: n,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd، D MMMM YYYY HH:mm"
//                         },
//                         meridiemParse: /صبح|شام/,
//                         isPM: function(e) {
//                             return "شام" === e
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? "صبح" : "شام"
//                         },
//                         calendar: {
//                             sameDay: "[آج بوقت] LT",
//                             nextDay: "[کل بوقت] LT",
//                             nextWeek: "dddd [بوقت] LT",
//                             lastDay: "[گذشتہ روز بوقت] LT",
//                             lastWeek: "[گذشتہ] dddd [بوقت] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s بعد",
//                             past: "%s قبل",
//                             s: "چند سیکنڈ",
//                             ss: "%d سیکنڈ",
//                             m: "ایک منٹ",
//                             mm: "%d منٹ",
//                             h: "ایک گھنٹہ",
//                             hh: "%d گھنٹے",
//                             d: "ایک دن",
//                             dd: "%d دن",
//                             M: "ایک ماہ",
//                             MM: "%d ماہ",
//                             y: "ایک سال",
//                             yy: "%d سال"
//                         },
//                         preparse: function(e) {
//                             return e.replace(/،/g, ",")
//                         },
//                         postformat: function(e) {
//                             return e.replace(/,/g, "،")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             588: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("uz-latn", {
//                         months: "Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),
//                         monthsShort: "Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),
//                         weekdays: "Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),
//                         weekdaysShort: "Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),
//                         weekdaysMin: "Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "D MMMM YYYY, dddd HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Bugun soat] LT [da]",
//                             nextDay: "[Ertaga] LT [da]",
//                             nextWeek: "dddd [kuni soat] LT [da]",
//                             lastDay: "[Kecha soat] LT [da]",
//                             lastWeek: "[O'tgan] dddd [kuni soat] LT [da]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "Yaqin %s ichida",
//                             past: "Bir necha %s oldin",
//                             s: "soniya",
//                             ss: "%d soniya",
//                             m: "bir daqiqa",
//                             mm: "%d daqiqa",
//                             h: "bir soat",
//                             hh: "%d soat",
//                             d: "bir kun",
//                             dd: "%d kun",
//                             M: "bir oy",
//                             MM: "%d oy",
//                             y: "bir yil",
//                             yy: "%d yil"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             6791: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("uz", {
//                         months: "январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),
//                         monthsShort: "янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),
//                         weekdays: "Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),
//                         weekdaysShort: "Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),
//                         weekdaysMin: "Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "D MMMM YYYY, dddd HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Бугун соат] LT [да]",
//                             nextDay: "[Эртага] LT [да]",
//                             nextWeek: "dddd [куни соат] LT [да]",
//                             lastDay: "[Кеча соат] LT [да]",
//                             lastWeek: "[Утган] dddd [куни соат] LT [да]",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "Якин %s ичида",
//                             past: "Бир неча %s олдин",
//                             s: "фурсат",
//                             ss: "%d фурсат",
//                             m: "бир дакика",
//                             mm: "%d дакика",
//                             h: "бир соат",
//                             hh: "%d соат",
//                             d: "бир кун",
//                             dd: "%d кун",
//                             M: "бир ой",
//                             MM: "%d ой",
//                             y: "бир йил",
//                             yy: "%d йил"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 7
//                         }
//                     })
//                 }(n(381))
//             },
//             5666: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("vi", {
//                         months: "tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),
//                         monthsShort: "Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),
//                         weekdaysShort: "CN_T2_T3_T4_T5_T6_T7".split("_"),
//                         weekdaysMin: "CN_T2_T3_T4_T5_T6_T7".split("_"),
//                         weekdaysParseExact: !0,
//                         meridiemParse: /sa|ch/i,
//                         isPM: function(e) {
//                             return /^ch$/i.test(e)
//                         },
//                         meridiem: function(e, t, n) {
//                             return e < 12 ? n ? "sa" : "SA" : n ? "ch" : "CH"
//                         },
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM [năm] YYYY",
//                             LLL: "D MMMM [năm] YYYY HH:mm",
//                             LLLL: "dddd, D MMMM [năm] YYYY HH:mm",
//                             l: "DD/M/YYYY",
//                             ll: "D MMM YYYY",
//                             lll: "D MMM YYYY HH:mm",
//                             llll: "ddd, D MMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[Hôm nay lúc] LT",
//                             nextDay: "[Ngày mai lúc] LT",
//                             nextWeek: "dddd [tuần tới lúc] LT",
//                             lastDay: "[Hôm qua lúc] LT",
//                             lastWeek: "dddd [tuần trước lúc] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "%s tới",
//                             past: "%s trước",
//                             s: "vài giây",
//                             ss: "%d giây",
//                             m: "một phút",
//                             mm: "%d phút",
//                             h: "một giờ",
//                             hh: "%d giờ",
//                             d: "một ngày",
//                             dd: "%d ngày",
//                             w: "một tuần",
//                             ww: "%d tuần",
//                             M: "một tháng",
//                             MM: "%d tháng",
//                             y: "một năm",
//                             yy: "%d năm"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}/,
//                         ordinal: function(e) {
//                             return e
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             4378: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("x-pseudo", {
//                         months: "J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),
//                         monthsShort: "J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),
//                         monthsParseExact: !0,
//                         weekdays: "S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),
//                         weekdaysShort: "S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),
//                         weekdaysMin: "S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),
//                         weekdaysParseExact: !0,
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY HH:mm",
//                             LLLL: "dddd, D MMMM YYYY HH:mm"
//                         },
//                         calendar: {
//                             sameDay: "[T~ódá~ý át] LT",
//                             nextDay: "[T~ómó~rró~w át] LT",
//                             nextWeek: "dddd [át] LT",
//                             lastDay: "[Ý~ést~érdá~ý át] LT",
//                             lastWeek: "[L~ást] dddd [át] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "í~ñ %s",
//                             past: "%s á~gó",
//                             s: "á ~féw ~sécó~ñds",
//                             ss: "%d s~écóñ~ds",
//                             m: "á ~míñ~úté",
//                             mm: "%d m~íñú~tés",
//                             h: "á~ñ hó~úr",
//                             hh: "%d h~óúrs",
//                             d: "á ~dáý",
//                             dd: "%d d~áýs",
//                             M: "á ~móñ~th",
//                             MM: "%d m~óñt~hs",
//                             y: "á ~ýéár",
//                             yy: "%d ý~éárs"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 == ~~(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5805: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("yo", {
//                         months: "Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),
//                         monthsShort: "Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),
//                         weekdays: "Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),
//                         weekdaysShort: "Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),
//                         weekdaysMin: "Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),
//                         longDateFormat: {
//                             LT: "h:mm A",
//                             LTS: "h:mm:ss A",
//                             L: "DD/MM/YYYY",
//                             LL: "D MMMM YYYY",
//                             LLL: "D MMMM YYYY h:mm A",
//                             LLLL: "dddd, D MMMM YYYY h:mm A"
//                         },
//                         calendar: {
//                             sameDay: "[Ònì ni] LT",
//                             nextDay: "[Ọ̀la ni] LT",
//                             nextWeek: "dddd [Ọsẹ̀ tón'bọ] [ni] LT",
//                             lastDay: "[Àna ni] LT",
//                             lastWeek: "dddd [Ọsẹ̀ tólọ́] [ni] LT",
//                             sameElse: "L"
//                         },
//                         relativeTime: {
//                             future: "ní %s",
//                             past: "%s kọjá",
//                             s: "ìsẹjú aayá die",
//                             ss: "aayá %d",
//                             m: "ìsẹjú kan",
//                             mm: "ìsẹjú %d",
//                             h: "wákati kan",
//                             hh: "wákati %d",
//                             d: "ọjọ́ kan",
//                             dd: "ọjọ́ %d",
//                             M: "osù kan",
//                             MM: "osù %d",
//                             y: "ọdún kan",
//                             yy: "ọdún %d"
//                         },
//                         dayOfMonthOrdinalParse: /ọjọ́\s\d{1,2}/,
//                         ordinal: "ọjọ́ %d",
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5057: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("zh-cn", {
//                         months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
//                         monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
//                         weekdaysShort: "周日_周一_周二_周三_周四_周五_周六".split("_"),
//                         weekdaysMin: "日_一_二_三_四_五_六".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY/MM/DD",
//                             LL: "YYYY年M月D日",
//                             LLL: "YYYY年M月D日Ah点mm分",
//                             LLLL: "YYYY年M月D日ddddAh点mm分",
//                             l: "YYYY/M/D",
//                             ll: "YYYY年M月D日",
//                             lll: "YYYY年M月D日 HH:mm",
//                             llll: "YYYY年M月D日dddd HH:mm"
//                         },
//                         meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "下午" === t || "晚上" === t ? e + 12 : e >= 11 ? e : e + 12
//                         },
//                         meridiem: function(e, t, n) {
//                             var i = 100 * e + t;
//                             return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1130 ? "上午" : i < 1230 ? "中午" : i < 1800 ? "下午" : "晚上"
//                         },
//                         calendar: {
//                             sameDay: "[今天]LT",
//                             nextDay: "[明天]LT",
//                             nextWeek: function(e) {
//                                 return e.week() !== this.week() ? "[下]dddLT" : "[本]dddLT"
//                             },
//                             lastDay: "[昨天]LT",
//                             lastWeek: function(e) {
//                                 return this.week() !== e.week() ? "[上]dddLT" : "[本]dddLT"
//                             },
//                             sameElse: "L"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "日";
//                                 case "M":
//                                     return e + "月";
//                                 case "w":
//                                 case "W":
//                                     return e + "周";
//                                 default:
//                                     return e
//                             }
//                         },
//                         relativeTime: {
//                             future: "%s后",
//                             past: "%s前",
//                             s: "几秒",
//                             ss: "%d 秒",
//                             m: "1 分钟",
//                             mm: "%d 分钟",
//                             h: "1 小时",
//                             hh: "%d 小时",
//                             d: "1 天",
//                             dd: "%d 天",
//                             w: "1 周",
//                             ww: "%d 周",
//                             M: "1 个月",
//                             MM: "%d 个月",
//                             y: "1 年",
//                             yy: "%d 年"
//                         },
//                         week: {
//                             dow: 1,
//                             doy: 4
//                         }
//                     })
//                 }(n(381))
//             },
//             5726: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("zh-hk", {
//                         months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
//                         monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
//                         weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
//                         weekdaysMin: "日_一_二_三_四_五_六".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY/MM/DD",
//                             LL: "YYYY年M月D日",
//                             LLL: "YYYY年M月D日 HH:mm",
//                             LLLL: "YYYY年M月D日dddd HH:mm",
//                             l: "YYYY/M/D",
//                             ll: "YYYY年M月D日",
//                             lll: "YYYY年M月D日 HH:mm",
//                             llll: "YYYY年M月D日dddd HH:mm"
//                         },
//                         meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             var i = 100 * e + t;
//                             return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1200 ? "上午" : 1200 === i ? "中午" : i < 1800 ? "下午" : "晚上"
//                         },
//                         calendar: {
//                             sameDay: "[今天]LT",
//                             nextDay: "[明天]LT",
//                             nextWeek: "[下]ddddLT",
//                             lastDay: "[昨天]LT",
//                             lastWeek: "[上]ddddLT",
//                             sameElse: "L"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "日";
//                                 case "M":
//                                     return e + "月";
//                                 case "w":
//                                 case "W":
//                                     return e + "週";
//                                 default:
//                                     return e
//                             }
//                         },
//                         relativeTime: {
//                             future: "%s後",
//                             past: "%s前",
//                             s: "幾秒",
//                             ss: "%d 秒",
//                             m: "1 分鐘",
//                             mm: "%d 分鐘",
//                             h: "1 小時",
//                             hh: "%d 小時",
//                             d: "1 天",
//                             dd: "%d 天",
//                             M: "1 個月",
//                             MM: "%d 個月",
//                             y: "1 年",
//                             yy: "%d 年"
//                         }
//                     })
//                 }(n(381))
//             },
//             9807: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("zh-mo", {
//                         months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
//                         monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
//                         weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
//                         weekdaysMin: "日_一_二_三_四_五_六".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "DD/MM/YYYY",
//                             LL: "YYYY年M月D日",
//                             LLL: "YYYY年M月D日 HH:mm",
//                             LLLL: "YYYY年M月D日dddd HH:mm",
//                             l: "D/M/YYYY",
//                             ll: "YYYY年M月D日",
//                             lll: "YYYY年M月D日 HH:mm",
//                             llll: "YYYY年M月D日dddd HH:mm"
//                         },
//                         meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             var i = 100 * e + t;
//                             return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1130 ? "上午" : i < 1230 ? "中午" : i < 1800 ? "下午" : "晚上"
//                         },
//                         calendar: {
//                             sameDay: "[今天] LT",
//                             nextDay: "[明天] LT",
//                             nextWeek: "[下]dddd LT",
//                             lastDay: "[昨天] LT",
//                             lastWeek: "[上]dddd LT",
//                             sameElse: "L"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "日";
//                                 case "M":
//                                     return e + "月";
//                                 case "w":
//                                 case "W":
//                                     return e + "週";
//                                 default:
//                                     return e
//                             }
//                         },
//                         relativeTime: {
//                             future: "%s內",
//                             past: "%s前",
//                             s: "幾秒",
//                             ss: "%d 秒",
//                             m: "1 分鐘",
//                             mm: "%d 分鐘",
//                             h: "1 小時",
//                             hh: "%d 小時",
//                             d: "1 天",
//                             dd: "%d 天",
//                             M: "1 個月",
//                             MM: "%d 個月",
//                             y: "1 年",
//                             yy: "%d 年"
//                         }
//                     })
//                 }(n(381))
//             },
//             4152: function(e, t, n) {
//                 ! function(e) {
//                     "use strict";
//                     e.defineLocale("zh-tw", {
//                         months: "一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),
//                         monthsShort: "1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),
//                         weekdays: "星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),
//                         weekdaysShort: "週日_週一_週二_週三_週四_週五_週六".split("_"),
//                         weekdaysMin: "日_一_二_三_四_五_六".split("_"),
//                         longDateFormat: {
//                             LT: "HH:mm",
//                             LTS: "HH:mm:ss",
//                             L: "YYYY/MM/DD",
//                             LL: "YYYY年M月D日",
//                             LLL: "YYYY年M月D日 HH:mm",
//                             LLLL: "YYYY年M月D日dddd HH:mm",
//                             l: "YYYY/M/D",
//                             ll: "YYYY年M月D日",
//                             lll: "YYYY年M月D日 HH:mm",
//                             llll: "YYYY年M月D日dddd HH:mm"
//                         },
//                         meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
//                         meridiemHour: function(e, t) {
//                             return 12 === e && (e = 0), "凌晨" === t || "早上" === t || "上午" === t ? e : "中午" === t ? e >= 11 ? e : e + 12 : "下午" === t || "晚上" === t ? e + 12 : void 0
//                         },
//                         meridiem: function(e, t, n) {
//                             var i = 100 * e + t;
//                             return i < 600 ? "凌晨" : i < 900 ? "早上" : i < 1130 ? "上午" : i < 1230 ? "中午" : i < 1800 ? "下午" : "晚上"
//                         },
//                         calendar: {
//                             sameDay: "[今天] LT",
//                             nextDay: "[明天] LT",
//                             nextWeek: "[下]dddd LT",
//                             lastDay: "[昨天] LT",
//                             lastWeek: "[上]dddd LT",
//                             sameElse: "L"
//                         },
//                         dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
//                         ordinal: function(e, t) {
//                             switch (t) {
//                                 case "d":
//                                 case "D":
//                                 case "DDD":
//                                     return e + "日";
//                                 case "M":
//                                     return e + "月";
//                                 case "w":
//                                 case "W":
//                                     return e + "週";
//                                 default:
//                                     return e
//                             }
//                         },
//                         relativeTime: {
//                             future: "%s後",
//                             past: "%s前",
//                             s: "幾秒",
//                             ss: "%d 秒",
//                             m: "1 分鐘",
//                             mm: "%d 分鐘",
//                             h: "1 小時",
//                             hh: "%d 小時",
//                             d: "1 天",
//                             dd: "%d 天",
//                             M: "1 個月",
//                             MM: "%d 個月",
//                             y: "1 年",
//                             yy: "%d 年"
//                         }
//                     })
//                 }(n(381))
//             },
//             6700: (e, t, n) => {
//                 var i = {
//                     "./af": 2786,
//                     "./af.js": 2786,
//                     "./ar": 867,
//                     "./ar-dz": 4130,
//                     "./ar-dz.js": 4130,
//                     "./ar-kw": 6135,
//                     "./ar-kw.js": 6135,
//                     "./ar-ly": 6440,
//                     "./ar-ly.js": 6440,
//                     "./ar-ma": 7702,
//                     "./ar-ma.js": 7702,
//                     "./ar-sa": 6040,
//                     "./ar-sa.js": 6040,
//                     "./ar-tn": 7100,
//                     "./ar-tn.js": 7100,
//                     "./ar.js": 867,
//                     "./az": 1083,
//                     "./az.js": 1083,
//                     "./be": 9808,
//                     "./be.js": 9808,
//                     "./bg": 8338,
//                     "./bg.js": 8338,
//                     "./bm": 7438,
//                     "./bm.js": 7438,
//                     "./bn": 8905,
//                     "./bn-bd": 6225,
//                     "./bn-bd.js": 6225,
//                     "./bn.js": 8905,
//                     "./bo": 1560,
//                     "./bo.js": 1560,
//                     "./br": 1278,
//                     "./br.js": 1278,
//                     "./bs": 622,
//                     "./bs.js": 622,
//                     "./ca": 4360,
//                     "./ca.js": 4360,
//                     "./cs": 5822,
//                     "./cs.js": 5822,
//                     "./cv": 877,
//                     "./cv.js": 877,
//                     "./cy": 7373,
//                     "./cy.js": 7373,
//                     "./da": 4780,
//                     "./da.js": 4780,
//                     "./de": 9740,
//                     "./de-at": 217,
//                     "./de-at.js": 217,
//                     "./de-ch": 894,
//                     "./de-ch.js": 894,
//                     "./de.js": 9740,
//                     "./dv": 5300,
//                     "./dv.js": 5300,
//                     "./el": 837,
//                     "./el.js": 837,
//                     "./en-au": 8348,
//                     "./en-au.js": 8348,
//                     "./en-ca": 7925,
//                     "./en-ca.js": 7925,
//                     "./en-gb": 2243,
//                     "./en-gb.js": 2243,
//                     "./en-ie": 6436,
//                     "./en-ie.js": 6436,
//                     "./en-il": 7207,
//                     "./en-il.js": 7207,
//                     "./en-in": 4175,
//                     "./en-in.js": 4175,
//                     "./en-nz": 6319,
//                     "./en-nz.js": 6319,
//                     "./en-sg": 1626,
//                     "./en-sg.js": 1626,
//                     "./eo": 2915,
//                     "./eo.js": 2915,
//                     "./es": 5655,
//                     "./es-do": 2088,
//                     "./es-do.js": 2088,
//                     "./es-mx": 6112,
//                     "./es-mx.js": 6112,
//                     "./es-us": 1146,
//                     "./es-us.js": 1146,
//                     "./es.js": 5655,
//                     "./et": 5603,
//                     "./et.js": 5603,
//                     "./eu": 7763,
//                     "./eu.js": 7763,
//                     "./fa": 6959,
//                     "./fa.js": 6959,
//                     "./fi": 1897,
//                     "./fi.js": 1897,
//                     "./fil": 2549,
//                     "./fil.js": 2549,
//                     "./fo": 4694,
//                     "./fo.js": 4694,
//                     "./fr": 4470,
//                     "./fr-ca": 7524,
//                     "./fr-ca.js": 7524,
//                     "./fr-ch": 2330,
//                     "./fr-ch.js": 2330,
//                     "./fr.js": 4470,
//                     "./fy": 5044,
//                     "./fy.js": 5044,
//                     "./ga": 9295,
//                     "./ga.js": 9295,
//                     "./gd": 2101,
//                     "./gd.js": 2101,
//                     "./gl": 8794,
//                     "./gl.js": 8794,
//                     "./gom-deva": 7884,
//                     "./gom-deva.js": 7884,
//                     "./gom-latn": 3168,
//                     "./gom-latn.js": 3168,
//                     "./gu": 5349,
//                     "./gu.js": 5349,
//                     "./he": 4206,
//                     "./he.js": 4206,
//                     "./hi": 94,
//                     "./hi.js": 94,
//                     "./hr": 316,
//                     "./hr.js": 316,
//                     "./hu": 2138,
//                     "./hu.js": 2138,
//                     "./hy-am": 1423,
//                     "./hy-am.js": 1423,
//                     "./id": 9218,
//                     "./id.js": 9218,
//                     "./is": 135,
//                     "./is.js": 135,
//                     "./it": 626,
//                     "./it-ch": 150,
//                     "./it-ch.js": 150,
//                     "./it.js": 626,
//                     "./ja": 9183,
//                     "./ja.js": 9183,
//                     "./jv": 4286,
//                     "./jv.js": 4286,
//                     "./ka": 2105,
//                     "./ka.js": 2105,
//                     "./kk": 7772,
//                     "./kk.js": 7772,
//                     "./km": 8758,
//                     "./km.js": 8758,
//                     "./kn": 9282,
//                     "./kn.js": 9282,
//                     "./ko": 3730,
//                     "./ko.js": 3730,
//                     "./ku": 1408,
//                     "./ku.js": 1408,
//                     "./ky": 3291,
//                     "./ky.js": 3291,
//                     "./lb": 6841,
//                     "./lb.js": 6841,
//                     "./lo": 5466,
//                     "./lo.js": 5466,
//                     "./lt": 7010,
//                     "./lt.js": 7010,
//                     "./lv": 7595,
//                     "./lv.js": 7595,
//                     "./me": 9861,
//                     "./me.js": 9861,
//                     "./mi": 5493,
//                     "./mi.js": 5493,
//                     "./mk": 5966,
//                     "./mk.js": 5966,
//                     "./ml": 7341,
//                     "./ml.js": 7341,
//                     "./mn": 5115,
//                     "./mn.js": 5115,
//                     "./mr": 370,
//                     "./mr.js": 370,
//                     "./ms": 9847,
//                     "./ms-my": 1237,
//                     "./ms-my.js": 1237,
//                     "./ms.js": 9847,
//                     "./mt": 2126,
//                     "./mt.js": 2126,
//                     "./my": 6165,
//                     "./my.js": 6165,
//                     "./nb": 4924,
//                     "./nb.js": 4924,
//                     "./ne": 6744,
//                     "./ne.js": 6744,
//                     "./nl": 3901,
//                     "./nl-be": 9814,
//                     "./nl-be.js": 9814,
//                     "./nl.js": 3901,
//                     "./nn": 3877,
//                     "./nn.js": 3877,
//                     "./oc-lnc": 2135,
//                     "./oc-lnc.js": 2135,
//                     "./pa-in": 5858,
//                     "./pa-in.js": 5858,
//                     "./pl": 4495,
//                     "./pl.js": 4495,
//                     "./pt": 9520,
//                     "./pt-br": 7971,
//                     "./pt-br.js": 7971,
//                     "./pt.js": 9520,
//                     "./ro": 6459,
//                     "./ro.js": 6459,
//                     "./ru": 1793,
//                     "./ru.js": 1793,
//                     "./sd": 950,
//                     "./sd.js": 950,
//                     "./se": 490,
//                     "./se.js": 490,
//                     "./si": 124,
//                     "./si.js": 124,
//                     "./sk": 4249,
//                     "./sk.js": 4249,
//                     "./sl": 4985,
//                     "./sl.js": 4985,
//                     "./sq": 1104,
//                     "./sq.js": 1104,
//                     "./sr": 9131,
//                     "./sr-cyrl": 9915,
//                     "./sr-cyrl.js": 9915,
//                     "./sr.js": 9131,
//                     "./ss": 5606,
//                     "./ss.js": 5606,
//                     "./sv": 8760,
//                     "./sv.js": 8760,
//                     "./sw": 1172,
//                     "./sw.js": 1172,
//                     "./ta": 7333,
//                     "./ta.js": 7333,
//                     "./te": 3110,
//                     "./te.js": 3110,
//                     "./tet": 2095,
//                     "./tet.js": 2095,
//                     "./tg": 7321,
//                     "./tg.js": 7321,
//                     "./th": 9041,
//                     "./th.js": 9041,
//                     "./tk": 9005,
//                     "./tk.js": 9005,
//                     "./tl-ph": 5768,
//                     "./tl-ph.js": 5768,
//                     "./tlh": 9444,
//                     "./tlh.js": 9444,
//                     "./tr": 6329,
//                     "./tr.js": 6329,
//                     "./tzl": 8254,
//                     "./tzl.js": 8254,
//                     "./tzm": 1106,
//                     "./tzm-latn": 699,
//                     "./tzm-latn.js": 699,
//                     "./tzm.js": 1106,
//                     "./ug-cn": 9288,
//                     "./ug-cn.js": 9288,
//                     "./uk": 7691,
//                     "./uk.js": 7691,
//                     "./ur": 3795,
//                     "./ur.js": 3795,
//                     "./uz": 6791,
//                     "./uz-latn": 588,
//                     "./uz-latn.js": 588,
//                     "./uz.js": 6791,
//                     "./vi": 5666,
//                     "./vi.js": 5666,
//                     "./x-pseudo": 4378,
//                     "./x-pseudo.js": 4378,
//                     "./yo": 5805,
//                     "./yo.js": 5805,
//                     "./zh-cn": 5057,
//                     "./zh-cn.js": 5057,
//                     "./zh-hk": 5726,
//                     "./zh-hk.js": 5726,
//                     "./zh-mo": 9807,
//                     "./zh-mo.js": 9807,
//                     "./zh-tw": 4152,
//                     "./zh-tw.js": 4152
//                 };

//                 function a(e) {
//                     var t = s(e);
//                     return n(t)
//                 }

//                 function s(e) {
//                     if (!n.o(i, e)) {
//                         var t = new Error("Cannot find module '" + e + "'");
//                         throw t.code = "MODULE_NOT_FOUND", t
//                     }
//                     return i[e]
//                 }
//                 a.keys = function() {
//                     return Object.keys(i)
//                 }, a.resolve = s, e.exports = a, a.id = 6700
//             },
//             381: function(e, t, n) {
//                 (e = n.nmd(e)).exports = function() {
//                     "use strict";
//                     var t, i;

//                     function a() {
//                         return t.apply(null, arguments)
//                     }

//                     function s(e) {
//                         t = e
//                     }

//                     function r(e) {
//                         return e instanceof Array || "[object Array]" === Object.prototype.toString.call(e)
//                     }

//                     function o(e) {
//                         return null != e && "[object Object]" === Object.prototype.toString.call(e)
//                     }

//                     function l(e, t) {
//                         return Object.prototype.hasOwnProperty.call(e, t)
//                     }

//                     function d(e) {
//                         if (Object.getOwnPropertyNames) return 0 === Object.getOwnPropertyNames(e).length;
//                         var t;
//                         for (t in e)
//                             if (l(e, t)) return !1;
//                         return !0
//                     }

//                     function c(e) {
//                         return void 0 === e
//                     }

//                     function u(e) {
//                         return "number" == typeof e || "[object Number]" === Object.prototype.toString.call(e)
//                     }

//                     function h(e) {
//                         return e instanceof Date || "[object Date]" === Object.prototype.toString.call(e)
//                     }

//                     function m(e, t) {
//                         var n, i = [],
//                             a = e.length;
//                         for (n = 0; n < a; ++n) i.push(t(e[n], n));
//                         return i
//                     }

//                     function p(e, t) {
//                         for (var n in t) l(t, n) && (e[n] = t[n]);
//                         return l(t, "toString") && (e.toString = t.toString), l(t, "valueOf") && (e.valueOf = t.valueOf), e
//                     }

//                     function f(e, t, n, i) {
//                         return Jn(e, t, n, i, !0).utc()
//                     }

//                     function g() {
//                         return {
//                             empty: !1,
//                             unusedTokens: [],
//                             unusedInput: [],
//                             overflow: -2,
//                             charsLeftOver: 0,
//                             nullInput: !1,
//                             invalidEra: null,
//                             invalidMonth: null,
//                             invalidFormat: !1,
//                             userInvalidated: !1,
//                             iso: !1,
//                             parsedDateParts: [],
//                             era: null,
//                             meridiem: null,
//                             rfc2822: !1,
//                             weekdayMismatch: !1
//                         }
//                     }

//                     function _(e) {
//                         return null == e._pf && (e._pf = g()), e._pf
//                     }

//                     function v(e) {
//                         if (null == e._isValid) {
//                             var t = _(e),
//                                 n = i.call(t.parsedDateParts, (function(e) {
//                                     return null != e
//                                 })),
//                                 a = !isNaN(e._d.getTime()) && t.overflow < 0 && !t.empty && !t.invalidEra && !t.invalidMonth && !t.invalidWeekday && !t.weekdayMismatch && !t.nullInput && !t.invalidFormat && !t.userInvalidated && (!t.meridiem || t.meridiem && n);
//                             if (e._strict && (a = a && 0 === t.charsLeftOver && 0 === t.unusedTokens.length && void 0 === t.bigHour), null != Object.isFrozen && Object.isFrozen(e)) return a;
//                             e._isValid = a
//                         }
//                         return e._isValid
//                     }

//                     function y(e) {
//                         var t = f(NaN);
//                         return null != e ? p(_(t), e) : _(t).userInvalidated = !0, t
//                     }
//                     i = Array.prototype.some ? Array.prototype.some : function(e) {
//                         var t, n = Object(this),
//                             i = n.length >>> 0;
//                         for (t = 0; t < i; t++)
//                             if (t in n && e.call(this, n[t], t, n)) return !0;
//                         return !1
//                     };
//                     var w = a.momentProperties = [],
//                         b = !1;

//                     function M(e, t) {
//                         var n, i, a, s = w.length;
//                         if (c(t._isAMomentObject) || (e._isAMomentObject = t._isAMomentObject), c(t._i) || (e._i = t._i), c(t._f) || (e._f = t._f), c(t._l) || (e._l = t._l), c(t._strict) || (e._strict = t._strict), c(t._tzm) || (e._tzm = t._tzm), c(t._isUTC) || (e._isUTC = t._isUTC), c(t._offset) || (e._offset = t._offset), c(t._pf) || (e._pf = _(t)), c(t._locale) || (e._locale = t._locale), s > 0)
//                             for (n = 0; n < s; n++) c(a = t[i = w[n]]) || (e[i] = a);
//                         return e
//                     }

//                     function x(e) {
//                         M(this, e), this._d = new Date(null != e._d ? e._d.getTime() : NaN), this.isValid() || (this._d = new Date(NaN)), !1 === b && (b = !0, a.updateOffset(this), b = !1)
//                     }

//                     function L(e) {
//                         return e instanceof x || null != e && null != e._isAMomentObject
//                     }

//                     function k(e) {
//                         !1 === a.suppressDeprecationWarnings && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + e)
//                     }

//                     function T(e, t) {
//                         var n = !0;
//                         return p((function() {
//                             if (null != a.deprecationHandler && a.deprecationHandler(null, e), n) {
//                                 var i, s, r, o = [],
//                                     d = arguments.length;
//                                 for (s = 0; s < d; s++) {
//                                     if (i = "", "object" == typeof arguments[s]) {
//                                         for (r in i += "\n[" + s + "] ", arguments[0]) l(arguments[0], r) && (i += r + ": " + arguments[0][r] + ", ");
//                                         i = i.slice(0, -2)
//                                     } else i = arguments[s];
//                                     o.push(i)
//                                 }
//                                 k(e + "\nArguments: " + Array.prototype.slice.call(o).join("") + "\n" + (new Error).stack), n = !1
//                             }
//                             return t.apply(this, arguments)
//                         }), t)
//                     }
//                     var Y, S = {};

//                     function D(e, t) {
//                         null != a.deprecationHandler && a.deprecationHandler(e, t), S[e] || (k(t), S[e] = !0)
//                     }

//                     function P(e) {
//                         return "undefined" != typeof Function && e instanceof Function || "[object Function]" === Object.prototype.toString.call(e)
//                     }

//                     function E(e) {
//                         var t, n;
//                         for (n in e) l(e, n) && (P(t = e[n]) ? this[n] = t : this["_" + n] = t);
//                         this._config = e, this._dayOfMonthOrdinalParseLenient = new RegExp((this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source)
//                     }

//                     function C(e, t) {
//                         var n, i = p({}, e);
//                         for (n in t) l(t, n) && (o(e[n]) && o(t[n]) ? (i[n] = {}, p(i[n], e[n]), p(i[n], t[n])) : null != t[n] ? i[n] = t[n] : delete i[n]);
//                         for (n in e) l(e, n) && !l(t, n) && o(e[n]) && (i[n] = p({}, i[n]));
//                         return i
//                     }

//                     function H(e) {
//                         null != e && this.set(e)
//                     }
//                     a.suppressDeprecationWarnings = !1, a.deprecationHandler = null, Y = Object.keys ? Object.keys : function(e) {
//                         var t, n = [];
//                         for (t in e) l(e, t) && n.push(t);
//                         return n
//                     };
//                     var Z = {
//                         sameDay: "[Today at] LT",
//                         nextDay: "[Tomorrow at] LT",
//                         nextWeek: "dddd [at] LT",
//                         lastDay: "[Yesterday at] LT",
//                         lastWeek: "[Last] dddd [at] LT",
//                         sameElse: "L"
//                     };

//                     function A(e, t, n) {
//                         var i = this._calendar[e] || this._calendar.sameElse;
//                         return P(i) ? i.call(t, n) : i
//                     }

//                     function j(e, t, n) {
//                         var i = "" + Math.abs(e),
//                             a = t - i.length;
//                         return (e >= 0 ? n ? "+" : "" : "-") + Math.pow(10, Math.max(0, a)).toString().substr(1) + i
//                     }
//                     var O = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,
//                         F = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,
//                         I = {},
//                         N = {};

//                     function R(e, t, n, i) {
//                         var a = i;
//                         "string" == typeof i && (a = function() {
//                             return this[i]()
//                         }), e && (N[e] = a), t && (N[t[0]] = function() {
//                             return j(a.apply(this, arguments), t[1], t[2])
//                         }), n && (N[n] = function() {
//                             return this.localeData().ordinal(a.apply(this, arguments), e)
//                         })
//                     }

//                     function z(e) {
//                         return e.match(/\[[\s\S]/) ? e.replace(/^\[|\]$/g, "") : e.replace(/\\/g, "")
//                     }

//                     function $(e) {
//                         var t, n, i = e.match(O);
//                         for (t = 0, n = i.length; t < n; t++) N[i[t]] ? i[t] = N[i[t]] : i[t] = z(i[t]);
//                         return function(t) {
//                             var a, s = "";
//                             for (a = 0; a < n; a++) s += P(i[a]) ? i[a].call(t, e) : i[a];
//                             return s
//                         }
//                     }

//                     function W(e, t) {
//                         return e.isValid() ? (t = U(t, e.localeData()), I[t] = I[t] || $(t), I[t](e)) : e.localeData().invalidDate()
//                     }

//                     function U(e, t) {
//                         var n = 5;

//                         function i(e) {
//                             return t.longDateFormat(e) || e
//                         }
//                         for (F.lastIndex = 0; n >= 0 && F.test(e);) e = e.replace(F, i), F.lastIndex = 0, n -= 1;
//                         return e
//                     }
//                     var B = {
//                         LTS: "h:mm:ss A",
//                         LT: "h:mm A",
//                         L: "MM/DD/YYYY",
//                         LL: "MMMM D, YYYY",
//                         LLL: "MMMM D, YYYY h:mm A",
//                         LLLL: "dddd, MMMM D, YYYY h:mm A"
//                     };

//                     function q(e) {
//                         var t = this._longDateFormat[e],
//                             n = this._longDateFormat[e.toUpperCase()];
//                         return t || !n ? t : (this._longDateFormat[e] = n.match(O).map((function(e) {
//                             return "MMMM" === e || "MM" === e || "DD" === e || "dddd" === e ? e.slice(1) : e
//                         })).join(""), this._longDateFormat[e])
//                     }
//                     var G = "Invalid date";

//                     function J() {
//                         return this._invalidDate
//                     }
//                     var V = "%d",
//                         K = /\d{1,2}/;

//                     function X(e) {
//                         return this._ordinal.replace("%d", e)
//                     }
//                     var Q = {
//                         future: "in %s",
//                         past: "%s ago",
//                         s: "a few seconds",
//                         ss: "%d seconds",
//                         m: "a minute",
//                         mm: "%d minutes",
//                         h: "an hour",
//                         hh: "%d hours",
//                         d: "a day",
//                         dd: "%d days",
//                         w: "a week",
//                         ww: "%d weeks",
//                         M: "a month",
//                         MM: "%d months",
//                         y: "a year",
//                         yy: "%d years"
//                     };

//                     function ee(e, t, n, i) {
//                         var a = this._relativeTime[n];
//                         return P(a) ? a(e, t, n, i) : a.replace(/%d/i, e)
//                     }

//                     function te(e, t) {
//                         var n = this._relativeTime[e > 0 ? "future" : "past"];
//                         return P(n) ? n(t) : n.replace(/%s/i, t)
//                     }
//                     var ne = {};

//                     function ie(e, t) {
//                         var n = e.toLowerCase();
//                         ne[n] = ne[n + "s"] = ne[t] = e
//                     }

//                     function ae(e) {
//                         return "string" == typeof e ? ne[e] || ne[e.toLowerCase()] : void 0
//                     }

//                     function se(e) {
//                         var t, n, i = {};
//                         for (n in e) l(e, n) && (t = ae(n)) && (i[t] = e[n]);
//                         return i
//                     }
//                     var re = {};

//                     function oe(e, t) {
//                         re[e] = t
//                     }

//                     function le(e) {
//                         var t, n = [];
//                         for (t in e) l(e, t) && n.push({
//                             unit: t,
//                             priority: re[t]
//                         });
//                         return n.sort((function(e, t) {
//                             return e.priority - t.priority
//                         })), n
//                     }

//                     function de(e) {
//                         return e % 4 == 0 && e % 100 != 0 || e % 400 == 0
//                     }

//                     function ce(e) {
//                         return e < 0 ? Math.ceil(e) || 0 : Math.floor(e)
//                     }

//                     function ue(e) {
//                         var t = +e,
//                             n = 0;
//                         return 0 !== t && isFinite(t) && (n = ce(t)), n
//                     }

//                     function he(e, t) {
//                         return function(n) {
//                             return null != n ? (pe(this, e, n), a.updateOffset(this, t), this) : me(this, e)
//                         }
//                     }

//                     function me(e, t) {
//                         return e.isValid() ? e._d["get" + (e._isUTC ? "UTC" : "") + t]() : NaN
//                     }

//                     function pe(e, t, n) {
//                         e.isValid() && !isNaN(n) && ("FullYear" === t && de(e.year()) && 1 === e.month() && 29 === e.date() ? (n = ue(n), e._d["set" + (e._isUTC ? "UTC" : "") + t](n, e.month(), et(n, e.month()))) : e._d["set" + (e._isUTC ? "UTC" : "") + t](n))
//                     }

//                     function fe(e) {
//                         return P(this[e = ae(e)]) ? this[e]() : this
//                     }

//                     function ge(e, t) {
//                         if ("object" == typeof e) {
//                             var n, i = le(e = se(e)),
//                                 a = i.length;
//                             for (n = 0; n < a; n++) this[i[n].unit](e[i[n].unit])
//                         } else if (P(this[e = ae(e)])) return this[e](t);
//                         return this
//                     }
//                     var _e, ve = /\d/,
//                         ye = /\d\d/,
//                         we = /\d{3}/,
//                         be = /\d{4}/,
//                         Me = /[+-]?\d{6}/,
//                         xe = /\d\d?/,
//                         Le = /\d\d\d\d?/,
//                         ke = /\d\d\d\d\d\d?/,
//                         Te = /\d{1,3}/,
//                         Ye = /\d{1,4}/,
//                         Se = /[+-]?\d{1,6}/,
//                         De = /\d+/,
//                         Pe = /[+-]?\d+/,
//                         Ee = /Z|[+-]\d\d:?\d\d/gi,
//                         Ce = /Z|[+-]\d\d(?::?\d\d)?/gi,
//                         He = /[+-]?\d+(\.\d{1,3})?/,
//                         Ze = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

//                     function Ae(e, t, n) {
//                         _e[e] = P(t) ? t : function(e, i) {
//                             return e && n ? n : t
//                         }
//                     }

//                     function je(e, t) {
//                         return l(_e, e) ? _e[e](t._strict, t._locale) : new RegExp(Oe(e))
//                     }

//                     function Oe(e) {
//                         return Fe(e.replace("\\", "").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, (function(e, t, n, i, a) {
//                             return t || n || i || a
//                         })))
//                     }

//                     function Fe(e) {
//                         return e.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&")
//                     }
//                     _e = {};
//                     var Ie = {};

//                     function Ne(e, t) {
//                         var n, i, a = t;
//                         for ("string" == typeof e && (e = [e]), u(t) && (a = function(e, n) {
//                                 n[t] = ue(e)
//                             }), i = e.length, n = 0; n < i; n++) Ie[e[n]] = a
//                     }

//                     function Re(e, t) {
//                         Ne(e, (function(e, n, i, a) {
//                             i._w = i._w || {}, t(e, i._w, i, a)
//                         }))
//                     }

//                     function ze(e, t, n) {
//                         null != t && l(Ie, e) && Ie[e](t, n._a, n, e)
//                     }
//                     var $e, We = 0,
//                         Ue = 1,
//                         Be = 2,
//                         qe = 3,
//                         Ge = 4,
//                         Je = 5,
//                         Ve = 6,
//                         Ke = 7,
//                         Xe = 8;

//                     function Qe(e, t) {
//                         return (e % t + t) % t
//                     }

//                     function et(e, t) {
//                         if (isNaN(e) || isNaN(t)) return NaN;
//                         var n = Qe(t, 12);
//                         return e += (t - n) / 12, 1 === n ? de(e) ? 29 : 28 : 31 - n % 7 % 2
//                     }
//                     $e = Array.prototype.indexOf ? Array.prototype.indexOf : function(e) {
//                         var t;
//                         for (t = 0; t < this.length; ++t)
//                             if (this[t] === e) return t;
//                         return -1
//                     }, R("M", ["MM", 2], "Mo", (function() {
//                         return this.month() + 1
//                     })), R("MMM", 0, 0, (function(e) {
//                         return this.localeData().monthsShort(this, e)
//                     })), R("MMMM", 0, 0, (function(e) {
//                         return this.localeData().months(this, e)
//                     })), ie("month", "M"), oe("month", 8), Ae("M", xe), Ae("MM", xe, ye), Ae("MMM", (function(e, t) {
//                         return t.monthsShortRegex(e)
//                     })), Ae("MMMM", (function(e, t) {
//                         return t.monthsRegex(e)
//                     })), Ne(["M", "MM"], (function(e, t) {
//                         t[Ue] = ue(e) - 1
//                     })), Ne(["MMM", "MMMM"], (function(e, t, n, i) {
//                         var a = n._locale.monthsParse(e, i, n._strict);
//                         null != a ? t[Ue] = a : _(n).invalidMonth = e
//                     }));
//                     var tt = "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
//                         nt = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
//                         it = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,
//                         at = Ze,
//                         st = Ze;

//                     function rt(e, t) {
//                         return e ? r(this._months) ? this._months[e.month()] : this._months[(this._months.isFormat || it).test(t) ? "format" : "standalone"][e.month()] : r(this._months) ? this._months : this._months.standalone
//                     }

//                     function ot(e, t) {
//                         return e ? r(this._monthsShort) ? this._monthsShort[e.month()] : this._monthsShort[it.test(t) ? "format" : "standalone"][e.month()] : r(this._monthsShort) ? this._monthsShort : this._monthsShort.standalone
//                     }

//                     function lt(e, t, n) {
//                         var i, a, s, r = e.toLocaleLowerCase();
//                         if (!this._monthsParse)
//                             for (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = [], i = 0; i < 12; ++i) s = f([2e3, i]), this._shortMonthsParse[i] = this.monthsShort(s, "").toLocaleLowerCase(), this._longMonthsParse[i] = this.months(s, "").toLocaleLowerCase();
//                         return n ? "MMM" === t ? -1 !== (a = $e.call(this._shortMonthsParse, r)) ? a : null : -1 !== (a = $e.call(this._longMonthsParse, r)) ? a : null : "MMM" === t ? -1 !== (a = $e.call(this._shortMonthsParse, r)) || -1 !== (a = $e.call(this._longMonthsParse, r)) ? a : null : -1 !== (a = $e.call(this._longMonthsParse, r)) || -1 !== (a = $e.call(this._shortMonthsParse, r)) ? a : null
//                     }

//                     function dt(e, t, n) {
//                         var i, a, s;
//                         if (this._monthsParseExact) return lt.call(this, e, t, n);
//                         for (this._monthsParse || (this._monthsParse = [], this._longMonthsParse = [], this._shortMonthsParse = []), i = 0; i < 12; i++) {
//                             if (a = f([2e3, i]), n && !this._longMonthsParse[i] && (this._longMonthsParse[i] = new RegExp("^" + this.months(a, "").replace(".", "") + "$", "i"), this._shortMonthsParse[i] = new RegExp("^" + this.monthsShort(a, "").replace(".", "") + "$", "i")), n || this._monthsParse[i] || (s = "^" + this.months(a, "") + "|^" + this.monthsShort(a, ""), this._monthsParse[i] = new RegExp(s.replace(".", ""), "i")), n && "MMMM" === t && this._longMonthsParse[i].test(e)) return i;
//                             if (n && "MMM" === t && this._shortMonthsParse[i].test(e)) return i;
//                             if (!n && this._monthsParse[i].test(e)) return i
//                         }
//                     }

//                     function ct(e, t) {
//                         var n;
//                         if (!e.isValid()) return e;
//                         if ("string" == typeof t)
//                             if (/^\d+$/.test(t)) t = ue(t);
//                             else if (!u(t = e.localeData().monthsParse(t))) return e;
//                         return n = Math.min(e.date(), et(e.year(), t)), e._d["set" + (e._isUTC ? "UTC" : "") + "Month"](t, n), e
//                     }

//                     function ut(e) {
//                         return null != e ? (ct(this, e), a.updateOffset(this, !0), this) : me(this, "Month")
//                     }

//                     function ht() {
//                         return et(this.year(), this.month())
//                     }

//                     function mt(e) {
//                         return this._monthsParseExact ? (l(this, "_monthsRegex") || ft.call(this), e ? this._monthsShortStrictRegex : this._monthsShortRegex) : (l(this, "_monthsShortRegex") || (this._monthsShortRegex = at), this._monthsShortStrictRegex && e ? this._monthsShortStrictRegex : this._monthsShortRegex)
//                     }

//                     function pt(e) {
//                         return this._monthsParseExact ? (l(this, "_monthsRegex") || ft.call(this), e ? this._monthsStrictRegex : this._monthsRegex) : (l(this, "_monthsRegex") || (this._monthsRegex = st), this._monthsStrictRegex && e ? this._monthsStrictRegex : this._monthsRegex)
//                     }

//                     function ft() {
//                         function e(e, t) {
//                             return t.length - e.length
//                         }
//                         var t, n, i = [],
//                             a = [],
//                             s = [];
//                         for (t = 0; t < 12; t++) n = f([2e3, t]), i.push(this.monthsShort(n, "")), a.push(this.months(n, "")), s.push(this.months(n, "")), s.push(this.monthsShort(n, ""));
//                         for (i.sort(e), a.sort(e), s.sort(e), t = 0; t < 12; t++) i[t] = Fe(i[t]), a[t] = Fe(a[t]);
//                         for (t = 0; t < 24; t++) s[t] = Fe(s[t]);
//                         this._monthsRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._monthsShortRegex = this._monthsRegex, this._monthsStrictRegex = new RegExp("^(" + a.join("|") + ")", "i"), this._monthsShortStrictRegex = new RegExp("^(" + i.join("|") + ")", "i")
//                     }

//                     function gt(e) {
//                         return de(e) ? 366 : 365
//                     }
//                     R("Y", 0, 0, (function() {
//                         var e = this.year();
//                         return e <= 9999 ? j(e, 4) : "+" + e
//                     })), R(0, ["YY", 2], 0, (function() {
//                         return this.year() % 100
//                     })), R(0, ["YYYY", 4], 0, "year"), R(0, ["YYYYY", 5], 0, "year"), R(0, ["YYYYYY", 6, !0], 0, "year"), ie("year", "y"), oe("year", 1), Ae("Y", Pe), Ae("YY", xe, ye), Ae("YYYY", Ye, be), Ae("YYYYY", Se, Me), Ae("YYYYYY", Se, Me), Ne(["YYYYY", "YYYYYY"], We), Ne("YYYY", (function(e, t) {
//                         t[We] = 2 === e.length ? a.parseTwoDigitYear(e) : ue(e)
//                     })), Ne("YY", (function(e, t) {
//                         t[We] = a.parseTwoDigitYear(e)
//                     })), Ne("Y", (function(e, t) {
//                         t[We] = parseInt(e, 10)
//                     })), a.parseTwoDigitYear = function(e) {
//                         return ue(e) + (ue(e) > 68 ? 1900 : 2e3)
//                     };
//                     var _t = he("FullYear", !0);

//                     function vt() {
//                         return de(this.year())
//                     }

//                     function yt(e, t, n, i, a, s, r) {
//                         var o;
//                         return e < 100 && e >= 0 ? (o = new Date(e + 400, t, n, i, a, s, r), isFinite(o.getFullYear()) && o.setFullYear(e)) : o = new Date(e, t, n, i, a, s, r), o
//                     }

//                     function wt(e) {
//                         var t, n;
//                         return e < 100 && e >= 0 ? ((n = Array.prototype.slice.call(arguments))[0] = e + 400, t = new Date(Date.UTC.apply(null, n)), isFinite(t.getUTCFullYear()) && t.setUTCFullYear(e)) : t = new Date(Date.UTC.apply(null, arguments)), t
//                     }

//                     function bt(e, t, n) {
//                         var i = 7 + t - n;
//                         return -(7 + wt(e, 0, i).getUTCDay() - t) % 7 + i - 1
//                     }

//                     function Mt(e, t, n, i, a) {
//                         var s, r, o = 1 + 7 * (t - 1) + (7 + n - i) % 7 + bt(e, i, a);
//                         return o <= 0 ? r = gt(s = e - 1) + o : o > gt(e) ? (s = e + 1, r = o - gt(e)) : (s = e, r = o), {
//                             year: s,
//                             dayOfYear: r
//                         }
//                     }

//                     function xt(e, t, n) {
//                         var i, a, s = bt(e.year(), t, n),
//                             r = Math.floor((e.dayOfYear() - s - 1) / 7) + 1;
//                         return r < 1 ? i = r + Lt(a = e.year() - 1, t, n) : r > Lt(e.year(), t, n) ? (i = r - Lt(e.year(), t, n), a = e.year() + 1) : (a = e.year(), i = r), {
//                             week: i,
//                             year: a
//                         }
//                     }

//                     function Lt(e, t, n) {
//                         var i = bt(e, t, n),
//                             a = bt(e + 1, t, n);
//                         return (gt(e) - i + a) / 7
//                     }

//                     function kt(e) {
//                         return xt(e, this._week.dow, this._week.doy).week
//                     }
//                     R("w", ["ww", 2], "wo", "week"), R("W", ["WW", 2], "Wo", "isoWeek"), ie("week", "w"), ie("isoWeek", "W"), oe("week", 5), oe("isoWeek", 5), Ae("w", xe), Ae("ww", xe, ye), Ae("W", xe), Ae("WW", xe, ye), Re(["w", "ww", "W", "WW"], (function(e, t, n, i) {
//                         t[i.substr(0, 1)] = ue(e)
//                     }));
//                     var Tt = {
//                         dow: 0,
//                         doy: 6
//                     };

//                     function Yt() {
//                         return this._week.dow
//                     }

//                     function St() {
//                         return this._week.doy
//                     }

//                     function Dt(e) {
//                         var t = this.localeData().week(this);
//                         return null == e ? t : this.add(7 * (e - t), "d")
//                     }

//                     function Pt(e) {
//                         var t = xt(this, 1, 4).week;
//                         return null == e ? t : this.add(7 * (e - t), "d")
//                     }

//                     function Et(e, t) {
//                         return "string" != typeof e ? e : isNaN(e) ? "number" == typeof(e = t.weekdaysParse(e)) ? e : null : parseInt(e, 10)
//                     }

//                     function Ct(e, t) {
//                         return "string" == typeof e ? t.weekdaysParse(e) % 7 || 7 : isNaN(e) ? null : e
//                     }

//                     function Ht(e, t) {
//                         return e.slice(t, 7).concat(e.slice(0, t))
//                     }
//                     R("d", 0, "do", "day"), R("dd", 0, 0, (function(e) {
//                         return this.localeData().weekdaysMin(this, e)
//                     })), R("ddd", 0, 0, (function(e) {
//                         return this.localeData().weekdaysShort(this, e)
//                     })), R("dddd", 0, 0, (function(e) {
//                         return this.localeData().weekdays(this, e)
//                     })), R("e", 0, 0, "weekday"), R("E", 0, 0, "isoWeekday"), ie("day", "d"), ie("weekday", "e"), ie("isoWeekday", "E"), oe("day", 11), oe("weekday", 11), oe("isoWeekday", 11), Ae("d", xe), Ae("e", xe), Ae("E", xe), Ae("dd", (function(e, t) {
//                         return t.weekdaysMinRegex(e)
//                     })), Ae("ddd", (function(e, t) {
//                         return t.weekdaysShortRegex(e)
//                     })), Ae("dddd", (function(e, t) {
//                         return t.weekdaysRegex(e)
//                     })), Re(["dd", "ddd", "dddd"], (function(e, t, n, i) {
//                         var a = n._locale.weekdaysParse(e, i, n._strict);
//                         null != a ? t.d = a : _(n).invalidWeekday = e
//                     })), Re(["d", "e", "E"], (function(e, t, n, i) {
//                         t[i] = ue(e)
//                     }));
//                     var Zt = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
//                         At = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
//                         jt = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"),
//                         Ot = Ze,
//                         Ft = Ze,
//                         It = Ze;

//                     function Nt(e, t) {
//                         var n = r(this._weekdays) ? this._weekdays : this._weekdays[e && !0 !== e && this._weekdays.isFormat.test(t) ? "format" : "standalone"];
//                         return !0 === e ? Ht(n, this._week.dow) : e ? n[e.day()] : n
//                     }

//                     function Rt(e) {
//                         return !0 === e ? Ht(this._weekdaysShort, this._week.dow) : e ? this._weekdaysShort[e.day()] : this._weekdaysShort
//                     }

//                     function zt(e) {
//                         return !0 === e ? Ht(this._weekdaysMin, this._week.dow) : e ? this._weekdaysMin[e.day()] : this._weekdaysMin
//                     }

//                     function $t(e, t, n) {
//                         var i, a, s, r = e.toLocaleLowerCase();
//                         if (!this._weekdaysParse)
//                             for (this._weekdaysParse = [], this._shortWeekdaysParse = [], this._minWeekdaysParse = [], i = 0; i < 7; ++i) s = f([2e3, 1]).day(i), this._minWeekdaysParse[i] = this.weekdaysMin(s, "").toLocaleLowerCase(), this._shortWeekdaysParse[i] = this.weekdaysShort(s, "").toLocaleLowerCase(), this._weekdaysParse[i] = this.weekdays(s, "").toLocaleLowerCase();
//                         return n ? "dddd" === t ? -1 !== (a = $e.call(this._weekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = $e.call(this._shortWeekdaysParse, r)) ? a : null : -1 !== (a = $e.call(this._minWeekdaysParse, r)) ? a : null : "dddd" === t ? -1 !== (a = $e.call(this._weekdaysParse, r)) || -1 !== (a = $e.call(this._shortWeekdaysParse, r)) || -1 !== (a = $e.call(this._minWeekdaysParse, r)) ? a : null : "ddd" === t ? -1 !== (a = $e.call(this._shortWeekdaysParse, r)) || -1 !== (a = $e.call(this._weekdaysParse, r)) || -1 !== (a = $e.call(this._minWeekdaysParse, r)) ? a : null : -1 !== (a = $e.call(this._minWeekdaysParse, r)) || -1 !== (a = $e.call(this._weekdaysParse, r)) || -1 !== (a = $e.call(this._shortWeekdaysParse, r)) ? a : null
//                     }

//                     function Wt(e, t, n) {
//                         var i, a, s;
//                         if (this._weekdaysParseExact) return $t.call(this, e, t, n);
//                         for (this._weekdaysParse || (this._weekdaysParse = [], this._minWeekdaysParse = [], this._shortWeekdaysParse = [], this._fullWeekdaysParse = []), i = 0; i < 7; i++) {
//                             if (a = f([2e3, 1]).day(i), n && !this._fullWeekdaysParse[i] && (this._fullWeekdaysParse[i] = new RegExp("^" + this.weekdays(a, "").replace(".", "\\.?") + "$", "i"), this._shortWeekdaysParse[i] = new RegExp("^" + this.weekdaysShort(a, "").replace(".", "\\.?") + "$", "i"), this._minWeekdaysParse[i] = new RegExp("^" + this.weekdaysMin(a, "").replace(".", "\\.?") + "$", "i")), this._weekdaysParse[i] || (s = "^" + this.weekdays(a, "") + "|^" + this.weekdaysShort(a, "") + "|^" + this.weekdaysMin(a, ""), this._weekdaysParse[i] = new RegExp(s.replace(".", ""), "i")), n && "dddd" === t && this._fullWeekdaysParse[i].test(e)) return i;
//                             if (n && "ddd" === t && this._shortWeekdaysParse[i].test(e)) return i;
//                             if (n && "dd" === t && this._minWeekdaysParse[i].test(e)) return i;
//                             if (!n && this._weekdaysParse[i].test(e)) return i
//                         }
//                     }

//                     function Ut(e) {
//                         if (!this.isValid()) return null != e ? this : NaN;
//                         var t = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
//                         return null != e ? (e = Et(e, this.localeData()), this.add(e - t, "d")) : t
//                     }

//                     function Bt(e) {
//                         if (!this.isValid()) return null != e ? this : NaN;
//                         var t = (this.day() + 7 - this.localeData()._week.dow) % 7;
//                         return null == e ? t : this.add(e - t, "d")
//                     }

//                     function qt(e) {
//                         if (!this.isValid()) return null != e ? this : NaN;
//                         if (null != e) {
//                             var t = Ct(e, this.localeData());
//                             return this.day(this.day() % 7 ? t : t - 7)
//                         }
//                         return this.day() || 7
//                     }

//                     function Gt(e) {
//                         return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Kt.call(this), e ? this._weekdaysStrictRegex : this._weekdaysRegex) : (l(this, "_weekdaysRegex") || (this._weekdaysRegex = Ot), this._weekdaysStrictRegex && e ? this._weekdaysStrictRegex : this._weekdaysRegex)
//                     }

//                     function Jt(e) {
//                         return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Kt.call(this), e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex) : (l(this, "_weekdaysShortRegex") || (this._weekdaysShortRegex = Ft), this._weekdaysShortStrictRegex && e ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex)
//                     }

//                     function Vt(e) {
//                         return this._weekdaysParseExact ? (l(this, "_weekdaysRegex") || Kt.call(this), e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex) : (l(this, "_weekdaysMinRegex") || (this._weekdaysMinRegex = It), this._weekdaysMinStrictRegex && e ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex)
//                     }

//                     function Kt() {
//                         function e(e, t) {
//                             return t.length - e.length
//                         }
//                         var t, n, i, a, s, r = [],
//                             o = [],
//                             l = [],
//                             d = [];
//                         for (t = 0; t < 7; t++) n = f([2e3, 1]).day(t), i = Fe(this.weekdaysMin(n, "")), a = Fe(this.weekdaysShort(n, "")), s = Fe(this.weekdays(n, "")), r.push(i), o.push(a), l.push(s), d.push(i), d.push(a), d.push(s);
//                         r.sort(e), o.sort(e), l.sort(e), d.sort(e), this._weekdaysRegex = new RegExp("^(" + d.join("|") + ")", "i"), this._weekdaysShortRegex = this._weekdaysRegex, this._weekdaysMinRegex = this._weekdaysRegex, this._weekdaysStrictRegex = new RegExp("^(" + l.join("|") + ")", "i"), this._weekdaysShortStrictRegex = new RegExp("^(" + o.join("|") + ")", "i"), this._weekdaysMinStrictRegex = new RegExp("^(" + r.join("|") + ")", "i")
//                     }

//                     function Xt() {
//                         return this.hours() % 12 || 12
//                     }

//                     function Qt() {
//                         return this.hours() || 24
//                     }

//                     function en(e, t) {
//                         R(e, 0, 0, (function() {
//                             return this.localeData().meridiem(this.hours(), this.minutes(), t)
//                         }))
//                     }

//                     function tn(e, t) {
//                         return t._meridiemParse
//                     }

//                     function nn(e) {
//                         return "p" === (e + "").toLowerCase().charAt(0)
//                     }
//                     R("H", ["HH", 2], 0, "hour"), R("h", ["hh", 2], 0, Xt), R("k", ["kk", 2], 0, Qt), R("hmm", 0, 0, (function() {
//                         return "" + Xt.apply(this) + j(this.minutes(), 2)
//                     })), R("hmmss", 0, 0, (function() {
//                         return "" + Xt.apply(this) + j(this.minutes(), 2) + j(this.seconds(), 2)
//                     })), R("Hmm", 0, 0, (function() {
//                         return "" + this.hours() + j(this.minutes(), 2)
//                     })), R("Hmmss", 0, 0, (function() {
//                         return "" + this.hours() + j(this.minutes(), 2) + j(this.seconds(), 2)
//                     })), en("a", !0), en("A", !1), ie("hour", "h"), oe("hour", 13), Ae("a", tn), Ae("A", tn), Ae("H", xe), Ae("h", xe), Ae("k", xe), Ae("HH", xe, ye), Ae("hh", xe, ye), Ae("kk", xe, ye), Ae("hmm", Le), Ae("hmmss", ke), Ae("Hmm", Le), Ae("Hmmss", ke), Ne(["H", "HH"], qe), Ne(["k", "kk"], (function(e, t, n) {
//                         var i = ue(e);
//                         t[qe] = 24 === i ? 0 : i
//                     })), Ne(["a", "A"], (function(e, t, n) {
//                         n._isPm = n._locale.isPM(e), n._meridiem = e
//                     })), Ne(["h", "hh"], (function(e, t, n) {
//                         t[qe] = ue(e), _(n).bigHour = !0
//                     })), Ne("hmm", (function(e, t, n) {
//                         var i = e.length - 2;
//                         t[qe] = ue(e.substr(0, i)), t[Ge] = ue(e.substr(i)), _(n).bigHour = !0
//                     })), Ne("hmmss", (function(e, t, n) {
//                         var i = e.length - 4,
//                             a = e.length - 2;
//                         t[qe] = ue(e.substr(0, i)), t[Ge] = ue(e.substr(i, 2)), t[Je] = ue(e.substr(a)), _(n).bigHour = !0
//                     })), Ne("Hmm", (function(e, t, n) {
//                         var i = e.length - 2;
//                         t[qe] = ue(e.substr(0, i)), t[Ge] = ue(e.substr(i))
//                     })), Ne("Hmmss", (function(e, t, n) {
//                         var i = e.length - 4,
//                             a = e.length - 2;
//                         t[qe] = ue(e.substr(0, i)), t[Ge] = ue(e.substr(i, 2)), t[Je] = ue(e.substr(a))
//                     }));
//                     var an = /[ap]\.?m?\.?/i,
//                         sn = he("Hours", !0);

//                     function rn(e, t, n) {
//                         return e > 11 ? n ? "pm" : "PM" : n ? "am" : "AM"
//                     }
//                     var on, ln = {
//                             calendar: Z,
//                             longDateFormat: B,
//                             invalidDate: G,
//                             ordinal: V,
//                             dayOfMonthOrdinalParse: K,
//                             relativeTime: Q,
//                             months: tt,
//                             monthsShort: nt,
//                             week: Tt,
//                             weekdays: Zt,
//                             weekdaysMin: jt,
//                             weekdaysShort: At,
//                             meridiemParse: an
//                         },
//                         dn = {},
//                         cn = {};

//                     function un(e, t) {
//                         var n, i = Math.min(e.length, t.length);
//                         for (n = 0; n < i; n += 1)
//                             if (e[n] !== t[n]) return n;
//                         return i
//                     }

//                     function hn(e) {
//                         return e ? e.toLowerCase().replace("_", "-") : e
//                     }

//                     function mn(e) {
//                         for (var t, n, i, a, s = 0; s < e.length;) {
//                             for (t = (a = hn(e[s]).split("-")).length, n = (n = hn(e[s + 1])) ? n.split("-") : null; t > 0;) {
//                                 if (i = fn(a.slice(0, t).join("-"))) return i;
//                                 if (n && n.length >= t && un(a, n) >= t - 1) break;
//                                 t--
//                             }
//                             s++
//                         }
//                         return on
//                     }

//                     function pn(e) {
//                         return null != e.match("^[^/\\\\]*$")
//                     }

//                     function fn(t) {
//                         var i = null;
//                         if (void 0 === dn[t] && e && e.exports && pn(t)) try {
//                             i = on._abbr, n(6700)("./" + t), gn(i)
//                         } catch (a) {
//                             dn[t] = null
//                         }
//                         return dn[t]
//                     }

//                     function gn(e, t) {
//                         var n;
//                         return e && ((n = c(t) ? yn(e) : _n(e, t)) ? on = n : "undefined" != typeof console && console.warn && console.warn("Locale " + e + " not found. Did you forget to load it?")), on._abbr
//                     }

//                     function _n(e, t) {
//                         if (null !== t) {
//                             var n, i = ln;
//                             if (t.abbr = e, null != dn[e]) D("defineLocaleOverride", "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."), i = dn[e]._config;
//                             else if (null != t.parentLocale)
//                                 if (null != dn[t.parentLocale]) i = dn[t.parentLocale]._config;
//                                 else {
//                                     if (null == (n = fn(t.parentLocale))) return cn[t.parentLocale] || (cn[t.parentLocale] = []), cn[t.parentLocale].push({
//                                         name: e,
//                                         config: t
//                                     }), null;
//                                     i = n._config
//                                 }
//                             return dn[e] = new H(C(i, t)), cn[e] && cn[e].forEach((function(e) {
//                                 _n(e.name, e.config)
//                             })), gn(e), dn[e]
//                         }
//                         return delete dn[e], null
//                     }

//                     function vn(e, t) {
//                         if (null != t) {
//                             var n, i, a = ln;
//                             null != dn[e] && null != dn[e].parentLocale ? dn[e].set(C(dn[e]._config, t)) : (null != (i = fn(e)) && (a = i._config), t = C(a, t), null == i && (t.abbr = e), (n = new H(t)).parentLocale = dn[e], dn[e] = n), gn(e)
//                         } else null != dn[e] && (null != dn[e].parentLocale ? (dn[e] = dn[e].parentLocale, e === gn() && gn(e)) : null != dn[e] && delete dn[e]);
//                         return dn[e]
//                     }

//                     function yn(e) {
//                         var t;
//                         if (e && e._locale && e._locale._abbr && (e = e._locale._abbr), !e) return on;
//                         if (!r(e)) {
//                             if (t = fn(e)) return t;
//                             e = [e]
//                         }
//                         return mn(e)
//                     }

//                     function wn() {
//                         return Y(dn)
//                     }

//                     function bn(e) {
//                         var t, n = e._a;
//                         return n && -2 === _(e).overflow && (t = n[Ue] < 0 || n[Ue] > 11 ? Ue : n[Be] < 1 || n[Be] > et(n[We], n[Ue]) ? Be : n[qe] < 0 || n[qe] > 24 || 24 === n[qe] && (0 !== n[Ge] || 0 !== n[Je] || 0 !== n[Ve]) ? qe : n[Ge] < 0 || n[Ge] > 59 ? Ge : n[Je] < 0 || n[Je] > 59 ? Je : n[Ve] < 0 || n[Ve] > 999 ? Ve : -1, _(e)._overflowDayOfYear && (t < We || t > Be) && (t = Be), _(e)._overflowWeeks && -1 === t && (t = Ke), _(e)._overflowWeekday && -1 === t && (t = Xe), _(e).overflow = t), e
//                     }
//                     var Mn = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
//                         xn = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,
//                         Ln = /Z|[+-]\d\d(?::?\d\d)?/,
//                         kn = [
//                             ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
//                             ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
//                             ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
//                             ["GGGG-[W]WW", /\d{4}-W\d\d/, !1],
//                             ["YYYY-DDD", /\d{4}-\d{3}/],
//                             ["YYYY-MM", /\d{4}-\d\d/, !1],
//                             ["YYYYYYMMDD", /[+-]\d{10}/],
//                             ["YYYYMMDD", /\d{8}/],
//                             ["GGGG[W]WWE", /\d{4}W\d{3}/],
//                             ["GGGG[W]WW", /\d{4}W\d{2}/, !1],
//                             ["YYYYDDD", /\d{7}/],
//                             ["YYYYMM", /\d{6}/, !1],
//                             ["YYYY", /\d{4}/, !1]
//                         ],
//                         Tn = [
//                             ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
//                             ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
//                             ["HH:mm:ss", /\d\d:\d\d:\d\d/],
//                             ["HH:mm", /\d\d:\d\d/],
//                             ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
//                             ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
//                             ["HHmmss", /\d\d\d\d\d\d/],
//                             ["HHmm", /\d\d\d\d/],
//                             ["HH", /\d\d/]
//                         ],
//                         Yn = /^\/?Date\((-?\d+)/i,
//                         Sn = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,
//                         Dn = {
//                             UT: 0,
//                             GMT: 0,
//                             EDT: -240,
//                             EST: -300,
//                             CDT: -300,
//                             CST: -360,
//                             MDT: -360,
//                             MST: -420,
//                             PDT: -420,
//                             PST: -480
//                         };

//                     function Pn(e) {
//                         var t, n, i, a, s, r, o = e._i,
//                             l = Mn.exec(o) || xn.exec(o),
//                             d = kn.length,
//                             c = Tn.length;
//                         if (l) {
//                             for (_(e).iso = !0, t = 0, n = d; t < n; t++)
//                                 if (kn[t][1].exec(l[1])) {
//                                     a = kn[t][0], i = !1 !== kn[t][2];
//                                     break
//                                 }
//                             if (null == a) return void(e._isValid = !1);
//                             if (l[3]) {
//                                 for (t = 0, n = c; t < n; t++)
//                                     if (Tn[t][1].exec(l[3])) {
//                                         s = (l[2] || " ") + Tn[t][0];
//                                         break
//                                     }
//                                 if (null == s) return void(e._isValid = !1)
//                             }
//                             if (!i && null != s) return void(e._isValid = !1);
//                             if (l[4]) {
//                                 if (!Ln.exec(l[4])) return void(e._isValid = !1);
//                                 r = "Z"
//                             }
//                             e._f = a + (s || "") + (r || ""), zn(e)
//                         } else e._isValid = !1
//                     }

//                     function En(e, t, n, i, a, s) {
//                         var r = [Cn(e), nt.indexOf(t), parseInt(n, 10), parseInt(i, 10), parseInt(a, 10)];
//                         return s && r.push(parseInt(s, 10)), r
//                     }

//                     function Cn(e) {
//                         var t = parseInt(e, 10);
//                         return t <= 49 ? 2e3 + t : t <= 999 ? 1900 + t : t
//                     }

//                     function Hn(e) {
//                         return e.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "")
//                     }

//                     function Zn(e, t, n) {
//                         return !e || At.indexOf(e) === new Date(t[0], t[1], t[2]).getDay() || (_(n).weekdayMismatch = !0, n._isValid = !1, !1)
//                     }

//                     function An(e, t, n) {
//                         if (e) return Dn[e];
//                         if (t) return 0;
//                         var i = parseInt(n, 10),
//                             a = i % 100;
//                         return (i - a) / 100 * 60 + a
//                     }

//                     function jn(e) {
//                         var t, n = Sn.exec(Hn(e._i));
//                         if (n) {
//                             if (t = En(n[4], n[3], n[2], n[5], n[6], n[7]), !Zn(n[1], t, e)) return;
//                             e._a = t, e._tzm = An(n[8], n[9], n[10]), e._d = wt.apply(null, e._a), e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), _(e).rfc2822 = !0
//                         } else e._isValid = !1
//                     }

//                     function On(e) {
//                         var t = Yn.exec(e._i);
//                         null === t ? (Pn(e), !1 === e._isValid && (delete e._isValid, jn(e), !1 === e._isValid && (delete e._isValid, e._strict ? e._isValid = !1 : a.createFromInputFallback(e)))) : e._d = new Date(+t[1])
//                     }

//                     function Fn(e, t, n) {
//                         return null != e ? e : null != t ? t : n
//                     }

//                     function In(e) {
//                         var t = new Date(a.now());
//                         return e._useUTC ? [t.getUTCFullYear(), t.getUTCMonth(), t.getUTCDate()] : [t.getFullYear(), t.getMonth(), t.getDate()]
//                     }

//                     function Nn(e) {
//                         var t, n, i, a, s, r = [];
//                         if (!e._d) {
//                             for (i = In(e), e._w && null == e._a[Be] && null == e._a[Ue] && Rn(e), null != e._dayOfYear && (s = Fn(e._a[We], i[We]), (e._dayOfYear > gt(s) || 0 === e._dayOfYear) && (_(e)._overflowDayOfYear = !0), n = wt(s, 0, e._dayOfYear), e._a[Ue] = n.getUTCMonth(), e._a[Be] = n.getUTCDate()), t = 0; t < 3 && null == e._a[t]; ++t) e._a[t] = r[t] = i[t];
//                             for (; t < 7; t++) e._a[t] = r[t] = null == e._a[t] ? 2 === t ? 1 : 0 : e._a[t];
//                             24 === e._a[qe] && 0 === e._a[Ge] && 0 === e._a[Je] && 0 === e._a[Ve] && (e._nextDay = !0, e._a[qe] = 0), e._d = (e._useUTC ? wt : yt).apply(null, r), a = e._useUTC ? e._d.getUTCDay() : e._d.getDay(), null != e._tzm && e._d.setUTCMinutes(e._d.getUTCMinutes() - e._tzm), e._nextDay && (e._a[qe] = 24), e._w && void 0 !== e._w.d && e._w.d !== a && (_(e).weekdayMismatch = !0)
//                         }
//                     }

//                     function Rn(e) {
//                         var t, n, i, a, s, r, o, l, d;
//                         null != (t = e._w).GG || null != t.W || null != t.E ? (s = 1, r = 4, n = Fn(t.GG, e._a[We], xt(Vn(), 1, 4).year), i = Fn(t.W, 1), ((a = Fn(t.E, 1)) < 1 || a > 7) && (l = !0)) : (s = e._locale._week.dow, r = e._locale._week.doy, d = xt(Vn(), s, r), n = Fn(t.gg, e._a[We], d.year), i = Fn(t.w, d.week), null != t.d ? ((a = t.d) < 0 || a > 6) && (l = !0) : null != t.e ? (a = t.e + s, (t.e < 0 || t.e > 6) && (l = !0)) : a = s), i < 1 || i > Lt(n, s, r) ? _(e)._overflowWeeks = !0 : null != l ? _(e)._overflowWeekday = !0 : (o = Mt(n, i, a, s, r), e._a[We] = o.year, e._dayOfYear = o.dayOfYear)
//                     }

//                     function zn(e) {
//                         if (e._f !== a.ISO_8601)
//                             if (e._f !== a.RFC_2822) {
//                                 e._a = [], _(e).empty = !0;
//                                 var t, n, i, s, r, o, l, d = "" + e._i,
//                                     c = d.length,
//                                     u = 0;
//                                 for (l = (i = U(e._f, e._locale).match(O) || []).length, t = 0; t < l; t++) s = i[t], (n = (d.match(je(s, e)) || [])[0]) && ((r = d.substr(0, d.indexOf(n))).length > 0 && _(e).unusedInput.push(r), d = d.slice(d.indexOf(n) + n.length), u += n.length), N[s] ? (n ? _(e).empty = !1 : _(e).unusedTokens.push(s), ze(s, n, e)) : e._strict && !n && _(e).unusedTokens.push(s);
//                                 _(e).charsLeftOver = c - u, d.length > 0 && _(e).unusedInput.push(d), e._a[qe] <= 12 && !0 === _(e).bigHour && e._a[qe] > 0 && (_(e).bigHour = void 0), _(e).parsedDateParts = e._a.slice(0), _(e).meridiem = e._meridiem, e._a[qe] = $n(e._locale, e._a[qe], e._meridiem), null !== (o = _(e).era) && (e._a[We] = e._locale.erasConvertYear(o, e._a[We])), Nn(e), bn(e)
//                             } else jn(e);
//                         else Pn(e)
//                     }

//                     function $n(e, t, n) {
//                         var i;
//                         return null == n ? t : null != e.meridiemHour ? e.meridiemHour(t, n) : null != e.isPM ? ((i = e.isPM(n)) && t < 12 && (t += 12), i || 12 !== t || (t = 0), t) : t
//                     }

//                     function Wn(e) {
//                         var t, n, i, a, s, r, o = !1,
//                             l = e._f.length;
//                         if (0 === l) return _(e).invalidFormat = !0, void(e._d = new Date(NaN));
//                         for (a = 0; a < l; a++) s = 0, r = !1, t = M({}, e), null != e._useUTC && (t._useUTC = e._useUTC), t._f = e._f[a], zn(t), v(t) && (r = !0), s += _(t).charsLeftOver, s += 10 * _(t).unusedTokens.length, _(t).score = s, o ? s < i && (i = s, n = t) : (null == i || s < i || r) && (i = s, n = t, r && (o = !0));
//                         p(e, n || t)
//                     }

//                     function Un(e) {
//                         if (!e._d) {
//                             var t = se(e._i),
//                                 n = void 0 === t.day ? t.date : t.day;
//                             e._a = m([t.year, t.month, n, t.hour, t.minute, t.second, t.millisecond], (function(e) {
//                                 return e && parseInt(e, 10)
//                             })), Nn(e)
//                         }
//                     }

//                     function Bn(e) {
//                         var t = new x(bn(qn(e)));
//                         return t._nextDay && (t.add(1, "d"), t._nextDay = void 0), t
//                     }

//                     function qn(e) {
//                         var t = e._i,
//                             n = e._f;
//                         return e._locale = e._locale || yn(e._l), null === t || void 0 === n && "" === t ? y({
//                             nullInput: !0
//                         }) : ("string" == typeof t && (e._i = t = e._locale.preparse(t)), L(t) ? new x(bn(t)) : (h(t) ? e._d = t : r(n) ? Wn(e) : n ? zn(e) : Gn(e), v(e) || (e._d = null), e))
//                     }

//                     function Gn(e) {
//                         var t = e._i;
//                         c(t) ? e._d = new Date(a.now()) : h(t) ? e._d = new Date(t.valueOf()) : "string" == typeof t ? On(e) : r(t) ? (e._a = m(t.slice(0), (function(e) {
//                             return parseInt(e, 10)
//                         })), Nn(e)) : o(t) ? Un(e) : u(t) ? e._d = new Date(t) : a.createFromInputFallback(e)
//                     }

//                     function Jn(e, t, n, i, a) {
//                         var s = {};
//                         return !0 !== t && !1 !== t || (i = t, t = void 0), !0 !== n && !1 !== n || (i = n, n = void 0), (o(e) && d(e) || r(e) && 0 === e.length) && (e = void 0), s._isAMomentObject = !0, s._useUTC = s._isUTC = a, s._l = n, s._i = e, s._f = t, s._strict = i, Bn(s)
//                     }

//                     function Vn(e, t, n, i) {
//                         return Jn(e, t, n, i, !1)
//                     }
//                     a.createFromInputFallback = T("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.", (function(e) {
//                         e._d = new Date(e._i + (e._useUTC ? " UTC" : ""))
//                     })), a.ISO_8601 = function() {}, a.RFC_2822 = function() {};
//                     var Kn = T("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/", (function() {
//                             var e = Vn.apply(null, arguments);
//                             return this.isValid() && e.isValid() ? e < this ? this : e : y()
//                         })),
//                         Xn = T("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/", (function() {
//                             var e = Vn.apply(null, arguments);
//                             return this.isValid() && e.isValid() ? e > this ? this : e : y()
//                         }));

//                     function Qn(e, t) {
//                         var n, i;
//                         if (1 === t.length && r(t[0]) && (t = t[0]), !t.length) return Vn();
//                         for (n = t[0], i = 1; i < t.length; ++i) t[i].isValid() && !t[i][e](n) || (n = t[i]);
//                         return n
//                     }

//                     function ei() {
//                         return Qn("isBefore", [].slice.call(arguments, 0))
//                     }

//                     function ti() {
//                         return Qn("isAfter", [].slice.call(arguments, 0))
//                     }
//                     var ni = function() {
//                             return Date.now ? Date.now() : +new Date
//                         },
//                         ii = ["year", "quarter", "month", "week", "day", "hour", "minute", "second", "millisecond"];

//                     function ai(e) {
//                         var t, n, i = !1,
//                             a = ii.length;
//                         for (t in e)
//                             if (l(e, t) && (-1 === $e.call(ii, t) || null != e[t] && isNaN(e[t]))) return !1;
//                         for (n = 0; n < a; ++n)
//                             if (e[ii[n]]) {
//                                 if (i) return !1;
//                                 parseFloat(e[ii[n]]) !== ue(e[ii[n]]) && (i = !0)
//                             }
//                         return !0
//                     }

//                     function si() {
//                         return this._isValid
//                     }

//                     function ri() {
//                         return Di(NaN)
//                     }

//                     function oi(e) {
//                         var t = se(e),
//                             n = t.year || 0,
//                             i = t.quarter || 0,
//                             a = t.month || 0,
//                             s = t.week || t.isoWeek || 0,
//                             r = t.day || 0,
//                             o = t.hour || 0,
//                             l = t.minute || 0,
//                             d = t.second || 0,
//                             c = t.millisecond || 0;
//                         this._isValid = ai(t), this._milliseconds = +c + 1e3 * d + 6e4 * l + 1e3 * o * 60 * 60, this._days = +r + 7 * s, this._months = +a + 3 * i + 12 * n, this._data = {}, this._locale = yn(), this._bubble()
//                     }

//                     function li(e) {
//                         return e instanceof oi
//                     }

//                     function di(e) {
//                         return e < 0 ? -1 * Math.round(-1 * e) : Math.round(e)
//                     }

//                     function ci(e, t, n) {
//                         var i, a = Math.min(e.length, t.length),
//                             s = Math.abs(e.length - t.length),
//                             r = 0;
//                         for (i = 0; i < a; i++)(n && e[i] !== t[i] || !n && ue(e[i]) !== ue(t[i])) && r++;
//                         return r + s
//                     }

//                     function ui(e, t) {
//                         R(e, 0, 0, (function() {
//                             var e = this.utcOffset(),
//                                 n = "+";
//                             return e < 0 && (e = -e, n = "-"), n + j(~~(e / 60), 2) + t + j(~~e % 60, 2)
//                         }))
//                     }
//                     ui("Z", ":"), ui("ZZ", ""), Ae("Z", Ce), Ae("ZZ", Ce), Ne(["Z", "ZZ"], (function(e, t, n) {
//                         n._useUTC = !0, n._tzm = mi(Ce, e)
//                     }));
//                     var hi = /([\+\-]|\d\d)/gi;

//                     function mi(e, t) {
//                         var n, i, a = (t || "").match(e);
//                         return null === a ? null : 0 === (i = 60 * (n = ((a[a.length - 1] || []) + "").match(hi) || ["-", 0, 0])[1] + ue(n[2])) ? 0 : "+" === n[0] ? i : -i
//                     }

//                     function pi(e, t) {
//                         var n, i;
//                         return t._isUTC ? (n = t.clone(), i = (L(e) || h(e) ? e.valueOf() : Vn(e).valueOf()) - n.valueOf(), n._d.setTime(n._d.valueOf() + i), a.updateOffset(n, !1), n) : Vn(e).local()
//                     }

//                     function fi(e) {
//                         return -Math.round(e._d.getTimezoneOffset())
//                     }

//                     function gi(e, t, n) {
//                         var i, s = this._offset || 0;
//                         if (!this.isValid()) return null != e ? this : NaN;
//                         if (null != e) {
//                             if ("string" == typeof e) {
//                                 if (null === (e = mi(Ce, e))) return this
//                             } else Math.abs(e) < 16 && !n && (e *= 60);
//                             return !this._isUTC && t && (i = fi(this)), this._offset = e, this._isUTC = !0, null != i && this.add(i, "m"), s !== e && (!t || this._changeInProgress ? Zi(this, Di(e - s, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, a.updateOffset(this, !0), this._changeInProgress = null)), this
//                         }
//                         return this._isUTC ? s : fi(this)
//                     }

//                     function _i(e, t) {
//                         return null != e ? ("string" != typeof e && (e = -e), this.utcOffset(e, t), this) : -this.utcOffset()
//                     }

//                     function vi(e) {
//                         return this.utcOffset(0, e)
//                     }

//                     function yi(e) {
//                         return this._isUTC && (this.utcOffset(0, e), this._isUTC = !1, e && this.subtract(fi(this), "m")), this
//                     }

//                     function wi() {
//                         if (null != this._tzm) this.utcOffset(this._tzm, !1, !0);
//                         else if ("string" == typeof this._i) {
//                             var e = mi(Ee, this._i);
//                             null != e ? this.utcOffset(e) : this.utcOffset(0, !0)
//                         }
//                         return this
//                     }

//                     function bi(e) {
//                         return !!this.isValid() && (e = e ? Vn(e).utcOffset() : 0, (this.utcOffset() - e) % 60 == 0)
//                     }

//                     function Mi() {
//                         return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset()
//                     }

//                     function xi() {
//                         if (!c(this._isDSTShifted)) return this._isDSTShifted;
//                         var e, t = {};
//                         return M(t, this), (t = qn(t))._a ? (e = t._isUTC ? f(t._a) : Vn(t._a), this._isDSTShifted = this.isValid() && ci(t._a, e.toArray()) > 0) : this._isDSTShifted = !1, this._isDSTShifted
//                     }

//                     function Li() {
//                         return !!this.isValid() && !this._isUTC
//                     }

//                     function ki() {
//                         return !!this.isValid() && this._isUTC
//                     }

//                     function Ti() {
//                         return !!this.isValid() && this._isUTC && 0 === this._offset
//                     }
//                     a.updateOffset = function() {};
//                     var Yi = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,
//                         Si = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

//                     function Di(e, t) {
//                         var n, i, a, s = e,
//                             r = null;
//                         return li(e) ? s = {
//                             ms: e._milliseconds,
//                             d: e._days,
//                             M: e._months
//                         } : u(e) || !isNaN(+e) ? (s = {}, t ? s[t] = +e : s.milliseconds = +e) : (r = Yi.exec(e)) ? (n = "-" === r[1] ? -1 : 1, s = {
//                             y: 0,
//                             d: ue(r[Be]) * n,
//                             h: ue(r[qe]) * n,
//                             m: ue(r[Ge]) * n,
//                             s: ue(r[Je]) * n,
//                             ms: ue(di(1e3 * r[Ve])) * n
//                         }) : (r = Si.exec(e)) ? (n = "-" === r[1] ? -1 : 1, s = {
//                             y: Pi(r[2], n),
//                             M: Pi(r[3], n),
//                             w: Pi(r[4], n),
//                             d: Pi(r[5], n),
//                             h: Pi(r[6], n),
//                             m: Pi(r[7], n),
//                             s: Pi(r[8], n)
//                         }) : null == s ? s = {} : "object" == typeof s && ("from" in s || "to" in s) && (a = Ci(Vn(s.from), Vn(s.to)), (s = {}).ms = a.milliseconds, s.M = a.months), i = new oi(s), li(e) && l(e, "_locale") && (i._locale = e._locale), li(e) && l(e, "_isValid") && (i._isValid = e._isValid), i
//                     }

//                     function Pi(e, t) {
//                         var n = e && parseFloat(e.replace(",", "."));
//                         return (isNaN(n) ? 0 : n) * t
//                     }

//                     function Ei(e, t) {
//                         var n = {};
//                         return n.months = t.month() - e.month() + 12 * (t.year() - e.year()), e.clone().add(n.months, "M").isAfter(t) && --n.months, n.milliseconds = +t - +e.clone().add(n.months, "M"), n
//                     }

//                     function Ci(e, t) {
//                         var n;
//                         return e.isValid() && t.isValid() ? (t = pi(t, e), e.isBefore(t) ? n = Ei(e, t) : ((n = Ei(t, e)).milliseconds = -n.milliseconds, n.months = -n.months), n) : {
//                             milliseconds: 0,
//                             months: 0
//                         }
//                     }

//                     function Hi(e, t) {
//                         return function(n, i) {
//                             var a;
//                             return null === i || isNaN(+i) || (D(t, "moment()." + t + "(period, number) is deprecated. Please use moment()." + t + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."), a = n, n = i, i = a), Zi(this, Di(n, i), e), this
//                         }
//                     }

//                     function Zi(e, t, n, i) {
//                         var s = t._milliseconds,
//                             r = di(t._days),
//                             o = di(t._months);
//                         e.isValid() && (i = null == i || i, o && ct(e, me(e, "Month") + o * n), r && pe(e, "Date", me(e, "Date") + r * n), s && e._d.setTime(e._d.valueOf() + s * n), i && a.updateOffset(e, r || o))
//                     }
//                     Di.fn = oi.prototype, Di.invalid = ri;
//                     var Ai = Hi(1, "add"),
//                         ji = Hi(-1, "subtract");

//                     function Oi(e) {
//                         return "string" == typeof e || e instanceof String
//                     }

//                     function Fi(e) {
//                         return L(e) || h(e) || Oi(e) || u(e) || Ni(e) || Ii(e) || null == e
//                     }

//                     function Ii(e) {
//                         var t, n, i = o(e) && !d(e),
//                             a = !1,
//                             s = ["years", "year", "y", "months", "month", "M", "days", "day", "d", "dates", "date", "D", "hours", "hour", "h", "minutes", "minute", "m", "seconds", "second", "s", "milliseconds", "millisecond", "ms"],
//                             r = s.length;
//                         for (t = 0; t < r; t += 1) n = s[t], a = a || l(e, n);
//                         return i && a
//                     }

//                     function Ni(e) {
//                         var t = r(e),
//                             n = !1;
//                         return t && (n = 0 === e.filter((function(t) {
//                             return !u(t) && Oi(e)
//                         })).length), t && n
//                     }

//                     function Ri(e) {
//                         var t, n, i = o(e) && !d(e),
//                             a = !1,
//                             s = ["sameDay", "nextDay", "lastDay", "nextWeek", "lastWeek", "sameElse"];
//                         for (t = 0; t < s.length; t += 1) n = s[t], a = a || l(e, n);
//                         return i && a
//                     }

//                     function zi(e, t) {
//                         var n = e.diff(t, "days", !0);
//                         return n < -6 ? "sameElse" : n < -1 ? "lastWeek" : n < 0 ? "lastDay" : n < 1 ? "sameDay" : n < 2 ? "nextDay" : n < 7 ? "nextWeek" : "sameElse"
//                     }

//                     function $i(e, t) {
//                         1 === arguments.length && (arguments[0] ? Fi(arguments[0]) ? (e = arguments[0], t = void 0) : Ri(arguments[0]) && (t = arguments[0], e = void 0) : (e = void 0, t = void 0));
//                         var n = e || Vn(),
//                             i = pi(n, this).startOf("day"),
//                             s = a.calendarFormat(this, i) || "sameElse",
//                             r = t && (P(t[s]) ? t[s].call(this, n) : t[s]);
//                         return this.format(r || this.localeData().calendar(s, this, Vn(n)))
//                     }

//                     function Wi() {
//                         return new x(this)
//                     }

//                     function Ui(e, t) {
//                         var n = L(e) ? e : Vn(e);
//                         return !(!this.isValid() || !n.isValid()) && ("millisecond" === (t = ae(t) || "millisecond") ? this.valueOf() > n.valueOf() : n.valueOf() < this.clone().startOf(t).valueOf())
//                     }

//                     function Bi(e, t) {
//                         var n = L(e) ? e : Vn(e);
//                         return !(!this.isValid() || !n.isValid()) && ("millisecond" === (t = ae(t) || "millisecond") ? this.valueOf() < n.valueOf() : this.clone().endOf(t).valueOf() < n.valueOf())
//                     }

//                     function qi(e, t, n, i) {
//                         var a = L(e) ? e : Vn(e),
//                             s = L(t) ? t : Vn(t);
//                         return !!(this.isValid() && a.isValid() && s.isValid()) && ("(" === (i = i || "()")[0] ? this.isAfter(a, n) : !this.isBefore(a, n)) && (")" === i[1] ? this.isBefore(s, n) : !this.isAfter(s, n))
//                     }

//                     function Gi(e, t) {
//                         var n, i = L(e) ? e : Vn(e);
//                         return !(!this.isValid() || !i.isValid()) && ("millisecond" === (t = ae(t) || "millisecond") ? this.valueOf() === i.valueOf() : (n = i.valueOf(), this.clone().startOf(t).valueOf() <= n && n <= this.clone().endOf(t).valueOf()))
//                     }

//                     function Ji(e, t) {
//                         return this.isSame(e, t) || this.isAfter(e, t)
//                     }

//                     function Vi(e, t) {
//                         return this.isSame(e, t) || this.isBefore(e, t)
//                     }

//                     function Ki(e, t, n) {
//                         var i, a, s;
//                         if (!this.isValid()) return NaN;
//                         if (!(i = pi(e, this)).isValid()) return NaN;
//                         switch (a = 6e4 * (i.utcOffset() - this.utcOffset()), t = ae(t)) {
//                             case "year":
//                                 s = Xi(this, i) / 12;
//                                 break;
//                             case "month":
//                                 s = Xi(this, i);
//                                 break;
//                             case "quarter":
//                                 s = Xi(this, i) / 3;
//                                 break;
//                             case "second":
//                                 s = (this - i) / 1e3;
//                                 break;
//                             case "minute":
//                                 s = (this - i) / 6e4;
//                                 break;
//                             case "hour":
//                                 s = (this - i) / 36e5;
//                                 break;
//                             case "day":
//                                 s = (this - i - a) / 864e5;
//                                 break;
//                             case "week":
//                                 s = (this - i - a) / 6048e5;
//                                 break;
//                             default:
//                                 s = this - i
//                         }
//                         return n ? s : ce(s)
//                     }

//                     function Xi(e, t) {
//                         if (e.date() < t.date()) return -Xi(t, e);
//                         var n = 12 * (t.year() - e.year()) + (t.month() - e.month()),
//                             i = e.clone().add(n, "months");
//                         return -(n + (t - i < 0 ? (t - i) / (i - e.clone().add(n - 1, "months")) : (t - i) / (e.clone().add(n + 1, "months") - i))) || 0
//                     }

//                     function Qi() {
//                         return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")
//                     }

//                     function ea(e) {
//                         if (!this.isValid()) return null;
//                         var t = !0 !== e,
//                             n = t ? this.clone().utc() : this;
//                         return n.year() < 0 || n.year() > 9999 ? W(n, t ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ") : P(Date.prototype.toISOString) ? t ? this.toDate().toISOString() : new Date(this.valueOf() + 60 * this.utcOffset() * 1e3).toISOString().replace("Z", W(n, "Z")) : W(n, t ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ")
//                     }

//                     function ta() {
//                         if (!this.isValid()) return "moment.invalid(/* " + this._i + " */)";
//                         var e, t, n, i, a = "moment",
//                             s = "";
//                         return this.isLocal() || (a = 0 === this.utcOffset() ? "moment.utc" : "moment.parseZone", s = "Z"), e = "[" + a + '("]', t = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY", n = "-MM-DD[T]HH:mm:ss.SSS", i = s + '[")]', this.format(e + t + n + i)
//                     }

//                     function na(e) {
//                         e || (e = this.isUtc() ? a.defaultFormatUtc : a.defaultFormat);
//                         var t = W(this, e);
//                         return this.localeData().postformat(t)
//                     }

//                     function ia(e, t) {
//                         return this.isValid() && (L(e) && e.isValid() || Vn(e).isValid()) ? Di({
//                             to: this,
//                             from: e
//                         }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
//                     }

//                     function aa(e) {
//                         return this.from(Vn(), e)
//                     }

//                     function sa(e, t) {
//                         return this.isValid() && (L(e) && e.isValid() || Vn(e).isValid()) ? Di({
//                             from: this,
//                             to: e
//                         }).locale(this.locale()).humanize(!t) : this.localeData().invalidDate()
//                     }

//                     function ra(e) {
//                         return this.to(Vn(), e)
//                     }

//                     function oa(e) {
//                         var t;
//                         return void 0 === e ? this._locale._abbr : (null != (t = yn(e)) && (this._locale = t), this)
//                     }
//                     a.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ", a.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
//                     var la = T("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.", (function(e) {
//                         return void 0 === e ? this.localeData() : this.locale(e)
//                     }));

//                     function da() {
//                         return this._locale
//                     }
//                     var ca = 1e3,
//                         ua = 60 * ca,
//                         ha = 60 * ua,
//                         ma = 3506328 * ha;

//                     function pa(e, t) {
//                         return (e % t + t) % t
//                     }

//                     function fa(e, t, n) {
//                         return e < 100 && e >= 0 ? new Date(e + 400, t, n) - ma : new Date(e, t, n).valueOf()
//                     }

//                     function ga(e, t, n) {
//                         return e < 100 && e >= 0 ? Date.UTC(e + 400, t, n) - ma : Date.UTC(e, t, n)
//                     }

//                     function _a(e) {
//                         var t, n;
//                         if (void 0 === (e = ae(e)) || "millisecond" === e || !this.isValid()) return this;
//                         switch (n = this._isUTC ? ga : fa, e) {
//                             case "year":
//                                 t = n(this.year(), 0, 1);
//                                 break;
//                             case "quarter":
//                                 t = n(this.year(), this.month() - this.month() % 3, 1);
//                                 break;
//                             case "month":
//                                 t = n(this.year(), this.month(), 1);
//                                 break;
//                             case "week":
//                                 t = n(this.year(), this.month(), this.date() - this.weekday());
//                                 break;
//                             case "isoWeek":
//                                 t = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
//                                 break;
//                             case "day":
//                             case "date":
//                                 t = n(this.year(), this.month(), this.date());
//                                 break;
//                             case "hour":
//                                 t = this._d.valueOf(), t -= pa(t + (this._isUTC ? 0 : this.utcOffset() * ua), ha);
//                                 break;
//                             case "minute":
//                                 t = this._d.valueOf(), t -= pa(t, ua);
//                                 break;
//                             case "second":
//                                 t = this._d.valueOf(), t -= pa(t, ca)
//                         }
//                         return this._d.setTime(t), a.updateOffset(this, !0), this
//                     }

//                     function va(e) {
//                         var t, n;
//                         if (void 0 === (e = ae(e)) || "millisecond" === e || !this.isValid()) return this;
//                         switch (n = this._isUTC ? ga : fa, e) {
//                             case "year":
//                                 t = n(this.year() + 1, 0, 1) - 1;
//                                 break;
//                             case "quarter":
//                                 t = n(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
//                                 break;
//                             case "month":
//                                 t = n(this.year(), this.month() + 1, 1) - 1;
//                                 break;
//                             case "week":
//                                 t = n(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
//                                 break;
//                             case "isoWeek":
//                                 t = n(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
//                                 break;
//                             case "day":
//                             case "date":
//                                 t = n(this.year(), this.month(), this.date() + 1) - 1;
//                                 break;
//                             case "hour":
//                                 t = this._d.valueOf(), t += ha - pa(t + (this._isUTC ? 0 : this.utcOffset() * ua), ha) - 1;
//                                 break;
//                             case "minute":
//                                 t = this._d.valueOf(), t += ua - pa(t, ua) - 1;
//                                 break;
//                             case "second":
//                                 t = this._d.valueOf(), t += ca - pa(t, ca) - 1
//                         }
//                         return this._d.setTime(t), a.updateOffset(this, !0), this
//                     }

//                     function ya() {
//                         return this._d.valueOf() - 6e4 * (this._offset || 0)
//                     }

//                     function wa() {
//                         return Math.floor(this.valueOf() / 1e3)
//                     }

//                     function ba() {
//                         return new Date(this.valueOf())
//                     }

//                     function Ma() {
//                         var e = this;
//                         return [e.year(), e.month(), e.date(), e.hour(), e.minute(), e.second(), e.millisecond()]
//                     }

//                     function xa() {
//                         var e = this;
//                         return {
//                             years: e.year(),
//                             months: e.month(),
//                             date: e.date(),
//                             hours: e.hours(),
//                             minutes: e.minutes(),
//                             seconds: e.seconds(),
//                             milliseconds: e.milliseconds()
//                         }
//                     }

//                     function La() {
//                         return this.isValid() ? this.toISOString() : null
//                     }

//                     function ka() {
//                         return v(this)
//                     }

//                     function Ta() {
//                         return p({}, _(this))
//                     }

//                     function Ya() {
//                         return _(this).overflow
//                     }

//                     function Sa() {
//                         return {
//                             input: this._i,
//                             format: this._f,
//                             locale: this._locale,
//                             isUTC: this._isUTC,
//                             strict: this._strict
//                         }
//                     }

//                     function Da(e, t) {
//                         var n, i, s, r = this._eras || yn("en")._eras;
//                         for (n = 0, i = r.length; n < i; ++n) switch ("string" == typeof r[n].since && (s = a(r[n].since).startOf("day"), r[n].since = s.valueOf()), typeof r[n].until) {
//                             case "undefined":
//                                 r[n].until = 1 / 0;
//                                 break;
//                             case "string":
//                                 s = a(r[n].until).startOf("day").valueOf(), r[n].until = s.valueOf()
//                         }
//                         return r
//                     }

//                     function Pa(e, t, n) {
//                         var i, a, s, r, o, l = this.eras();
//                         for (e = e.toUpperCase(), i = 0, a = l.length; i < a; ++i)
//                             if (s = l[i].name.toUpperCase(), r = l[i].abbr.toUpperCase(), o = l[i].narrow.toUpperCase(), n) switch (t) {
//                                 case "N":
//                                 case "NN":
//                                 case "NNN":
//                                     if (r === e) return l[i];
//                                     break;
//                                 case "NNNN":
//                                     if (s === e) return l[i];
//                                     break;
//                                 case "NNNNN":
//                                     if (o === e) return l[i]
//                             } else if ([s, r, o].indexOf(e) >= 0) return l[i]
//                     }

//                     function Ea(e, t) {
//                         var n = e.since <= e.until ? 1 : -1;
//                         return void 0 === t ? a(e.since).year() : a(e.since).year() + (t - e.offset) * n
//                     }

//                     function Ca() {
//                         var e, t, n, i = this.localeData().eras();
//                         for (e = 0, t = i.length; e < t; ++e) {
//                             if (n = this.clone().startOf("day").valueOf(), i[e].since <= n && n <= i[e].until) return i[e].name;
//                             if (i[e].until <= n && n <= i[e].since) return i[e].name
//                         }
//                         return ""
//                     }

//                     function Ha() {
//                         var e, t, n, i = this.localeData().eras();
//                         for (e = 0, t = i.length; e < t; ++e) {
//                             if (n = this.clone().startOf("day").valueOf(), i[e].since <= n && n <= i[e].until) return i[e].narrow;
//                             if (i[e].until <= n && n <= i[e].since) return i[e].narrow
//                         }
//                         return ""
//                     }

//                     function Za() {
//                         var e, t, n, i = this.localeData().eras();
//                         for (e = 0, t = i.length; e < t; ++e) {
//                             if (n = this.clone().startOf("day").valueOf(), i[e].since <= n && n <= i[e].until) return i[e].abbr;
//                             if (i[e].until <= n && n <= i[e].since) return i[e].abbr
//                         }
//                         return ""
//                     }

//                     function Aa() {
//                         var e, t, n, i, s = this.localeData().eras();
//                         for (e = 0, t = s.length; e < t; ++e)
//                             if (n = s[e].since <= s[e].until ? 1 : -1, i = this.clone().startOf("day").valueOf(), s[e].since <= i && i <= s[e].until || s[e].until <= i && i <= s[e].since) return (this.year() - a(s[e].since).year()) * n + s[e].offset;
//                         return this.year()
//                     }

//                     function ja(e) {
//                         return l(this, "_erasNameRegex") || $a.call(this), e ? this._erasNameRegex : this._erasRegex
//                     }

//                     function Oa(e) {
//                         return l(this, "_erasAbbrRegex") || $a.call(this), e ? this._erasAbbrRegex : this._erasRegex
//                     }

//                     function Fa(e) {
//                         return l(this, "_erasNarrowRegex") || $a.call(this), e ? this._erasNarrowRegex : this._erasRegex
//                     }

//                     function Ia(e, t) {
//                         return t.erasAbbrRegex(e)
//                     }

//                     function Na(e, t) {
//                         return t.erasNameRegex(e)
//                     }

//                     function Ra(e, t) {
//                         return t.erasNarrowRegex(e)
//                     }

//                     function za(e, t) {
//                         return t._eraYearOrdinalRegex || De
//                     }

//                     function $a() {
//                         var e, t, n = [],
//                             i = [],
//                             a = [],
//                             s = [],
//                             r = this.eras();
//                         for (e = 0, t = r.length; e < t; ++e) i.push(Fe(r[e].name)), n.push(Fe(r[e].abbr)), a.push(Fe(r[e].narrow)), s.push(Fe(r[e].name)), s.push(Fe(r[e].abbr)), s.push(Fe(r[e].narrow));
//                         this._erasRegex = new RegExp("^(" + s.join("|") + ")", "i"), this._erasNameRegex = new RegExp("^(" + i.join("|") + ")", "i"), this._erasAbbrRegex = new RegExp("^(" + n.join("|") + ")", "i"), this._erasNarrowRegex = new RegExp("^(" + a.join("|") + ")", "i")
//                     }

//                     function Wa(e, t) {
//                         R(0, [e, e.length], 0, t)
//                     }

//                     function Ua(e) {
//                         return Ka.call(this, e, this.week(), this.weekday(), this.localeData()._week.dow, this.localeData()._week.doy)
//                     }

//                     function Ba(e) {
//                         return Ka.call(this, e, this.isoWeek(), this.isoWeekday(), 1, 4)
//                     }

//                     function qa() {
//                         return Lt(this.year(), 1, 4)
//                     }

//                     function Ga() {
//                         return Lt(this.isoWeekYear(), 1, 4)
//                     }

//                     function Ja() {
//                         var e = this.localeData()._week;
//                         return Lt(this.year(), e.dow, e.doy)
//                     }

//                     function Va() {
//                         var e = this.localeData()._week;
//                         return Lt(this.weekYear(), e.dow, e.doy)
//                     }

//                     function Ka(e, t, n, i, a) {
//                         var s;
//                         return null == e ? xt(this, i, a).year : (t > (s = Lt(e, i, a)) && (t = s), Xa.call(this, e, t, n, i, a))
//                     }

//                     function Xa(e, t, n, i, a) {
//                         var s = Mt(e, t, n, i, a),
//                             r = wt(s.year, 0, s.dayOfYear);
//                         return this.year(r.getUTCFullYear()), this.month(r.getUTCMonth()), this.date(r.getUTCDate()), this
//                     }

//                     function Qa(e) {
//                         return null == e ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (e - 1) + this.month() % 3)
//                     }
//                     R("N", 0, 0, "eraAbbr"), R("NN", 0, 0, "eraAbbr"), R("NNN", 0, 0, "eraAbbr"), R("NNNN", 0, 0, "eraName"), R("NNNNN", 0, 0, "eraNarrow"), R("y", ["y", 1], "yo", "eraYear"), R("y", ["yy", 2], 0, "eraYear"), R("y", ["yyy", 3], 0, "eraYear"), R("y", ["yyyy", 4], 0, "eraYear"), Ae("N", Ia), Ae("NN", Ia), Ae("NNN", Ia), Ae("NNNN", Na), Ae("NNNNN", Ra), Ne(["N", "NN", "NNN", "NNNN", "NNNNN"], (function(e, t, n, i) {
//                         var a = n._locale.erasParse(e, i, n._strict);
//                         a ? _(n).era = a : _(n).invalidEra = e
//                     })), Ae("y", De), Ae("yy", De), Ae("yyy", De), Ae("yyyy", De), Ae("yo", za), Ne(["y", "yy", "yyy", "yyyy"], We), Ne(["yo"], (function(e, t, n, i) {
//                         var a;
//                         n._locale._eraYearOrdinalRegex && (a = e.match(n._locale._eraYearOrdinalRegex)), n._locale.eraYearOrdinalParse ? t[We] = n._locale.eraYearOrdinalParse(e, a) : t[We] = parseInt(e, 10)
//                     })), R(0, ["gg", 2], 0, (function() {
//                         return this.weekYear() % 100
//                     })), R(0, ["GG", 2], 0, (function() {
//                         return this.isoWeekYear() % 100
//                     })), Wa("gggg", "weekYear"), Wa("ggggg", "weekYear"), Wa("GGGG", "isoWeekYear"), Wa("GGGGG", "isoWeekYear"), ie("weekYear", "gg"), ie("isoWeekYear", "GG"), oe("weekYear", 1), oe("isoWeekYear", 1), Ae("G", Pe), Ae("g", Pe), Ae("GG", xe, ye), Ae("gg", xe, ye), Ae("GGGG", Ye, be), Ae("gggg", Ye, be), Ae("GGGGG", Se, Me), Ae("ggggg", Se, Me), Re(["gggg", "ggggg", "GGGG", "GGGGG"], (function(e, t, n, i) {
//                         t[i.substr(0, 2)] = ue(e)
//                     })), Re(["gg", "GG"], (function(e, t, n, i) {
//                         t[i] = a.parseTwoDigitYear(e)
//                     })), R("Q", 0, "Qo", "quarter"), ie("quarter", "Q"), oe("quarter", 7), Ae("Q", ve), Ne("Q", (function(e, t) {
//                         t[Ue] = 3 * (ue(e) - 1)
//                     })), R("D", ["DD", 2], "Do", "date"), ie("date", "D"), oe("date", 9), Ae("D", xe), Ae("DD", xe, ye), Ae("Do", (function(e, t) {
//                         return e ? t._dayOfMonthOrdinalParse || t._ordinalParse : t._dayOfMonthOrdinalParseLenient
//                     })), Ne(["D", "DD"], Be), Ne("Do", (function(e, t) {
//                         t[Be] = ue(e.match(xe)[0])
//                     }));
//                     var es = he("Date", !0);

//                     function ts(e) {
//                         var t = Math.round((this.clone().startOf("day") - this.clone().startOf("year")) / 864e5) + 1;
//                         return null == e ? t : this.add(e - t, "d")
//                     }
//                     R("DDD", ["DDDD", 3], "DDDo", "dayOfYear"), ie("dayOfYear", "DDD"), oe("dayOfYear", 4), Ae("DDD", Te), Ae("DDDD", we), Ne(["DDD", "DDDD"], (function(e, t, n) {
//                         n._dayOfYear = ue(e)
//                     })), R("m", ["mm", 2], 0, "minute"), ie("minute", "m"), oe("minute", 14), Ae("m", xe), Ae("mm", xe, ye), Ne(["m", "mm"], Ge);
//                     var ns = he("Minutes", !1);
//                     R("s", ["ss", 2], 0, "second"), ie("second", "s"), oe("second", 15), Ae("s", xe), Ae("ss", xe, ye), Ne(["s", "ss"], Je);
//                     var is, as, ss = he("Seconds", !1);
//                     for (R("S", 0, 0, (function() {
//                             return ~~(this.millisecond() / 100)
//                         })), R(0, ["SS", 2], 0, (function() {
//                             return ~~(this.millisecond() / 10)
//                         })), R(0, ["SSS", 3], 0, "millisecond"), R(0, ["SSSS", 4], 0, (function() {
//                             return 10 * this.millisecond()
//                         })), R(0, ["SSSSS", 5], 0, (function() {
//                             return 100 * this.millisecond()
//                         })), R(0, ["SSSSSS", 6], 0, (function() {
//                             return 1e3 * this.millisecond()
//                         })), R(0, ["SSSSSSS", 7], 0, (function() {
//                             return 1e4 * this.millisecond()
//                         })), R(0, ["SSSSSSSS", 8], 0, (function() {
//                             return 1e5 * this.millisecond()
//                         })), R(0, ["SSSSSSSSS", 9], 0, (function() {
//                             return 1e6 * this.millisecond()
//                         })), ie("millisecond", "ms"), oe("millisecond", 16), Ae("S", Te, ve), Ae("SS", Te, ye), Ae("SSS", Te, we), is = "SSSS"; is.length <= 9; is += "S") Ae(is, De);

//                     function rs(e, t) {
//                         t[Ve] = ue(1e3 * ("0." + e))
//                     }
//                     for (is = "S"; is.length <= 9; is += "S") Ne(is, rs);

//                     function os() {
//                         return this._isUTC ? "UTC" : ""
//                     }

//                     function ls() {
//                         return this._isUTC ? "Coordinated Universal Time" : ""
//                     }
//                     as = he("Milliseconds", !1), R("z", 0, 0, "zoneAbbr"), R("zz", 0, 0, "zoneName");
//                     var ds = x.prototype;

//                     function cs(e) {
//                         return Vn(1e3 * e)
//                     }

//                     function us() {
//                         return Vn.apply(null, arguments).parseZone()
//                     }

//                     function hs(e) {
//                         return e
//                     }
//                     ds.add = Ai, ds.calendar = $i, ds.clone = Wi, ds.diff = Ki, ds.endOf = va, ds.format = na, ds.from = ia, ds.fromNow = aa, ds.to = sa, ds.toNow = ra, ds.get = fe, ds.invalidAt = Ya, ds.isAfter = Ui, ds.isBefore = Bi, ds.isBetween = qi, ds.isSame = Gi, ds.isSameOrAfter = Ji, ds.isSameOrBefore = Vi, ds.isValid = ka, ds.lang = la, ds.locale = oa, ds.localeData = da, ds.max = Xn, ds.min = Kn, ds.parsingFlags = Ta, ds.set = ge, ds.startOf = _a, ds.subtract = ji, ds.toArray = Ma, ds.toObject = xa, ds.toDate = ba, ds.toISOString = ea, ds.inspect = ta, "undefined" != typeof Symbol && null != Symbol.for && (ds[Symbol.for("nodejs.util.inspect.custom")] = function() {
//                         return "Moment<" + this.format() + ">"
//                     }), ds.toJSON = La, ds.toString = Qi, ds.unix = wa, ds.valueOf = ya, ds.creationData = Sa, ds.eraName = Ca, ds.eraNarrow = Ha, ds.eraAbbr = Za, ds.eraYear = Aa, ds.year = _t, ds.isLeapYear = vt, ds.weekYear = Ua, ds.isoWeekYear = Ba, ds.quarter = ds.quarters = Qa, ds.month = ut, ds.daysInMonth = ht, ds.week = ds.weeks = Dt, ds.isoWeek = ds.isoWeeks = Pt, ds.weeksInYear = Ja, ds.weeksInWeekYear = Va, ds.isoWeeksInYear = qa, ds.isoWeeksInISOWeekYear = Ga, ds.date = es, ds.day = ds.days = Ut, ds.weekday = Bt, ds.isoWeekday = qt, ds.dayOfYear = ts, ds.hour = ds.hours = sn, ds.minute = ds.minutes = ns, ds.second = ds.seconds = ss, ds.millisecond = ds.milliseconds = as, ds.utcOffset = gi, ds.utc = vi, ds.local = yi, ds.parseZone = wi, ds.hasAlignedHourOffset = bi, ds.isDST = Mi, ds.isLocal = Li, ds.isUtcOffset = ki, ds.isUtc = Ti, ds.isUTC = Ti, ds.zoneAbbr = os, ds.zoneName = ls, ds.dates = T("dates accessor is deprecated. Use date instead.", es), ds.months = T("months accessor is deprecated. Use month instead", ut), ds.years = T("years accessor is deprecated. Use year instead", _t), ds.zone = T("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/", _i), ds.isDSTShifted = T("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information", xi);
//                     var ms = H.prototype;

//                     function ps(e, t, n, i) {
//                         var a = yn(),
//                             s = f().set(i, t);
//                         return a[n](s, e)
//                     }

//                     function fs(e, t, n) {
//                         if (u(e) && (t = e, e = void 0), e = e || "", null != t) return ps(e, t, n, "month");
//                         var i, a = [];
//                         for (i = 0; i < 12; i++) a[i] = ps(e, i, n, "month");
//                         return a
//                     }

//                     function gs(e, t, n, i) {
//                         "boolean" == typeof e ? (u(t) && (n = t, t = void 0), t = t || "") : (n = t = e, e = !1, u(t) && (n = t, t = void 0), t = t || "");
//                         var a, s = yn(),
//                             r = e ? s._week.dow : 0,
//                             o = [];
//                         if (null != n) return ps(t, (n + r) % 7, i, "day");
//                         for (a = 0; a < 7; a++) o[a] = ps(t, (a + r) % 7, i, "day");
//                         return o
//                     }

//                     function _s(e, t) {
//                         return fs(e, t, "months")
//                     }

//                     function vs(e, t) {
//                         return fs(e, t, "monthsShort")
//                     }

//                     function ys(e, t, n) {
//                         return gs(e, t, n, "weekdays")
//                     }

//                     function ws(e, t, n) {
//                         return gs(e, t, n, "weekdaysShort")
//                     }

//                     function bs(e, t, n) {
//                         return gs(e, t, n, "weekdaysMin")
//                     }
//                     ms.calendar = A, ms.longDateFormat = q, ms.invalidDate = J, ms.ordinal = X, ms.preparse = hs, ms.postformat = hs, ms.relativeTime = ee, ms.pastFuture = te, ms.set = E, ms.eras = Da, ms.erasParse = Pa, ms.erasConvertYear = Ea, ms.erasAbbrRegex = Oa, ms.erasNameRegex = ja, ms.erasNarrowRegex = Fa, ms.months = rt, ms.monthsShort = ot, ms.monthsParse = dt, ms.monthsRegex = pt, ms.monthsShortRegex = mt, ms.week = kt, ms.firstDayOfYear = St, ms.firstDayOfWeek = Yt, ms.weekdays = Nt, ms.weekdaysMin = zt, ms.weekdaysShort = Rt, ms.weekdaysParse = Wt, ms.weekdaysRegex = Gt, ms.weekdaysShortRegex = Jt, ms.weekdaysMinRegex = Vt, ms.isPM = nn, ms.meridiem = rn, gn("en", {
//                         eras: [{
//                             since: "0001-01-01",
//                             until: 1 / 0,
//                             offset: 1,
//                             name: "Anno Domini",
//                             narrow: "AD",
//                             abbr: "AD"
//                         }, {
//                             since: "0000-12-31",
//                             until: -1 / 0,
//                             offset: 1,
//                             name: "Before Christ",
//                             narrow: "BC",
//                             abbr: "BC"
//                         }],
//                         dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
//                         ordinal: function(e) {
//                             var t = e % 10;
//                             return e + (1 === ue(e % 100 / 10) ? "th" : 1 === t ? "st" : 2 === t ? "nd" : 3 === t ? "rd" : "th")
//                         }
//                     }), a.lang = T("moment.lang is deprecated. Use moment.locale instead.", gn), a.langData = T("moment.langData is deprecated. Use moment.localeData instead.", yn);
//                     var Ms = Math.abs;

//                     function xs() {
//                         var e = this._data;
//                         return this._milliseconds = Ms(this._milliseconds), this._days = Ms(this._days), this._months = Ms(this._months), e.milliseconds = Ms(e.milliseconds), e.seconds = Ms(e.seconds), e.minutes = Ms(e.minutes), e.hours = Ms(e.hours), e.months = Ms(e.months), e.years = Ms(e.years), this
//                     }

//                     function Ls(e, t, n, i) {
//                         var a = Di(t, n);
//                         return e._milliseconds += i * a._milliseconds, e._days += i * a._days, e._months += i * a._months, e._bubble()
//                     }

//                     function ks(e, t) {
//                         return Ls(this, e, t, 1)
//                     }

//                     function Ts(e, t) {
//                         return Ls(this, e, t, -1)
//                     }

//                     function Ys(e) {
//                         return e < 0 ? Math.floor(e) : Math.ceil(e)
//                     }

//                     function Ss() {
//                         var e, t, n, i, a, s = this._milliseconds,
//                             r = this._days,
//                             o = this._months,
//                             l = this._data;
//                         return s >= 0 && r >= 0 && o >= 0 || s <= 0 && r <= 0 && o <= 0 || (s += 864e5 * Ys(Ps(o) + r), r = 0, o = 0), l.milliseconds = s % 1e3, e = ce(s / 1e3), l.seconds = e % 60, t = ce(e / 60), l.minutes = t % 60, n = ce(t / 60), l.hours = n % 24, r += ce(n / 24), o += a = ce(Ds(r)), r -= Ys(Ps(a)), i = ce(o / 12), o %= 12, l.days = r, l.months = o, l.years = i, this
//                     }

//                     function Ds(e) {
//                         return 4800 * e / 146097
//                     }

//                     function Ps(e) {
//                         return 146097 * e / 4800
//                     }

//                     function Es(e) {
//                         if (!this.isValid()) return NaN;
//                         var t, n, i = this._milliseconds;
//                         if ("month" === (e = ae(e)) || "quarter" === e || "year" === e) switch (t = this._days + i / 864e5, n = this._months + Ds(t), e) {
//                             case "month":
//                                 return n;
//                             case "quarter":
//                                 return n / 3;
//                             case "year":
//                                 return n / 12
//                         } else switch (t = this._days + Math.round(Ps(this._months)), e) {
//                             case "week":
//                                 return t / 7 + i / 6048e5;
//                             case "day":
//                                 return t + i / 864e5;
//                             case "hour":
//                                 return 24 * t + i / 36e5;
//                             case "minute":
//                                 return 1440 * t + i / 6e4;
//                             case "second":
//                                 return 86400 * t + i / 1e3;
//                             case "millisecond":
//                                 return Math.floor(864e5 * t) + i;
//                             default:
//                                 throw new Error("Unknown unit " + e)
//                         }
//                     }

//                     function Cs() {
//                         return this.isValid() ? this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * ue(this._months / 12) : NaN
//                     }

//                     function Hs(e) {
//                         return function() {
//                             return this.as(e)
//                         }
//                     }
//                     var Zs = Hs("ms"),
//                         As = Hs("s"),
//                         js = Hs("m"),
//                         Os = Hs("h"),
//                         Fs = Hs("d"),
//                         Is = Hs("w"),
//                         Ns = Hs("M"),
//                         Rs = Hs("Q"),
//                         zs = Hs("y");

//                     function $s() {
//                         return Di(this)
//                     }

//                     function Ws(e) {
//                         return e = ae(e), this.isValid() ? this[e + "s"]() : NaN
//                     }

//                     function Us(e) {
//                         return function() {
//                             return this.isValid() ? this._data[e] : NaN
//                         }
//                     }
//                     var Bs = Us("milliseconds"),
//                         qs = Us("seconds"),
//                         Gs = Us("minutes"),
//                         Js = Us("hours"),
//                         Vs = Us("days"),
//                         Ks = Us("months"),
//                         Xs = Us("years");

//                     function Qs() {
//                         return ce(this.days() / 7)
//                     }
//                     var er = Math.round,
//                         tr = {
//                             ss: 44,
//                             s: 45,
//                             m: 45,
//                             h: 22,
//                             d: 26,
//                             w: null,
//                             M: 11
//                         };

//                     function nr(e, t, n, i, a) {
//                         return a.relativeTime(t || 1, !!n, e, i)
//                     }

//                     function ir(e, t, n, i) {
//                         var a = Di(e).abs(),
//                             s = er(a.as("s")),
//                             r = er(a.as("m")),
//                             o = er(a.as("h")),
//                             l = er(a.as("d")),
//                             d = er(a.as("M")),
//                             c = er(a.as("w")),
//                             u = er(a.as("y")),
//                             h = s <= n.ss && ["s", s] || s < n.s && ["ss", s] || r <= 1 && ["m"] || r < n.m && ["mm", r] || o <= 1 && ["h"] || o < n.h && ["hh", o] || l <= 1 && ["d"] || l < n.d && ["dd", l];
//                         return null != n.w && (h = h || c <= 1 && ["w"] || c < n.w && ["ww", c]), (h = h || d <= 1 && ["M"] || d < n.M && ["MM", d] || u <= 1 && ["y"] || ["yy", u])[2] = t, h[3] = +e > 0, h[4] = i, nr.apply(null, h)
//                     }

//                     function ar(e) {
//                         return void 0 === e ? er : "function" == typeof e && (er = e, !0)
//                     }

//                     function sr(e, t) {
//                         return void 0 !== tr[e] && (void 0 === t ? tr[e] : (tr[e] = t, "s" === e && (tr.ss = t - 1), !0))
//                     }

//                     function rr(e, t) {
//                         if (!this.isValid()) return this.localeData().invalidDate();
//                         var n, i, a = !1,
//                             s = tr;
//                         return "object" == typeof e && (t = e, e = !1), "boolean" == typeof e && (a = e), "object" == typeof t && (s = Object.assign({}, tr, t), null != t.s && null == t.ss && (s.ss = t.s - 1)), i = ir(this, !a, s, n = this.localeData()), a && (i = n.pastFuture(+this, i)), n.postformat(i)
//                     }
//                     var or = Math.abs;

//                     function lr(e) {
//                         return (e > 0) - (e < 0) || +e
//                     }

//                     function dr() {
//                         if (!this.isValid()) return this.localeData().invalidDate();
//                         var e, t, n, i, a, s, r, o, l = or(this._milliseconds) / 1e3,
//                             d = or(this._days),
//                             c = or(this._months),
//                             u = this.asSeconds();
//                         return u ? (e = ce(l / 60), t = ce(e / 60), l %= 60, e %= 60, n = ce(c / 12), c %= 12, i = l ? l.toFixed(3).replace(/\.?0+$/, "") : "", a = u < 0 ? "-" : "", s = lr(this._months) !== lr(u) ? "-" : "", r = lr(this._days) !== lr(u) ? "-" : "", o = lr(this._milliseconds) !== lr(u) ? "-" : "", a + "P" + (n ? s + n + "Y" : "") + (c ? s + c + "M" : "") + (d ? r + d + "D" : "") + (t || e || l ? "T" : "") + (t ? o + t + "H" : "") + (e ? o + e + "M" : "") + (l ? o + i + "S" : "")) : "P0D"
//                     }
//                     var cr = oi.prototype;
//                     return cr.isValid = si, cr.abs = xs, cr.add = ks, cr.subtract = Ts, cr.as = Es, cr.asMilliseconds = Zs, cr.asSeconds = As, cr.asMinutes = js, cr.asHours = Os, cr.asDays = Fs, cr.asWeeks = Is, cr.asMonths = Ns, cr.asQuarters = Rs, cr.asYears = zs, cr.valueOf = Cs, cr._bubble = Ss, cr.clone = $s, cr.get = Ws, cr.milliseconds = Bs, cr.seconds = qs, cr.minutes = Gs, cr.hours = Js, cr.days = Vs, cr.weeks = Qs, cr.months = Ks, cr.years = Xs, cr.humanize = rr, cr.toISOString = dr, cr.toString = dr, cr.toJSON = dr, cr.locale = oa, cr.localeData = da, cr.toIsoString = T("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)", dr), cr.lang = la, R("X", 0, 0, "unix"), R("x", 0, 0, "valueOf"), Ae("x", Pe), Ae("X", He), Ne("X", (function(e, t, n) {
//                         n._d = new Date(1e3 * parseFloat(e))
//                     })), Ne("x", (function(e, t, n) {
//                         n._d = new Date(ue(e))
//                     })), a.version = "2.29.4", s(Vn), a.fn = ds, a.min = ei, a.max = ti, a.now = ni, a.utc = f, a.unix = cs, a.months = _s, a.isDate = h, a.locale = gn, a.invalid = y, a.duration = Di, a.isMoment = L, a.weekdays = ys, a.parseZone = us, a.localeData = yn, a.isDuration = li, a.monthsShort = vs, a.weekdaysMin = bs, a.defineLocale = _n, a.updateLocale = vn, a.locales = wn, a.weekdaysShort = ws, a.normalizeUnits = ae, a.relativeTimeRounding = ar, a.relativeTimeThreshold = sr, a.calendarFormat = zi, a.prototype = ds, a.HTML5_FMT = {
//                         DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
//                         DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
//                         DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
//                         DATE: "YYYY-MM-DD",
//                         TIME: "HH:mm",
//                         TIME_SECONDS: "HH:mm:ss",
//                         TIME_MS: "HH:mm:ss.SSS",
//                         WEEK: "GGGG-[W]WW",
//                         MONTH: "YYYY-MM"
//                     }, a
//                 }()
//             },
//             1030: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => s
//                 });
//                 var i = n(4820),
//                     a = n(3506);
//                 const s = (e, t) => {
//                     var n, s, r;
//                     "undefined" == typeof gtag || (null !== (s = null === (n = window.dataLayer) || void 0 === n ? void 0 : n.length) && void 0 !== s ? s : 0) > 1e3 || gtag("event", e, {
//                         product: i.ZP.product,
//                         user_type: null !== (r = null === a.a || void 0 === a.a ? void 0 : a.a.type) && void 0 !== r ? r : "guest",
//                         label: t
//                     })
//                 }
//             },
//             4231: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     $f: () => s,
//                     Ef: () => g,
//                     Gr: () => u,
//                     JA: () => _,
//                     Qo: () => l,
//                     _Y: () => m,
//                     c0: () => h,
//                     gs: () => p,
//                     lZ: () => r,
//                     o5: () => o,
//                     oL: () => c,
//                     ox: () => f,
//                     wU: () => d,
//                     zp: () => v
//                 });
//                 var i = n(3506),
//                     a = n(3947);
//                 async function s(e, t = "GET", n = {}, i = !1) {
//                     try {
//                         const s = {
//                             "Content-Type": "application/json"
//                         };
//                         i && (s.Authorization = `Bearer ${(0,a.pR)("__pat","")}`);
//                         const r = {
//                             method: t,
//                             headers: s
//                         };
//                         "GET" !== t && (r.body = JSON.stringify(n));
//                         const o = await fetch(e, r);
//                         return await o.json()
//                     } catch (s) {
//                         return console.error(s), {
//                             status: !1,
//                             message: "Internal Server Error"
//                         }
//                     }
//                 }
//                 const r = () => s("/checkout/giftcard"),
//                     o = () => s("/checkout/plans"),
//                     l = () => s("/api/subscription/active"),
//                     d = () => s("/api/subscription/upgrade/plan", "POST"),
//                     c = () => s("/api/subscription/team/"),
//                     u = e => s("/checkout/upgrade/details", "POST", {
//                         plan: e
//                     }),
//                     h = (e = {}) => s("/checkout/paymentmethods", "POST", e),
//                     m = (e, t) => s(`/paypal/polling?id=${e}&type=${t}`, "POST"),
//                     p = (e, t, n) => s(`/api/promo/status/?code=${e}&product=${t}&splan=${n}`),
//                     f = () => s("/api/country/"),
//                     g = async () => {
//                         try {
//                             const e = await fetch("/api/geoip/"),
//                                 t = await e.json();
//                             return t.registeredCountry.isoCode
//                         } catch (e) {
//                             return "US"
//                         }
//                     },
//                     _ = e => s(`/api/image-generator/${e}`),
//                     v = e => s(`/api/credits/consume/${e}`, "POST").then((e => {
//                         !0 === e.status && (i.a.credits = e.data.credits + e.data.subscription)
//                     }))
//             },
//             6738: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     ZP: () => d,
//                     od: () => l
//                 });
//                 var i = n(6548),
//                     a = n(1030),
//                     s = n(4231),
//                     r = n(3947),
//                     o = n(1293);
//                 const l = {
//                     AF: "Afghanistan",
//                     AX: "Åland Islands",
//                     AL: "Albania",
//                     DZ: "Algeria",
//                     AS: "American Samoa",
//                     AD: "Andorra",
//                     AO: "Angola",
//                     AI: "Anguilla",
//                     AQ: "Antarctica",
//                     AG: "Antigua and Barbuda",
//                     AR: "Argentina",
//                     AM: "Armenia",
//                     AW: "Aruba",
//                     AU: "Australia",
//                     AT: "Austria",
//                     AZ: "Azerbaijan",
//                     BS: "Bahamas",
//                     BH: "Bahrain",
//                     BD: "Bangladesh",
//                     BB: "Barbados",
//                     BY: "Belarus",
//                     BE: "Belgium",
//                     BZ: "Belize",
//                     BJ: "Benin",
//                     BM: "Bermuda",
//                     BT: "Bhutan",
//                     BO: "Bolivia",
//                     BQ: "Bonaire, Sint Eustatius and Saba",
//                     BA: "Bosnia and Herzegovina",
//                     BW: "Botswana",
//                     BV: "Bouvet Island",
//                     BR: "Brazil",
//                     IO: "British Indian Ocean Territory",
//                     BN: "Brunei Darussalam",
//                     BG: "Bulgaria",
//                     BF: "Burkina Faso",
//                     BI: "Burundi",
//                     KH: "Cambodia",
//                     CM: "Cameroon",
//                     CA: "Canada",
//                     CV: "Cape Verde",
//                     KY: "Cayman Islands",
//                     CF: "Central African Republic",
//                     TD: "Chad",
//                     CL: "Chile",
//                     CN: "China",
//                     CX: "Christmas Island",
//                     CC: "Cocos (Keeling) Islands",
//                     CO: "Colombia",
//                     KM: "Comoros",
//                     CG: "Congo, Republic of the (Brazzaville)",
//                     CD: "Congo, the Democratic Republic of the (Kinshasa)",
//                     CK: "Cook Islands",
//                     CR: "Costa Rica",
//                     CI: "Côte d'Ivoire, Republic of",
//                     HR: "Croatia",
//                     CU: "Cuba",
//                     CW: "Curaçao",
//                     CY: "Cyprus",
//                     CZ: "Czech Republic",
//                     DK: "Denmark",
//                     DJ: "Djibouti",
//                     DM: "Dominica",
//                     DO: "Dominican Republic",
//                     EC: "Ecuador",
//                     EG: "Egypt",
//                     SV: "El Salvador",
//                     GQ: "Equatorial Guinea",
//                     ER: "Eritrea",
//                     EE: "Estonia",
//                     ET: "Ethiopia",
//                     FK: "Falkland Islands (Islas Malvinas)",
//                     FO: "Faroe Islands",
//                     FJ: "Fiji",
//                     FI: "Finland",
//                     FR: "France",
//                     GF: "French Guiana",
//                     PF: "French Polynesia",
//                     TF: "French Southern and Antarctic Lands",
//                     GA: "Gabon",
//                     GM: "Gambia, The",
//                     GE: "Georgia",
//                     DE: "Germany",
//                     GH: "Ghana",
//                     GI: "Gibraltar",
//                     GR: "Greece",
//                     GL: "Greenland",
//                     GD: "Grenada",
//                     GP: "Guadeloupe",
//                     GU: "Guam",
//                     GT: "Guatemala",
//                     GG: "Guernsey",
//                     GN: "Guinea",
//                     GW: "Guinea-Bissau",
//                     GY: "Guyana",
//                     HT: "Haiti",
//                     HM: "Heard Island and McDonald Islands",
//                     VA: "Holy See (Vatican City)",
//                     HN: "Honduras",
//                     HK: "Hong Kong",
//                     HU: "Hungary",
//                     IS: "Iceland",
//                     IN: "India",
//                     ID: "Indonesia",
//                     IR: "Iran, Islamic Republic of",
//                     IQ: "Iraq",
//                     IE: "Ireland",
//                     IM: "Isle of Man",
//                     IL: "Israel",
//                     IT: "Italy",
//                     JM: "Jamaica",
//                     JP: "Japan",
//                     JE: "Jersey",
//                     JO: "Jordan",
//                     KZ: "Kazakhstan",
//                     KE: "Kenya",
//                     KI: "Kiribati",
//                     KP: "Korea, Democratic People's Republic of",
//                     KR: "Korea, Republic of",
//                     KW: "Kuwait",
//                     KG: "Kyrgyzstan",
//                     LA: "Laos",
//                     LV: "Latvia",
//                     LB: "Lebanon",
//                     LS: "Lesotho",
//                     LR: "Liberia",
//                     LY: "Libya",
//                     LI: "Liechtenstein",
//                     LT: "Lithuania",
//                     LU: "Luxembourg",
//                     MO: "Macao",
//                     MK: "Macedonia, Republic of",
//                     MG: "Madagascar",
//                     MW: "Malawi",
//                     MY: "Malaysia",
//                     MV: "Maldives",
//                     ML: "Mali",
//                     MT: "Malta",
//                     MH: "Marshall Islands",
//                     MQ: "Martinique",
//                     MR: "Mauritania",
//                     MU: "Mauritius",
//                     YT: "Mayotte",
//                     MX: "Mexico",
//                     FM: "Micronesia, Federated States of",
//                     MD: "Moldova",
//                     MC: "Monaco",
//                     MN: "Mongolia",
//                     ME: "Montenegro",
//                     MS: "Montserrat",
//                     MA: "Morocco",
//                     MZ: "Mozambique",
//                     MM: "Myanmar",
//                     NA: "Namibia",
//                     NR: "Nauru",
//                     NP: "Nepal",
//                     NL: "Netherlands",
//                     NC: "New Caledonia",
//                     NZ: "New Zealand",
//                     NI: "Nicaragua",
//                     NE: "Niger",
//                     NG: "Nigeria",
//                     NU: "Niue",
//                     NF: "Norfolk Island",
//                     MP: "Northern Mariana Islands",
//                     NO: "Norway",
//                     OM: "Oman",
//                     PK: "Pakistan",
//                     PW: "Palau",
//                     PS: "Palestine, State of",
//                     PA: "Panama",
//                     PG: "Papua New Guinea",
//                     PY: "Paraguay",
//                     PE: "Peru",
//                     PH: "Philippines",
//                     PN: "Pitcairn",
//                     PL: "Poland",
//                     PT: "Portugal",
//                     PR: "Puerto Rico",
//                     QA: "Qatar",
//                     RE: "Réunion",
//                     RO: "Romania",
//                     RU: "Russian Federation",
//                     RW: "Rwanda",
//                     BL: "Saint Barthélemy",
//                     SH: "Saint Helena, Ascension and Tristan da Cunha",
//                     KN: "Saint Kitts and Nevis",
//                     LC: "Saint Lucia",
//                     MF: "Saint Martin",
//                     PM: "Saint Pierre and Miquelon",
//                     VC: "Saint Vincent and the Grenadines",
//                     WS: "Samoa",
//                     SM: "San Marino",
//                     ST: "Sao Tome and Principe",
//                     SA: "Saudi Arabia",
//                     SN: "Senegal",
//                     RS: "Serbia",
//                     SC: "Seychelles",
//                     SL: "Sierra Leone",
//                     SG: "Singapore",
//                     SX: "Sint Maarten (Dutch part)",
//                     SK: "Slovakia",
//                     SI: "Slovenia",
//                     SB: "Solomon Islands",
//                     SO: "Somalia",
//                     ZA: "South Africa",
//                     GS: "South Georgia and South Sandwich Islands",
//                     SS: "South Sudan",
//                     ES: "Spain",
//                     LK: "Sri Lanka",
//                     SD: "Sudan",
//                     SR: "Suriname",
//                     SZ: "Swaziland",
//                     SE: "Sweden",
//                     CH: "Switzerland",
//                     SY: "Syrian Arab Republic",
//                     TW: "Taiwan",
//                     TJ: "Tajikistan",
//                     TZ: "Tanzania, United Republic of",
//                     TH: "Thailand",
//                     TL: "Timor-Leste",
//                     TG: "Togo",
//                     TK: "Tokelau",
//                     TO: "Tonga",
//                     TT: "Trinidad and Tobago",
//                     TN: "Tunisia",
//                     TR: "Turkey",
//                     TM: "Turkmenistan",
//                     TC: "Turks and Caicos Islands",
//                     TV: "Tuvalu",
//                     UG: "Uganda",
//                     UA: "Ukraine",
//                     AE: "United Arab Emirates",
//                     GB: "United Kingdom",
//                     US: "United States",
//                     UM: "United States Minor Outlying Islands",
//                     UY: "Uruguay",
//                     UZ: "Uzbekistan",
//                     VU: "Vanuatu",
//                     VE: "Venezuela, Bolivarian Republic of",
//                     VN: "Viet Nam",
//                     VG: "Virgin Islands, British",
//                     VI: "Virgin Islands, U.S.",
//                     WF: "Wallis and Futuna",
//                     EH: "Western Sahara",
//                     YE: "Yemen",
//                     ZM: "Zambia",
//                     ZW: "Zimbabwe"
//                 };
//                 class d {
//                     constructor(e = {}) {
//                         var t;
//                         this.setContent = async (e, t) => {
//                             var n, i;
//                             switch (e) {
//                                 case "chooser":
//                                     this.content.innerHTML = this.form.chooser(), document.querySelectorAll(".social-button").forEach((e => {
//                                         e.addEventListener("click", (() => this.loadSocialLogin(e.dataset.social)))
//                                     })), null === (n = (0, r.ZP)("choose-email")) || void 0 === n || n.addEventListener("click", (() => this.loadForm("login")));
//                                     break;
//                                 case "login":
//                                     this.content.innerHTML = this.form.login(), (0, r.ZP)("load-signup").onclick = () => this.loadForm("register"), this.options.email && ((0, r.ZP)("entry-email").value = this.options.email);
//                                     break;
//                                 case "register":
//                                     this.content.innerHTML = await this.form.register();
//                                     break;
//                                 case "forgotPassword":
//                                     this.content.innerHTML = this.form.forgotPassword();
//                                     break;
//                                 case "setPassword":
//                                     this.loadCaptcha(), this.content.innerHTML = this.form.resetPassword(!0);
//                                     break;
//                                 case "resetPassword":
//                                     this.loadCaptcha(), this.content.innerHTML = this.form.resetPassword();
//                                     break;
//                                 case "verification":
//                                     this.content.innerHTML = this.form.verification(null !== (i = t.verify) && void 0 !== i ? i : "verification");
//                                     break;
//                                 case "changePassword":
//                                     this.content.innerHTML = this.form.changePassword();
//                                     break;
//                                 case "changeEmail":
//                                     this.content.innerHTML = this.form.changeEmail();
//                                     break;
//                                 case "changeUsername":
//                                     this.content.innerHTML = this.form.changeUsername((0, r.ZP)("change-name").dataset.name);
//                                     break;
//                                 case "deleteAccount":
//                                     const e = (0, r.ZP)("delete-account").dataset.name || "User";
//                                     this.content.innerHTML = this.form.deleteAccount(e);
//                                     break;
//                                 case "deleteAccountConfirmation":
//                                     this.content.innerHTML = this.form.deleteAccountConfirmation(t.reason);
//                                     break;
//                                 case "additionalVerification":
//                                     this.passwordVerification = "pending", this.content.innerHTML = this.form.additionalVerification()
//                             }
//                         }, this.setFooter = e => {
//                             switch (this.footer.style.display = "block", e) {
//                                 case "login":
//                                     this.footer.innerHTML = `${(0,i.Z)("common-notMember")} &nbsp; <a id="load-chooser">${(0,i.Z)("common-signUpNow")}</a>`, (0, r.ZP)("load-chooser").onclick = () => this.loadForm("chooser");
//                                     break;
//                                 case "register":
//                                     this.footer.innerHTML = `${(0,i.Z)("common-alreadyMember")} &nbsp; <a id="load-login">${(0,i.Z)("common-loginHere")}</a>`, (0, r.ZP)("load-login").onclick = () => this.loadForm("login");
//                                     break;
//                                 case "forgotPassword":
//                                     this.footer.innerHTML = `<a class="back" id="entry-back">&#10094; &nbsp; ${(0,i.Z)("common-back")}</a>`, (0, r.ZP)("entry-back").onclick = () => this.loadForm("login");
//                                     break;
//                                 case "resetPassword":
//                                     this.footer.innerHTML = `<a class="back" id="entry-back">&#10094; &nbsp; ${(0,i.Z)("common-back")}</a>`, (0, r.ZP)("entry-back").onclick = () => this.loadForm("forgotPassword");
//                                     break;
//                                 default:
//                                     return this.footer.innerHTML = "", void(this.footer.style.display = "none")
//                             }
//                         }, this.loadForm = async (e, t = {}) => {
//                             var n, i, a, s, o, l, d;
//                             if (this.options.view = e, await this.setContent(this.options.view, t), "setPassword" !== this.options.view && "resetPassword" !== this.options.view || this.renderCaptcha(), null === (n = (0, r.ZP)("entry-form")) || void 0 === n || n.addEventListener("submit", (e => {
//                                     this.submitForm((0, r.ZP)("entry-form").dataset.entry, e)
//                                 })), "setPassword" === this.options.view && (t.email = (0, r.ZP)("set-password").dataset.email), "resetPassword" !== this.options.view && "setPassword" !== this.options.view || ((0, r.ZP)("entry-email").value = t.email), (0, r.ZP)("entry-to-email")) {
//                                 const e = (0, r.ZP)("entry-to-email").dataset.text.replace("[EMAIL]", t.email);
//                                 (0, r.ZP)("entry-to-email").innerHTML = e
//                             }(0, r.ZP)("verification-email") && ((0, r.ZP)("verification-email").value = t.email), (0, r.ZP)("entry-resend") && (clearTimeout(this.resendCodeTimeouts), this.resendCodeTimeouts = setTimeout((() => {
//                                 (0, r.ZP)("entry-resend").classList.remove("hide")
//                             }), 3e4), null === (i = (0, r.ZP)("entry-resend")) || void 0 === i || i.addEventListener("click", (() => this.resendCode(t.email)))), null === (a = (0, r.ZP)("entry-email")) || void 0 === a || a.addEventListener("keyup", (() => {
//                                 this.validateInputTimer("email")
//                             })), null === (s = (0, r.ZP)("entry-email")) || void 0 === s || s.addEventListener("blur", (() => {
//                                 (0, r.b0)((0, r.ZP)("entry-email"), "", "email")
//                             })), null === (o = (0, r.ZP)("load-forgotPassword")) || void 0 === o || o.addEventListener("click", (() => this.loadForm("forgotPassword"))), null === (l = (0, r.ZP)("toggle-password")) || void 0 === l || l.addEventListener("click", (() => this.togglePassword())), null === (d = (0, r.ZP)("toggle-password-2")) || void 0 === d || d.addEventListener("click", (() => this.togglePassword("toggle-password-2", "entry-password-new")))
//                         }, this.loadSocialLogin = async e => {
//                             if ((0, a.Z)("login", e), "apple" === e) {
//                                 const e = await new Promise(((e, t) => {
//                                     let n = document.createElement("script");
//                                     n.type = "text/javascript", n.crossOrigin = "anonymous", n.src = "https://appleid.cdn-apple.com/appleauth/static/jsapi/appleid/1/en_US/appleid.auth.js", document.body.appendChild(n), n.onload = function() {
//                                         e(AppleID ? AppleID.auth : null)
//                                     }, n.onerror = function() {
//                                         t("Failed to load apple auth script")
//                                     }
//                                 }));
//                                 e && (e.init({
//                                     clientId: "com.pixlr.web",
//                                     scope: "name email",
//                                     redirectURI: new URL(location.href).origin + "/auth/apple/callback",
//                                     state: location.href,
//                                     nonce: "",
//                                     usePopup: !1
//                                 }), e.signIn())
//                             } else {
//                                 const t = window.location.origin;
//                                 window.location.href = `${t}/auth/${e}?callbackUrl=${encodeURIComponent(window.location.href)}`
//                             }
//                         }, this.togglePassword = (e = "toggle-password", t = "entry-password") => {
//                             const n = (0, r.ZP)(e),
//                                 i = (0, r.ZP)(t);
//                             "text" === i.type ? (i.type = "password", n.src = "/img/icon/eye-hide.svg") : (i.type = "text", n.src = "/img/icon/eye-show.svg")
//                         }, this.validateInputTimer = e => {
//                             this.validationTimer[e] && clearTimeout(this.validationTimer[e]), this.validationTimer[e] = setTimeout((() => (0, r.b0)((0, r.ZP)(`entry-${e}`), "", e)), 1e3)
//                         }, this.loadCaptcha = () => {
//                             let e = document.createElement("script");
//                             e.id = "recaptcha-js-api", e.defer = !0, e.src = "https://www.google.com/recaptcha/api.js", document.getElementsByTagName("head")[0].appendChild(e)
//                         }, this.renderCaptcha = () => {
//                             this.captcha = void 0;
//                             const e = window.location.href.includes("localhost") ? "6LeBQzcaAAAAAPwVny3IG23_fY_FasFVKXvQG9qB" : "6LcqBEsaAAAAAF-JcOUzRtVKASZt5b-EMITWxEJf";
//                             setTimeout((() => {
//                                 try {
//                                     this.captcha = grecaptcha.render((0, r.ZP)("recaptcha"), {
//                                         sitekey: e
//                                     })
//                                 } catch (t) {
//                                     console.error("Failed to load Captcha, please check your network connection!")
//                                 }
//                             }), 2500)
//                         }, this.getFormInput = () => {
//                             const e = {},
//                                 t = (0, r.ZP)("entry-form");
//                             return t.querySelectorAll("input").forEach((t => {
//                                 "checkbox" == t.type ? e[t.name] = t.checked : e[t.name] = t.value
//                             })), t.querySelectorAll("select").forEach((t => {
//                                 e[t.name] = t.value
//                             })), e
//                         }, this.submitForm = async (e, t) => {
//                             switch (t.preventDefault(), e) {
//                                 case "login":
//                                     this.loginHandler();
//                                     break;
//                                 case "register":
//                                     this.registerHandler();
//                                     break;
//                                 case "verification":
//                                     this.verificationHandler();
//                                     break;
//                                 case "forgotPassword":
//                                     this.forgotPasswordHandler();
//                                     break;
//                                 case "setPassword":
//                                     this.passwordResetHandler(!0);
//                                     break;
//                                 case "resetPassword":
//                                     this.passwordResetHandler();
//                                     break;
//                                 case "changeEmail":
//                                     this.changeEmailHandler();
//                                     break;
//                                 case "changeEmailVerification":
//                                     this.changeEmailVerificationHandler();
//                                     break;
//                                 case "changePassword":
//                                     this.changePasswordHandler();
//                                     break;
//                                 case "changeUsername":
//                                     this.changeUsernameHandler();
//                                     break;
//                                 case "deleteAccount":
//                                     this.deleteAccountHandler();
//                                     break;
//                                 case "deleteAccountConfirmation":
//                                     this.deleteAccountConfirmationHandler()
//                             }
//                         }, this.loginHandler = async () => {
//                             const e = this.getFormInput();
//                             e.email = e.email.trim();
//                             const t = (0, r.b0)((0, r.ZP)("entry-email"), e.email, "email"),
//                                 n = (0, r.b0)((0, r.ZP)("entry-password"), e.password, "password");
//                             if (!t || !n) return;
//                             (0, r.ZP)("entry-submit").classList.add("working");
//                             const i = await (0, s.$f)("/auth/login", "POST", e);
//                             i.status ? ((0, a.Z)("login", "password"), this.options.callback ? window.location.href = decodeURIComponent(this.options.callback).split("#")[0] : window.location.reload()) : i.verify ? (this.loadForm("verification", {
//                                 email: e.email
//                             }), (0, r.FN)("danger", i.message, 5)) : ((0, r.ZP)("entry-submit").innerText = "Login", (0, r.FN)("danger", i.message, 5)), (0, r.ZP)("entry-submit").classList.remove("working")
//                         }, this.registerHandler = async () => {
//                             this.registerData = this.getFormInput();
//                             const e = (0, r.b0)((0, r.ZP)("entry-email"), this.registerData.email, "email"),
//                                 t = (0, r.b0)((0, r.ZP)("entry-password"), this.registerData.password, "password");
//                             if (!e || !t) return;
//                             const n = this.getFormInput();
//                             Object.assign(n, this.registerData);
//                             const i = await (0, s.$f)("/auth/register", "POST", n);
//                             if (!i.status) return (0, r.FN)("danger", i.message, 5), void this.loadForm("register");
//                             this.loadForm("verification", {
//                                 email: n.email
//                             })
//                         }, this.verificationHandler = async () => {
//                             const e = this.getFormInput(),
//                                 t = await (0, s.$f)("/auth/verify", "POST", e);
//                             if (!t.status) return (0, r.FN)("danger", t.message, 5);
//                             (0, r.FN)("success", t.message, 5), setTimeout((() => {
//                                 this.options.callback ? window.location.href = decodeURIComponent(this.options.callback).split("#")[0] : window.location.reload()
//                             }), 1e3)
//                         }, this.forgotPasswordHandler = async () => {
//                             const e = this.getFormInput();
//                             if (!(0, r.b0)((0, r.ZP)("entry-email"), e.email, "email")) return;
//                             e.resend = !1;
//                             const t = await (0, s.$f)("/auth/request/code/", "POST", e);
//                             if (!t.status) return (0, r.FN)("danger", t.message, 5);
//                             (0, r.FN)("success", t.message, 5, e.email), this.loadForm("resetPassword", {
//                                 email: e.email
//                             })
//                         }, this.passwordResetHandler = async (e = !1) => {
//                             let t;
//                             try {
//                                 if (t = grecaptcha.getResponse(this.captcha), grecaptcha.reset(this.captcha), !t) return (0, r.FN)("danger", "Please complete the CAPTCHA!", 3)
//                             } catch (d) {
//                                 console.error("Failed to get Captcha Token!")
//                             }
//                             const n = this.getFormInput();
//                             n.token = t;
//                             const i = (0, r.b0)((0, r.ZP)("entry-email"), n.email, "email"),
//                                 a = (0, r.b0)((0, r.ZP)("entry-password"), n.password, "password"),
//                                 o = (0, r.b0)((0, r.ZP)("entry-code"), n.code, "code");
//                             if (!i || !a || !o) return;
//                             const l = await (0, s.$f)("/auth/reset", "POST", n);
//                             if (!l.status) return (0, r.FN)("danger", l.message, 5);
//                             (0, r.FN)("success", l.message, 5), setTimeout((() => {
//                                 e ? window.location.href = "/logout" : window.location.reload()
//                             }), 1e3)
//                         }, this.resendCode = async e => {
//                             (0, r.ZP)("entry-resend").classList.add("hide"), this.resendCodeTimeouts = setTimeout((() => {
//                                 (0, r.ZP)("entry-resend").classList.remove("hide")
//                             }), 3e4);
//                             const t = await (0, s.$f)("/auth/request/code/", "POST", {
//                                 email: e,
//                                 resend: !0
//                             });
//                             if (!t.status) return (0, r.FN)("danger", t.message, 5);
//                             (0, r.FN)("success", t.message, 5, e)
//                         }, this.changeEmailHandler = async () => {
//                             const e = this.getFormInput();
//                             if (!(0, r.b0)((0, r.ZP)("entry-email"), e.email, "email")) return;
//                             const t = await (0, s.$f)("/auth/changeemail/request", "POST", {
//                                 newEmail: e.email
//                             });
//                             if (!t.status) return (0, r.FN)("danger", t.message);
//                             this.loadForm("verification", {
//                                 email: e.email,
//                                 verify: "changeEmailVerification"
//                             }), (0, r.FN)("success", t.message, 5, e.email)
//                         }, this.changeEmailVerificationHandler = async () => {
//                             const e = this.getFormInput();
//                             e.newEmail = e.email;
//                             if (!(0, r.b0)((0, r.ZP)("entry-code"), e.code, "code")) return;
//                             const t = await (0, s.$f)("/auth/changeemail/verify", "POST", e);
//                             if (!t.status) return (0, r.FN)("danger", t.message, 5);
//                             (0, r.FN)("success", t.message, 5), setTimeout((() => {
//                                 window.location.replace("/logout?callbackUrl=/")
//                             }), 1e3)
//                         }, this.changePasswordHandler = async () => {
//                             const e = this.getFormInput(),
//                                 t = (0, r.b0)((0, r.ZP)("entry-password"), e.password, "password"),
//                                 n = (0, r.b0)((0, r.ZP)("entry-password-new"), e["new-password"], "password");
//                             if (!t || !n) return;
//                             const i = await (0, s.$f)("/auth/changepassword", "PUT", {
//                                 oldPassword: e.password,
//                                 newPassword: e["new-password"]
//                             });
//                             if (!i.status) return (0, r.FN)("danger", i.message, 5);
//                             (0, r.FN)("success", i.message, 5), setTimeout((() => {
//                                 window.location.replace("/")
//                             }), 2e3)
//                         }, this.changeUsernameHandler = async () => {
//                             const e = this.getFormInput(),
//                                 t = await (0, s.$f)("/myaccount/api/profile", "PUT", e, !0);
//                             if (!t.status) return (0, r.FN)("danger", t.message);
//                             (0, r.FN)("success", t.message), setTimeout((() => window.location.reload()), 500)
//                         }, this.deleteAccountHandler = async () => {
//                             const e = this.getFormInput();
//                             "leavingReasonDefault" !== e.reason && this.loadForm("deleteAccountConfirmation", {
//                                 reason: e.reason
//                             })
//                         }, this.deleteAccountConfirmationHandler = async () => {
//                             const e = this.getFormInput();
//                             if (!(0, r.b0)((0, r.ZP)("entry-password"), e.password, "password")) return;
//                             (0, r.ZP)("entry-cancel").style.display = "none", (0, r.ZP)("delete-confirm").innerText = (0, i.Z)("common-deleteInProgress");
//                             const t = await (0, s.$f)("/api/myaccount/profile", "DELETE", e, !0);
//                             if (!t.status) return (0, r.ZP)("entry-cancel").style.display = "block", (0, r.ZP)("delete-confirm").innerText = (0, i.Z)("deleteMyAccount"), (0, r.FN)("danger", t.message);
//                             window.location.href = "/logout/"
//                         }, this.getAdditionalVerificationstatus = () => (0, r.ZP)("entry-modal"), this.additionalVerificationHandler = async () => {
//                             const e = this.getFormInput();
//                             if (!(0, r.b0)((0, r.ZP)("entry-password"), e.password, "password")) return !1;
//                             const t = await (0, s.$f)("/api/myaccount/verification", "POST", e, !0);
//                             return !!t.status || ((0, r.FN)("danger", t.message), !1)
//                         }, this.options = e, this.form = new o.Z, this.registerData = {}, this.validationTimer = {}, this.captcha = {}, this.dialog = this.options.holder, this.dialog.classList.add("entry"), this.content = (0, r.T)("div", {
//                             className: "entry-content"
//                         }), this.footer = (0, r.T)("div", {
//                             id: "entry-footer",
//                             className: "center"
//                         }), this.dialog.append(this.content, this.footer), this.loadForm(null !== (t = this.options.view) && void 0 !== t ? t : "chooser")
//                     }
//                 }
//             },
//             1293: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => o
//                 });
//                 var i = n(6548),
//                     a = n(6738),
//                     s = n(4231),
//                     r = n(3506);
//                 class o {
//                     constructor() {
//                         this.chooser = () => `\n            <div class="chooser">\n                <div class="social-button" data-social="google">\n                    <img src="/images/icon/google.svg" alt="google">\n                    ${(0,i.Z)("common-continueWith")} Google\n                </div>\n                <div class="social-button" data-social="facebook">\n                    <img src="/images/icon/facebook.svg" alt="facebook">\n                    ${(0,i.Z)("common-continueWith")} Facebook\n                </div>\n                <div class="social-button" data-social="apple">\n                    <img src="/images/icon/apple_gray.svg" alt="apple">\n                    ${(0,i.Z)("common-continueWith")} Apple\n                </div>\n                <a class="top-20" style="display:inline-block;text-align:center;font-size:15px;" id="choose-email">\n                    <strong>${(0,i.Z)("common-orUseEmail")}</strong>\n                </a>\n            </div>\n            <p class="top-30 center" style="padding:0 25px">\n                ${(0,i.Z)("common-agreeTo")} <a href="/terms-of-use/" target='_new'>${(0,i.Z)("common-termsOfUse")}</a> ${(0,i.Z)("common-and")} <a href="/privacy-policy/" target='_new'> ${(0,i.Z)("common-privacyPolicy")}</a>.\n            </p>\n        `, this.login = () => `\n\n            <div class="center top-10">\n                ${(0,i.Z)("common-notMember")} &nbsp; <strong><a id="load-signup">${(0,i.Z)("common-signUp")}!</a></strong>\n            </div>\n\n            <form id="entry-form" data-entry="login" class="top-30">\n                <div class="input-group">\n                    <label for="entry-email">${(0,i.Z)("common-email")}</label>\n                    <input type="email" maxlength="70" name="email" id="entry-email" placeholder="Email address">\n                    <p class="error-msg">${(0,i.Z)("common-enterValidEmail")}</p>\n                </div>\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-password")}</label>\n                    <input type="password" name="password" id="entry-password" placeholder="Enter password" >\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                </div>\n\n                <input type="checkbox" id="entry-rememberMe" name="rememberMe" checked/>\n                <label class="top-20 switch" for="entry-rememberMe"><span></span> ${(0,i.Z)("common-rememberMe")}</label>\n\n                <button type="submit" class="button med w-100 top-40" id="entry-submit">${(0,i.Z)("common-login")}</button>\n\n                <div class="center top-30"><strong><a id="load-forgotPassword">${(0,i.Z)("common-forgotPass")}</a></strong></center>\n\n            </form>\n        `, this.register = async () => {
//                             let e = "",
//                                 t = !1;
//                             const n = await (0, s.Ef)();
//                             for (let i in a.od) t || "US" !== i && n != i ? e += `<option value="${i}">${a.od[i]}</option>` : (e += `<option value="${i}" selected>${a.od[i]}</option>`, t = !0);
//                             return `\n            <form id="entry-form" data-entry="register">\n                <div class="input-group">\n                    <label for="entry-email">${(0,i.Z)("common-email")}</label>\n                    <input type="email" maxlength="70" name="email" id="entry-email" placeholder="Email address">\n                    <p class="error-msg">${(0,i.Z)("common-enterValidEmail")}</p>\n                </div>\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-password")}</label>\n                    <input type="password" name="password" id="entry-password" placeholder="Enter password">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                 </div>\n                <div class="input-group">\n                    <label for="country">${(0,i.Z)("common-country")}</label>\n                    <select name="country">\n                        ${e}\n                    </select>\n                </div>\n\n                <input type="checkbox" id="entry-newsletter" name="newsletter" checked>\n                <label class="top-20 switch" for="entry-newsletter"><span></span>${(0,i.Z)("subscribeToNewsletter")}</label>\n\n                <button type="submit" class="button med w-100 top-40">${(0,i.Z)("common-signUp")}</button>\n            </form>\n        `
//                         }, this.forgotPassword = () => `\n            <h2 class="top-30">${(0,i.Z)("common-forgotPass")}</h2>\n\n            <form id="entry-form" class="top-30" data-entry="forgotPassword">\n                <div class="input-group">\n                    <label for="entry-email">${(0,i.Z)("common-email")}</label>\n                    <input type="email" maxlength="70" name="email" id="entry-email" placeholder="Email address"/>\n                    <p class="error-msg">${(0,i.Z)("common-enterValidEmail")}</p>\n                </div>\n\n                <button type="submit" class="button large w-100 top-40" id="load-verification">${(0,i.Z)("common-reqCode")}</button>\n            </form>\n        `, this.resetPassword = (e = !1) => `\n            <h2 class="top-10">${e?(0,i.Z)("common-setPassword"):(0,i.Z)("common-resetPass")}</h2>\n\n            <form id="entry-form" class="top-30" data-entry="${e?"setPassword":"resetPassword"}">\n                <div class="input-group">\n                    <label for="entry-email">${(0,i.Z)("common-email")}</label>\n                    <input type="email" maxlength="70" name="email" id="entry-email" readonly/>\n                    <p class="error-msg">${(0,i.Z)("common-enterValidEmail")}</p>\n                </div>\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-newPass")}</label>\n                    <input type="password" name="password" id="entry-password">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                    <span id="password-meter" class="none">\n                        <span></span><span></span><span></span><span></span>\n                    </span>\n                </div>\n                <div class="input-group">\n                    <label for="entry-code">${(0,i.Z)("common-code")}</label>\n                    <input type="number" name="code" id="entry-code" onkeypress="if(this.value.length===6)return false;">\n                    <p class="error-msg">${(0,i.Z)("common-enterValidCode")}</p>                    \n                </div>\n                \n                ${e?`<p class="center top-20 text-center"><strong><a id="entry-resend">${(0,i.Z)("common-SendResetCode")}</a></strong></p>`:""}\n\n                <div id="recaptcha" style="padding-top: 5px"></div>\n                <button class="button large w-100" type="submit">${(0,i.Z)("common-updatePass")}</button>\n                ${e?"":`<p class="top-20 hide center" id="entry-resend">${(0,i.Z)("common-didNotReceiveCode")} <a class="anchor">${(0,i.Z)("common-resend")}</a></p>`}\n            </form>\n        `, this.verification = e => `\n            <h1>${(0,i.Z)("common-verifyAcc")}</h1>\n            <p id="entry-to-email" data-text="${(0,i.Z)("common-sentCodeDesc")}">${(0,i.Z)("common-sentCodeDesc")}</p>\n\n            <form id="entry-form" data-entry="${e}">\n                <input id="verification-email" type="hidden" name="email" readonly/>\n                <div class="input-group">\n                    <label for="code">${(0,i.Z)("common-code")}</label>\n                    <input type="number" name="code" id="entry-code" onkeypress="if(this.value.length===6)return false;">\n                    <p class="error-msg">${(0,i.Z)("common-enterValidCode")}</p>\n                </div>\n\n                <button type="submit" class="button large w-100 top-20">${(0,i.Z)("common-verify")}</button>\n                <p class="top-20 hide text-center" id="entry-resend">${(0,i.Z)("common-didNotReceiveCode")} &nbsp; <a class="anchor">${(0,i.Z)("common-resend")}</a></p>\n            </form>\n        `, this.changePassword = () => `\n            <h2>${(0,i.Z)("common-changePassword")}</h2>\n            <form id="entry-form" class="top-30" data-entry="changePassword">\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-oldPass")}</label>\n                    <input type="password" name="password" id="entry-password">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                </div>\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-newPass")}</label>\n                    <input type="password" name="new-password" id="entry-password-new">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password-2" class="input-icon" src="/img/icon/eye-hide.svg">\n                    <span id="password-meter" class="none">\n                        <span></span><span></span><span></span><span></span>\n                    </span>\n                </div>\n                <button type="submit" class="button w-100 top-20" style="margin-bottom: 20px">${(0,i.Z)("common-changePassword")}</button>\n            </form>\n        `, this.changeEmail = () => `\n            <h2>${(0,i.Z)("common-changeEmail")}</h2>\n\n            <form id="entry-form" class="top-30" data-entry="changeEmail">\n                <div class="input-group">\n                    <label class="text-capitalize" for="email">${(0,i.Z)("common-newEmail")}</label>\n                    <input type="email" maxlength="70" name="email" id="entry-email">\n                    <p class="error-msg">${(0,i.Z)("common-EnterValidEmail")}</p>\n                </div>\n            \n                <button type="submit" class="button w-100 top-20" style="margin-bottom: 20px">${(0,i.Z)("common-newEmail")}</button>\n            </form>\n        `, this.changeUsername = (e = "") => `\n            <h2>${(0,i.Z)("changeUsername")}</h2>\n\n            <form id="entry-form" class="top-30" data-entry="changeUsername">\n                <div class="input-group">\n                    <label for="entry-username">${(0,i.Z)("newUsername")}</label>\n                    <input type="text" name="name" id="entry-username" value="${e}">\n                </div>\n\n                <button type="submit" class="button w-100 top-20">${(0,i.Z)("update")}</button>\n            </form>\n        `, this.deleteAccount = e => `\n            <h2>${(0,i.Z)("common-deleteMyAccount")}</h2>\n            <p class="top-20">Hey ${e},</p>\n            <p class="no-margin">${(0,i.Z)("common-sadToSeeYouGoWhyLeaving")}</p>\n\n            <form id="entry-form" data-entry="deleteAccount">\n                <div class="input-group">\n                    <label class="top-20 text-uppercase">${(0,i.Z)("common-leavingBecause")}</label>\n                    <select name="reason">\n                        <option value="leavingReasonDefault" disabled selected>${(0,i.Z)("common-leavingReasonDefault")}</option>\n                        <option value="leavingReasons1">${(0,i.Z)("common-leavingReasons1")}</option>\n                        <option value="leavingReasons2">${(0,i.Z)("common-leavingReasons2")}</option>\n                        <option value="leavingReasons3">${(0,i.Z)("common-leavingReasons3")}</option>\n                        <option value="leavingReasons4">${(0,i.Z)("common-leavingReasons4")}</option>\n                        <option value="leavingReasons5">${(0,i.Z)("common-leavingReasons5")}</option>\n                    <select>\n                </div>\n\n                <button type="submit" class="button red w-100 top-20" style="margin-bottom: 20px">${(0,i.Z)("common-deleteMyAccount")}</button>\n            </form>\n        `, this.deleteAccountConfirmation = (e = "leavingReasonDefault") => `\n            <h4 class="top-35 text-default">${(0,i.Z)("areYouSureYouWantToDelete")} </h4>\n            ${r.a.subscription?`<p class="top-35">${(0,i.Z)("common-youHaveActiveSubsBeforeDelete")}</p>`:""}\n            <p class="top-15">${(0,i.Z)("youCanStillChangeYourMind")} </p>\n\n            <form id="entry-form" data-entry="deleteAccountConfirmation">\n                <input type="hidden" name="reason" value="${e}">\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-password")}</label>\n                    <input type="password" name="password" id="entry-password">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                </div>\n\n                <div class="input-group checkbox-group inline justify-center flex-wrap" style="margin-top: 30px">\n                    <button id="entry-cancel" class="button full positive">${(0,i.Z)("cancel")}</button>\n                    <button id="delete-confirm" type="submit" class="button w-100 transparent">${(0,i.Z)("deleteMyAccount")}</button>\n                </div>\n            </form>\n        `, this.additionalVerification = () => `\n            <h3 class="heavy">${(0,i.Z)("enterYourPasswordToContinue")}</h3>\n\n            <form id="entry-form" data-entry="additionalVerification">\n                <div class="input-group">\n                    <label for="entry-password">${(0,i.Z)("common-password")}</label>\n                    <input type="password" name="password" id="entry-password">\n                    <p class="error-msg"></p>\n                    <img id="toggle-password" class="input-icon" src="/img/icon/eye-hide.svg">\n                </div>\n\n                <div class="input-group checkbox-group inline justify-center" style="margin-top: 30px">\n                    <button type="submit" class="button full top-20">Continue</button>\n                </div>\n            </form>\n        `
//                     }
//                 }
//             },
//             7666: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     By: () => s,
//                     Cj: () => r
//                 });
//                 var i = n(6548),
//                     a = n(3947);

//                 function s(e, t = 100, n = "", s = "", r = "") {
//                     return (0, a.T)("div", {
//                         className: `form-group w-${t}`
//                     }, (0, a.T)("div", {
//                         className: "adyen-checkout-title"
//                     }, (0, a.T)("span", {
//                         className: "adyen-checkout__label__text"
//                     }, `${(0,i.Z)(e)} ${(0,i.Z)(s)}`), r), (0, a.T)("input", {
//                         type: "text",
//                         id: e.replace("checkout-", ""),
//                         maxLength: 56,
//                         required: !0,
//                         value: n
//                     }))
//                 }

//                 function r(e, t = 100) {
//                     return (0, a.T)("div", {
//                         className: `form-group w-${t}`
//                     }, (0, a.T)("span", {
//                         className: "adyen-checkout__label__text"
//                     }, (0, i.Z)(e)), (0, a.T)("select", {
//                         id: "country",
//                         name: "country",
//                         className: "country-select"
//                     }))
//                 }
//             },
//             6577: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => u
//                 });
//                 var i = n(3947),
//                     a = n(6548),
//                     s = n(528),
//                     r = n(4231),
//                     o = n(7909),
//                     l = n(2856),
//                     d = n(3506),
//                     c = n(9344);
//                 class u extends o.Z {
//                     constructor(e, t = {}) {
//                         var o, u, h, m, p;
//                         if (super(!0), this.checkoutOptions = {
//                                 checkoutMode: "checkout"
//                             }, this.currency = "USD", this.currencySymbol = "$", this.freeTrial = !1, this.paymentData = {
//                                 currency: "USD",
//                                 checkoutMethod: this.checkoutOptions.checkoutMode,
//                                 billingAddress: {}
//                             }, this.balanceCredit = 0, this.selectedPayment = "credit", this.tax = {
//                                 status: !1
//                             }, this.genCredits = 0, this.encryptedCardData = {
//                                 isValid: !1,
//                                 paymentMethod: {}
//                             }, this.loadTemplateUI = () => {
//                                 var e;
//                                 this.optionUI.append(s.FH()), this.optionUI.append(s.p6()), this.summaryUI.append(s.Sp(this.checkoutType, this.productName)), (0, i.ZP)("summary-template-preview").appendChild(this.checkoutOptions.stage.getOutputCanvas(this.checkoutOptions.stage.fresco, .1)), (0, i.ZP)("summary-template-name").innerText = this.checkoutOptions.stage.fresco.name, (0, i.ZP)("summary-template-value").innerText = "1.00", null === (e = (0, i.ZP)("summary-template")) || void 0 === e || e.classList.add("inc"), this.loadAdyen(), this.loadEventListener()
//                             }, this.loadSeatsUI = () => {
//                                 this.optionUI.append(s.rx()), this.optionUI.append(s.FH()), this.optionUI.append(s.p6()), this.summaryUI.append(s.Sp(this.checkoutType, this.productName)), (0, i.ZP)("paypal-payment-option") && ((0, i.ZP)("paypal-payment-option").style.display = "none"), this.loadAdyen(), this.loadEventListener()
//                             }, this.loadCreditsUI = () => {
//                                 this.optionUI.append(s.yL()), this.optionUI.append(s.FH()), this.optionUI.append(s.p6()), this.summaryUI.append(s.Sp(this.checkoutType, this.productName)), (0, i.ZP)("paypal-payment-option") && ((0, i.ZP)("paypal-payment-option").style.display = "none"), this.loadAdyen(), this.loadEventListener()
//                             }, this.loadGiftCardUI = () => {
//                                 Promise.all([r.lZ()]).then((([e]) => {
//                                     var t, n;
//                                     if (!e.status) throw new Error("Failed to get gift details");
//                                     this.selectedGiftCard = e.data.find((e => e.code === this.checkoutOptions.giftcard)), this.productName = this.selectedGiftCard.product, this.optionUI.append(s.FH()), this.optionUI.append(s.p6()), this.optionUI.append(s.vq()), this.summaryUI.append(s.Sp(this.checkoutType, this.productName)), (0, i.ZP)("summary-giftcard-value").innerText = this.selectedGiftCard.amount.toFixed(2), null === (t = (0, i.ZP)("summary-giftcard")) || void 0 === t || t.classList.add("inc"), (0, i.ZP)("summary-giftcard-to").innerText = (null === (n = this.checkoutOptions.isAGift) || void 0 === n ? void 0 : n.to) ? (0, a.Z)("someoneElse") : (0, a.Z)("myself"), (0, i.ZP)("paypal-payment-option") && ((0, i.ZP)("paypal-payment-option").style.display = "none"), this.loadAdyen(), this.loadEventListener()
//                                 }))
//                             }, this.loadEventListener = () => {
//                                 var e, t, n, a, s;
//                                 null === (e = (0, i.ZP)("back-chckout")) || void 0 === e || e.addEventListener("click", this.backPreviousPopup), document.querySelectorAll('input[name="payment"][type="radio"]').forEach((e => {
//                                     e.addEventListener("change", (() => this.setPaymentMethod(e)))
//                                 })), document.querySelectorAll(".plan-options").forEach((e => {
//                                     e.addEventListener("click", (() => this.setPlan(e)))
//                                 })), null === (t = (0, i.ZP)("promocode-submit")) || void 0 === t || t.addEventListener("click", (() => this.applyPromoCode())), null === (n = (0, i.ZP)("promocode-input")) || void 0 === n || n.addEventListener("input", this.promoCodeOnInput), document.querySelectorAll(".seat-option").forEach((e => {
//                                     e.addEventListener("click", (() => this.selectSeats(e)))
//                                 })), document.querySelectorAll(".credit-option").forEach((e => {
//                                     e.addEventListener("click", (() => this.selectCredit(e)))
//                                 })), document.querySelectorAll("#billing-form input").forEach((e => {
//                                     e.addEventListener("keyup", (() => {
//                                         this.paymentData.billingAddress[e.id] = e.value, this.isReadyToPay()
//                                     }))
//                                 })), null === (a = (0, i.ZP)("country")) || void 0 === a || a.addEventListener("change", this.updateCountry), this.populateCountry(), null === (s = (0, i.ZP)("proceed-payment")) || void 0 === s || s.addEventListener("click", (() => this.proceedPayment()))
//                             }, this.selectCredit = e => {
//                                 document.querySelectorAll(".credit-option").forEach((t => {
//                                     t !== e && t.classList.remove("active")
//                                 })), e.classList.toggle("active"), e.classList.contains("active") && e.dataset.value ? this.genCredits = Number(e.dataset.value) : this.genCredits = 0, this.updatePrice()
//                             }, this.selectSeats = e => {
//                                 if (document.querySelectorAll(".seat-option").forEach((t => {
//                                         t !== e && t.classList.remove("active")
//                                     })), e.classList.toggle("active"), e.classList.contains("active"))
//                                     if (e.classList.contains("seat-option-custom")) {
//                                         const t = e.getElementsByTagName("input")[0];
//                                         "" === t.value ? this.extraSeats = 0 : this.extraSeats = Number(t.value)
//                                     } else e.dataset.value ? this.extraSeats = Number(e.dataset.value) : this.extraSeats = 0;
//                                 else this.extraSeats = 0;
//                                 this.updatePrice()
//                             }, this.populateCountry = async () => {
//                                 const {
//                                     data: e
//                                 } = await r.ox();
//                                 this.countryList = e;
//                                 const t = (0, i.ZP)("country");
//                                 for (const n in e.country) {
//                                     const a = (0, i.T)("option", {
//                                         value: e.country[n]
//                                     }, e.country[n]);
//                                     (null === d.a || void 0 === d.a ? void 0 : d.a.country) === n && (a.selected = !0, this.paymentData.billingAddress.country = e.country[n]), t.append(a)
//                                 }
//                                 this.updateCountry()
//                             }, this.updateCountry = () => {
//                                 const e = (0, i.ZP)("country").value,
//                                     t = Object.keys(this.countryList.country).find((t => this.countryList.country[t] === e));
//                                 this.paymentData.billingAddress.country = e, this.countryList.tax[t] ? (this.tax.status = !0, this.tax.percentage = this.countryList.tax[t]) : this.tax.status = !1, this.countryList.countryEU.some((e => e === t)) ? (this.currency = "EUR", this.currencySymbol = "€") : (this.currency = "USD", this.currencySymbol = "$"), document.querySelectorAll(".currency").forEach((e => e.innerHTML = this.currency)), document.querySelectorAll(".currency-symbol").forEach((e => e.innerHTML = this.currencySymbol)), this.updatePrice()
//                             }, this.applyPromoCode = async () => {
//                                 var e;
//                                 const t = (0, i.ZP)("promocode-submit");
//                                 if ("true" === t.dataset.applied) return void this.removePromoCode();
//                                 const n = (0, i.ZP)("promocode-input");
//                                 let a = (null === (e = this.checkoutOptions) || void 0 === e ? void 0 : e.code) ? this.checkoutOptions.code : n.value.toUpperCase().trim();
//                                 try {
//                                     const e = await r.gs(a, this.productName, this.splanId);
//                                     if (!e.status) throw new Error("Invalid promocode!");
//                                     this.appliedPromo = e.promo, n.readOnly = !0, t.innerText = "Remove", t.dataset.applied = "true", this.updatePrice()
//                                 } catch ({
//                                     response: s,
//                                     message: o
//                                 }) {
//                                     this.removePromoCode(), (0, i.ZP)("promocode-error").style.display = "block", setTimeout((() => {
//                                         (0, i.ZP)("promocode-error").style.display = "none"
//                                     }), 1500)
//                                 }
//                             }, this.removePromoCode = () => {
//                                 const e = (0, i.ZP)("promocode-submit"),
//                                     t = (0, i.ZP)("promocode-input");
//                                 e.innerText = "Apply", delete e.dataset.applied, this.appliedPromo = void 0, this.updatePrice(), t.readOnly = !1, t.value = ""
//                             }, this.promoCodeOnInput = e => {
//                                 const t = e.target;
//                                 t.value = t.value.toUpperCase()
//                             }, this.updatePrice = () => {
//                                 let e;
//                                 "subscription" === this.checkoutType ? e = this.selectedPlan.pricing.USD.amount : "giftcard" === this.checkoutType ? e = this.selectedGiftCard.amount : "seats" === this.checkoutType ? e = 0 : "template" === this.checkoutType ? e = 1 : "credits" === this.checkoutType && (e = 0);
//                                 let t = e,
//                                     n = 0,
//                                     s = 0,
//                                     r = 0;
//                                 if ("subscription" === this.checkoutType ? ((0, i.ZP)("summary-base-value").innerText = e.toFixed(2), (0, i.ZP)("summary-base-credits").innerText = (0, a.Z)("creditForAIGeneration", this.getCreditsByPlan()), this.freeTrial && ((0, i.ZP)("summary-base-credits-free-trial").innerText = (0, a.Z)("creditForAIGenerationDuringTrial", 250), (0, i.ZP)("summary-base-credits-free-trial").style.display = "list-item")) : "credits" === this.checkoutType && (t = e = this.getCreditsByPrice(this.genCredits), (0, i.ZP)("summary-credits-amount").innerText = (0, a.Z)("totalGenerativeCredits", this.genCredits.toFixed()), (0, i.ZP)("summary-credits-value").innerText = e.toFixed(2), (0, i.ZP)("summary-credits").classList.add("inc")), this.appliedPromo) {
//                                     const {
//                                         productCode: t,
//                                         productName: s,
//                                         percentage: r,
//                                         amount: o,
//                                         code: l
//                                     } = this.appliedPromo;
//                                     (0, i.ZP)("summary-promo-remarks").innerText = r ? (0, a.Z)("discountPercentageOffFirstPayingMonth").replace("{discountAmount}", `${r}%`) : (0, a.Z)("discountAmountOnlyFirstPayingMonth").replace("{discountAmount", o.toFixed(2));
//                                     s.includes(this.productName) && t.includes(this.splanId) && (r ? n = e * r / 100 : o && (n = o), (0, i.ZP)("summary-promo-value").innerText = `- ${n.toFixed(2)}`, (0, i.ZP)("summary-promo").classList.add("inc"))
//                                 } else(0, i.ZP)("summary-promo").classList.remove("inc");
//                                 if ("Pixlr Team" !== this.productName && "seats" !== this.checkoutType || !this.extraSeats)(0, i.ZP)("summary-seats").classList.remove("inc");
//                                 else {
//                                     const e = this.getSingleSeatPrice();
//                                     s = this.extraSeats * e, (0, i.ZP)("summary-seats-count").innerText = `x${this.extraSeats} seats`, (0, i.ZP)("summary-seats-value").innerText = s.toFixed(2), (0, i.ZP)("summary-seats").classList.add("inc")
//                                 }
//                                 if (this.tax.status ? (r = (e - n - this.balanceCredit + s) * (this.tax.percentage / 100), (0, i.ZP)("summary-tax-value").innerHTML = r.toFixed(2), (0, i.ZP)("summary-total-tax").style.display = "block", (0, i.ZP)("summary-tax").classList.add("inc")) : ((0, i.ZP)("summary-tax").classList.remove("inc"), (0, i.ZP)("summary-total-tax").style.display = "none"), t = e - n - this.balanceCredit + s + r, this.freeTrial) {
//                                     let e = t;
//                                     t = 0;
//                                     const n = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"],
//                                         s = new Date;
//                                     s.setDate(s.getDate() + 7);
//                                     const r = `${s.getDate()} ${n[s.getMonth()]} ${s.getFullYear()}`;
//                                     (0, i.ZP)("proceed-payment").innerText = (0, a.Z)("startTrial"), (0, i.ZP)("summary-trial-note").innerText = (0, a.Z)("cancelAnytimeOrAutoRenewalForAmount", r, `${this.currencySymbol}${e}`), (0, i.ZP)("summary-trial").classList.add("inc")
//                                 } else(0, i.ZP)("summary-trial").classList.remove("inc");
//                                 document.querySelectorAll(".total-price").forEach((e => e.innerHTML = t.toFixed(2)))
//                             }, this.setPaymentMethod = e => {
//                                 let t = e.value;
//                                 switch ("saved-card" === e.dataset.value && (t = "saved-card"), t) {
//                                     case "paypal":
//                                         this.selectedPayment = "paypal", (0, i.ZP)("wrapper-billing-option").style.display = "none", (0, i.ZP)("component-container").classList.add("blocked"), (0, i.ZP)("saved-cards").classList.add("blocked"), this.isReadyToPay();
//                                         break;
//                                     case "saved-card":
//                                         if (this.selectedPayment = "saved-card", this.selectedSavedCard = e.id, (0, i.ZP)("wrapper-billing-option").style.display = "inline-flex", (0, i.ZP)("component-container").classList.add("blocked"), (0, i.ZP)("saved-cards").classList.remove("blocked"), e.className.includes("selected")) return e.classList.remove("selected"), void this.setPaymentMethod((0, i.ZP)("adyen-radio-option"));
//                                         document.querySelectorAll(".saved-card-item").forEach((e => {
//                                             e.classList.remove("selected"), e.classList.add("blocked")
//                                         })), e.classList.add("selected"), e.classList.remove("blocked"), this.isReadyToPay();
//                                         break;
//                                     default:
//                                         this.selectedPayment = "credit", (0, i.ZP)("wrapper-billing-option").style.display = "inline-flex", (0, i.ZP)("component-container").classList.remove("blocked"), (0, i.ZP)("saved-cards").classList.remove("blocked"), this.isReadyToPay()
//                                 }
//                             }, this.setPlan = e => {
//                                 this.splanId = e.dataset.plan, this.selectedPlan = this.setPlanDetails(this.splanId), document.querySelector(".plan-options.selected").classList.remove("selected"), e.classList.add("selected"), this.updatePrice()
//                             }, this.setPlanDetails = e => this.subscriptionPlans.filter((t => t.code === e))[0], this.proceedPayment = async () => {
//                                 if ("paypal" === this.selectedPayment) return this.loadPaypal();
//                                 const e = (0, i.ZP)("proceed-payment");
//                                 if (e.disabled) return;
//                                 e.disabled = !0;
//                                 const t = `/checkout/payments/${this.checkoutType}`,
//                                     n = this.getCheckoutData();
//                                 try {
//                                     const e = await r.$f(t, "POST", n);
//                                     "subscription" === this.checkoutType && e.status && this.affiliate(e.data), this.paymentResult(e), e.status && ("web" === this.checkoutOptions.platform ? setTimeout((() => {
//                                         "seats" === this.checkoutType ? window.location.href = "/myaccount/?tab=team" : "giftcard" === this.checkoutType ? window.location.href = "/myaccount/?tab=redeem" : window.location.href = "/myaccount/?tab=subscription"
//                                     }), 1500) : setTimeout((() => {
//                                         var e;
//                                         null === (e = this.checkoutOptions.stage) || void 0 === e || e.unblock(), null == this || this.cleanUp()
//                                     }), 2500))
//                                 } catch (a) {
//                                     this.paymentResult({
//                                         status: !1,
//                                         message: a.message
//                                     })
//                                 }
//                             }, this.paymentResult = e => {
//                                 var t;
//                                 this.optionUI.style.display = "none", this.summaryUI.style.display = "none", null === (t = (0, i.ZP)("chckout-result")) || void 0 === t || t.remove(), !1 === e.status ? this.setContent((0, i.T)("div", {
//                                     id: "chckout-result"
//                                 }, (0, i.T)("img", {
//                                     src: "/images/icon/red-cross.png",
//                                     width: 100,
//                                     style: "margin-bottom: 20px"
//                                 }), (0, i.T)("h2", {
//                                     style: "margin-bottom: 10px"
//                                 }, (0, a.Z)("paymentFailed")), (0, i.T)("p", (0, a.Z)("paymentUnsuccessful")))) : e.data.processing ? (this.setContent((0, i.T)("div", {
//                                     id: "chckout-result"
//                                 }, (0, i.T)("img", {
//                                     src: "/images/myaccount/black-loading.gif",
//                                     width: 150
//                                 }), (0, i.T)("h2", {
//                                     style: "margin-bottom: 10px"
//                                 }, (0, a.Z)("pleaseCompleteYourPaymentAtPaypal")), (0, i.T)("p", {
//                                     style: "margin-bottom: 10px"
//                                 }, (0, a.Z)("pleaseDoNotRefreshOrCloseThisPageWhilePaymentIsProcessing")), (0, i.T)("p", (0, a.Z)("youWillAutomaticallyBeRedirectedToMyAccount")))), Object.assign(d.a, e.data.settings)) : (this.setContent((0, i.T)("div", {
//                                     id: "chckout-result"
//                                 }, (0, i.T)("img", {
//                                     src: "/images/icon/green-tick.png",
//                                     width: 100,
//                                     style: "margin-bottom: 20px"
//                                 }), (0, i.T)("h2", {
//                                     style: "margin-bottom: 10px"
//                                 }, (0, a.Z)("paymentSuccessful")), (0, i.T)("p", (0, a.Z)("youWillAutomaticallyBeRedirectedToMyAccount")))), Object.assign(d.a, e.data.settings))
//                             }, this.loadAdyen = async () => {
//                                 var e;
//                                 const [t] = await Promise.all([n.e(6600).then(n.bind(n, 4884)).then((e => e.default)), n.e(6600).then(n.bind(n, 697))]), {
//                                     paymentMethods: a,
//                                     paymentCards: o,
//                                     adyenClientKey: l,
//                                     proRatedSeats: d,
//                                     affiliate: c
//                                 } = await r.c0({
//                                     splan: "premium-monthly"
//                                 }), u = {
//                                     locale: "en_US",
//                                     environment: "pixlr.com" === window.location.hostname ? "live" : "test",
//                                     clientKey: l,
//                                     paymentMethodsResponse: a,
//                                     onChange: this.handleOnChange
//                                 };
//                                 (null == a ? void 0 : a.storedPaymentMethods) && o && (s.Uj(a.storedPaymentMethods, o), document.querySelectorAll(".saved-card-item").forEach((e => {
//                                     e.addEventListener("click", (() => {
//                                         this.setPaymentMethod(e)
//                                     }))
//                                 }))), console.log("check back here");
//                                 new t(u).create("card", {
//                                     hasHolderName: !0,
//                                     holderNameRequired: !0
//                                 }).mount("#component-container"), null === (e = (0, i.ZP)("chckout-loading")) || void 0 === e || e.remove()
//                             }, this.loadPaypal = async () => {
//                                 const e = "/paypal/" + ("subscription" === this.checkoutType ? "subscriptions" : "purchase"),
//                                     t = this.getCheckoutData();
//                                 try {
//                                     const n = await fetch(e, {
//                                             method: "POST",
//                                             headers: {
//                                                 "Content-Type": "application/json",
//                                                 Accept: "application/json"
//                                             },
//                                             body: JSON.stringify(t)
//                                         }),
//                                         a = await n.json();
//                                     if (a.status) {
//                                         const e = 800,
//                                             t = 650,
//                                             n = (screen.width - e) / 2,
//                                             s = (screen.height - t) / 4,
//                                             o = window.open(a.redirectUrl, "Paypal Checkout", `resizable=yes,width=800,height=650,top=${s},left=${n}`);
//                                         this.paymentResult({
//                                             status: !0,
//                                             data: {
//                                                 processing: !0
//                                             }
//                                         });
//                                         "success" === (await (0, c.n)((async () => {
//                                             try {
//                                                 const e = await r._Y(a.id, this.checkoutType);
//                                                 return Promise.resolve(e)
//                                             } catch (e) {
//                                                 return Promise.reject(e)
//                                             }
//                                         }), 500, 15e3)).status && ((0, i.ZP)("try-premium") && ((0, i.ZP)("try-premium").style.display = "none"), o.close(), this.paymentResult({
//                                             status: !0,
//                                             data: {}
//                                         }), setTimeout((() => {
//                                             var e, t;
//                                             null == this || this.cleanUp(), (null === (e = this.checkoutOptions) || void 0 === e ? void 0 : e.stage) && this.checkoutOptions.stage.unblock(), "web" === (null === (t = this.checkoutOptions) || void 0 === t ? void 0 : t.platform) && (window.location.href = "/myaccount/?tab=subscription")
//                                         }), 2500))
//                                     } else this.paymentResult({
//                                         status: !1,
//                                         message: ""
//                                     })
//                                 } catch (n) {
//                                     console.error(n), this.paymentResult({
//                                         status: !1,
//                                         message: ""
//                                     })
//                                 }
//                             }, this.handleOnChange = e => {
//                                 const {
//                                     data: {
//                                         paymentMethod: t
//                                     },
//                                     isValid: n
//                                 } = e;
//                                 this.encryptedCardData.isValid = n, this.encryptedCardData.paymentMethod = t, this.encryptedCardData.cardHolderName = document.getElementsByClassName("adyen-checkout__input--text")[0].value, this.isReadyToPay()
//                             }, this.requiredBillingInput = ["firstName", "lastName", "address", "city", "zipCode", "state"], this.isReadyToPay = () => {
//                                 const {
//                                     isValid: e,
//                                     paymentMethod: t
//                                 } = this.encryptedCardData, n = (0, i.ZP)("proceed-payment");
//                                 try {
//                                     if ("paypal" === this.selectedPayment && (n.disabled = !1), "credit" === this.selectedPayment) {
//                                         if (!e) throw !1;
//                                         if (!this.encryptedCardData.cardHolderName.length) throw !1
//                                     }
//                                     const t = Object.values(this.paymentData.billingAddress).filter((e => "" !== e)).length;
//                                     1 === t && (n.disabled = !1), 1 !== t && this.requiredBillingInput.forEach((e => {
//                                         if (!this.paymentData.billingAddress[e]) throw !1
//                                     })), n.disabled = !1
//                                 } catch (a) {
//                                     n.disabled = !0
//                                 }
//                             }, this.backPreviousPopup = () => {
//                                 if (this.cleanUp(), "premiumbounce" === this.checkoutOptions.bounceSource) new l.Z(this.checkoutOptions.bounceType, "premium")
//                             }, this.getCreditsByPrice = e => {
//                                 if (200 === e) return 1.99;
//                                 if (500 === e) return 3.99;
//                                 if (1e3 === e) return 5.99;
//                                 if (2e3 === e) return 7.99;
//                                 if (5e3 === e) return 14.99;
//                                 throw new Error("Invalid amount")
//                             }, this.getCreditsByPlan = () => "plus-monthly" === this.splanId ? 80 : "plus-yearly" === this.splanId ? 960 : "premium-monthly" === this.splanId ? 1e3 : "premium-yearly" === this.splanId ? 12e3 : "team-monthly" === this.splanId ? 1e3 : "team-yearly" === this.splanId ? 12e3 : void 0, this.getSingleSeatPrice = () => {
//                                 var e;
//                                 if ("seats" === this.checkoutType) return (null === (e = null === d.a || void 0 === d.a ? void 0 : d.a.subscriptionCode) || void 0 === e ? void 0 : e.includes("monthly")) ? 3.99 : 47.88;
//                                 if ("subscription" === this.checkoutType) return this.splanId.includes("monthly") ? 3.99 : 47.88;
//                                 throw new Error("Configuration error...")
//                             }, this.getCheckoutData = () => {
//                                 var e, t;
//                                 const n = {
//                                     checkoutMethod: "checkout",
//                                     billingAddress: null !== (t = null === (e = this.paymentData) || void 0 === e ? void 0 : e.billingAddress) && void 0 !== t ? t : {},
//                                     currency: this.currency,
//                                     promo: this.appliedPromo ? this.appliedPromo.code : "",
//                                     captchaToken: "!!"
//                                 };
//                                 return "subscription" === this.checkoutType ? (n.splan = this.splanId, n.freeTrial = this.freeTrial) : "template" === this.checkoutType ? n.templateId = this.templateId : "giftcard" === this.checkoutType ? (n.giftId = this.giftCardId, n.giftDetails = this.checkoutOptions.isAGift) : "credits" === this.checkoutType && (n.credits = this.genCredits), "credit" === this.selectedPayment ? n.paymentMethod = this.encryptedCardData.paymentMethod : "saved-card" === this.selectedPayment && this.selectedSavedCard && (n.paymentCard = this.selectedSavedCard), "Pixlr Team" !== this.productName && "seats" !== this.checkoutType || (n.seatsToAdd = this.extraSeats), n
//                             }, this.loadAwin = () => {
//                                 this.dialog.append((0, i.T)("script", {
//                                     src: "https://www.dwin1.com/65758.js",
//                                     type: "text/javascript",
//                                     defer: !0
//                                 }))
//                             }, this.affiliate = e => {
//                                 if (this.trackShareASale(e), e.awin) {
//                                     const {
//                                         params: n
//                                     } = e.awin;
//                                     if (document.body.append((0, i.T)("img", {
//                                             src: `https://www.awin1.com/sread.img?tt=ns&tv=2&merchant=65758&amount=${n.amount}&cr=${n.cr}&ref=${n.ref}&parts=DEFAULT:${n.saleAmount}&vc=${n.vc}&ch=${n.ch}&customeracquisition=${n.customeracquisition}`,
//                                             width: 0,
//                                             height: 0,
//                                             style: {
//                                                 border: "none"
//                                             }
//                                         })), void 0 !== t && void 0 !== t.Tracking) {
//                                         var t = {};
//                                         t.Tracking.Sale = {}, t.Tracking.Sale.amount = n.amount, t.Tracking.Sale.orderRef = n.ref, t.Tracking.Sale.parts = `DEFAULT:${n.amount}`, t.Tracking.Sale.voucher = n.vc, t.Tracking.Sale.currency = n.cr, t.Tracking.Sale.channel = n.ch, t.Tracking.Sale.customerAcquisition = n.customeracquisition, t.Tracking.run()
//                                     } else {
//                                         const e = (0, i.T)("script", {
//                                             type: "text/javascript"
//                                         });
//                                         e.innerHTML = `\n                    //<![CDATA[ /*** Do not change ***/\n                        var AWIN = {};\n                        AWIN.Tracking = {};\n                        AWIN.Tracking.Sale = {};\n                        /*** Set your transaction parameters ***/\n                        AWIN.Tracking.Sale.amount = "${n.amount}";\n                        AWIN.Tracking.Sale.orderRef = "${n.ref}";\n                        AWIN.Tracking.Sale.parts = "DEFAULT:${n.amount}";\n                        AWIN.Tracking.Sale.voucher = "${n.vc}";\n                        AWIN.Tracking.Sale.currency = "${n.cr}";\n                        AWIN.Tracking.Sale.channel = "${n.ch}";\n                        AWIN.Tracking.Sale.customerAcquisition = "${n.customeracquisition}";\n                    //]]>\n                `, document.body.append(e), this.loadAwin()
//                                     }
//                                 }
//                             }, this.trackShareASale = e => {
//                                 const {
//                                     merchantReference: t,
//                                     paidAmount: n,
//                                     currency: i,
//                                     sscid: a,
//                                     newCustomer: s = 0
//                                 } = e;
//                                 if (a) {
//                                     const e = document.createElement("img");
//                                     e.id = "_SHRSL_img_1", e.src = `https://www.shareasale.com/sale.cfm?tracking=${t}&amount=${n}&merchantID=94987&transtype=sale&sscidmode=6&sscid=${a}&currency=${i}&newcustomer=${s}`, e.style.width = "1", e.style.height = "1";
//                                     const r = document.createElement("script");
//                                     r.src = "https://www.dwin1.com/19038.js", r.type = "text/javascript", r.defer = !0, this.dialog.appendChild(e), this.dialog.appendChild(r)
//                                 }
//                             }, this.checkoutType = e, this.checkoutOptions = Object.assign(Object.assign({}, this.checkoutOptions), t), n.e(1477).then(n.bind(n, 8792)), this.dialog.id = "chckout", this.setContent(`\n            <div id="chckout-loading">${(0,a.Z)("pleaseWaitWhileCheckoutLoading")}</div>\n            <div id="chckout-options"></div>\n            <div id="chckout-summary"></div>\n        `), this.optionUI = (0, i.ZP)("chckout-options"), this.summaryUI = (0, i.ZP)("chckout-summary"), this.checkoutOptions.bounceSource && this.optionUI.append((0, i.T)("img", {
//                                 id: "back-chckout",
//                                 src: "/img/icon/arrow-left-black.svg"
//                             })), "subscription" === this.checkoutType) this.splanId = null !== (o = this.checkoutOptions.plan) && void 0 !== o ? o : "premium-monthly", this.splanId.includes("plus") ? this.productName = "Pixlr Plus" : this.splanId.includes("premium") ? this.productName = "Pixlr Premium" : this.splanId.includes("team") && (this.productName = "Pixlr Team"), this.freeTrial = "checkout" === this.checkoutOptions.checkoutMode && "Pixlr Premium" === this.productName && d.a.eligibleForTrail, Promise.all([r.o5(), r.Gr(this.splanId)]).then((([e, t]) => {
//                             var n;
//                             if (!e.status) throw new Error("Failed to get plan details");
//                             "upgrade" === this.checkoutOptions.checkoutMode && t.status && (this.balanceCredit = t.data.balanceCredit), this.subscriptionPlans = e.data, this.selectedPlan = this.setPlanDetails(this.splanId), this.optionUI.append(s.JI(this.splanId, this.productName, this.subscriptionPlans)), this.optionUI.append(s.FH()), this.optionUI.append(s.p6()), this.optionUI.append(s.vq()), this.summaryUI.append(s.Sp(this.checkoutType, this.productName)), "Pixlr Team" === this.productName && this.optionUI.append(s.rx()), "upgrade" !== this.checkoutOptions.checkoutMode || t.status ? (("checkout" === this.checkoutOptions.checkoutMode && "Pixlr Plus" === this.productName || "upgrade" === this.checkoutOptions.checkoutMode && "premium-yearly" !== this.splanId) && (null === (n = (0, i.ZP)("wrapper-promo-option")) || void 0 === n || n.remove()), (0, i.ZP)("paypal-payment-option") && "Pixlr Team" === this.productName && ((0, i.ZP)("paypal-payment-option").style.display = "none"), this.checkoutOptions.code && ((0, i.ZP)("promocode-input").value = this.checkoutOptions.code, this.applyPromoCode(), this.checkoutOptions.code = ""), this.loadAdyen(), this.loadEventListener()) : this.paymentResult({
//                                 status: !1,
//                                 message: ""
//                             })
//                         }));
//                         else if ("template" === this.checkoutType) {
//                             if (this.templateId = null !== (p = null === (m = null === (h = null === (u = this.checkoutOptions.stage) || void 0 === u ? void 0 : u.fresco) || void 0 === h ? void 0 : h.templateMeta) || void 0 === m ? void 0 : m.templateId) && void 0 !== p ? p : "", !this.templateId) throw new Error("Missing template details!");
//                             this.loadTemplateUI()
//                         } else if ("giftcard" === this.checkoutType) {
//                             if (this.giftCardId = this.checkoutOptions.giftcard, !this.giftCardId) throw new Error("Missing giftcard details!");
//                             this.loadGiftCardUI()
//                         } else "seats" === this.checkoutType ? (this.loadSeatsUI(), this.selectSeats(document.querySelector(".seat-option"))) : "credits" === this.checkoutType && (this.loadCreditsUI(), this.selectCredit(document.querySelector(".credit-option")))
//                     }
//                 }
//             },
//             9344: (e, t, n) => {
//                 "use strict";
//                 async function i(e, t = 5e3, n = 3e4) {
//                     const i = (new Date).getTime() + n,
//                         a = (n, s) => {
//                             Promise.resolve(e()).then((e => {
//                                 console.log(e);
//                                 const r = (new Date).getTime();
//                                 "success" === e.status ? n(e) : r < i || "pending" === e.status ? setTimeout(a, t, n, s) : s(new Error("AsyncPoller: reached timeout"))
//                             })).catch((e => {
//                                 s(e)
//                             }))
//                         };
//                     return new Promise(a)
//                 }
//                 n.d(t, {
//                     n: () => i
//                 })
//             },
//             528: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     FH: () => l,
//                     JI: () => r,
//                     Sp: () => m,
//                     Uj: () => d,
//                     p6: () => c,
//                     rx: () => u,
//                     vq: () => o,
//                     yL: () => h
//                 });
//                 var i = n(3947),
//                     a = n(6548),
//                     s = n(7666);
//                 const r = (e, t, n) => {
//                         const [s, r] = function(e, t) {
//                             let n, i;
//                             return t.forEach((t => {
//                                 t.product === e && (1 === t.monthDuration ? n = t : 12 === t.monthDuration && (i = t))
//                             })), [{
//                                 code: n.code,
//                                 monthlyPrice: n.pricing.USD.amount.toFixed(2),
//                                 yearlyPrice: (12 * n.pricing.USD.amount).toFixed(2)
//                             }, {
//                                 code: i.code,
//                                 monthlyPrice: String(i.pricing.USD.displayPriceInMonths),
//                                 yearlyPrice: i.pricing.USD.amount.toFixed(2)
//                             }]
//                         }(t, n);
//                         return (0, i.T)("details", {
//                             id: "chckout-planSelection",
//                             className: "kort"
//                         }, (0, i.T)("summary", {
//                             style: "display: flex; align-items: center;"
//                         }, (0, i.T)("img", {
//                             src: `/images/checkout/icon/${t}.svg`,
//                             width: 24,
//                             height: 24,
//                             style: "margin-right: 8px;"
//                         }), (0, i.T)("span", {
//                             className: "fs-16 fw-7"
//                         }, t), (0, i.T)("img", {
//                             src: "/images/icon/up.svg",
//                             style: "margin-left: auto"
//                         })), (0, i.T)("div", {
//                             style: "display: flex; flex-direction: column; row-gap: 8px"
//                         }, (0, i.T)("div", {
//                             className: "plan-options " + (e === s.code ? "selected" : ""),
//                             dataset: {
//                                 plan: s.code
//                             }
//                         }, (0, i.T)("p", {
//                             className: "fs-14 fw-7"
//                         }, (0, a.Z)("payMonthly")), (0, i.T)("p", (0, i.T)("span", {
//                             className: "fs-14 fw-7",
//                             style: "margin-right: 5px"
//                         }, `${s.monthlyPrice} /month`), (0, i.T)("span", {
//                             className: "fs-12 fw-4"
//                         }, `. ${s.yearlyPrice} /year`))), (0, i.T)("div", {
//                             className: "plan-options " + (e === r.code ? "selected" : ""),
//                             dataset: {
//                                 plan: r.code
//                             }
//                         }, (0, i.T)("p", {
//                             className: "fs-14 fw-7"
//                         }, (0, a.Z)("payYearly")), (0, i.T)("p", (0, i.T)("span", {
//                             className: "fs-14 fw-7",
//                             style: "margin-right: 5px"
//                         }, `${r.monthlyPrice} /month`), (0, i.T)("span", {
//                             className: "fs-12 fw-4"
//                         }, `. ${r.yearlyPrice} /year`))), (0, i.T)("span", {
//                             className: "fs-12 fw-4",
//                             style: "line-height: 18px"
//                         }, (0, a.Z)("youCanCancelAuto"))))
//                     },
//                     o = () => (0, i.T)("details", {
//                         id: "wrapper-promo-option",
//                         className: "kort"
//                     }, (0, i.T)("summary", {
//                         style: "display: flex; align-items: center;"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/percent.svg",
//                         width: 24,
//                         height: 24,
//                         style: "margin-right: 8px;"
//                     }), (0, i.T)("span", {
//                         className: "fs-16 fw-7"
//                     }, (0, a.Z)("promoCode")), (0, i.T)("img", {
//                         src: "/images/icon/up.svg",
//                         style: "margin-left: auto"
//                     })), (0, i.T)("div", (0, i.T)("div", {
//                         id: "promo-section"
//                     }, (0, i.T)("input", {
//                         id: "promocode-input",
//                         type: "text",
//                         placeholder: (0, a.Z)("enterPromoCode")
//                     }), (0, i.T)("span", {
//                         id: "promocode-submit",
//                         className: "apply"
//                     }, (0, a.Z)("apply"))), (0, i.T)("p", {
//                         id: "promocode-error"
//                     }, (0, a.Z)("invalidPromoCode")), (0, i.T)("p", {
//                         className: "text-small",
//                         style: "margin-top: 8px"
//                     }, (0, a.Z)("promoCodeValidOneTimeOnly")))),
//                     l = () => (0, i.T)("details", {
//                         open: !0,
//                         className: "kort"
//                     }, (0, i.T)("summary", {
//                         style: "display: flex; align-items: center;"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/card.svg",
//                         width: 24,
//                         height: 24,
//                         style: "margin-right: 8px;"
//                     }), (0, i.T)("span", {
//                         className: "fs-16 fw-7"
//                     }, (0, a.Z)("paymentMethod")), (0, i.T)("img", {
//                         src: "/images/icon/up.svg",
//                         style: "margin-left: auto"
//                     })), (0, i.T)("div", {
//                         style: "display: flex; flex-direction: column; row-gap: 18px;"
//                     }, (0, i.T)("div", {
//                         id: "saved-cards"
//                     }), (0, i.T)("div", {
//                         id: "payment-option-radios"
//                     }, (0, i.T)("div", {
//                         className: "payment-options"
//                     }, (0, i.T)("input", {
//                         id: "adyen-radio-option",
//                         type: "radio",
//                         name: "payment",
//                         value: "adyen",
//                         checked: !0
//                     }), (0, i.T)("label", {
//                         htmlFor: "adyen-radio-option",
//                         className: "fs-12 fw-7"
//                     }, "Credit Card")), (0, i.T)("div", {
//                         id: "paypal-payment-option",
//                         className: "payment-options"
//                     }, (0, i.T)("input", {
//                         id: "paypal-radio-option",
//                         type: "radio",
//                         name: "payment",
//                         value: "paypal"
//                     }), (0, i.T)("label", {
//                         htmlFor: "paypal-radio-option",
//                         className: "fs-12 fw-7"
//                     }, "Paypal"))), (0, i.T)("div", {
//                         id: "component-container"
//                     }))),
//                     d = (e, t) => {
//                         const n = (0, i.ZP)("saved-cards");
//                         return n.innerHTML = "", e.forEach((e => {
//                             if (!t.includes(e.id)) return;
//                             const a = (0, i.T)("div", {
//                                 id: e.id,
//                                 className: "saved-card-item",
//                                 dataset: {
//                                     value: "saved-card"
//                                 }
//                             }, (0, i.T)("object", {
//                                 data: `/images/checkout/${e.brand}.png`,
//                                 type: "image/png",
//                                 style: "margin-left: auto"
//                             }, (0, i.T)("img", {
//                                 src: `https://checkoutshopper-live.adyen.com/checkoutshopper/images/logos/${e.brand}.svg`,
//                                 style: "margin-left: auto"
//                             })), (0, i.T)("div", {
//                                 style: "display: flex; justify-content: space-between"
//                             }, (0, i.T)("span", "****"), (0, i.T)("span", "****"), (0, i.T)("span", "****"), (0, i.T)("span", `${e.lastFour}`)), (0, i.T)("div", (0, i.T)("span", {
//                                 style: "font-size: 8px; margin-right: 8px"
//                             }, "MM/YY"), (0, i.T)("span", {
//                                 style: "font-size: 12px"
//                             }, `${e.expiryMonth}/${e.expiryYear.substring(4,2)}`)));
//                             t[0] === e.id ? n.prepend(a) : n.append(a)
//                         })), n
//                     },
//                     c = () => (0, i.T)("details", {
//                         id: "wrapper-billing-option",
//                         className: "kort"
//                     }, (0, i.T)("summary", {
//                         style: "display: flex; align-items: center;"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/card.svg",
//                         width: 24,
//                         height: 24,
//                         style: "margin-right: 8px;"
//                     }), (0, i.T)("span", {
//                         className: "fs-16 fw-7"
//                     }, (0, a.Z)("optionalBillingInformation")), (0, i.T)("img", {
//                         src: "/images/icon/up.svg",
//                         style: "margin-left: auto"
//                     })), (0, i.T)("div", {
//                         id: "billing-form",
//                         className: "w-100"
//                     }, (0, i.T)("form", {}, (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-firstName", 50), s.By("checkout-lastName", 50)), (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-companyName", 100, "", "checkout-optional")), (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-vatNumber", 100, "", "checkout-optional")), (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-address", 100)), (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-city", 50), s.By("checkout-zipCode", 50)), (0, i.T)("div", {
//                         className: "flex"
//                     }, s.By("checkout-state", 50), s.Cj("checkout-country", 50))))),
//                     u = () => (0, i.T)("details", {
//                         id: "wrapper-seat-option",
//                         className: "kort"
//                     }, (0, i.T)("summary", {
//                         style: "display: flex; align-items: center;"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/seats.svg",
//                         width: 24,
//                         height: 24,
//                         style: "margin-right: 8px;"
//                     }), (0, i.T)("span", {
//                         className: "fs-16 fw-7"
//                     }, (0, a.Z)("addMoreSeats")), (0, i.T)("img", {
//                         src: "/images/icon/up.svg",
//                         style: "margin-left: auto"
//                     })), (0, i.T)("div", (0, i.T)("div", {
//                         className: "seat-select"
//                     }, (0, i.T)("span", {
//                         className: "seat-option",
//                         dataset: {
//                             value: "5"
//                         }
//                     }, "5 seats"), (0, i.T)("span", {
//                         className: "seat-option",
//                         dataset: {
//                             value: "10"
//                         }
//                     }, "10 seats"), (0, i.T)("span", {
//                         className: "seat-option",
//                         dataset: {
//                             value: "20"
//                         }
//                     }, "20 seats"), (0, i.T)("span", {
//                         className: "seat-option seat-option-custom"
//                     }, (0, i.T)("input", {
//                         type: "number",
//                         placeholder: "Custom",
//                         min: "1",
//                         max: "100"
//                     }))))),
//                     h = () => (0, i.T)("details", {
//                         open: !0,
//                         id: "wrapper-credit-option",
//                         className: "kort"
//                     }, (0, i.T)("summary", {
//                         style: "display: flex; align-items: center;"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/credits.svg",
//                         width: 24,
//                         height: 24,
//                         style: "margin-right: 8px;"
//                     }), (0, i.T)("span", {
//                         className: "fs-16 fw-7"
//                     }, (0, a.Z)("generativeCredits")), (0, i.T)("img", {
//                         src: "/images/icon/up.svg",
//                         style: "margin-left: auto"
//                     })), (0, i.T)("div", {
//                         style: "display: flex; flex-direction: column; row-gap: 16px"
//                     }, (0, i.T)("h6", (0, a.Z)("chooseAmount")), (0, i.T)("div", {
//                         className: "credit-select",
//                         style: "display: flex; flex-wrap: wrap; column-gap: 10px; row-gap: 8px"
//                     }, (0, i.T)("span", {
//                         className: "credit-option",
//                         dataset: {
//                             value: "200"
//                         }
//                     }, "200"), (0, i.T)("span", {
//                         className: "credit-option",
//                         dataset: {
//                             value: "500"
//                         }
//                     }, "500"), (0, i.T)("span", {
//                         className: "credit-option",
//                         dataset: {
//                             value: "1000"
//                         }
//                     }, "1000"), (0, i.T)("span", {
//                         className: "credit-option",
//                         dataset: {
//                             value: "2000"
//                         }
//                     }, "2000"), (0, i.T)("span", {
//                         className: "credit-option",
//                         dataset: {
//                             value: "5000"
//                         }
//                     }, "5000")))),
//                     m = (e, t) => (0, i.T)("div", {
//                         id: "summary-wrapper"
//                     }, (0, i.T)("h3", (0, a.Z)("orderSummary")), "giftcard" === e ? (0, i.T)("div", {
//                         style: "display: flex; column-gap: 8px"
//                     }, (0, i.T)("img", {
//                         src: "/images/checkout/icon/gift-card.png",
//                         height: 45
//                     }), (0, i.T)("div", (0, i.T)("h4", (0, a.Z)("pixlrGiftCard")), (0, i.T)("h6", (0, i.T)("span", {
//                         className: "bold"
//                     }, (0, a.Z)("purchaseFor")), (0, i.T)("span", {
//                         id: "summary-giftcard-to"
//                     })))) : "", "credits" === e ? (0, i.T)("div", (0, i.T)("h4", (0, a.Z)("generativeCredits")), (0, i.T)("h6", (0, a.Z)("useCreditToGenerateAIAcrossTools"))) : "", "template" === e ? (0, i.T)("div", {
//                         style: "display: flex; column-gap: 8px"
//                     }, (0, i.T)("div", {
//                         id: "summary-template-preview"
//                     }), (0, i.T)("div", (0, i.T)("h4", "Pixlr Template"), (0, i.T)("h6", {
//                         id: "summary-template-name"
//                     }))) : "", (0, i.T)("hr"), (0, i.T)("div", {
//                         style: "display: flex; flex-direction: column; row-gap: 14px"
//                     }, "subscription" === e ? (0, i.T)("div", {
//                         id: "summary-base",
//                         className: "summary-group inc"
//                     }, (0, i.T)("div", {
//                         className: "desc"
//                     }, (0, i.T)("h5", `${t.replace("Pixlr ","")} Subscription`), "Pixlr Plus" === t ? (0, i.T)("ul", {
//                         className: "top-5"
//                     }, (0, i.T)("li", (0, a.Z)("addFreeUnlimitedSave")), (0, i.T)("li", {
//                         id: "summary-base-credits"
//                     })) : "Pixlr Premium" === t ? (0, i.T)("ul", {
//                         className: "top-5"
//                     }, (0, i.T)("li", (0, a.Z)("fullAccesstoPixlrAppAndAsset")), (0, i.T)("li", {
//                         id: "summary-base-credits"
//                     }), (0, i.T)("li", {
//                         id: "summary-base-credits-free-trial",
//                         style: "display: none"
//                     })) : "Pixlr Team" === t ? (0, i.T)("ul", {
//                         className: "top-5"
//                     }, (0, i.T)("li", (0, a.Z)("manageYourTeamMembersAndCollaborate")), (0, i.T)("li", {
//                         id: "summary-base-credits"
//                     }), (0, i.T)("li", (0, a.Z)("fiveExtraSeatsIncluded"))) : ""), (0, i.T)("span", {
//                         id: "summary-base-value",
//                         className: "bold"
//                     }, "9.99")) : "", "giftcard" === e ? (0, i.T)("div", {
//                         id: "summary-giftcard",
//                         className: "summary-group"
//                     }, (0, i.T)("h5", (0, a.Z)("price")), (0, i.T)("span", {
//                         id: "summary-giftcard-value",
//                         className: "bold"
//                     }, "x")) : "", "template" === e ? (0, i.T)("div", {
//                         id: "summary-template",
//                         className: "summary-group"
//                     }, (0, i.T)("h5", (0, a.Z)("price")), (0, i.T)("span", {
//                         id: "summary-template-value",
//                         className: "bold"
//                     }, "x")) : "", "credits" === e ? (0, i.T)("div", {
//                         id: "summary-credits",
//                         className: "summary-group"
//                     }, (0, i.T)("h5", (0, i.T)("span", {
//                         id: "summary-credits-amount"
//                     })), (0, i.T)("span", {
//                         id: "summary-credits-value",
//                         className: "bold"
//                     }, "x")) : "", (0, i.T)("div", {
//                         id: "summary-balance",
//                         className: "summary-group"
//                     }, (0, i.T)("h5", (0, a.Z)("balanceCreditUpgrade")), (0, i.T)("span", {
//                         id: "summary-balance-value",
//                         className: "bold"
//                     }, "x")), (0, i.T)("div", {
//                         id: "summary-promo",
//                         className: "summary-group"
//                     }, (0, i.T)("div", {
//                         className: "desc"
//                     }, (0, i.T)("h5", (0, a.Z)("promoCode")), (0, i.T)("span", {
//                         id: "summary-promo-remarks",
//                         className: "color-g25 fw-4 fs-14"
//                     }, "x")), (0, i.T)("span", {
//                         id: "summary-promo-value"
//                     }, "x")), (0, i.T)("div", {
//                         id: "summary-seats",
//                         className: "summary-group"
//                     }, (0, i.T)("div", {
//                         className: "desc"
//                     }, (0, i.T)("h5", (0, a.Z)("additionalSeats")), (0, i.T)("span", {
//                         id: "summary-seats-count",
//                         className: "color-g25 fw-4 fs-14"
//                     }, "x5 seats")), (0, i.T)("span", {
//                         id: "summary-seats-value"
//                     }, "x")), (0, i.T)("div", {
//                         id: "summary-tax",
//                         className: "summary-group"
//                     }, (0, i.T)("h5", "GST 8%"), (0, i.T)("span", {
//                         id: "summary-tax-value"
//                     }, "x")), (0, i.T)("div", {
//                         id: "summary-trial",
//                         className: "summary-group"
//                     }, (0, i.T)("div", {
//                         className: "desc"
//                     }, (0, i.T)("h5", (0, a.Z)("discount")), (0, i.T)("span", {
//                         id: "summary-trial-note",
//                         className: "color-g25 fw-4 fs-14"
//                     })), (0, i.T)("span", "100%"))), (0, i.T)("hr"), (0, i.T)("div", {
//                         id: "summary-total",
//                         className: "summary-group inc"
//                     }, (0, i.T)("div", {
//                         className: "desc"
//                     }, (0, i.T)("h5", (0, a.Z)("checkout-totalDue"), " (", (0, i.T)("span", {
//                         className: "currency"
//                     }, "USD"), ")"), (0, i.T)("span", {
//                         id: "summary-total-tax",
//                         className: "color-g25 fw-4 fs-14",
//                         style: "display: none;"
//                     }, "(incl. GST)")), (0, i.T)("span", {
//                         className: "total-price bold"
//                     }, "x")), (0, i.T)("button", {
//                         id: "proceed-payment",
//                         disabled: !0
//                     }, (0, a.Z)("payNow")))
//             },
//             3947: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     $k: () => o,
//                     FN: () => u,
//                     Rg: () => c,
//                     T: () => r,
//                     ZP: () => s,
//                     b0: () => h,
//                     d8: () => d,
//                     pR: () => l
//                 });
//                 var i = n(6548),
//                     a = n(3673);

//                 function s(e) {
//                     return document.getElementById(e)
//                 }

//                 function r(e, ...t) {
//                     const n = document.createElement(e);
//                     if (0 === t.length) return n;
//                     const i = t[0],
//                         a = !("string" == typeof i || i instanceof HTMLElement),
//                         s = a ? t.slice(1) : t;
//                     if (a && i) {
//                         if (i.style) {
//                             const e = i.style;
//                             delete i.style, "string" == typeof e ? n.setAttribute("style", e) : Object.assign(n.style, e)
//                         }
//                         if (i.dataset) {
//                             const e = i.dataset;
//                             delete i.dataset, "object" == typeof e && Object.entries(e).map((([e, t]) => n.setAttribute(`data-${e}`, t)))
//                         }
//                         i.tooltip && n.setAttribute("tooltip", i.tooltip), i.flow && n.setAttribute("flow", i.flow), Object.assign(n, i)
//                     }
//                     return n.append(...s.filter((e => null != e))), n
//                 }

//                 function o() {
//                     return "loading" !== document.readyState ? Promise.resolve() : new Promise(((e, t) => {
//                         document.addEventListener("DOMContentLoaded", (() => {
//                             e()
//                         }))
//                     }))
//                 }

//                 function l(e, t) {
//                     const n = document.cookie.split(";").map((e => e.trim().split("="))).find((([t, n]) => t === e));
//                     return n ? n[1] : t
//                 }

//                 function d(e, t, n) {
//                     let i = `${encodeURIComponent(e)}=${encodeURIComponent(t)}`;
//                     n.path && (i += `; path=${n.path}`), n.domain && (i += `; domain=${n.domain}`), n.expires && (i += `; expires=${n.expires.toUTCString()}`), n.sameSite && (i += `; samesite=${n.sameSite}`), document.cookie = i
//                 }

//                 function c(e, t, n, i) {
//                     e.style.touchAction = "none";
//                     const s = e => {
//                             e.stopPropagation(), e.preventDefault(), n && n(new a.Z(e.clientX, e.clientY))
//                         },
//                         r = t => {
//                             t.stopPropagation(), t.preventDefault(), i && i(new a.Z(t.clientX, t.clientY)), e.removeEventListener("pointermove", s, !0), e.removeEventListener("pointerup", r, !0), e.releasePointerCapture(t.pointerId)
//                         };
//                     e.addEventListener("pointerdown", (n => {
//                         n.preventDefault(), n.button > 0 || (e.addEventListener("pointermove", s, !0), e.addEventListener("pointerup", r, !0), e.setPointerCapture(n.pointerId), t && t(new a.Z(n.clientX, n.clientY)))
//                     }), !0)
//                 }
//                 const u = (e = "success", t = "common-ServerError", n = 3, a) => {
//                     let o = t ? (0, i.Z)(t) : "danger" == e ? (0, i.Z)("common-ServerError") : (0, i.Z)("common-success");
//                     a && (o = o.replace("{email}", a)), document.body.append(r("div", {
//                         id: "toast-box",
//                         className: `toast ${e}`
//                     }, r("span", r("img", {
//                         src: `/images/icon/${e}_alert.svg`
//                     })), r("span", {
//                         className: "toast-text"
//                     }, o), r("span", {
//                         className: `toast-close ${e}`,
//                         style: "line-height: 0;",
//                         onclick: () => {
//                             var e;
//                             return null === (e = s("toast-box")) || void 0 === e ? void 0 : e.remove()
//                         }
//                     }, r("img", {
//                         style: "width: 14px;",
//                         src: "/images/icon/close.png"
//                     })))), setTimeout((() => {
//                         var e;
//                         return null === (e = s("toast-box")) || void 0 === e ? void 0 : e.remove()
//                     }), 1e3 * n)
//                 };

//                 function h(e, t, n, a = !1) {
//                     let s = !1;
//                     if (t || (t = e.value), "email" === n)(t = t.trim()).match(/^[^\s@]+@[^\s@]+\.[^\s@]+$/) || a && "" === t ? (e.classList.remove("invalid"), e.nextElementSibling.style.display = "none") : (s = !0, e.classList.add("invalid"), e.nextElementSibling.style.display = "block");
//                     else if ("password" === n) {
//                         const n = e.nextElementSibling;
//                         t.length < 8 || t.length > 50 ? (s = !0, e.classList.add("invalid"), n.style.display = "block", t.length < 8 ? n.innerHTML = (0, i.Z)("common-MinPassword") : t.length > 50 && (n.innerHTML = (0, i.Z)("common-MaxPassword"))) : t.indexOf("'") > -1 || t.indexOf('"') > -1 ? (s = !0, e.classList.add("invalid"), n.style.display = "block", n.innerHTML = (0, i.Z)("common-InvalidSpecialChar")) : (e.classList.remove("invalid"), n.style.display = "none")
//                     } else if ("code" === n) {
//                         const n = e.nextElementSibling;
//                         6 !== t.length ? (e.classList.add("invalid"), n.style.display = "block", s = !0) : (e.classList.remove("invalid"), n.style.display = "none"), setTimeout((() => {
//                             e.classList.remove("invalid"), n.style.display = "none"
//                         }), 3e3)
//                     }
//                     return !s
//                 }
//             },
//             5574: (e, t, n) => {
//                 "use strict";
//                 async function i(e, t) {
//                     return new Promise(((n, i) => {
//                         var a = new XMLHttpRequest,
//                             s = !1;
//                         a.responseType = "arraybuffer", a.withCredentials = !1, a.open("GET", e, !0), a.onprogress = function(e) {
//                             e.lengthComputable ? t && t(e.loaded / e.total * 100) : s || (s = !0, t && t(-1))
//                         }, a.onloadend = function() {
//                             a.status.toString().match(/^2/) ? (s || t && t(100), n(new Blob([this.response], {
//                                 type: a.getResponseHeader("Content-Type")
//                             }))) : i(a)
//                         }, a.send()
//                     }))
//                 }

//                 function a(e) {
//                     return new Promise(((t, n) => {
//                         const i = new FileReader;
//                         i.onerror = () => n(i.error), i.onloadend = () => t(i.result), i.readAsArrayBuffer(e)
//                     }))
//                 }

//                 function s(e) {
//                     return new Promise((async (t, n) => {
//                         const i = URL.createObjectURL(e);
//                         let a = new Image;
//                         a.crossOrigin = "Anonymous", a.onload = () => {
//                             URL.revokeObjectURL(i), a.width + a.height == 0 ? n("Could not open file!") : t(a)
//                         }, a.onerror = function() {
//                             URL.revokeObjectURL(i), n("Could not open file!")
//                         }, a.name = e instanceof File ? e.name : "", a.src = i
//                     }))
//                 }
//                 n.d(t, {
//                     c6: () => i,
//                     h0: () => a,
//                     s4: () => s
//                 })
//             },
//             6548: (e, t, n) => {
//                 "use strict";

//                 function i(e, ...t) {
//                     if (!I18N_STRINGS) return e;
//                     let n = I18N_STRINGS[e];
//                     if (n || (console.log("No translation for key", e), n = e), !t || 0 === t.length) return n;
//                     let i = 0;
//                     return n.replace(/%(\d+\$)?(s|d|f){1}/gm, ((e, ...n) => {
//                         const [a, s] = n, r = a ? parseInt(a.slice(0, -1), 10) : i++;
//                         switch (s) {
//                             case "d":
//                                 const n = t[r];
//                                 return "number" != typeof n ? "NaN" : n.toFixed(0);
//                             case "s":
//                                 const i = t[r];
//                                 return i ? i.toString() : e;
//                             default:
//                                 return e
//                         }
//                     }))
//                 }
//                 n.d(t, {
//                     Z: () => i
//                 })
//             },
//             1726: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => a
//                 });
//                 var i = n(3673);
//                 class a {
//                     constructor(e = 1, t = 0, n = 0, i = 1, s = 0, r = 0) {
//                         this.a = e, this.b = t, this.c = n, this.d = i, this.e = s, this.f = r, this.reset = () => {
//                             this.a = this.d = 1, this.b = this.c = this.e = this.f = 0
//                         }, this.translate = e => {
//                             this.transform(1, 0, 0, 1, e.x, e.y)
//                         }, this.rotate = e => {
//                             let t = Math.cos(e),
//                                 n = Math.sin(e);
//                             this.transform(t, n, -n, t, 0, 0)
//                         }, this.rotateDegree = function(e) {
//                             this.rotate(.017453292519943295 * e)
//                         }, this.transform = (e, t, n, i, a, s) => {
//                             const r = this.a,
//                                 o = this.b,
//                                 l = this.c,
//                                 d = this.d,
//                                 c = this.e,
//                                 u = this.f;
//                             this.a = r * e + l * t, this.b = o * e + d * t, this.c = r * n + l * i, this.d = o * n + d * i, this.e = r * a + l * s + c, this.f = o * a + d * s + u
//                         }, this.invert = () => {
//                             let e = this.a,
//                                 t = this.b,
//                                 n = this.c,
//                                 i = this.d,
//                                 s = this.e,
//                                 r = this.f,
//                                 o = (new a, e * i - t * n);
//                             this.a = i / o, this.b = -t / o, this.c = -n / o, this.d = e / o, this.e = (n * r - i * s) / o, this.f = -(e * r - t * s) / o
//                         }
//                     }
//                     transformPoint(e) {
//                         return new i.Z(e.x * this.a + e.y * this.c + this.e, e.x * this.b + e.y * this.d + this.f)
//                     }
//                 }
//             },
//             3673: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => i
//                 });
//                 class i {
//                     constructor(e = 0, t = 0) {
//                         this.x = e, this.y = t
//                     }
//                     distanceTo(e) {
//                         return Math.sqrt(Math.pow(this.x - e.x, 2) + Math.pow(this.y - e.y, 2))
//                     }
//                     angleTo(e) {
//                         let t = -(this.x - e.x),
//                             n = this.y - e.y,
//                             i = 360 - Math.atan2(n, t) * (180 / Math.PI);
//                         return i < 0 && (i += 360), i > 360 && (i -= 360), i
//                     }
//                     dot(e) {
//                         return this.x * e.x + this.y * e.y
//                     }
//                     lengthSQ() {
//                         return this.dot(this)
//                     }
//                     length() {
//                         return Math.sqrt(this.lengthSQ())
//                     }
//                     hypot2() {
//                         return this.dot(this)
//                     }
//                     hypot() {
//                         return Math.hypot(this.x, this.y)
//                     }
//                     add(e) {
//                         return e ? e instanceof i ? new i(this.x + e.x, this.y + e.y) : new i(this.x + e, this.y + e) : this
//                     }
//                     neg(e) {
//                         return e instanceof i ? new i(this.x - e.x, this.y - e.y) : new i(this.x - e, this.y - e)
//                     }
//                     mul(e) {
//                         return e instanceof i ? new i(this.x * e.x, this.y * e.y) : new i(this.x * e, this.y * e)
//                     }
//                     rotateAround(e, t) {
//                         let n = Math.sin(t),
//                             a = Math.cos(t),
//                             s = this.x - e.x,
//                             r = this.y - e.y,
//                             o = s * n + r * a;
//                         return new i(s * a - r * n + e.x, o + e.y)
//                     }
//                     equalTo(e) {
//                         return this.x === e.x && this.y === e.y
//                     }
//                     clone() {
//                         return new i(this.x, this.y)
//                     }
//                 }
//             },
//             6817: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => r
//                 });
//                 var i = n(1726),
//                     a = n(3673),
//                     s = n(9872);
//                 class r {
//                     constructor(e = 0, t = 0, n = 0, i = 0, a = 0) {
//                         this.x = e, this.y = t, this.width = n, this.height = i, this.rotation = a
//                     }
//                     left() {
//                         return this.x
//                     }
//                     right() {
//                         return this.x + this.width
//                     }
//                     top() {
//                         return this.y
//                     }
//                     bottom() {
//                         return this.y + this.height
//                     }
//                     size() {
//                         return new s.Z(this.width, this.height)
//                     }
//                     center() {
//                         return new a.Z(this.x + this.width / 2, this.y + this.height / 2)
//                     }
//                     topLeft() {
//                         return new a.Z(this.x, this.y)
//                     }
//                     topRight() {
//                         return new a.Z(this.right(), this.y)
//                     }
//                     bottomLeft() {
//                         return new a.Z(this.x, this.bottom())
//                     }
//                     bottomRight() {
//                         return new a.Z(this.right(), this.bottom())
//                     }
//                     setTop(e) {
//                         this.height = this.y + this.height - e, this.y = e
//                     }
//                     setLeft(e) {
//                         this.width = this.x + this.width - e, this.x = e
//                     }
//                     setRight(e) {
//                         this.width = Math.round(e - this.x)
//                     }
//                     setBottom(e) {
//                         this.height = Math.round(e - this.y)
//                     }
//                     setCenter(e) {
//                         this.x = e.x - .5 * this.width, this.y = e.y - .5 * this.height
//                     }
//                     setCenterX(e) {
//                         this.x = e - .5 * this.width
//                     }
//                     setCenterY(e) {
//                         this.y = e - .5 * this.height
//                     }
//                     moveRight(e) {
//                         this.x = Math.round(e - this.width)
//                     }
//                     moveBottom(e) {
//                         this.y = Math.round(e - this.height)
//                     }
//                     isSet() {
//                         return this.x > 0 || this.y > 0 || this.width > 0 || this.height > 0 || this.rotation > 0
//                     }
//                     isInside(e) {
//                         return e.x >= this.x && e.x < this.x + this.width && e.y >= this.y && e.y < this.y + this.height
//                     }
//                     contains(e) {
//                         return !!(e && e.x >= this.x && e.y >= this.y && e.bottom() <= this.bottom() && e.right() <= this.right())
//                     }
//                     equalTo(e) {
//                         return !!e && (this.x === e.x && this.y === e.y && this.width === e.width && this.height === e.height && this.rotation === e.rotation)
//                     }
//                     clone() {
//                         return new r(this.x, this.y, this.width, this.height, this.rotation)
//                     }
//                     scale(e) {
//                         return new r(Math.round(this.x * e), Math.round(this.y * e), Math.round(this.width * e), Math.round(this.height * e), this.rotation)
//                     }
//                     flipWidthAndHeight() {
//                         return new r(this.y, this.x, this.height, this.width)
//                     }
//                     union(e) {
//                         if (!e) return this;
//                         const t = Math.min(this.x, e.x),
//                             n = Math.min(this.y, e.y),
//                             i = Math.max(this.x + this.width, e.x + e.width),
//                             a = Math.max(this.y + this.height, e.y + e.height);
//                         return new r(t, n, i - t, a - n)
//                     }
//                     intersect(e) {
//                         let t = Math.max(this.x, e.x),
//                             n = Math.min(this.x + this.width, e.x + e.width);
//                         if (n <= t) return;
//                         let i = Math.max(this.y, e.y),
//                             a = Math.min(this.y + this.height, e.y + e.height);
//                         return a <= i ? void 0 : new r(t, i, n - t, a - i)
//                     }
//                     rebase(e, t) {
//                         return new r(Math.round(this.x - e), Math.round(this.y - t), Math.round(this.width), Math.round(this.height))
//                     }
//                     gridAlign() {
//                         return new r(Math.floor(this.x), Math.floor(this.y), Math.ceil(this.width), Math.ceil(this.height))
//                     }
//                     getRotatedBounds() {
//                         if (0 === this.rotation) return this;
//                         let e = new i.Z,
//                             t = this.center();
//                         e.translate(t), e.rotate(this.rotation * Math.PI / 180), e.invert();
//                         const n = e.transformPoint(this.topLeft()),
//                             a = e.transformPoint(this.topRight()),
//                             s = e.transformPoint(this.bottomLeft()),
//                             o = e.transformPoint(this.bottomRight());
//                         let l = r.fromPoints([n, a, s, o]);
//                         return l.x = Math.round(l.x + t.x), l.y = Math.round(l.y + t.y), l.rotation = this.rotation, l
//                     }
//                     rotatedSize(e) {
//                         const t = this.width,
//                             n = this.height,
//                             i = (e, t) => {
//                                 var n = e[0].x,
//                                     i = e[0].y,
//                                     s = e[1].x,
//                                     r = e[1].y,
//                                     o = t[0].x,
//                                     l = t[0].y,
//                                     d = t[1].x,
//                                     c = t[1].y;
//                                 return new a.Z(((n * r - i * s) * (o - d) - (n - s) * (o * c - l * d)) / ((n - s) * (l - c) - (i - r) * (o - d)), ((n * r - i * s) * (l - c) - (i - r) * (o * c - l * d)) / ((n - s) * (l - c) - (i - r) * (o - d)))
//                             };
//                         let r, o, l, d, c, u, h;
//                         var m = e * (Math.PI / 180),
//                             p = [new a.Z(0, 0), new a.Z(t, 0), new a.Z(t, n), new a.Z(0, n)],
//                             f = ((e, t) => {
//                                 for (var n = new Array, i = 0; i < e.length; ++i) n.push(new a.Z(e[i].x * Math.cos(t) - e[i].y * Math.sin(t), e[i].x * Math.sin(t) + e[i].y * Math.cos(t)));
//                                 return n
//                             })(p = ((e, t, n) => {
//                                 for (var i = new Array, s = 0; s < e.length; ++s) i.push(new a.Z(e[s].x + t, e[s].y + n));
//                                 return i
//                             })(p, -t / 2, -n / 2), m);
//                         return e >= 0 ? (r = [new a.Z(0, 0), new a.Z(-t / 2, -n / 2)], l = [f[0], f[3]], u = i(r, l), o = [new a.Z(0, 0), new a.Z(t / 2, -n / 2)], d = [f[0], f[1]], h = i(o, d)) : (r = [new a.Z(0, 0), new a.Z(t / 2, -n / 2)], l = [f[1], f[2]], h = i(r, l), o = [new a.Z(0, 0), new a.Z(-t / 2, -n / 2)], d = [f[0], f[1]], u = i(o, d)), c = new a.Z(Math.max(u.x, -h.x), Math.max(u.y, h.y)), new s.Z(Math.round(-c.x - c.x), Math.round(-c.y - c.y))
//                     }
//                     pad(e) {
//                         return new r(this.x - e, this.y - e, this.width + 2 * e, this.height + 2 * e)
//                     }
//                     getAspect() {
//                         return this.width / this.height
//                     }
//                     getComparedScale(e) {
//                         if (e) return new s.Z(this.width / e.width, this.height / e.height)
//                     }
//                     static calculate(e, t, n = 0) {
//                         if (!e || !t) return;
//                         let i = new r;
//                         return i.x = Math.round(e.x < t.x ? e.x : t.x), i.y = Math.round(e.y < t.y ? e.y : t.y), i.width = Math.round(e.x < t.x ? t.x - i.x : e.x - i.x), i.height = 0 !== n ? Math.round(i.width / n) : Math.round(e.y < t.y ? t.y - i.y : e.y - i.y), i
//                     }
//                     static merge(e, t) {
//                         if (!e && !t) return;
//                         if (e && !t) return e;
//                         if (!e && t) return t;
//                         const n = Math.round(Math.min(e.x, t.x)),
//                             i = Math.round(Math.min(e.y, t.y)),
//                             a = Math.round(Math.max(e.x + e.width, t.x + t.width)),
//                             s = Math.round(Math.max(e.y + e.height, t.y + t.height));
//                         return new r(n, i, a - n, s - i)
//                     }
//                     static fillFit(e, t, n, i, a = !1) {
//                         let s = 1;
//                         return s = e / t < n / i ? n / e : i / t, a && s > 1 && (s = 1), new r(Math.round((n - e * s) / 2), Math.round((i - t * s) / 2), Math.round(e * s), Math.round(t * s))
//                     }
//                     static bestFit(e, t, n, i, a = !1) {
//                         let s = 1;
//                         return s = e / t > n / i ? n / e : i / t, s > 1 && !a && (s = 1), new r(Math.round((n - e * s) / 2), Math.round((i - t * s) / 2), Math.round(e * s), Math.round(t * s))
//                     }
//                     static fromPoints(e) {
//                         let t = e[0].x,
//                             n = e[0].x,
//                             i = e[0].y,
//                             a = e[0].y;
//                         return e.forEach((e => {
//                             t = Math.min(e.x, t), n = Math.max(e.x, n), i = Math.min(e.y, i), a = Math.max(e.y, a)
//                         })), new r(Math.round(t), Math.round(i), Math.round(n - t), Math.round(a - i))
//                     }
//                     static fromPointRects(e, t, n) {
//                         let i = e[0].x,
//                             a = e[0].x + t,
//                             s = e[0].y,
//                             o = e[0].y + n;
//                         return e.forEach((e => {
//                             i = Math.min(e.x, i), a = Math.max(e.x + t, a), s = Math.min(e.y, s), o = Math.max(e.y + n, o)
//                         })), new r(i, s, a - i, o - s)
//                     }
//                 }
//             },
//             9872: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => i
//                 });
//                 class i {
//                     constructor(e = 0, t = 0) {
//                         this.width = e, this.height = t
//                     }
//                 }
//             },
//             4820: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Lt: () => r,
//                     ZP: () => l
//                 });
//                 var i = n(3947),
//                     a = n(1030),
//                     s = n(3673);

//                 function r(e, t) {
//                     (0, a.Z)("setting-" + e, t.toString());
//                     const n = window.localStorage.getItem("user-settings"),
//                         i = JSON.parse(n || "{}");
//                     o[e] = i[e] = t, window.localStorage.setItem("user-settings", JSON.stringify(i)), document.dispatchEvent(new CustomEvent("user-setting-updated", {
//                         detail: e
//                     }))
//                 }
//                 const o = function() {
//                         const e = {
//                             product: "web",
//                             debug: "",
//                             cdnUrl: "",
//                             isIOS: !1,
//                             isHDPI: !1,
//                             isSafari: !1,
//                             canTouch: !1,
//                             accent: "default",
//                             workspace: "default",
//                             allTooltip: !1,
//                             autoSelect: !0,
//                             showGuides: !0,
//                             snapToGuides: !0,
//                             smoothScaling: !0,
//                             askToPreResize: !0,
//                             useLegacySave: !1,
//                             performanceMode: !1,
//                             scrollMode: "zoom",
//                             maxHistoryUndos: 25,
//                             boxBarXState: "maximized",
//                             panelFloating: !1,
//                             panelNavigator: !0,
//                             panelLayer: !0,
//                             panelHistory: !0,
//                             barQuicklink: !0,
//                             mainColor: "#ffffff",
//                             altColor: "#000000",
//                             oldColor: ["#A8534B", "#EC9D75", "#F9D697", "#DCE6A7", "#9ADFB0", "#57CBAB", "#38A793", "#5A5E5A"],
//                             gradients: [],
//                             dialogPos: new s.Z(0, 0),
//                             adyenClientKey: "",
//                             lastNewsCheck: "1970-01-01T00:00:00Z",
//                             ddid: ""
//                         };
//                         return Object.assign(e, (() => {
//                             const e = window.localStorage.getItem("user-settings");
//                             return JSON.parse(e || "{}")
//                         })()), Object.assign(e, (() => {
//                             const e = new URL(window.location.href),
//                                 t = {};
//                             return e.searchParams.forEach(((e, n) => {
//                                 t[n] = e
//                             })), t
//                         })()), Object.assign(e, (() => {
//                             const e = (0, i.ZP)("config_data");
//                             if (e && e.innerText) {
//                                 let e = JSON.parse((0, i.ZP)("config_data").innerText);
//                                 return (0, i.ZP)("config_data").remove(), e
//                             }
//                             return {}
//                         })()), e
//                     }(),
//                     l = o
//             },
//             7909: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => s
//                 });
//                 var i = n(3947),
//                     a = n(3655);
//                 class s {
//                     constructor(e = !0) {
//                         this.scopedId = e => `${this.mid}-${e}`, this.setContent = (...e) => {
//                             e[0] instanceof HTMLElement ? this.content.append(...e) : this.content.innerHTML += e[0]
//                         }, this.keyDown = e => {
//                             "Escape" !== e.key && "Esc" !== e.key || this.cleanUp()
//                         }, this.cleanUp = () => {
//                             document.removeEventListener("keydown", this.keyDown, !1), this.dialog.classList.remove("ani"), this.modal.classList.remove("dim"), setTimeout((() => {
//                                 this.dialog.remove(), this.dialog = null, this.modal.remove(), this.modal = null
//                             }), 200)
//                         }, this.mid = a.Zd(), this.modal = (0, i.T)("div", {
//                             id: "modal-" + this.mid,
//                             className: "modal"
//                         }), document.body.appendChild(this.modal), this.dialog = (0, i.T)("div", {
//                             className: "announce"
//                         }), this.modal.appendChild(this.dialog), this.content = (0, i.T)("div", {
//                             className: "content"
//                         }), this.dialog.append((0, i.T)("div", {
//                             id: "announce-close" + this.mid,
//                             className: "announce-close",
//                             onclick: () => this.cleanUp()
//                         }, (0, i.T)("img", {
//                             src: "/img/icon/close.svg"
//                         })), this.content), document.addEventListener("keydown", this.keyDown, !1), setTimeout((() => this.dialog.classList.add("ani")), 5), e && setTimeout((() => this.modal.classList.add("dim")), 5)
//                     }
//                 }
//             },
//             8479: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => r
//                 });
//                 var i = n(3947),
//                     a = n(7909),
//                     s = n(6738);
//                 class r extends a.Z {
//                     constructor(e = {}) {
//                         super(!0), this.setContent('\n            <div id="entry-pop-right" class="half">\n                <h1 class="large center top-20"><strong>Hi there!</strong></h1>\n                <h3 class="center top-10">Welcome to Pixlr, so happy to see you!</h3>\n                <div id="entry-auth-holder" class="top-20"></div>\n            </div>\n            ');
//                         let t = (0, i.T)("div", {
//                             id: "entry-pop-left",
//                             className: "hero"
//                         });
//                         this.dialog.insertBefore(t, this.content), this.auth = new s.ZP(Object.assign(Object.assign({}, e), {
//                             view: "chooser",
//                             holder: (0, i.ZP)("entry-auth-holder")
//                         }))
//                     }
//                 }
//             },
//             2856: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Z: () => u
//                 });
//                 var i = n(3947),
//                     a = n(6548),
//                     s = n(8479),
//                     r = n(7909),
//                     o = n(1030),
//                     l = n(4820),
//                     d = n(3506),
//                     c = n(6577);
//                 class u extends r.Z {
//                     constructor(e, t) {
//                         super(!0), (0, o.Z)("bounce", e), this.content.id = "bounce-content", this.content.style.flexDirection = "column";
//                         const n = !(!d.a || "plus" !== d.a.subscriptionAccess);
//                         "save" === t ? this.setContent(`\n                <div id="bounce-top">\n                    <h1 class="top-20">${(0,a.Z)("bounceSnap")}</h1>\n                    <p class="top-20">${(0,a.Z)("bounceLowPrice","0.99")}</p>\n\n                    <p id="do-login" style="display:none">${(0,a.Z)("common-alreadyMember")} <a id="login-link">${(0,a.Z)("common-loginHere")}</a></p>\n                </div>\n            `) : this.setContent(`\n                <div id="bounce-top">\n                    <h1 class="top-20">${(0,a.Z)("bounceTitle")}</h1>\n                    <p class="top-20">${(0,a.Z)("bounceFeaturePitch")}</p>\n                </div>\n            `), this.setContent(`\n\n            <div class="paywal-plan">\n\n                <div id="subscribe-plus" class="plan">\n                    <div class="plan-details">\n                        <h2><img src="/img/misc/plus-icon.svg" alt="plus icon" style="width: 24px;"> ${(0,a.Z)("plus")}</h2>\n\n                        <p>${(0,a.Z)("bouncePlusDesc")}</p>\n                        <ul class="top-10">\n                            <li>${(0,a.Z)("bounceAdFree")}</li>\n                            <li>${(0,a.Z)("bounceUnlimitedSaves")}</li>\n                            <li>${(0,a.Z)("bounceCreditsIncluded").replace("{number}","80")}</li> \n                        </ul>\n\n                        <h2 class="top-20">$0.99</h2>\n                        <div>USD /${(0,a.Z)("month")}</div>\n\n                        ${n?`<div class="button large disabled w-100 rounded top-30" style="color: #000;cursor: not-allowed !important;">${(0,a.Z)("currentPlan")}</div>`:`<div class="button large white w-100 rounded top-30">${(0,a.Z)("subscribeNow")}</div>`}\n                    </div>\n                </div>\n\n                <div id="subscribe-premium" class="plan popular">\n                    <div class="plan-header">\n                        ${(0,a.Z)("mostPopular")}\n                    </div>\n                    <div class="plan-details">\n                        <h2><img src="/img/misc/premium-icon.svg" alt="premium icon" style="width: 24px;"> ${(0,a.Z)("premium")}</h2>\n\n                        <p>${(0,a.Z)("bouncePremiumDesc")}</p>\n                        <ul class="top-10">\n                            <li>${(0,a.Z)("bounceAdFree")}</li>\n                            <li>${(0,a.Z)("bounceUnlimitedSaves")}</li>\n                            <li>${(0,a.Z)("bounceCreditsIncluded").replace("{number}","1000")}</li> \n                            <li>${(0,a.Z)("bouncePrivateMode")}</li>\n                            <li>${(0,a.Z)("bounceBigLibrary")}</li>\n                        </ul>\n\n                        <h2 class="top-20">$4.90</h2>\n                        <div>USD /${(0,a.Z)("month")}</div>\n\n                        <div class="button w-100 large rounded top-30" style="background:#111;">\n                        ${n?(0,a.Z)("upgradeNow"):!d.a||d.a.eligibleForTrail?(0,a.Z)("try30DaysFree"):(0,a.Z)("subscribeNow")}\n                        </div>\n                    </div>\n                </div>\n\n                <div id="subscribe-team" class="plan">\n                    <div class="plan-details">\n                        <h2><img src="/img/misc/team-icon.svg" alt="team icon"> ${(0,a.Z)("team")}</h2>\n\n                        <p>${(0,a.Z)("bounceTeamDesc")}</p>\n                        <ul class="top-10">\n                            <li>${(0,a.Z)("bounceAdFree")}</li>\n                            <li>${(0,a.Z)("bounceUnlimitedSaves")}</li>\n                            <li>${(0,a.Z)("pricingFiveSeats")}</li>\n                            <li>${(0,a.Z)("pricingCreditsMemberIncluded").replace("{number}","1000")}</li> \n                        </ul>\n\n                        <h2 class="top-20">$9.91</h2>\n                        <div>USD /${(0,a.Z)("month")}</div>\n\n                        <div class="button large white rounded w-100 top-30">${n?(0,a.Z)("upgradeNow"):(0,a.Z)("subscribeNow")}</div>\n                    </div>\n                </div>\n            </div>\n\n            <p class="center pad-15">${(0,a.Z)("unsureWhichSubscriptionToGet",`<a href="/pricing" target="_blank">${(0,a.Z)("pricingPage")}</a>`)} ${(0,a.Z)("freeForEducation",`<a href="/learn/education/" class="anchor" target="_blank">${(0,a.Z)("education")}</a>`)}</p>\n            \n        `), "save" !== t || d.a || ((0, i.ZP)("do-login").style.display = "block", (0, i.ZP)("login-link").addEventListener("click", (() => {
//                             this.cleanUp(), new s.Z
//                         }))), (0, i.ZP)("subscribe-plus").addEventListener("click", (() => {
//                             n || (this.cleanUp(), d.a ? new c.Z("subscription", {
//                                 platform: l.ZP.product,
//                                 plan: "plus-monthly",
//                                 bounceSource: "premiumbounce"
//                             }) : new s.Z)
//                         })), (0, i.ZP)("subscribe-premium").addEventListener("click", (() => {
//                             this.cleanUp(), d.a ? new c.Z("subscription", {
//                                 platform: l.ZP.product,
//                                 plan: "premium-monthly",
//                                 bounceSource: "premiumbounce"
//                             }) : new s.Z
//                         })), (0, i.ZP)("subscribe-team").addEventListener("click", (() => {
//                             this.cleanUp(), d.a ? new c.Z("subscription", {
//                                 platform: l.ZP.product,
//                                 plan: "team-monthly",
//                                 bounceSource: "premiumbounce"
//                             }) : new s.Z
//                         }))
//                     }
//                 }
//             },
//             3506: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     a: () => a
//                 });
//                 var i = n(3947);
//                 const a = function() {
//                     let e;
//                     const t = (0, i.ZP)("current_user");
//                     if (t && "null" !== t.innerText) try {
//                         e = JSON.parse(t.innerText)
//                     } catch (a) {
//                         console.error("Could not read user data json")
//                     }
//                     const n = new URL(location.href);
//                     return e && "pixlr.com" !== n.hostname && "true" === n.searchParams.get("premium") && (e.subscription = !0, e.subscriptionAccess = "premium"), e
//                 }()
//             },
//             3655: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     Ai: () => f,
//                     GF: () => l,
//                     HS: () => Z,
//                     L5: () => A,
//                     M8: () => S,
//                     ST: () => y,
//                     Td: () => c,
//                     WL: () => w,
//                     Wb: () => j,
//                     Xj: () => M,
//                     ZE: () => p,
//                     Zd: () => D,
//                     _6: () => _,
//                     _c: () => h,
//                     a9: () => O,
//                     d4: () => C,
//                     dN: () => b,
//                     fg: () => v,
//                     g4: () => F,
//                     jb: () => Y,
//                     l: () => k,
//                     lU: () => u,
//                     le: () => I,
//                     ly: () => H,
//                     qT: () => m,
//                     sD: () => E,
//                     uZ: () => P,
//                     vL: () => d,
//                     vO: () => T,
//                     x2: () => L,
//                     zs: () => x
//                 });
//                 var i = n(6548),
//                     a = n(6817),
//                     s = n(3673),
//                     r = n(4820),
//                     o = n(5574);

//                 function l(e, t) {
//                     e < 0 && (e = 1), t < 0 && (t = 1);
//                     let n = document.createElement("canvas");
//                     return n.width = e, n.height = t, n
//                 }

//                 function d(e, t) {
//                     if (e < 0 && (e = 1), t < 0 && (t = 1), "undefined" == typeof OffscreenCanvas || r.ZP.isSafari) {
//                         let n = document.createElement("canvas");
//                         return n.width = e, n.height = t, n
//                     }
//                     return new OffscreenCanvas(e, t)
//                 }
//                 async function c(e) {
//                     if (!e) return;
//                     const t = URL.createObjectURL(e),
//                         n = await u(t);
//                     return URL.revokeObjectURL(t), n
//                 }

//                 function u(e, t = !1) {
//                     if (void 0 !== e) return new Promise(((n, i) => {
//                         if (!e) return console.log("Invalid URL in dataURLToCanvas"), void n(void 0);
//                         const a = t ? l(100, 100) : d(100, 100),
//                             s = a.getContext("2d"),
//                             r = new Image;
//                         r.onerror = e => i(e), r.onload = () => {
//                             a.width = r.width, a.height = r.height, s.drawImage(r, 0, 0), n(a)
//                         }, r.src = e
//                     }))
//                 }

//                 function h(e, t) {
//                     if (!e) return;
//                     const n = (null == t ? void 0 : t.rect) || new a.Z(0, 0, e.width, e.height),
//                         i = d(n.width, n.height);
//                     return i.getContext("2d").drawImage(e, -n.x, -n.y), i instanceof HTMLCanvasElement ? new Promise(((e, n) => i.toBlob(e, null == t ? void 0 : t.type, null == t ? void 0 : t.quality))) : i.convertToBlob({
//                         type: null == t ? void 0 : t.type,
//                         quality: null == t ? void 0 : t.quality
//                     })
//                 }

//                 function m(e, t, n = 0, i = !1) {
//                     let s = i ? l(e.width, e.height) : d(e.width, e.height),
//                         r = s.getContext("2d");
//                     if (r.drawImage(e, 0, 0, e.width, e.height), r = void 0, s.width > t || s.height > t) {
//                         let n = a.Z.bestFit(e.width, e.height, t, t);
//                         s = f(s, n.width, n.height)
//                     }
//                     return 0 !== n && (s = M(s, n)), s
//                 }

//                 function p(e, t, n) {
//                     if (!e) return;
//                     let i = d(t, n);
//                     var a = e.getContext("2d").getImageData(0, 0, e.width, e.height),
//                         s = new Int32Array(a.data.buffer),
//                         r = e.width,
//                         o = e.height,
//                         l = i.width,
//                         c = i.height;
//                     let u = i.getContext("2d");
//                     var h = u.getImageData(0, 0, i.width, i.height),
//                         m = new Int32Array(h.data.buffer);
//                     const p = l / r,
//                         f = c / o;
//                     for (let d = 0; d < c;) {
//                         const e = r * ~~(d / f),
//                             t = l * d++;
//                         for (let n = 0; n < l;) m[t + n++] = s[e + ~~(n / p)]
//                     }
//                     return u.putImageData(h, 0, 0), i
//                 }

//                 function f(e, t, n, i = !1) {
//                     if (!e) return;
//                     if (t > e.width || n > e.width) return i ? _(e, t, n) : g(e, t, n);
//                     if (t < 4096 && n < 4096 && (e.width > 4096 || e.height > 4096)) {
//                         let t = a.Z.bestFit(e.width, e.height, 4096, 4096);
//                         e = i ? _(e, t.width, t.height) : g(e, t.width, t.height)
//                     }
//                     let s = i ? l(t, n) : d(t, n);
//                     var r = e.getContext("2d").getImageData(0, 0, e.width, e.height).data,
//                         o = e.width,
//                         c = e.height,
//                         u = s.width,
//                         h = s.height;
//                     let m = s.getContext("2d");
//                     for (var p = m.getImageData(0, 0, s.width, s.height), f = p.data, v = o / u, y = c / h, w = Math.ceil(v / 2), b = Math.ceil(y / 2), M = 0; M < h; M++)
//                         for (var x = 0; x < u; x++) {
//                             for (var L = 4 * (x + M * u), k = 0, T = 0, Y = 0, S = 0, D = 0, P = 0, E = (M + .5) * y, C = Math.floor(M * y); C < (M + 1) * y; C++)
//                                 for (var H = Math.abs(E - (C + .5)) / b, Z = (x + .5) * v, A = H * H, j = Math.floor(x * v); j < (x + 1) * v; j++) {
//                                     var O = Math.abs(Z - (j + .5)) / w,
//                                         F = Math.sqrt(A + O * O);
//                                     F >= -1 && F <= 1 && (k = 2 * F * F * F - 3 * F * F + 1) > 0 && (Y += k * r[O = 4 * (j + C * o)], S += k * r[O + 1], D += k * r[O + 2], P += k * r[O + 3], T += k)
//                                 }
//                             f[L] = Y / T, f[L + 1] = S / T, f[L + 2] = D / T, f[L + 3] = P / T
//                         }
//                     return m.putImageData(p, 0, 0), s
//                 }

//                 function g(e, t, n, i = !0, a) {
//                     if (!e) return;
//                     t < 1 && (t = 1), n < 1 && (n = 1);
//                     let s = null != a ? a : d(t, n);
//                     var r = s.getContext("2d");
//                     return r.imageSmoothingQuality = "high", r.imageSmoothingEnabled = i, r.drawImage(e, 0, 0, s.width, s.height), r = void 0, s
//                 }

//                 function _(e, t, n, i = !0) {
//                     if (!e) return;
//                     t < 1 && (t = 1), n < 1 && (n = 1);
//                     let a = l(t, n);
//                     var s = a.getContext("2d");
//                     return s.imageSmoothingQuality = "high", s.imageSmoothingEnabled = i, s.drawImage(e, 0, 0, a.width, a.height), s = void 0, a
//                 }

//                 function v(e, t) {
//                     let n = d(t.width, t.height),
//                         i = n.getContext("2d");
//                     return i.drawImage(e, -t.x, -t.y), i = void 0, n
//                 }

//                 function y(e, t, n) {
//                     let i = d(n.width, n.height),
//                         a = i.getContext("2d");
//                     return a.imageSmoothingQuality = "high", a.imageSmoothingEnabled = !0, a.drawImage(e, t.x - n.x, t.y - n.y, t.width, t.height), a = void 0, i
//                 }

//                 function w(e, t) {
//                     if (e) {
//                         var n = d(t.width, t.height),
//                             i = n.getContext("2d");
//                         return i.drawImage(e, -t.x, -t.y), i = void 0, n
//                     }
//                 }

//                 function b(e, t = !1) {
//                     if (e) {
//                         var n = t || e instanceof HTMLCanvasElement ? l(e.width, e.height) : d(e.width, e.height),
//                             i = n.getContext("2d");
//                         return i.drawImage(e, 0, 0), i = void 0, n
//                     }
//                 }

//                 function M(e, t) {
//                     if (e) {
//                         var n = d(e.width, e.height),
//                             i = n.getContext("2d");
//                         return 180 !== t && (n.width = e.height, n.height = e.width), i.translate(n.width / 2, n.height / 2), i.rotate(t * Math.PI / 180), i.drawImage(e, -e.width / 2, -e.height / 2), i.setTransform(1, 0, 0, 1, 0, 0), i = void 0, n
//                     }
//                 }

//                 function x(e, t, n) {
//                     let i = d(n.width, n.height),
//                         a = i.getContext("2d");
//                     return a.save(), a.translate(n.width / 2, n.height / 2), a.rotate(t * Math.PI / 180), a.drawImage(e, -e.width / 2, -e.height / 2), a.restore(), a = null, i
//                 }

//                 function L(e, t) {
//                     if (e) {
//                         var n = d(e.width, e.height),
//                             i = n.getContext("2d");
//                         return i.save(), t ? (i.scale(1, -1), i.drawImage(e, 0, -e.height, e.width, e.height)) : (i.scale(-1, 1), i.drawImage(e, -e.width, 0, e.width, e.height)), i.restore(), i = void 0, n
//                     }
//                 }

//                 function k(e) {
//                     if (!e) return;
//                     const t = e.width,
//                         n = e.height;
//                     return T(e.getContext("2d", {
//                         willReadFrequently: !0
//                     }).getImageData(0, 0, t, n))
//                 }

//                 function T(e) {
//                     if (!e) return;
//                     const t = e.width,
//                         n = e.height;
//                     let i, s, r = new Uint32Array(e.data.buffer),
//                         o = -1,
//                         l = -1,
//                         d = -1,
//                         c = -1;
//                     for (s = 0; s < n; ++s) {
//                         for (i = 0; i < t; ++i)
//                             if (r[i + s * t] > 0) {
//                                 l = s;
//                                 break
//                             }
//                         if (-1 !== l) break
//                     }
//                     if (-1 !== l) {
//                         for (s = n - 1; s >= l; --s) {
//                             for (i = 0; i < t; ++i)
//                                 if (r[i + s * t] > 0) {
//                                     c = s + 1;
//                                     break
//                                 }
//                             if (-1 !== c) break
//                         }
//                         for (i = 0; i < t; ++i) {
//                             for (s = l; s <= c; ++s)
//                                 if (r[i + s * t] > 0) {
//                                     o = i;
//                                     break
//                                 }
//                             if (-1 !== o) break
//                         }
//                         for (i = t - 1; i >= o; --i) {
//                             for (s = l; s <= c; ++s)
//                                 if (r[i + s * t] > 0) {
//                                     d = i + 1;
//                                     break
//                                 }
//                             if (-1 !== d) break
//                         }
//                         return new a.Z(o, l, d - o, c - l)
//                     }
//                 }

//                 function Y(e) {
//                     let t = e / 1024;
//                     return t > 1024 ? (t / 1024).toFixed(1) + "mb" : t > 100 ? Math.round(t) + "kb" : Math.round(10 * t) / 10 + "kb"
//                 }

//                 function S() {
//                     return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (function(e) {
//                         var t = 16 * Math.random() | 0;
//                         return ("x" == e ? t : 3 & t | 8).toString(16)
//                     }))
//                 }

//                 function D() {
//                     return "xxxxyxxx4xxx".replace(/[xy]/g, (function(e) {
//                         var t = 16 * Math.random() | 0;
//                         return ("x" == e ? t : 3 & t | 8).toString(16)
//                     }))
//                 }

//                 function P(e, t, n) {
//                     return isNaN(e) ? t : Math.min(Math.max(e, t), n)
//                 }

//                 function E(e) {
//                     if (0 === e.length) return;
//                     return e[Math.round(Math.random() * (e.length - 1))]
//                 }
//                 const C = (e, t) => {
//                     let n;
//                     return (...i) => {
//                         clearTimeout(n), n = window.setTimeout((() => t(...i)), e)
//                     }
//                 };

//                 function H(e) {
//                     const t = ((new Date).getTime() - e.getTime()) / 1e3;
//                     if (t < 0) return "It's the future man";
//                     const n = Math.floor(t / 86400);
//                     if (n >= 1) return n > 1 ? (0, i.Z)("sinceDays", n) : (0, i.Z)("sinceDay");
//                     const a = Math.floor(t / 3600);
//                     if (a >= 1) return a > 1 ? (0, i.Z)("sinceHours", a) : (0, i.Z)("sinceHour");
//                     const s = Math.floor(t / 60);
//                     return s >= 1 ? s > 1 ? (0, i.Z)("sinceMinutes", s) : (0, i.Z)("sinceMinute") : (0, i.Z)("sinceNow")
//                 }

//                 function Z(e) {
//                     let t = new s.Z(e.offsetLeft, e.offsetTop);
//                     for (; e.offsetParent && (t.x = t.x + e.offsetParent.offsetLeft, t.y = t.y + e.offsetParent.offsetTop, e != document.getElementsByTagName("body")[0]);) e = e.offsetParent;
//                     return t
//                 }
//                 class A {
//                     constructor() {
//                         this.promise = new Promise(((e, t) => {
//                             this.resolve = e, this.reject = t
//                         }))
//                     }
//                     then(e, t) {
//                         return this.promise.then(e, t)
//                     } catch (e) {
//                         return this.promise.catch(e)
//                     } finally(e) {
//                         return this.promise.finally(e)
//                     }
//                 }
//                 Symbol.toStringTag;
//                 const j = e => {
//                         switch (e) {
//                             case "jpeg":
//                             case "jpg":
//                                 return {
//                                     mimeType: "image/jpg",
//                                     fileDesc: "JPG image"
//                                 };
//                             case "png":
//                                 return {
//                                     mimeType: "image/png",
//                                     fileDesc: "PNG image"
//                                 };
//                             case "webp":
//                                 return {
//                                     mimeType: "image/webp",
//                                     fileDesc: "WebP image"
//                                 };
//                             case "zip":
//                                 return {
//                                     mimeType: "application/zip",
//                                     fileDesc: "Zip archive"
//                                 };
//                             case "pdf":
//                                 return {
//                                     mimeType: "application/pdf",
//                                     fileDesc: "PDF document"
//                                 };
//                             default:
//                                 throw new Error("Incorrect file extension")
//                         }
//                     },
//                     O = e => e.substring(0, e.lastIndexOf(".")) || e,
//                     F = e => e.split(".").slice(-1)[0],
//                     I = async e => {
//                         const t = await (0, o.s4)(e);
//                         return t.width <= 4096 && t.height <= 4096
//                     }
//             },
//             406: (e, t, n) => {
//                 "use strict";
//                 n.d(t, {
//                     MyAccount: () => x
//                 });
//                 var i = n(6548),
//                     a = n(3506),
//                     s = n(3947),
//                     r = n(7909),
//                     o = n(4231);
//                 class l extends r.Z {
//                     constructor() {
//                         super(!0), this.onSubmitRequest = async e => {
//                             e.preventDefault(), this.email = (0, s.ZP)(this.inputId).value;
//                             const t = await (0, o.$f)("/auth/changeemail/request", "POST", {
//                                 newEmail: this.email
//                             });
//                             if (!0 !== t.status) return void(0, s.FN)("danger", t.message);
//                             (0, s.FN)("success", (0, i.Z)("common-SuccessSendCodeEmail").replace("{email}", this.email));
//                             const n = this.scopedId("form");
//                             this.content.innerHTML = "", this.setContent(`\n            <form id="${n}" class="pad-40">\n                <h1>${(0,i.Z)("common-verifyAcc")}</h1>\n                <p>${(0,i.Z)("common-sentCodeDesc").replace("[EMAIL]",this.email)}</p>\n                <div class="input-group top-40">\n                    <label for="${this.inputId}">${(0,i.Z)("common-code")}</label>\n                    <input id="${this.inputId}" type="text" />\n                </div>                \n                <button class="button full top-40">${(0,i.Z)("common-verify")}</button>\n            </form>\n        `), (0, s.ZP)(n).addEventListener("submit", this.onSubmitVerify)
//                         }, this.onSubmitVerify = async e => {
//                             e.preventDefault();
//                             const t = (0, s.ZP)(this.inputId).value,
//                                 n = await (0, o.$f)("/auth/changeemail/verify", "POST", {
//                                     newEmail: this.email,
//                                     code: t
//                                 });
//                             !0 === n.status ? ((0, s.FN)("success", (0, i.Z)("common-EmailUpdated")), this.cleanUp(), setTimeout((() => {
//                                 window.document.location.reload()
//                             }), 2e3)) : (0, s.FN)("danger", n.message)
//                         }, this.dialog.style.width = "500px", this.content.style.width = "100%";
//                         const e = this.scopedId("form");
//                         this.inputId = this.scopedId("input"), this.setContent(`\n            <form id="${e}" class="pad-40">\n                <h2 class="headline">${(0,i.Z)("changeEmail")}</h2>\n                <div class="input-group top-40">\n                    <label for="${this.inputId}">${(0,i.Z)("newEmail")}</label>\n                    <input id="${this.inputId}" type="text" />\n                </div>                \n                <button class="button full top-40">${(0,i.Z)("update")}</button>\n            </form>\n        `), (0, s.ZP)(e).addEventListener("submit", this.onSubmitRequest)
//                     }
//                 }
//                 class d extends r.Z {
//                     constructor() {
//                         super(!0), this.onSubmit = async e => {
//                             e.preventDefault();
//                             const t = (0, s.ZP)(this.oldId).value,
//                                 n = (0, s.ZP)(this.newId).value,
//                                 a = await (0, o.$f)("/auth/changepassword", "PUT", {
//                                     newPassword: n,
//                                     oldPassword: t
//                                 });
//                             !0 === a.status ? ((0, s.FN)("success", (0, i.Z)("common-SuccessUpdatePassword")), this.cleanUp()) : (0, s.FN)("danger", a.message)
//                         }, this.dialog.style.width = "500px", this.content.style.width = "100%";
//                         const e = this.scopedId("form");
//                         this.oldId = this.scopedId("old"), this.newId = this.scopedId("new"), this.setContent(`\n            <form id="${e}" class="pad-40">\n                <h2 class="headline">${(0,i.Z)("changePassword")}</h2>\n                <div class="input-group top-40">\n                    <label for="${this.oldId}">${(0,i.Z)("oldPass")}</label>\n                    <input id="${this.oldId}" type="password" type="text" />                    \n                </div>                \n                <div class="input-group top-20">\n                    <label for="${this.newId}">${(0,i.Z)("newPass")}</label>\n                    <input id="${this.newId}" type="password" type="text" />\n                </div>\n                <button class="button full top-40">${(0,i.Z)("updatePass")}</button>\n            </form>\n        `), (0, s.ZP)(e).addEventListener("submit", this.onSubmit)
//                     }
//                 }
//                 class c extends r.Z {
//                     constructor() {
//                         super(!0), this.onSubmit = async e => {
//                             e.preventDefault();
//                             const t = (0, s.ZP)(this.inputId).value,
//                                 n = await (0, o.$f)("/myaccount/api/profile", "PUT", {
//                                     name: t
//                                 });
//                             !0 === n.status ? ((0, s.FN)("success", (0, i.Z)("SuccessfullyUpdateUserProfile")), this.cleanUp(), setTimeout((() => {
//                                 window.document.location.reload()
//                             }), 2e3)) : (0, s.FN)("danger", n.message)
//                         }, this.dialog.style.width = "500px", this.content.style.width = "100%";
//                         const e = this.scopedId("form");
//                         this.inputId = this.scopedId("input"), this.setContent(`\n            <form id="${e}" class="pad-40">\n                <h2 class="headline">${(0,i.Z)("changeName")}</h2>\n                <div class="input-group top-40 w-100">\n                    <label for="${this.inputId}">${(0,i.Z)("newName")}</label>\n                    <input id="${this.inputId}" type="text" />\n                </div>\n                <div class="buttons">                \n                    <button class="button full top-40">${(0,i.Z)("update")}</button>\n                </buttons>\n            </form>\n        `), (0, s.ZP)(e).addEventListener("submit", this.onSubmit)
//                     }
//                 }
//                 class u extends r.Z {
//                     constructor() {
//                         super(!0), this.onSubmit = async e => {
//                             e.preventDefault();
//                             const t = (0, s.ZP)(this.inputId).value,
//                                 n = await (0, o.$f)("/api/myaccount/profile", "DELETE", {
//                                     reason: t
//                                 }, !0);
//                             if (!0 !== n.status) return (0, s.FN)("danger", n.message);
//                             window.location.href = "/logout/"
//                         }, this.dialog.style.width = "500px", this.content.style.width = "100%";
//                         const e = this.scopedId("form");
//                         this.inputId = this.scopedId("input"), this.setContent(`\n            <form id="${e}" class="pad-40">\n                <h2 class="headline">${(0,i.Z)("common-deleteMyAccount")}</h2>       \n                <div class="input-group top-20">\n                    <label for="${this.inputId}">${(0,i.Z)("common-leavingBecause")}</label>\n                    <select id="${this.inputId}">\n                        <option value="leavingReasonDefault" disabled selected>${(0,i.Z)("common-leavingReasonDefault")}</option>\n                        <option value="leavingReasons1">${(0,i.Z)("common-leavingReasons1")}</option>\n                        <option value="leavingReasons2">${(0,i.Z)("common-leavingReasons2")}</option>\n                        <option value="leavingReasons3">${(0,i.Z)("common-leavingReasons3")}</option>\n                        <option value="leavingReasons4">${(0,i.Z)("common-leavingReasons4")}</option>\n                        <option value="leavingReasons5">${(0,i.Z)("common-leavingReasons5")}</option>\n                    <select>\n                </div>\n                <button class="button full top-40">${(0,i.Z)("update")}</button>\n            </form>\n        `), (0, s.ZP)(e).addEventListener("submit", this.onSubmit)
//                     }
//                 }
//                 class h extends r.Z {
//                     constructor() {
//                         super(!0), this.sendCode = async e => {
//                             e.preventDefault();
//                             const t = new FormData(e.target);
//                             if (console.log(t), t.get("password") !== t.get("password2")) return void(0, s.FN)("danger", " Passwords did not macth");
//                             this.password = t.get("password");
//                             const n = await (0, o.$f)("/auth/request/code", "POST", {
//                                 email: a.a.email
//                             });
//                             if (!0 !== n.status) return void(0, s.FN)("danger", n.message);
//                             (0, s.FN)("success", "Code sent!");
//                             const i = this.scopedId("form");
//                             this.content.innerHTML = "", this.setContent(`\n            <form id="${i}" class="pad-40">\n                <h1>Reset password</h1>\n\n                <p>\n                    Verify the code you've received in the email.\n                </p>\n\n                <div class="input-group">\n                    <label>Code</label>\n                    <input name="code" />\n                </div>\n\n                <button class="button full top-40">Set password</button>                 \n            </form>                \n        `), (0, s.ZP)(i).addEventListener("submit", this.verifyCode)
//                         }, this.verifyCode = async e => {
//                             e.preventDefault();
//                             const t = new FormData(e.target),
//                                 n = await (0, o.$f)("/auth/reset", "POST", {
//                                     email: a.a.email,
//                                     password: this.password,
//                                     code: t.get("code")
//                                 });
//                             !0 === n.status ? ((0, s.FN)("success", "Password updated!"), this.cleanUp()) : (0, s.FN)("danger", n.message)
//                         }, this.dialog.style.width = "500px", this.content.style.width = "100%";
//                         const e = this.scopedId("form");
//                         this.setContent(`\n            <form id="${e}" class="pad-40">\n                <h2 class="headline">Reset password</h2>\n\n                <p>\n                    First choose your new password, then an email will be sent to ${a.a.email}\n                    with a security code to finalize the change.\n                </p>\n\n                <div class="input-group">\n                    <label>New password</label>\n                    <input type="password" name="password" />\n                </div>\n            \n                <div class="input-group top-20">\n                    <label>Retype password</label>\n                    <input type="password" name="password2" />\n                </div>\n\n                <button class="button full top-40">Set password</button>                 \n            </form>                \n        `), (0, s.ZP)(e).addEventListener("submit", this.sendCode)
//                     }
//                 }
//                 class m extends r.Z {
//                     constructor(e, t = {}) {
//                         var a;
//                         if (super(!0), this.metadata = {}, this.encryptedCardData = {
//                                 isValid: !1,
//                                 paymentMethod: {}
//                             }, this.loadAdyenCheckout = async () => {
//                                 const [e] = await Promise.all([n.e(6600).then(n.bind(n, 4884)).then((e => e.default)), n.e(6600).then(n.bind(n, 697))]), {
//                                     paymentMethods: t,
//                                     adyenClientKey: i
//                                 } = await o.c0();
//                                 new e({
//                                     locale: "en_US",
//                                     environment: "pixlr.com" === window.location.hostname ? "live" : "test",
//                                     clientKey: i,
//                                     paymentMethodsResponse: t,
//                                     onChange: this.handleOnChange
//                                 }).create("card", {
//                                     hasHolderName: !0,
//                                     holderNameRequired: !0
//                                 }).mount("#component-container")
//                             }, this.handleOnChange = e => {
//                                 const {
//                                     data: {
//                                         paymentMethod: t
//                                     },
//                                     isValid: n
//                                 } = e;
//                                 this.encryptedCardData.isValid = n, this.encryptedCardData.paymentMethod = t, this.encryptedCardData.cardHolderName = document.getElementsByClassName("adyen-checkout__input--text")[0].value
//                             }, this.cleanUp = () => {
//                                 this.dialog.remove(), this.dialog = null, this.modal.remove(), this.modal = null
//                             }, this.submit = async () => {
//                                 let e, t;
//                                 if ("create" === this.action) e = "/myaccount/payments/new", t = "POST";
//                                 else {
//                                     if ("edit" !== this.action) throw new Error("Wrong action");
//                                     e = `/myaccount/payments/${this.metadata.cardId}/update`, t = "PUT"
//                                 }
//                                 const n = await fetch(e, {
//                                         method: t,
//                                         headers: {
//                                             "Content-Type": "application/json"
//                                         },
//                                         body: JSON.stringify({
//                                             zeroDollarAuth: !0,
//                                             paymentMethod: this.encryptedCardData.paymentMethod
//                                         })
//                                     }),
//                                     a = await n.json();
//                                 this.dialog.style.width = "620px", this.content.innerHTML = "", this.setContent(`\n            <div class="w-100" style="text-align: center;">\n                ${a.status?`\n                    <img src="/images/icon/green-tick.png" class="checkmark" alt="green tick icon" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${"create"===this.action?(0,i.Z)("paymentAddSuccessful"):(0,i.Z)("paymentUpdatedSuccessful")}</h2>\n                `:`\n                    <img src="/images/icon/red-cross.png" class="checkmark" alt="fail" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${"create"===this.action?(0,i.Z)("failedToAddPayment"):(0,i.Z)("failedToUpdatePayment")}</h2>   \n                `} \n            </div>\n        `), setTimeout((() => {
//                                     null == this || this.cleanUp(), window.location.replace("/myaccount/?tab=subscription")
//                                 }), 2e3)
//                             }, this.reassign = async () => {
//                                 const e = await fetch(`/myaccount/payments/${this.metadata.cardId}/primary`, {
//                                         method: "PUT",
//                                         headers: {
//                                             "Content-Type": "application/json"
//                                         }
//                                     }),
//                                     t = await e.json();
//                                 this.dialog.style.width = "620px", this.content.innerHTML = "", this.setContent(`\n            <div class="w-100" style="text-align: center;">\n                ${t.status?`\n                    <img src="/images/icon/green-tick.png" class="checkmark" alt="green tick icon" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${(0,i.Z)("updatePrimaryCardSuccessful")}</h2>\n                `:`\n                    <img src="/images/icon/red-cross.png" class="checkmark" alt="fail" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${(0,i.Z)("updatePrimaryCardFailed")}</h2>   \n                `} \n            </div>\n        `), setTimeout((() => {
//                                     null == this || this.cleanUp(), window.location.replace("/myaccount/?tab=subscription")
//                                 }), 2e3)
//                             }, this.remove = async () => {
//                                 const e = await fetch(`/myaccount/payments/${this.metadata.cardId}/delete`, {
//                                         method: "DELETE",
//                                         headers: {
//                                             "Content-Type": "application/json"
//                                         }
//                                     }),
//                                     t = await e.json();
//                                 this.dialog.style.width = "620px", this.content.innerHTML = "", this.setContent(`\n            <div class="w-100" style="text-align: center;">\n                ${t.status?`\n                    <img src="/images/icon/green-tick.png" class="checkmark" alt="green tick icon" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${(0,i.Z)("cardRemovedSuccessfully")}</h2>\n                `:`\n                    <img src="/images/icon/red-cross.png" class="checkmark" alt="fail" style="width: 50px; height: 50px">\n                    <h2 class="heavy top-20">${(0,i.Z)("cardRemovedFailed")}</h2>   \n                `} \n            </div>\n        `), setTimeout((() => {
//                                     null == this || this.cleanUp(), window.location.replace("/myaccount/?tab=subscription")
//                                 }), 2e3)
//                             }, this.action = e, this.metadata = t, this.content.id = "payment-card", this.content.style.width = "100%", this.content.style.padding = "35px", n.e(1477).then(n.bind(n, 8792)), "create" !== e && !t.cardId) throw new Error("Missing cardId");
//                         "create" !== e && "edit" !== e || (this.dialog.style.setProperty("width", "480px", "important"), this.setContent(`\n                <h2 class="heavy">${"create"===e?(0,i.Z)("addPaymentMethod"):(0,i.Z)("updatePaymentMethod")}</h2>\n                <div id="component-container" style="padding: 35px 0 15px"></div>\n                <button id="submit-payment" class="button positive w-100 top-20" style="height: unset; padding: 10px 0;">${"create"===e?(0,i.Z)("add"):(0,i.Z)("update")}</button>\n            `), this.loadAdyenCheckout(), (0, s.ZP)("submit-payment").addEventListener("click", (() => this.submit())), this.metadata.disableSkip && (document.removeEventListener("keydown", this.keyDown, !1), document.addEventListener("keydown", (e => {
//                             "Escape" !== e.key && e.key
//                         }), !1), null === (a = (0, s.ZP)(`announce-close${this.mid}`)) || void 0 === a || a.remove()))
//                     }
//                 }
//                 var p = n(2856),
//                     f = n(6577);
//                 var g = n(3655),
//                     _ = n(8479);

//                 function v(e, t = "DD/MM/YYYY") {
//                     let n = "";
//                     const i = new Date(e);
//                     switch (t) {
//                         case "MMMM Do YYYY":
//                             n = `${["January","February","March","April","May","June","July","August","September","October","November","December"][i.getMonth()+1]} ${a=i.getDate(),a+(a>0?["th","st","nd","rd"][a>3&&a<21||a%10>3?0:a%10]:"")} ${i.getFullYear()}`;
//                             break;
//                         case "MM/DD/YYYY":
//                             n = `${i.getMonth()+1}/${i.getDate()}/${i.getFullYear()}`;
//                             break;
//                         default:
//                             n = `${i.getDate()}/${i.getMonth()+1}/${i.getFullYear()}`
//                     }
//                     var a;
//                     return n
//                 }
//                 class y {
//                     constructor() {
//                         var e, t, n, a, l;
//                         this.user = (0, s.ZP)("my-email").innerText, this.team = JSON.parse((0, s.ZP)("team-details").innerText), this.isAdmin = (0, s.ZP)("my-email").innerText === this.team.admin.email, this.selectedMembers = [], this.selectedSeats = 0, this.getAllMembers = () => this.team.members, this.getSelectedMembers = () => this.selectedMembers, this.getMemberDetails = e => this.team.members.find((t => t.user.email === e)), this.selectAll = () => {
//                             const e = (0, s.ZP)("team-checkbox-all").checked;
//                             document.querySelectorAll('input[name="members[]"]').forEach((t => t.checked = e)), document.querySelectorAll('input[name="seats[]"]').forEach((t => t.checked = e)), this.selectedMembers = Array.from(document.querySelectorAll('input[name="members[]"]:checked')).map((e => e.value)), this.selectedSeats = document.querySelectorAll('input[name="seats[]"]:checked').length, this.actionMenu(e)
//                         }, this.updateSelectedSeats = (e = !1) => {
//                             this.selectedSeats = document.querySelectorAll('input[name="seats[]"]:checked').length, this.selectedSeats + this.selectedMembers.length ? this.actionMenu(!0) : this.actionMenu(!1)
//                         }, this.updateSelectedMembers = (e = !1) => {
//                             this.selectedMembers = Array.from(document.querySelectorAll('input[name="members[]"]:checked')).map((e => e.value)), this.selectedMembers.length + this.selectedSeats ? this.actionMenu(!0) : this.actionMenu(!1)
//                         }, this.resendInvitation = async e => {
//                             const t = await (0, o.$f)("/team/invite", "POST", {
//                                 emails: [e],
//                                 resend: !0
//                             });
//                             t.status ? (0, s.FN)("success", (0, i.Z)("invitationSent"), 3) : (0, s.FN)("danger", t.message, 3)
//                         }, this.actionMenu = (e = !1, t = "") => {
//                             const n = (0, s.ZP)("team-action-menu");
//                             e ? (n.style.display = "flex", n.innerHTML = "", t ? n.append((0, s.T)("span", t), (0, s.T)("img", {
//                                 className: "pointer",
//                                 src: "/img/icon/close-dark.svg",
//                                 onclick: () => this.actionMenu(!1)
//                             })) : n.append((0, s.T)("span", (0, s.T)("strong", (0, i.Z)("numberOfUser", this.selectedMembers.length)), " selected:"), (0, s.T)("span", {
//                                 className: "pointer text-red",
//                                 onclick: () => this.removeMember()
//                             }, (0, i.Z)("removeUsers")), (0, s.T)("span", {
//                                 className: "pointer text-red",
//                                 onclick: () => this.removeSeat()
//                             }, (0, i.Z)("removeSeats")), (0, s.T)("img", {
//                                 className: "pointer",
//                                 src: "/img/icon/close-dark.svg",
//                                 onclick: () => this.actionMenu(!1)
//                             }))) : n.style.display = "none"
//                         }, this.inviteMember = () => {
//                             var e, t, n, a;
//                             const o = new r.Z;
//                             o.setContent(`\n            <div style="margin-right: 40px;">\n                <h2 class="heavy">${(0,i.Z)("whoOnYourTeam")}</h2>\n                <p>${(0,i.Z)("youAreNowOwnerInviteSomeFriends","<br>")}</p>\n\n                <p class="bold">${(0,i.Z)("shareLinkToInviteUsers")}</p>\n                <div class="top-0" style="display: flex; align-items: center">\n                    <input type="text" value="https://pixlr.com/team/${this.team._id}/invite/link/" style="border: 1px solid #A2A2A4; border-radius: 6px; padding: 10px 6px; width: 65%; font-size: 16px; color: #3F4246">\n                    <button id="copy-invite-link" class="button" style="min-width: 30%; padding: 0; margin-left: 20px;">${(0,i.Z)("copy")}</button>\n                </div>\n\n                <hr class="top-30" style="width: 100%; margin-bottom: 1px solid black">\n\n                <p class="heavy top-10">${(0,i.Z)("inviceUsers")}</p>\n                <form id="invite-member-form">\n                    ${`<div class="input-group top-0">\n                            <input type="email" name="invitee[]" placeholder="Email" autocomplete="off">\n                            <p class="error-msg">${(0,i.Z)("common-enterValidEmail")}</p>\n                        </div>`.repeat(this.team.availableSeats>4?4:this.team.availableSeats)}\n                </form>\n                <a id="add-more-seats-modal" class="link bold pointer" style="margin-bottom: 15px;">${(0,i.Z)("addMoreSeats")}</a>\n\n                <div class="button-wrapper">\n                    <button class="button" id="invite-member-btn">${(0,i.Z)("inviteNow")}</button>\n                    <button class="button white" id="invite-member-cancel">${(0,i.Z)("illDoItLater")}</button>\n                </div>\n            </div>\n            <img src="/images/myaccount/invite-member-splash.png" alt="invite member splash" style="width: unset; height: unset">\n            \n        `), o.content.classList.add("popup-content"), o.content.style.padding = "25px", o.content.style.maxWidth = "unset", o.dialog.style.width = "fit-content", o.dialog.id = "invite-member-popup", o.dialog.style.maxWidth = "unset", null === (e = (0, s.ZP)("invite-member-cancel")) || void 0 === e || e.addEventListener("click", (() => o.cleanUp())), null === (t = (0, s.ZP)("invite-member-btn")) || void 0 === t || t.addEventListener("click", (() => {
//                                 let e = [];
//                                 document.querySelectorAll('input[name="invitee[]"]').forEach((t => {
//                                     e.push((0, s.b0)(t, "", "email", !0))
//                                 })), e.includes(!1) || this.submitHandler("invite")
//                             })), null === (n = (0, s.ZP)("add-more-seats-modal")) || void 0 === n || n.addEventListener("click", (() => {
//                                 o.cleanUp(), new f.Z("seats", {
//                                     platform: "web"
//                                 })
//                             })), null === (a = (0, s.ZP)("copy-invite-link")) || void 0 === a || a.addEventListener("click", (() => {
//                                 navigator.clipboard.writeText(`https://pixlr.com/team/${this.team._id}/invite/link/`)
//                             }))
//                         }, this.removeSeat = async (e = 0, t = []) => {
//                             var n, a;
//                             if (!this.team.seatRemovable) return this.actionMenu(!0, (0, i.Z)("cantRemoveSeatsMinimum5"));
//                             if (!this.team.additionalSeats) return this.actionMenu(!0, (0, i.Z)("noAdditionalSeatsToRemove"));
//                             e || (e = this.getSelectedMembers().length + this.selectedSeats);
//                             let l = t.length ? t : this.getSelectedMembers();
//                             const d = new r.Z;
//                             d.setContent(`\n            <div>\n                <h3 class="bold" style="word-wrap: anywhere">\n                    ${l.length?(0,i.Z)("areYouSureToRemoveNumberSeatsAndUsers",e,l.length):(0,i.Z)("areYouSureToRemoveNumberSeats",e)}\n                </h3>\n\n                <p class="top-30">\n                    ${l.length?(0,i.Z)("theseSeatsAndUserWillBeRemoveAndNotRenewed",e,l.length,v(this.team.subscription.dateEnd,"MMMM Do YYYY")):(0,i.Z)("theseSeatsWillBeRemoveAndNotRenewed",v(this.team.subscription.dateEnd,"MMMM Do YYYY"))}\n                </p>\n\n                <div class="button-wrapper">\n                    <button id="remove-seat-cancel" class="button w-wrapped white text-black">${(0,i.Z)("cancel")}</button>\n                    <button id="remove-seat-confirm" class="button w-wrapped red">${(0,i.Z)("remove")}</button>\n                </div>\n            </div>\n        `), d.content.classList.add("popup-content"), d.content.style.paddingBottom = "20px", d.dialog.id = "remove-seat-popup", d.dialog.style.width = "fit-content", null === (n = (0, s.ZP)("remove-seat-cancel")) || void 0 === n || n.addEventListener("click", (() => d.cleanUp())), null === (a = (0, s.ZP)("remove-seat-confirm")) || void 0 === a || a.addEventListener("click", (async () => {
//                                 const t = await (0, o.$f)(`/team/${this.team._id}/seats/removal`, "POST", {
//                                     members: l,
//                                     count: e
//                                 });
//                                 d.cleanUp(), t.status ? window.location.replace("/myaccount?tab=team") : this.actionMenu(!0, (0, i.Z)("failedToRemoveSeats"))
//                             }))
//                         }, this.recoverSeat = async (e = 1) => {
//                             const t = await (0, o.$f)(`/team/${this.team._id}/seats/recover`, "POST", {
//                                 count: e
//                             });
//                             t.status ? window.location.replace("/myaccount?tab=team") : this.actionMenu(!0, t.message)
//                         }, this.removeInvite = async e => {
//                             const t = await (0, o.$f)(`/team/${this.team._id}/remove`, "POST", {
//                                 emails: e
//                             });
//                             t.status ? window.location.replace("/myaccount?tab=team") : this.actionMenu(!0, t.message)
//                         }, this.removeMember = (e = []) => {
//                             var t, n;
//                             if (e.length || (e = this.getSelectedMembers()), !e.length) return this.actionMenu(!0, (0, i.Z)("noUserSelected"));
//                             if (!e.some((e => this.getMemberDetails(e)))) return void this.removeInvite(e);
//                             const a = new r.Z;
//                             a.setContent(`\n        <div>\n            <h3 class="heavy" style="word-wrap: anywhere">${(0,i.Z)("sureToRemoveNumberOfMemberFromYourTeam",e.length>2?`${e.length} ${(0,i.Z)("users")}`:e.map((e=>e.split("@")[0])).join(", "))}</h3>\n\n            <p class="text-gray small top-20">${(0,i.Z)("userSubscriptionWillRemovedImmediatelyAndNoPremiumAccess")}</p>\n\n            <div class="button-wrapper">\n                <button id="remove-member-stay" class="button w-wrapped white text-black">${(0,i.Z)("cancel")}</button>\n                <button id="remove-member-confirm" class="button w-wrapped red">${(0,i.Z)("remove")}</button>\n            </div>\n        </div>\n        `), a.content.classList.add("popup-content"), a.content.style.paddingBottom = "20px", a.dialog.style.width = "fit-content", a.dialog.id = "remove-member-popup", a.dialog.style.width = "fit-content", null === (t = (0, s.ZP)("remove-member-stay")) || void 0 === t || t.addEventListener("click", (() => a.cleanUp())), null === (n = (0, s.ZP)("remove-member-confirm")) || void 0 === n || n.addEventListener("click", (async () => {
//                                 const t = await (0, o.$f)(`/team/${this.team._id}/remove`, "POST", {
//                                     emails: e
//                                 });
//                                 a.cleanUp(), t.status ? window.location.replace("/myaccount?tab=team") : this.actionMenu(!0, t.message)
//                             }))
//                         }, this.transferOwner = e => {
//                             var t;
//                             const n = new r.Z;
//                             n.setContent(`\n        <div>\n            <h3 class="heavy">${(0,i.Z)("areYouSureToTransfer",e.user.name)}</h3>\n\n            <p class="small margin-0 top-20">${(0,i.Z)("byTransferringOwnershipYouWillLoseRightsTo")}</p>\n            <ul style="list-style-type: disc; margin-left: 20px; font-size: 14px">\n                <li>${(0,i.Z)("addOrRemoveUsers")}</li>\n                <li>${(0,i.Z)("addOrRemoveSeats")}</li>\n                <li>${(0,i.Z)("viewInvoiceAndPurchaseHistory")}</li>\n                <li>${(0,i.Z)("enableOrDisableRenewalStatusOfSubscription")}</li>\n            </ul>\n\n            <p class="top-20 small">${(0,i.Z)("theNewOwnerNeedToAcceptInvitationToCompleteTransfer")}</p>\n            <p class="margin-0 small">${(0,i.Z)("yourSubscriptionWillBeConvertedNonAdminSubscription")}</p>\n\n            <div class="button-wrapper">\n                <button id="cancel-transfer" class="button w-wrapped white text-black">${(0,i.Z)("cancel")}</button>\n                <button id="confirm-transfer" class="button w-wrapped red">${(0,i.Z)("transfer")}</button>\n            </div>\n        </div>\n        `), n.content.classList.add("popup-content"), n.content.style.paddingBottom = "20px", n.dialog.id = "transfer-owner-popup", n.dialog.style.width = "fit-content", null === (t = (0, s.ZP)("cancel-transfer")) || void 0 === t || t.addEventListener("click", (() => n.cleanUp())), (0, s.ZP)("confirm-transfer").addEventListener("click", (async () => {
//                                 if (!(await (0, o.$f)(`/team/${this.team._id}/transfer/invite`, "POST", {
//                                         id: e.user._id
//                                     })).status) return void(0, s.FN)("danger", (0, i.Z)("failedToTransferOwnership"), 3);
//                                 n.cleanUp();
//                                 const t = new r.Z;
//                                 t.setContent(`\n            <div class="text-center">\n                <img src="/images/icon/green-tick.png" alt="green tick icon" class="icon" style="width: 50px; align-self: center">\n                <h3 style="padding-top: 15px" class="bold">${(0,i.Z)("ownerTransferInvitationSent")}</h3>\n                <p>${(0,i.Z)("pleaseContactNewOwnerToAccept").replace("{newOwnerName}",e.user.name)}</p>\n            </div>\n            `), t.content.classList.add("popup-content"), t.dialog.id = "transfer-owner-popup", t.dialog.style.width = "fit-content", setTimeout((() => window.location.replace("/myaccount/?tab=team")), 1500)
//                             }))
//                         }, this.renderTable = (e = [], t = [], n = !1) => {
//                             if (!this.isAdmin) return;
//                             e.length || n || (e = this.getAllMembers()), t.length || n || (t = this.team.invitation);
//                             const a = (0, s.ZP)("team-members-table");
//                             if (a.innerText = "", !n || e.length || t.length) {
//                                 if (e.forEach(((e, t) => {
//                                         const n = (0, s.T)("tr");
//                                         if (n.append((0, s.T)("td", {
//                                                 style: "text-align: center"
//                                             }, this.team.admin._id === e.user._id ? "" : (0, s.T)("div", (0, s.T)("input", {
//                                                 type: "checkbox",
//                                                 id: `cb-${e.user.email}`,
//                                                 name: "members[]",
//                                                 value: e.user.email,
//                                                 style: "display: none;",
//                                                 onchange: () => this.updateSelectedMembers()
//                                             }), (0, s.T)("label", {
//                                                 className: "custom-checkbox",
//                                                 htmlFor: `cb-${e.user.email}`
//                                             }, ""))), (0, s.T)("td", e.user.name), (0, s.T)("td", {
//                                                 title: e.user.email
//                                             }, e.user.email.length > 25 ? `${e.user.email.substring(0,24)}...` : e.user.email), this.team.admin.email === e.user.email ? (0, s.T)("td", (0, i.Z)("owner")) : (0, s.T)("td", (0, i.Z)("activated"))), this.isAdmin && this.team.admin._id !== e.user._id) {
//                                             const t = (0, s.T)("td");
//                                             t.innerHTML = `\n                    <span style="position: relative;">\n                        <img class="ellipses" src="/images/myaccount/triple-dot.svg" alt="3 ellipses icon">\n                        <div class="ellipses-menu" style="top: 22px; right: -59px;">\n                            <a class="make-owner" data-email="${e.user.email}" >${(0,i.Z)("makeOwner")}</a>\n                            <a class="remove-user" data-email="${e.user.email}" data-name="${e.user.name}">${(0,i.Z)("removeUser")}</a>\n                            ${this.team.additionalSeats&&this.team.seatRemovable?`<a class="remove-seat" data-email=${e.user.email}>${(0,i.Z)("removeSeat")}</a>`:""}\n                        </div>\n                    </span>   \n                `, n.append(t)
//                                         } else n.append((0, s.T)("td"));
//                                         a.append(n)
//                                     })), t.forEach((e => {
//                                         const t = (0, s.T)("tr");
//                                         t.append((0, s.T)("td", {
//                                             style: "text-align: center"
//                                         }, (0, s.T)("div", (0, s.T)("input", {
//                                             type: "checkbox",
//                                             id: `cb-${e}`,
//                                             name: "members[]",
//                                             value: e,
//                                             style: "display: none;",
//                                             onchange: () => this.updateSelectedMembers()
//                                         }), (0, s.T)("label", {
//                                             className: "custom-checkbox",
//                                             htmlFor: `cb-${e}`
//                                         }, ""))), (0, s.T)("td", e.split("@")[0]), (0, s.T)("td", {
//                                             title: e
//                                         }, e.length > 25 ? `${e.substring(0,24)}...` : e), (0, s.T)("td", {
//                                             className: "text-blue"
//                                         }, (0, i.Z)("pendingInvite")));
//                                         const n = (0, s.T)("td");
//                                         n.innerHTML = `\n                <span style="position: relative;">\n                    <img class="ellipses" src="/images/myaccount/triple-dot.svg" alt="3 ellipses icon">\n                    <div class="ellipses-menu" style="top: 22px; right: -59px;">\n                        <a class="resend-link" data-email="${e}">${(0,i.Z)("resendLink")}</a>\n                        <a class="remove-invite" data-email="${e}" data-name="${e.split("@")[0]}">${(0,i.Z)("removeInvite")}</a>\n                        ${this.team.additionalSeats&&this.team.seatRemovable?`<a class="remove-seat" data-email=${e}>${(0,i.Z)("removeSeat")}</a>`:""}\n                    </div>\n                </span>   \n            `, t.append(n), a.append(t)
//                                     })), !n && this.team.currentSeats !== this.team.maxSeats) {
//                                     let e = this.team.availableSeats,
//                                         t = this.team.renewal.seatDeduction;
//                                     for (; e > 0;) {
//                                         let n = (0, g.Zd)();
//                                         a.append((0, s.T)("tr", {
//                                             className: t ? "removal" : "pending"
//                                         }, (0, s.T)("td", {
//                                             style: "text-align: center"
//                                         }, t ? (0, s.T)("div") : (0, s.T)("div", (0, s.T)("input", {
//                                             type: "checkbox",
//                                             id: `cb-${n}`,
//                                             name: "seats[]",
//                                             value: n,
//                                             style: "display: none;",
//                                             onchange: () => this.updateSelectedSeats()
//                                         }), (0, s.T)("label", {
//                                             className: "custom-checkbox",
//                                             htmlFor: `cb-${n}`
//                                         }, ""))), (0, s.T)("td", (0, s.T)("a", {
//                                             className: "link",
//                                             onclick: () => this.inviteMember()
//                                         }, `+ ${(0,i.Z)("invite")}`)), (0, s.T)("td", {
//                                             className: "text-capitalize"
//                                         }, (0, i.Z)("common-email")), (0, s.T)("td", {
//                                             className: "text-capitalize"
//                                         }, t ? (0, i.Z)("pendingRemoval") : "-"), (0, s.T)("td", (0, s.T)("span", {
//                                             style: "position: relative"
//                                         }, (0, s.T)("img", {
//                                             className: "ellipses",
//                                             src: "/images/myaccount/triple-dot.svg",
//                                             alt: "3 ellipses icon"
//                                         }), t ? (0, s.T)("div", {
//                                             className: "ellipses-menu",
//                                             style: "top: 22px; right: -59px"
//                                         }, (0, s.T)("a", {
//                                             className: "recover-seat"
//                                         }, (0, i.Z)("recoverSeat"))) : "")))), t && --t, --e
//                                     }
//                                 }
//                             } else a.append((0, s.T)("tr", (0, s.T)("td", {
//                                 colSpan: 5
//                             }, (0, i.Z)("noMembersFound"))))
//                         }, this.sortTable = () => {
//                             const e = (0, s.ZP)("sort-team-table");
//                             if (e.classList.contains("desc")) e.classList.remove("desc"), this.renderTable();
//                             else {
//                                 e.classList.add("desc");
//                                 const t = [...this.getAllMembers()].sort(((e, t) => e.user.name.toLowerCase() < t.user.name.toLowerCase() ? -1 : e.user.name.toLowerCase() > t.user.name.toLowerCase() ? 1 : 0)),
//                                     n = this.team.invitation.sort(((e, t) => e.toLowerCase() < t.toLowerCase() ? -1 : e.toLowerCase() > t.toLowerCase() ? 1 : void 0));
//                                 this.renderTable(t, n, !1)
//                             }
//                         }, this.filterTable = () => {
//                             const e = (0, s.ZP)("filter-team").value;
//                             if (e) {
//                                 const t = this.team.members.filter((t => {
//                                         if ("owner" === e.toLowerCase() && t.user._id === this.team.admin._id || t.user.email.includes(e) || t.user.name.includes(e) || "activated" === e.toLowerCase()) return t
//                                     })),
//                                     n = this.team.invitation.filter((t => {
//                                         if ("pending" === e.toLowerCase() || t.includes(e)) return t
//                                     }));
//                                 this.renderTable(t, n, !0)
//                             } else this.renderTable()
//                         }, this.submitHandler = async e => {
//                             var t;
//                             if ("invite" === e) {
//                                 const e = {
//                                         emails: [],
//                                         resend: !1
//                                     },
//                                     n = document.querySelectorAll("#invite-member-form input");
//                                 if (e.emails = Array.from(n).filter((e => "" !== e.value)).map((e => e.value)), !e.emails.length) return;
//                                 const i = await (0, o.$f)("/team/invite", "POST", e);
//                                 if (!i.status) return null === (t = document.getElementById("close-invite-member-popup")) || void 0 === t || t.click(), void(0, s.FN)("danger", i.message, 3);
//                                 window.location.replace("/myaccount?tab=team")
//                             }
//                         }, this.team.currentSeats = this.team.members.length + this.team.invitation.length, this.team.maxSeats = this.team.maxSeats + this.team.additionalSeats, this.team.availableSeats = this.team.maxSeats - this.team.currentSeats, this.team.seatRemovable = !(this.team.maxSeats - ((null === (e = this.team.renewal) || void 0 === e ? void 0 : e.seatDeduction) || 0) <= 5), this.isAdmin && ((0, s.ZP)("manage-seat").innerHTML = `<span class="bold">${this.team.currentSeats}/${this.team.maxSeats}</span> ${(0,i.Z)("seatsUsed")}`, (null === (t = this.team.renewal) || void 0 === t ? void 0 : t.seatDeduction) && ((0, s.ZP)("seat-deducted").innerHTML = (0, i.Z)("numberOfSeatsWillBeRemoved", this.team.renewal.seatDeduction)), (0, s.ZP)("team-checkbox-all").addEventListener("change", (() => this.selectAll()))), this.renderTable(), null === (n = (0, s.ZP)("sort-team-table")) || void 0 === n || n.addEventListener("click", (() => this.sortTable())), null === (a = (0, s.ZP)("filter-team")) || void 0 === a || a.addEventListener("input", (() => this.filterTable())), null === (l = (0, s.ZP)("add-more-seats")) || void 0 === l || l.addEventListener("click", (() => new f.Z("seats", {
//                             platform: "web"
//                         }))), document.querySelectorAll(".resend-link").forEach((e => {
//                             e.addEventListener("click", (() => this.resendInvitation(e.dataset.email)))
//                         })), document.querySelectorAll(".remove-user").forEach((e => {
//                             e.addEventListener("click", (() => {
//                                 this.removeMember([e.dataset.email])
//                             }))
//                         })), document.querySelectorAll(".remove-invite").forEach((e => {
//                             e.addEventListener("click", (() => {
//                                 this.removeInvite([e.dataset.email])
//                             }))
//                         })), document.querySelectorAll(".make-owner").forEach((e => {
//                             e.addEventListener("click", (async () => {
//                                 if ((0, s.ZP)("set-password")) return (0, s.FN)("danger", (0, i.Z)("setPasswordToTransferOwnership"), 3);
//                                 const t = new _.Z({
//                                     view: "additionalVerification"
//                                 });
//                                 t.auth.getAdditionalVerificationstatus().addEventListener("submit", (async () => {
//                                     await t.auth.additionalVerificationHandler() && this.transferOwner(this.getMemberDetails(e.dataset.email))
//                                 }))
//                             }))
//                         })), document.querySelectorAll(".remove-seat").forEach((e => {
//                             e.addEventListener("click", (async () => this.removeSeat(1, [e.dataset.email])))
//                         })), document.querySelectorAll(".recover-seat").forEach((e => {
//                             e.addEventListener("click", (async () => this.recoverSeat()))
//                         }))
//                     }
//                 }
//                 var w = n(381),
//                     b = n.n(w);
//                 class M {
//                     constructor(e, t, n) {
//                         var l, d, c, u, h;
//                         this.periods = "", this.checkUpgradeStatus = async () => {
//                             var e;
//                             const t = await (0, o.wU)();
//                             if (t.status && t.data.length && ("paid" === this.subscription.type && !this.subscription.provider || "licensed" === this.subscription.type && !this.subscription.subscriptionPlan.code.includes("lifetime"))) {
//                                 const n = t.data.map((e => `\n                    <a\n                        style="text-transform: capitalize"\n                        class="link text-blue upgrade-plan"\n                        data-plan="${e}"\n                        href="#"\n                    >${e.split("-")[0]}</a>\n                `)),
//                                     a = (0, s.T)("div", {
//                                         className: "bubble sub-card"
//                                     });
//                                 a.innerHTML = `\n                <img src="/images/myaccount/pencil.png" alt="pencil mask" style="position: absolute;top: -15px; right: 0;">\n\n                <div style="width: 60%; display: flex; flex-direction: column; justify-content: space-between;">\n                    <span class="heavy top-30" style="font-size: 18px;">${(0,i.Z)("upgradeToYearly")}</span>\n\n                    <div style="display: flex; gap: 10px 20px; flex-wrap: wrap; padding-top: 20px">\n                        ${n.map((e=>`<span>${e}</span>`)).join(" ")}\n                    </div>\n                </div>\n\n            `, null === (e = (0, s.ZP)(this.holder)) || void 0 === e || e.append(a), document.querySelectorAll(".upgrade-plan").forEach((e => {
//                                     e.addEventListener("click", (() => this.upgradePlan(e.dataset.plan)))
//                                 }))
//                             }
//                         }, this.upgradePlan = async e => {
//                             new f.Z("subscription", {
//                                 platform: "web",
//                                 checkoutMode: "upgrade",
//                                 plan: e
//                             })
//                         }, this.generate = () => {
//                             var e;
//                             let t = "",
//                                 n = this.subscription.product,
//                                 r = this.periods ? `(${this.periods})` : "",
//                                 o = `\n            <p class="margin-0">${this.subscription.currency} ${this.subscription.amount}</p>\n            <p class="margin-0">${(0,i.Z)("validUntilDate",b()(this.subscription.dateEnd).format("MMMM Do YYYY"))}</p>\n        `,
//                                 l = "",
//                                 d = "",
//                                 c = this.subscription.credits ? this.subscription.credits.subscription : 0;
//                             (this.subscription.freeTrial || (null === (e = this.latest_invoice) || void 0 === e ? void 0 : e.freeTrial)) && (o = `\n                <p class="margin-0">${this.subscription.currency} ${this.subscription.amount}</p>\n                <p class="margin-0">${(0,i.Z)("freeTrialEndsOn")} <b>${b()(this.subscription.dateEnd).format("MMMM Do YYYY")}</b></p>\n            `), "licensed" === this.subscription.type ? t = "active" : "Pixlr Team" === this.subscription.product && this.subscription.userId !== a.a.id ? (o = `<p class="margin-0">${(0,i.Z)("activeSinceDate",b()(this.subscription.dateStart).format("MMMM Do YYYY"))}</p>`, l = `<span class="link text-red top-30" id="leave-team">${(0,i.Z)("removeTeamSubscription")}</span>`) : "Pixlr Enterprise" === this.subscription.product ? (o = `<p class="margin-0">${(0,i.Z)("activeSinceDate",b()(this.subscription.dateStart).format("MMMM Do YYYY"))}</p>`, t = "active") : "paypal" === this.subscription.provider ? ("ACTIVE" === this.subscription.providerStatus && (l = `<span class="link text-grey" id="cancel-renewal">${(0,i.Z)("cancelSubscription")}</span>`), d = this.subscription.providerProductId ? `<a href="https://www.paypal.com/billing/subscriptions/${this.subscription.providerProductId}" target="_blank" class="italic" style="line-height: 25px" title="${(0,i.Z)("visitProviderPlatformToManageSubscription")}">${(0,i.Z)("subscriptionManagedByPaypal")}</a>` : `<p class="italic" style="line-height: 25px" title="${(0,i.Z)("visitProviderPlatformToManageSubscription")}">${(0,i.Z)("subscriptionManagedByPaypal")}</p>`) : "google" === this.subscription.provider ? d = `\n                <p class="italic margin-0" title="${(0,i.Z)("visitProviderPlatformToManageSubscription")}">${(0,i.Z)("subscriptionManagedByGooglePlay")}</p>\n                <a class="link text-blue"\n                    target="_blank"\n                    href="https://play.google.com/store/account/subscriptions?sku=${this.subscription.subscriptionPlan.code}&package=${this.subscription.providerRequest.packageName}"\n                >${(0,i.Z)("clickToManage")}</a>\n            ` : "apple" === this.subscription.provider ? d = `<p class="italic margin-0" title="${(0,i.Z)("visitProviderPlatformToManageSubscription")}">${(0,i.Z)("subscriptionManagedByAppleStore")}</p>` : "paid" !== this.subscription.type || this.subscription.provider || (this.subscription.autoRenew ? (o += `<p class="margin-0">${(0,i.Z)("nextBilledDateOn")} <b>${b()(this.subscription.dateEnd).subtract(this.subscription.freeTrial?1:3,"days").format("MMMM Do YYYY")}</b></p>`, l = `<span class="link text-grey" id="${this.subscription.freeTrial?"cancel-trial":"cancel-renewal"}">${(0,i.Z)("cancelSubscription")}</span>`, t = "active", this.subscription.nextRenewal && (o += `\n                        <div class="top-20">\n                            <p>${(0,i.Z)("yourNextRenewal",`<b>${this.subscription.nextRenewal.plan.product}</b>`)}</p>\n                        </div>\n                    `)) : (l = `<button class="button top-10" style="min-width: 150px" id="reactivate-renewal">${(0,i.Z)("reactivate")}</button>`, t = "cancelled")), o += `<p class="margin-0">${(0,i.Z)("generativeCredits")} : ${c}</p>`;
//                             const u = (0, s.T)("div", {
//                                 id: `sub-card-${this.subscription._id}`,
//                                 className: "bubble sub-card "
//                             });
//                             return u.innerHTML = `\n            \n            \n            <div class="sub-card-content w-100">\n                <img class="sub-card-badge" src="/img/misc/${this.type}-icon.svg" alt="${this.type} icon" />\n\n                <div style="width: 100%">\n                    <h3 class="text-default">${n} ${r}</h5>\n                    <div class="top-20">${o}</div>\n                    ${l?`<div class="top-20">${l}</div>`:""}\n                    ${d?`<div class="top-10">${d}</div>`:""}\n                </div>\n            </div>\n        `, u
//                         }, this.cancelTrial = () => {
//                             const {
//                                 dateEnd: e,
//                                 _id: t
//                             } = this.subscription, n = new r.Z;
//                             n.setContent(`\n            <div style="margin-right: 40px; width: 450px;">\n                <h2>${(0,i.Z)("wantToCancelYourSubscription")}?</h2>\n                <p>${(0,i.Z)("yourPixlrWillEnd")} <b>${b()(e).format("MMMM Do YYYY")}</b>.</p>\n                <p><b>${(0,i.Z)("butWaitPremium")}:</b></p>\n                <ul class="icon">\n                    <li>\n                        <img src="/images/myaccount/blue-tick.svg" alt="blue tick">\n                        <span>${(0,i.Z)("aiToolsFeatures")}</span>\n                    </li>\n                    <li>\n                        <img src="/images/myaccount/blue-tick.svg" alt="blue tick">\n                        <span>${(0,i.Z)("growingLibrary")}</span>\n                    </li>\n                    <li>\n                        <img src="/images/myaccount/blue-tick.svg" alt="blue tick">\n                        <span>${(0,i.Z)("exclusiveFonts")}</span>\n                    </li>\n                </ul>\n  \n                <button class="button w-100 top-20" id="submit-cancel-trial-50">${(0,i.Z)("50OffYearlyPlan")}</button>\n                <button class="button white w-100 top-20" id="submit-cancel-trial-30">${(0,i.Z)("30OffMonthlyPlan")}</button>\n                <button class="button white borderless w-100 top-20" id="submit-cancel-trial">${(0,i.Z)("cancelAnyway")}</button>\n            </div>\n            <img src="/images/myaccount/cancel-trial.jpg" alt="cancel subs">\n        `), n.content.classList.add("popup-content"), n.content.style.maxWidth = "unset", n.content.style.padding = "25px", n.dialog.id = "cancel-trial-popup", n.dialog.style.maxWidth = "fit-content", (0, s.ZP)("submit-cancel-trial-30").addEventListener("click", (async () => {
//                                 const e = await fetch("/myaccount/subscription/", {
//                                     method: "PUT",
//                                     headers: {
//                                         "Content-Type": "application/json"
//                                     },
//                                     body: JSON.stringify({
//                                         splan: "premium-monthly",
//                                         type: "free-trial"
//                                     })
//                                 });
//                                 await e.json();
//                                 n.cleanUp()
//                             })), (0, s.ZP)("submit-cancel-trial-50").addEventListener("click", (async () => {
//                                 const e = await fetch("/myaccount/subscription/", {
//                                     method: "PUT",
//                                     headers: {
//                                         "Content-Type": "application/json"
//                                     },
//                                     body: JSON.stringify({
//                                         splan: "premium-yearly",
//                                         type: "free-trial"
//                                     })
//                                 });
//                                 await e.json();
//                                 n.cleanUp()
//                             })), (0, s.ZP)("submit-cancel-trial").addEventListener("click", (async () => {
//                                 const e = await fetch("/myaccount/unsubscribe/free-trial", {
//                                     method: "POST",
//                                     headers: {
//                                         "Content-Type": "application/json"
//                                     }
//                                 });
//                                 (await e.json()).status ? window.location.reload() : alert("Failed to cancel free trial")
//                             }))
//                         }, this.cancelRenewal = () => {
//                             var e, t;
//                             const {
//                                 _id: n,
//                                 subscriptionPlan: {
//                                     code: a,
//                                     monthDuration: o
//                                 },
//                                 dateEnd: l,
//                                 provider: d
//                             } = this.subscription, c = n, u = "paypal" === d ? this.subscription.providerProductId : null, h = a.split("-")[0], m = a.split("-")[1], p = new r.Z;
//                             p.setContent(`\n            <div style="width: 929px;display: flex;gap: 25px;">\n                <h2 class="heavy">${(0,i.Z)("cancelSubscription")}?</h2>\n                <div class="small" >\n                    <span>${(0,i.Z)("yourPlanToPixlrWillEndOn").replace("{plan}",`
//                                 Pixlr $ {
//                                     h
//                                 }
//                                 $ {
//                                     m
//                                 }
//                                 `)}</span>\n                    <span class="heavy">${b()(l).format("MMMM Do YYYY")}</span>\n                </div>\n\n                <div class="heavy">${(0,i.Z)("butWaitHeresWhatYouWillGetWithPixlrPremium")}</div>\n\n                <ul style="font-size: 14px;">\n                    <li style="display: flex;gap: 10px;margin:0 0 16px 0;">\n                        <img src="/images/myaccount/green-tick.svg" alt="green tick">\n                        ${(0,i.Z)("aiToolsAICutoutGlitchFocusDispersionStudio")}\n                    </li>\n                    <li style="display: flex;gap: 10px;margin:0 0 16px 0;">\n                        <img src="/images/myaccount/green-tick.svg" alt="green tick">\n                        ${(0,i.Z)("growingLibraryOfTemplates")}\n                    </li>\n                    <li style="display: flex;gap: 10px;margin:0 0 16px 0;">\n                        <img src="/images/myaccount/green-tick.svg" alt="green tick">\n                        ${(0,i.Z)("hundredsOfExclusiveFonts")}\n                    </li>\n                </ul>\n\n                ${u?"":-1!=["plus-monthly","plus-yearly-2023","plus-yearly","premium-monthly"].indexOf(a)?`<button class="button" style="width: 100%; " id="upgrade-to-premium">${(0,i.Z)("upgradeToPixlrPremium")}</button>`:-1!=["premium-yearly","team-monthly"].indexOf(a)?`<button class="button" style="width: 100%;" id="upgrade-to-team">${(0,i.Z)("upgradeToPixlrTeams")}</button>`:""}\n                <button class="button white" style="width: 100%;text-align:center; cursor:pointer;" id="submit-cancel-renewal">\n                    ${(0,i.Z)("cancelAnyway")}\n                </button>\n            </div>\n            <img src="/images/myaccount/cancel.jpg" alt="cancel subs" style="width:362px;height:418px">\n        `), p.content.classList.add("popup-content"), p.content.style.maxWidth = "800px", p.content.style.padding = "25px", p.content.style.gap = "30px", p.dialog.id = "cancel-subscription-popup", p.dialog.style.width = "fit-content";
//                             u && (0, s.ZP)("upgrade-to-team") && ((0, s.ZP)("upgrade-to-team").style.display = "none"), (0, s.ZP)("submit-cancel-renewal").addEventListener("click", (async () => {
//                                 const e = u ? `/paypal/subscriptions/${u}/cancel` : `/myaccount/unsubscribe/${c}`,
//                                     t = await fetch(e, {
//                                         method: "POST"
//                                     });
//                                 (await t.json()).status ? window.location.replace("/myaccount/?tab=subscription") : alert((0, i.Z)("failedToCancelRenewal"))
//                             })), null === (e = (0, s.ZP)("upgrade-to-premium")) || void 0 === e || e.addEventListener("click", (e => {
//                                 p.cleanUp(), this.upgradePlan("premium-yearly")
//                             })), null === (t = (0, s.ZP)("upgrade-to-team")) || void 0 === t || t.addEventListener("click", (e => {
//                                 p.cleanUp(), this.upgradePlan("team-yearly")
//                             }))
//                         }, this.reactivateRenewal = async () => {
//                             const e = this.subscription._id,
//                                 t = await fetch(`/myaccount/reactivate/${e}`, {
//                                     method: "POST",
//                                     credentials: "same-origin"
//                                 }),
//                                 n = await t.json();
//                             n.status ? n.newCard ? new m("create", {
//                                 disableSkip: !0
//                             }) : window.location.reload() : alert("Failed to enable renewal")
//                         }, this.leaveTeam = async () => {
//                             var e, t;
//                             const n = new r.Z;
//                             n.content.innerHTML = "", n.setContent(`\n          <div>\n              <h3 class="heavy">${(0,i.Z)("areYouSureWantToLeaveTeamSub",this.team.name)}</h3>\n              <p class="top-20">${(0,i.Z)("yourAccessToPremiumAssetWillEndNow")}</p>\n  \n              <div class="button-wrapper">\n                  <button id="leave-team-cancel" class="button transparent text-black">${(0,i.Z)("cancel")}</button>\n                  <button id="leave-team-confirm" class="button red">${(0,i.Z)("leave")}</button>\n              </div>\n          </div>\n      `), n.content.style.padding = "30px", n.content.classList.add("popup-content"), n.dialog.id = "leave-team-popup", n.dialog.style.width = "fit-content", null === (e = (0, s.ZP)("leave-team-cancel")) || void 0 === e || e.addEventListener("click", (() => n.cleanUp())), null === (t = (0, s.ZP)("leave-team-confirm")) || void 0 === t || t.addEventListener("click", (async () => {
//                                 const e = await (0, o.$f)(`/team/${this.team.id}/leave`, "POST", {});
//                                 e.status ? window.location.replace("/myaccount?tab=subscription") : (0, s.FN)("danger", e.message, 3)
//                             }))
//                         }, this.aiCreditsAddOn = () => {
//                             var e, t, n, r;
//                             0 === a.a.credits ? null === (e = (0, s.ZP)(this.holder)) || void 0 === e || e.append((0, s.T)("div", {
//                                 className: "bubble sub-card"
//                             }, (0, s.T)("div", {
//                                 className: "sub-card-content w-100"
//                             }, (0, s.T)("img", {
//                                 className: "sub-card-badge",
//                                 src: "/images/checkout/icon/credits.svg"
//                             }), (0, s.T)("div", {
//                                 style: "width: 100%; display: flex; flex-direction: column"
//                             }, (0, s.T)("h3", {
//                                 className: "text-default"
//                             }, (0, i.Z)("AICreditAddOneTitle")), (0, s.T)("div", {
//                                 className: "top-20"
//                             }, (0, i.Z)("getAICreditToGenerateImageAndUseAIAcrossProducts")), (0, s.T)("a", {
//                                 className: "link text-blue",
//                                 style: "display: inline-flex; margin-top: auto",
//                                 onclick: () => new f.Z("credits", {
//                                     platform: "web"
//                                 })
//                             }, (0, i.Z)("buyAddOns")))))) : null === (t = (0, s.ZP)(this.holder)) || void 0 === t || t.append((0, s.T)("div", {
//                                 className: "bubble sub-card"
//                             }, (0, s.T)("div", {
//                                 className: "sub-card-content w-100"
//                             }, (0, s.T)("img", {
//                                 className: "sub-card-badge",
//                                 src: "/images/checkout/icon/credits.svg"
//                             }), (0, s.T)("div", {
//                                 style: "width: 100%; display: flex; flex-direction: column"
//                             }, (0, s.T)("h3", {
//                                 className: "text-default"
//                             }, (0, i.Z)("AICreditAddOneTitle")), (0, s.T)("div", {
//                                 className: "top-20"
//                             }, (0, i.Z)("balanceCredit", null !== (r = null === (n = this.subscription.credits) || void 0 === n ? void 0 : n.credits) && void 0 !== r ? r : "-")), (0, s.T)("div", (0, i.Z)("addOnAICreditsDoNotExpire")), (0, s.T)("a", {
//                                 className: "link text-blue",
//                                 style: "display: inline-flex; margin-top: auto",
//                                 onclick: () => new f.Z("credits", {
//                                     platform: "web"
//                                 })
//                             }, (0, i.Z)("buyAddOns")), (0, s.T)("img", {
//                                 src: "/images/myaccount/coins.png",
//                                 width: 165,
//                                 style: "position: absolute; top: 5px; right: -55px"
//                             })))))
//                         }, (0, s.ZP)(t) && (this.holder = t, this.subscription = e, this.team = n, this.type = e.subscriptionPlan.product.toLowerCase().replace(/^pixlr\s/, ""), this.latest_invoice = null === (l = e.transId) || void 0 === l ? void 0 : l.pop(), "licensed" !== e.type && (1 === e.subscriptionPlan.monthDuration ? this.periods = (0, i.Z)("monthly") : 3 === e.subscriptionPlan.monthDuration ? this.periods = (0, i.Z)("quarterly") : 12 === e.subscriptionPlan.monthDuration ? this.periods = (0, i.Z)("yearly") : e.subscriptionPlan.monthDuration > 50 && (this.periods = (0, i.Z)("lifetime"))), (0, s.ZP)(t).innerHTML = this.generate().outerHTML, null === (d = (0, s.ZP)("cancel-trial")) || void 0 === d || d.addEventListener("click", (() => this.cancelTrial())), null === (c = (0, s.ZP)("cancel-renewal")) || void 0 === c || c.addEventListener("click", (() => this.cancelRenewal())), null === (u = (0, s.ZP)("reactivate-renewal")) || void 0 === u || u.addEventListener("click", (() => this.reactivateRenewal())), null === (h = (0, s.ZP)("leave-team")) || void 0 === h || h.addEventListener("click", (() => this.leaveTeam())), this.aiCreditsAddOn())
//                     }
//                 }
//                 class x {
//                     constructor() {
//                         var e, t, n, g, _, v;
//                         if (this.setActiveTab = e => {
//                                 ["profile", "subscription", "download", "developer", "team", "redeem"].forEach((t => {
//                                     var n, i, a, r;
//                                     t === e ? (null === (n = document.getElementsByClassName(t)[0]) || void 0 === n || n.classList.add("active"), null === (i = (0, s.ZP)(t)) || void 0 === i || i.classList.add("active")) : (null === (a = document.getElementsByClassName(t)[0]) || void 0 === a || a.classList.remove("active"), null === (r = (0, s.ZP)(t)) || void 0 === r || r.classList.remove("active"))
//                                 }))
//                             }, this.loadApiKeys = async () => {
//                                 const e = (0, s.ZP)("developer-products"),
//                                     t = await fetch("/api/myaccount/developer/list"),
//                                     n = await t.json();
//                                 e.querySelectorAll(".access").forEach((e => {
//                                     e.remove()
//                                 }));
//                                 for (const i of n.data) {
//                                     const t = this.createApiKeyRow(i);
//                                     e.append(t)
//                                 }
//                             }, this.changePassword = () => {
//                                 new d
//                             }, this.changeEmail = () => {
//                                 if ("true" !== (0, s.ZP)("change-email").dataset.allowed) return (0, s.FN)("danger", (0, i.Z)("setPasswordToChangeEmail"), 3);
//                                 new l
//                             }, this.changeUsername = () => {
//                                 new c
//                             }, this.setPassword = () => {
//                                 new h
//                             }, this.deleteAccount = () => "true" === (0, s.ZP)("delete-account").dataset.teammember ? (0, s.FN)("danger", (0, i.Z)("pleaseRemoveTeamSubscriptionBeforeDeleteAccount"), 3) : "true" === (0, s.ZP)("delete-account").dataset.teamadmin ? (setTimeout((() => {
//                                 window.location.href = "/myaccount/?tab=team"
//                             }), 3e3), (0, s.FN)("danger", (0, i.Z)("transferYourTeamOwnershipBeforeDeleteAccount"), 3)) : void new u, this.updateNewsletter = async e => {
//                                 const t = (0, s.ZP)("change-name").dataset.name,
//                                     n = await (0, o.$f)("/myaccount/api/profile", "PUT", {
//                                         newsletter: e.checked,
//                                         name: t
//                                     }, !0);
//                                 return n.status, (0, s.FN)("success", n.message, .6)
//                             }, this.loadSubscription = async () => {
//                                 const e = await (0, o.Qo)(),
//                                     t = await (0, o.oL)();
//                                 if (!1 === e.status && !1 === t.status) return (0, s.ZP)("user-subscription").innerHTML = `\n                <section class="w-100">\n                    <div class="content banner" style="max-width: 100%">\n                        <div class="info">\n                            <h2> <img class="plan-icon" src="/img/misc/premium-icon.svg" alt="premium icon">\n                            ${a.a.eligibleForTrail?`${(0,i.Z)("tryPremiumForFree").replace("{number}","7")}`:`<h5 class="text-default">${(0,i.Z)("likedTrial")}</h5>`}\n                            </h2>\n                            <ul class="top-30">\n                                <li class="iconed">${(0,i.Z)("pricingAdFree")}</li>\n                                <li class="iconed">${(0,i.Z)("pricingUnlimitedSaves")}</li>\n                                <li class="iconed">${(0,i.Z)("pricingCreditsIncluded").replace("{number}","1000")}</li>\n                                <li class="iconed">${(0,i.Z)("pricingPrivateMode")}</li>\n                                <li class="iconed">${(0,i.Z)("pricingBigLibrary")}</li>\n                            </ul>\n                            <button class="button med top-30" id="subscribe-now">\n                                ${a.a.eligibleForTrail?(0,i.Z)("indexPremiumSubscriptionLink"):(0,i.Z)("upgradeToPremium")}\n                            </button>\n                        </div>\n                    </div>\n                </section>\n            `, void(0, s.ZP)("subscribe-now").addEventListener("click", (() => {
//                                     new p.Z("myAccount", "premium")
//                                 }));
//                                 if (e.status) {
//                                     const t = e.data;
//                                     new M(t, "user-subscription")
//                                 } else if (t.status && t.data.subscription) {
//                                     const {
//                                         subscription: e,
//                                         team: n
//                                     } = t.data;
//                                     new M(e, "user-subscription", n)
//                                 }
//                             }, this.openUpgradeSubscriptionStatusModal = e => {
//                                 const t = new r.Z;
//                                 t.setContent(`\n    ${e?`\n            <img src="/images/icon/green-tick.png" alt="green tick icon" class="icon" style="width:50px; height:50px; margin: 20px auto 0">\n            <h3 class="top-20">${(0,i.Z)("thankYouExclamation")}</h3>\n            <p style="margin:0">${(0,i.Z)("yourConfirmationHasBeenSent")}</p>\n        `:`\n            <img src="/images/icon/red-cross.png" alt="red cross icon" class="icon" style="width:50px; height:50px">\n            <h3 class="top-20">${(0,i.Z)("failedToUpdateSubscription")}</h3>\n            <a class="button" id="btn-failed" aria-label="Try Again" onclick="window.location.reload()">${(0,i.Z)("tryAgain")}</a>\n        `}\n    `), t.content.classList.add("popup-content"), t.content.style.flexDirection = "column", t.content.style.textAlign = "center", t.dialog.id = "upgrade-subscription-status"
//                             }, this.openDownloadedTemplateModal = e => {
//                                 const t = new r.Z;
//                                 t.setContent(`\n        <div class="row" style="padding: 10px 0">\n            <h2>${(0,i.Z)("editTemplate")}</h2>\n            <p>${(0,i.Z)("myaccountModalDes")}</p>\n\n            <a style="align-self: center;" href="/designer/?template=${e}" class="button top-10">${(0,i.Z)("editOn")} Designer</a>\n        </div>\n    `), t.content.classList.add("popup-content", "text-center"), t.dialog.id = "downloaded-template-modal", t.dialog.style.maxWidth = "max-content"
//                             }, this.loadTeams = () => {
//                                 new y, (0, s.ZP)("transfer-ownership-welcome-prompt") && this.transferOwnershipWelcomePrompt()
//                             }, this.transferOwnershipWelcomePrompt = () => {
//                                 var e;
//                                 const t = new r.Z;
//                                 t.setContent(`\n          <div>\n              <h3 class="heavy">${(0,i.Z)("completeTheOwnerTransfer")}</h3>\n\n              <p class="top-20">${(0,i.Z)("youAreTheNewOwnerPleaseAddPaymentToComplete",(0,s.ZP)("my-name").innerText)}</p>\n\n\n              <button id="admin-add-payment-card" class="button top-20 w-wrapped">${(0,i.Z)("addPaymentMethod")}</button>\n          </div>\n          `), t.dialog.id = "transfer-ownership-welcome-prompt-modal", t.dialog.style.width = "fit-content", t.content.classList.add("popup-content"), null === (e = (0, s.ZP)("admin-add-payment-card")) || void 0 === e || e.addEventListener("click", (async () => {
//                                     t.cleanUp(), new m("create")
//                                 }))
//                             }, document.querySelectorAll(".tabs").forEach((e => {
//                                 e.addEventListener("click", (() => {
//                                     e.classList.contains("active") || (e.classList.contains("profile") && this.setActiveTab("profile"), e.classList.contains("subscription") && this.setActiveTab("subscription"), e.classList.contains("download") && this.setActiveTab("download"), e.classList.contains("team") && this.setActiveTab("team"), e.classList.contains("developer") && (this.setActiveTab("developer"), this.loadApiKeys()), e.classList.contains("redeem") && this.setActiveTab("redeem"))
//                                 }))
//                             })), "#addPayment" === window.location.hash) new m("create");
//                         if (null === (e = (0, s.ZP)("change-password")) || void 0 === e || e.addEventListener("click", this.changePassword), null === (t = (0, s.ZP)("set-password")) || void 0 === t || t.addEventListener("click", this.setPassword), null === (n = (0, s.ZP)("change-name")) || void 0 === n || n.addEventListener("click", this.changeUsername), null === (g = (0, s.ZP)("change-email")) || void 0 === g || g.addEventListener("click", this.changeEmail), null === (_ = (0, s.ZP)("delete-account")) || void 0 === _ || _.addEventListener("click", this.deleteAccount), null === (v = (0, s.ZP)("update-newsletter")) || void 0 === v || v.addEventListener("change", (e => this.updateNewsletter(e.target))), this.loadSubscription(), document.querySelectorAll("[data-toggle='new-payment']").forEach((e => {
//                                 e.addEventListener("click", (async function(e) {
//                                     e.preventDefault(), new m("create")
//                                 }))
//                             })), document.querySelectorAll("[data-toggle='update-payment']").forEach((e => {
//                                 e.addEventListener("click", (async function(t) {
//                                     t.preventDefault(), new m("edit", {
//                                         cardId: e.dataset.card
//                                     })
//                                 }))
//                             })), document.querySelectorAll("[data-toggle='assign-payment']").forEach((e => {
//                                 e.addEventListener("click", (async t => {
//                                     t.preventDefault(), new m("assign", {
//                                         cardId: e.dataset.card
//                                     }).reassign()
//                                 }))
//                             })), document.querySelectorAll("[data-toggle='remove-payment']").forEach((e => {
//                                 e.addEventListener("click", (async function(t) {
//                                     t.preventDefault();
//                                     const n = new r.Z;
//                                     n.setContent(`\n                    <div>\n                        <h3 class="heavy">${(0,i.Z)("removePaymentMethod")}</h3>\n\n                        <p>${(0,i.Z)("thisCardWillBeDeletedAreYouSure")}</p>\n\n                        <div class="button-wrapper">\n                            <button id="cancel-remove-payment" class="button w-wrapped white text-black">${(0,i.Z)("cancel")}</button>\n                            <button id="remove-payment" class="button w-wrapped red">${(0,i.Z)("remove")}</button>\n                        </div>\n                    </div>\n                `), n.content.classList.add("popup-content"), n.content.style.minHeight = "unset", n.dialog.id = "remove-card-payment", n.dialog.style.maxWidth = "fit-content", (0, s.ZP)("cancel-remove-payment").addEventListener("click", (() => n.cleanUp())), (0, s.ZP)("remove-payment").addEventListener("click", (() => {
//                                         n.cleanUp(), new m("assign", {
//                                             cardId: e.dataset.card
//                                         }).remove()
//                                     }))
//                                 }))
//                             })), document.querySelectorAll(".open-downloaded").forEach((e => {
//                                 e.addEventListener("click", (() => {
//                                     this.openDownloadedTemplateModal(e.dataset.template)
//                                 }))
//                             })), (0, s.ZP)("team")) this.loadTeams();
//                         else {
//                             "team" === new URLSearchParams(window.location.search).get("tab") && window.location.replace("/myaccount")
//                         }(() => {
//                             var e;
//                             document.querySelectorAll('input[type="radio"][name="refer"]').forEach((e => {
//                                 e.addEventListener("change", (() => (0, s.ZP)("gift-details").style.display = 2 === Number(e.value) ? "block" : "none"))
//                             })), null === (e = (0, s.ZP)("redeem-gift")) || void 0 === e || e.addEventListener("click", (() => {
//                                 const e = document.querySelector('input[type="radio"][name="gift-card"]:checked').value,
//                                     t = {
//                                         to: "",
//                                         message: ""
//                                     };
//                                 if (2 === Number(document.querySelector('input[type="radio"][name="refer"]:checked').value) && (t.to = document.querySelector('form#gift-details input[name="email"]').value.trim(), t.message = document.querySelector('form#gift-details textarea[name="message"]').value.trim(), !(0, s.b0)(document.querySelector('form#gift-details input[name="email"]'), t.to, "email"))) throw new Error("Missing recipient email!");
//                                 new f.Z("giftcard", {
//                                     platform: "web",
//                                     giftcard: e,
//                                     isAGift: t
//                                 })
//                             }))
//                         })(), document.getElementById("developer-add-product").addEventListener("click", (async () => {
//                             const e = await fetch("/api/myaccount/developer/add_product", {
//                                     method: "post",
//                                     headers: {
//                                         "Content-Type": "application/json"
//                                     },
//                                     body: JSON.stringify({
//                                         product: "editor"
//                                     })
//                                 }),
//                                 t = await e.json(),
//                                 n = (0, s.ZP)("developer-products");
//                             !0 === t.status ? n.append(this.createApiKeyRow(t.data)) : (0, s.FN)("danger", t.message || "Something went wrong")
//                         }))
//                     }
//                     createApiKeyRow(e) {
//                         return (0, s.T)("tr", {
//                             className: "access"
//                         }, (0, s.T)("td", e._id), (0, s.T)("td", e.secret), (0, s.T)("td", {
//                             style: "text-align: right"
//                         }, (0, s.T)("button", {
//                             className: "button small",
//                             onclick: async () => {
//                                 confirm("Are you sure, this is irreversable") && (await fetch(`/api/myaccount/developer/${e._id}`, {
//                                     method: "delete"
//                                 }), this.loadApiKeys())
//                             }
//                         }, (0, i.Z)("remove"))))
//                     }
//                 }
//             }
//         },
//         d = {};

//     function c(e) {
//         var t = d[e];
//         if (void 0 !== t) return t.exports;
//         var n = d[e] = {
//             id: e,
//             loaded: !1,
//             exports: {}
//         };
//         return l[e].call(n.exports, n, n.exports, c), n.loaded = !0, n.exports
//     }
//     c.m = l, c.amdO = {}, e = "function" == typeof Symbol ? Symbol("webpack queues") : "__webpack_queues__", t = "function" == typeof Symbol ? Symbol("webpack exports") : "__webpack_exports__", n = "function" == typeof Symbol ? Symbol("webpack error") : "__webpack_error__", i = e => {
//         e && e.d < 1 && (e.d = 1, e.forEach((e => e.r--)), e.forEach((e => e.r-- ? e.r++ : e())))
//     }, c.a = (a, s, r) => {
//         var o;
//         r && ((o = []).d = -1);
//         var l, d, c, u = new Set,
//             h = a.exports,
//             m = new Promise(((e, t) => {
//                 c = t, d = e
//             }));
//         m[t] = h, m[e] = e => (o && e(o), u.forEach(e), m.catch((e => {}))), a.exports = m, s((a => {
//             var s;
//             l = (a => a.map((a => {
//                 if (null !== a && "object" == typeof a) {
//                     if (a[e]) return a;
//                     if (a.then) {
//                         var s = [];
//                         s.d = 0, a.then((e => {
//                             r[t] = e, i(s)
//                         }), (e => {
//                             r[n] = e, i(s)
//                         }));
//                         var r = {};
//                         return r[e] = e => e(s), r
//                     }
//                 }
//                 var o = {};
//                 return o[e] = e => {}, o[t] = a, o
//             })))(a);
//             var r = () => l.map((e => {
//                     if (e[n]) throw e[n];
//                     return e[t]
//                 })),
//                 d = new Promise((t => {
//                     (s = () => t(r)).r = 0;
//                     var n = e => e !== o && !u.has(e) && (u.add(e), e && !e.d && (s.r++, e.push(s)));
//                     l.map((t => t[e](n)))
//                 }));
//             return s.r ? d : r()
//         }), (e => (e ? c(m[n] = e) : d(h), i(o)))), o && o.d < 0 && (o.d = 0)
//     }, c.n = e => {
//         var t = e && e.__esModule ? () => e.default : () => e;
//         return c.d(t, {
//             a: t
//         }), t
//     }, s = Object.getPrototypeOf ? e => Object.getPrototypeOf(e) : e => e.__proto__, c.t = function(e, t) {
//         if (1 & t && (e = this(e)), 8 & t) return e;
//         if ("object" == typeof e && e) {
//             if (4 & t && e.__esModule) return e;
//             if (16 & t && "function" == typeof e.then) return e
//         }
//         var n = Object.create(null);
//         c.r(n);
//         var i = {};
//         a = a || [null, s({}), s([]), s(s)];
//         for (var r = 2 & t && e;
//             "object" == typeof r && !~a.indexOf(r); r = s(r)) Object.getOwnPropertyNames(r).forEach((t => i[t] = () => e[t]));
//         return i.default = () => e, c.d(n, i), n
//     }, c.d = (e, t) => {
//         for (var n in t) c.o(t, n) && !c.o(e, n) && Object.defineProperty(e, n, {
//             enumerable: !0,
//             get: t[n]
//         })
//     }, c.f = {}, c.e = e => Promise.all(Object.keys(c.f).reduce(((t, n) => (c.f[n](e, t), t)), [])), c.u = e => (({
//         1477: "checkout.modal",
//         2556: "tiff",
//         4500: "pdf-lib",
//         5215: "native",
//         6600: "adyen",
//         9456: "lottie-web"
//     }[e] || e) + "." + {
//         630: "dca33d53b9f75cac1ad8",
//         979: "a9d4f94d1acc1b2e035e",
//         1477: "8f2103e65f100cf00b6d",
//         1562: "b2f23a17be955c413f98",
//         1633: "256a00dbe38427487209",
//         1977: "c255bbde37eb2ef7e78d",
//         2312: "f280dc38023246464980",
//         2501: "b76046ac269de506ae12",
//         2513: "b233cd0a0f60369ec9ef",
//         2556: "86b51306fbf3d5a1ffad",
//         2638: "e4bd4d3ccf922c5e33e5",
//         2982: "3d403bbd46d5d6f3fb01",
//         3997: "590ecf3d82cc97fd3939",
//         4184: "38cb4f5b9924f21d6f56",
//         4495: "3a189b5b46f5788ee110",
//         4500: "c283a609246316ccd539",
//         4886: "37cb07685e88bcceaa32",
//         4905: "873cc0977e0f2c4f8d13",
//         5126: "347d9f5aa6cd9ab95979",
//         5215: "4183f0d5c870e65ebcbf",
//         5289: "353544fae63ed68ab4e6",
//         6600: "c1d013f29cf4295a6496",
//         7250: "d29944a89dd289bf0f24",
//         7251: "fd74c8e596ce0e299f67",
//         7391: "bb3b8db510b4de3d2085",
//         7392: "30fda128d9acda84b916",
//         7630: "8e2904b75889fa9b0850",
//         8030: "97f4772712c620e40a42",
//         8132: "81fd0c065520673a5305",
//         9304: "b543a5c4d263c0afdffa",
//         9316: "94306dbd54c42e9c55d8",
//         9456: "7fccf6830ba2e5888c03"
//     }[e] + ".js"), c.miniCssF = e => {}, c.g = function() {
//         if ("object" == typeof globalThis) return globalThis;
//         try {
//             return this || new Function("return this")()
//         } catch (e) {
//             if ("object" == typeof window) return window
//         }
//     }(), c.hmd = e => ((e = Object.create(e)).children || (e.children = []), Object.defineProperty(e, "exports", {
//         enumerable: !0,
//         set: () => {
//             throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: " + e.id)
//         }
//     }), e), c.o = (e, t) => Object.prototype.hasOwnProperty.call(e, t), r = {}, o = "pixlr:", c.l = (e, t, n, i) => {
//         if (r[e]) r[e].push(t);
//         else {
//             var a, s;
//             if (void 0 !== n)
//                 for (var l = document.getElementsByTagName("script"), d = 0; d < l.length; d++) {
//                     var u = l[d];
//                     if (u.getAttribute("src") == e || u.getAttribute("data-webpack") == o + n) {
//                         a = u;
//                         break
//                     }
//                 }
//             a || (s = !0, (a = document.createElement("script")).charset = "utf-8", a.timeout = 120, c.nc && a.setAttribute("nonce", c.nc), a.setAttribute("data-webpack", o + n), a.src = e), r[e] = [t];
//             var h = (t, n) => {
//                     a.onerror = a.onload = null, clearTimeout(m);
//                     var i = r[e];
//                     if (delete r[e], a.parentNode && a.parentNode.removeChild(a), i && i.forEach((e => e(n))), t) return t(n)
//                 },
//                 m = setTimeout(h.bind(null, void 0, {
//                     type: "timeout",
//                     target: a
//                 }), 12e4);
//             a.onerror = h.bind(null, a.onerror), a.onload = h.bind(null, a.onload), s && document.head.appendChild(a)
//         }
//     }, c.r = e => {
//         "undefined" != typeof Symbol && Symbol.toStringTag && Object.defineProperty(e, Symbol.toStringTag, {
//             value: "Module"
//         }), Object.defineProperty(e, "__esModule", {
//             value: !0
//         })
//     }, c.nmd = e => (e.paths = [], e.children || (e.children = []), e), c.v = (e, t, n, i) => {
//         var a = fetch(c.p + "" + n + ".module.wasm");
//         return "function" == typeof WebAssembly.instantiateStreaming ? WebAssembly.instantiateStreaming(a, i).then((t => Object.assign(e, t.instance.exports))) : a.then((e => e.arrayBuffer())).then((e => WebAssembly.instantiate(e, i))).then((t => Object.assign(e, t.instance.exports)))
//     }, c.p = "/dist/", (() => {
//         var e = {
//             1819: 0,
//             8999: 0
//         };
//         c.f.j = (t, n) => {
//             var i = c.o(e, t) ? e[t] : void 0;
//             if (0 !== i)
//                 if (i) n.push(i[2]);
//                 else {
//                     var a = new Promise(((n, a) => i = e[t] = [n, a]));
//                     n.push(i[2] = a);
//                     var s = c.p + c.u(t),
//                         r = new Error;
//                     c.l(s, (n => {
//                         if (c.o(e, t) && (0 !== (i = e[t]) && (e[t] = void 0), i)) {
//                             var a = n && ("load" === n.type ? "missing" : n.type),
//                                 s = n && n.target && n.target.src;
//                             r.message = "Loading chunk " + t + " failed.\n(" + a + ": " + s + ")", r.name = "ChunkLoadError", r.type = a, r.request = s, i[1](r)
//                         }
//                     }), "chunk-" + t, t)
//                 }
//         };
//         var t = (t, n) => {
//                 var i, a, [s, r, o] = n,
//                     l = 0;
//                 if (s.some((t => 0 !== e[t]))) {
//                     for (i in r) c.o(r, i) && (c.m[i] = r[i]);
//                     if (o) o(c)
//                 }
//                 for (t && t(n); l < s.length; l++) a = s[l], c.o(e, a) && e[a] && e[a][0](), e[a] = 0
//             },
//             n = self.webpackChunkpixlr = self.webpackChunkpixlr || [];
//         n.forEach(t.bind(null, 0)), n.push = t.bind(null, n.push.bind(n))
//     })(), c.nc = void 0;
//     var u = {};
//     (() => {
//         "use strict";
//         c.r(u), c.d(u, {
//             Education: () => g,
//             EducationApplicationFiles: () => w,
//             EducationApplicationForm: () => b,
//             FileConverter: () => Ve,
//             Generator: () => Pe,
//             Index: () => mt,
//             License: () => o,
//             MyAccount: () => Ee.MyAccount,
//             Pricing: () => h,
//             Suite: () => i,
//             freeTrialPage: () => pt,
//             templates: () => e
//         });
//         var e = {};
//         c.r(e), c.d(e, {
//             TemplateCategory: () => ot,
//             TemplateCollection: () => lt,
//             TemplateDetails: () => it,
//             TemplateFilters: () => at,
//             TemplateSearch: () => st,
//             Templates: () => nt
//         });
//         var t = c(4820),
//             n = c(3947);
//         class i {
//             constructor() {
//                 var e;
//                 this.connected = e => {
//                     (0, n.ZP)("remove-background").classList.toggle("disabled", !e), (0, n.ZP)("suite-online").style.display = e ? "flex" : "none", (0, n.ZP)("suite-offline").style.display = e ? "none" : "inline-flex"
//                 }, this.init = async () => {
//                     await (0, n.$k)();
//                     const e = (0, n.pR)("lang", "en-US").split("-")[1].toLowerCase();
//                     this.connected(navigator.onLine);
//                     const t = await navigator.serviceWorker.ready,
//                         i = await a(t.active, {
//                             type: "OFFLINE_READY",
//                             lang: e
//                         }),
//                         s = (0, n.ZP)("make-offline");
//                     s.checked = i, s.addEventListener("change", (async () => {
//                         await a(t.active, {
//                             type: "OFFLINE_TOGGLE",
//                             value: s.checked,
//                             lang: e
//                         })
//                     }))
//                 }, t.ZP.product = "suite", document.documentElement.classList.add(t.ZP.workspace, t.ZP.accent), (window.matchMedia("(display-mode: standalone)").matches || document.referrer.includes("android-app://")) && (document.documentElement.classList.add("standalone"), null === (e = (0, n.ZP)("logo")) || void 0 === e || e.setAttribute("href", "/suite/"), document.title = "Home"), window.addEventListener("online", (() => this.connected(!0))), window.addEventListener("offline", (() => this.connected(!1))), this.init()
//             }
//         }

//         function a(e, t) {
//             return new Promise(((n, i) => {
//                 const a = new MessageChannel;
//                 a.port1.onmessage = e => {
//                     e.data instanceof Error ? i(e.data) : n(e.data), a.port1.close()
//                 }, e.postMessage(t, [a.port2])
//             }))
//         }
//         var s = c(6548),
//             r = c(3506);
//         class o {
//             constructor() {
//                 const e = (0, n.ZP)("redeem-input"),
//                     t = (0, n.ZP)("redeem-submit"),
//                     i = document.querySelector('[data-error="redeem-input"]');
//                 let a = !1;
//                 if (null === r.a || void 0 === r.a ? void 0 : r.a.subscription) return e.readOnly = !0, e.style.cursor = "not-allowed", void(e.title = "Cannot claim gift card while having active subscription");
//                 null == e || e.addEventListener("input", (() => {
//                     e.value.length > 29 && (e.value = e.value.substring(0, 29))
//                 })), null == t || t.addEventListener("click", (async () => {
//                     if (a) return;
//                     if (a = !0, !e.value || 29 !== e.value.length) return i.innerText = e.value ? "Invalid license key!" : "Cannot leave input blank!", i.style.display = "flex", void setTimeout((() => i.style.display = "none"), 2e3);
//                     const t = await fetch("/api/license/claim", {
//                             method: "POST",
//                             headers: {
//                                 "Content-Type": "application/json",
//                                 Accept: "application/json"
//                             },
//                             body: JSON.stringify({
//                                 key: e.value
//                             })
//                         }),
//                         r = await t.json();
//                     if (!r.status) return a = !1, i.innerText = r.message || "Invalid license key!", i.style.display = "flex", void setTimeout((() => i.style.display = "none"), 2e3);
//                     const o = "redeem-success-popup",
//                         l = document.createElement("section");
//                     l.id = o, l.classList.add("myaccount", "popup"), l.innerHTML = `\n                <div class="popup-content" style="max-width: unset; margin-top: 150px">\n                    <img src="/img/icon/close-dark.svg" alt="close icon" id="close-${l.id}" class="close">\n                    <div style="margin-right: 40px; width: 450px">\n\n                        <h2 class="bold top-0" style="line-height: 40px">${(0,s.Z)("successfullyRedeemedWelcomePixlrPremium")}</h2>\n                        <p>${(0,s.Z)("congratsYouNowHaveFullAccess")}</p>\n\n                        <h6 class="bold small">${(0,s.Z)("pixlrXAndE")}</h6>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem4")}</span>\n                        <span class="small">${(0,s.Z)("aiCutoutFocusStudioGlitchAndMoreAI")}</span>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem6")}</span>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem8")}</span>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem7")}</span>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem11")}</span>\n                        <span class="small">${(0,s.Z)("pricingFeaturesItem12")}</span>\n\n                        <h6 class="bold small top-20">${(0,s.Z)("pixlrMobileApps")}</h6>\n                        <span class="small">BG Remove / Pixlr FX / Pixlr Photomash / Stories by Pixlr</span>\n\n                        <h6 class="bold small top-20">${(0,s.Z)("exclusiveVideoTutorials")}</h6>\n\n                        <a class="button top-20" href="/editor/" style="width: 254px;">${(0,s.Z)("startEditing")}</a>\n\n                    </div>\n                    <img src="/images/license/pixlr-redeem-success.png" class="default" alt="pixlr redeem license success">\n                </div>\n            `, document.body.appendChild(l), (0, n.ZP)(`close-${l.id}`).addEventListener("click", (() => (0, n.ZP)(o).remove()))
//                 }))
//             }
//         }
//         var l = c(8479),
//             d = c(6577);
//         class h {
//             constructor() {
//                 this.PRICING = (0, n.ZP)("config_pricing") && "" !== (0, n.ZP)("config_pricing").innerHTML ? JSON.parse((0, n.ZP)("config_pricing").innerHTML) : "", this.eligibleForTrail = void 0 === r.a || r.a.eligibleForTrail, this.toggleInterval = () => {
//                     const e = (0, n.ZP)("payment-interval").checked;
//                     (0, n.ZP)("pricing-plans").classList.toggle("monthley", e), (0, n.ZP)("pricing-plans").classList.toggle("yearly", !e)
//                 }, this.showCheckout = e => {
//                     var t;
//                     const i = e.currentTarget,
//                         a = i.dataset.plan,
//                         s = null !== (t = i.dataset.promocode) && void 0 !== t ? t : "",
//                         o = (null != a ? a : "premium") + "-" + ((0, n.ZP)("payment-interval").checked ? "monthly" : "yearly");
//                     if (r.a) {
//                         if (r.a.subscription) return window.location.replace("/myaccount/?tab=subscription");
//                         new d.Z("subscription", {
//                             platform: "web",
//                             plan: o,
//                             code: s
//                         })
//                     } else new l.Z
//                 }, (0, n.ZP)("payment-interval").addEventListener("change", (() => this.toggleInterval()));
//                 document.querySelectorAll("[data-toggle='checkout']").forEach((e => e.addEventListener("click", this.showCheckout, !1))), (0, n.ZP)("pricing-checkout-credits").addEventListener("click", (() => {
//                     r.a ? new d.Z("credits", {
//                         platform: "web"
//                     }) : new l.Z
//                 })), (0, n.ZP)("pricing-checkout-giftcard").addEventListener("click", (() => {
//                     r.a ? new d.Z("giftcard", {
//                         giftcard: "premium-yearly",
//                         isAGift: {
//                             to: "",
//                             message: ""
//                         }
//                     }) : new l.Z
//                 }))
//             }
//         }
//         var m = c(3655);
//         class p {
//             constructor(e, t = !1) {
//                 if (this.numSections = 0, this.outerWidth = 0, this.contentWidth = 0, this.infiniteScroll = !1, this.bind = m.d4(50, (() => {
//                         if (this.outerWidth = this.outer.clientWidth, this.contentWidth = this.content.scrollWidth, this.contentWidth > this.outerWidth && (this.forward.style.display = "block"), this.numSections = Math.floor(this.contentWidth / this.outerWidth), this.indicator.innerHTML = "", this.numSections > 0)
//                             for (let e = 0; e < this.numSections; e++) {
//                                 const t = (0, n.T)("li");
//                                 t.setAttribute("data", e.toString()), t.addEventListener("click", this.sectionClick), 0 === e && t.classList.add("active"), this.indicator.append(t)
//                             }
//                         this.scoll()
//                     })), this.sectionClick = e => {
//                         const t = Number(e.currentTarget.getAttribute("data"));
//                         this.outer.scrollTo(this.outerWidth * t, 0)
//                     }, this.forwardClick = () => {
//                         if (this.infiniteScroll && this.outer.scrollLeft === this.outerWidth * (this.numItems() - 1)) return this.outer.scrollTo(0, 0);
//                         this.outer.scrollBy(this.outerWidth, 0)
//                     }, this.backClick = () => {
//                         if (this.infiniteScroll && 0 === this.outer.scrollLeft) return this.outer.scrollBy(this.outerWidth * (this.numItems() - 1), 0);
//                         this.outer.scrollBy(-this.outerWidth, 0)
//                     }, this.scoll = m.d4(50, (() => {
//                         var e, t;
//                         const n = Math.ceil(this.outer.scrollLeft / this.outerWidth);
//                         if (this.infiniteScroll || (this.forward.style.display = n === this.numSections ? "none" : "block", this.back.style.display = this.outer.scrollLeft > 0 ? "block" : "none"), this.numSections > 0)
//                             for (let i = 0; i <= this.numSections; i++) i === n ? null === (e = this.indicator.children[i]) || void 0 === e || e.classList.add("active") : null === (t = this.indicator.children[i]) || void 0 === t || t.classList.remove("active")
//                     })), this.numItems = () => this.content.children.length, this.addItem = e => {
//                         this.content.appendChild(e)
//                     }, this.clearItem = () => {
//                         this.content.innerHTML = ""
//                     }, this.infiniteScroll = t, this.container = (0, n.ZP)(e), this.container.classList.add("carousel"), this.content = (0, n.T)("div", {
//                         id: e + "-content",
//                         className: "content"
//                     }), this.container.hasChildNodes())
//                     for (; this.container.firstChild;) this.content.appendChild(this.container.firstChild);
//                 this.outer = (0, n.T)("div", {
//                     id: e + "-outer",
//                     className: "outer"
//                 }, this.content), this.indicator = (0, n.T)("ul", {
//                     id: e + "-indicator"
//                 }), this.back = (0, n.T)("div", {
//                     id: e + "-back",
//                     className: "back ic"
//                 }), this.forward = (0, n.T)("div", {
//                     id: e + "-forward",
//                     className: "forward ic"
//                 }), this.container.append(this.outer, this.indicator, this.back, this.forward), this.forward.addEventListener("click", this.forwardClick, !0), this.back.addEventListener("click", this.backClick, !0), this.outer.addEventListener("scroll", this.scoll, !0), this.forward.style.display = "none", this.back.style.display = "none", new ResizeObserver(this.bind).observe(this.content)
//             }
//         }
//         const f = ["edu-description", "edu-free", "edu-upgrade", "edu-steps-go-get-free", "edu-note", "edu-featured-school", "edu-reviews", "edu-join-us"];
//         class g {
//             constructor() {
//                 this.switchToMain = () => {
//                     this.toggleTemplate(!0)
//                 }, this.switchToFaq = () => {
//                     this.toggleTemplate(!1)
//                 }, this.toggleTemplate = e => {
//                     var t, i, a, s;
//                     f.forEach((t => {
//                         var i;
//                         null === (i = (0, n.ZP)(t)) || void 0 === i || i.classList.toggle("hidden", !e)
//                     })), null === (t = (0, n.ZP)("edu-faq")) || void 0 === t || t.classList.toggle("hidden", e), null === (i = (0, n.ZP)("edu-switch-to-faq")) || void 0 === i || i.classList.toggle("active", !e), null === (a = (0, n.ZP)("edu-switch-to-main")) || void 0 === a || a.classList.toggle("active", e), null === (s = (0, n.ZP)("edu-title")) || void 0 === s || s.classList.toggle("faq-template", !e)
//                 }, new p("review-carousel", !0), (0, n.ZP)("edu-switch-to-main").addEventListener("click", this.switchToMain), (0, n.ZP)("edu-switch-to-faq").addEventListener("click", this.switchToFaq)
//             }
//         }
//         class _ {
//             constructor() {
//                 this.inputs = document.querySelectorAll("input, select"), this.setValidators()
//             }
//             setValidators() {
//                 this.inputs.forEach((e => {
//                     e.addEventListener("invalid", (t => this.setInvalid(t, e))), ["input", "change", "focus"].forEach((t => {
//                         e.addEventListener(t, (t => this.setValid(t, e)))
//                     }))
//                 }))
//             }
//             setInvalid(e, t) {
//                 var n;
//                 e.preventDefault(), null === (n = t.closest("[data-invalid-class-locator]")) || void 0 === n || n.classList.add("invalid")
//             }
//             setValid(e, t) {
//                 var n;
//                 e.preventDefault(), null === (n = t.closest("[data-invalid-class-locator]")) || void 0 === n || n.classList.remove("invalid")
//             }
//             isFormInvalid(e) {
//                 let t = !1;
//                 const n = [];
//                 return e.forEach((e => {
//                     e.checkValidity() || (t = !0, n.push(e))
//                 })), t ? n : null
//             }
//         }
//         var v = function(e, t) {
//             var n = {};
//             for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && t.indexOf(i) < 0 && (n[i] = e[i]);
//             if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
//                 var a = 0;
//                 for (i = Object.getOwnPropertySymbols(e); a < i.length; a++) t.indexOf(i[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[a]) && (n[i[a]] = e[i[a]])
//             }
//             return n
//         };
//         const y = ["jpg", "jpeg", "png", "pdf", "doc", "docx", "zip"];
//         class w extends _ {
//             constructor() {
//                 super(), this.filesMap = new Map, this.params = new URLSearchParams(window.location.search), this.urlPopulatedData = Object.fromEntries(this.params.entries()), this.form = (0, n.ZP)("education-application-files"), this.termsAndConditions = (0, n.ZP)("terms-conditions"), this.fileValidationMessages = (0, n.ZP)("fileValidationMessages"), this.fileInput = (0, n.ZP)("file-upload"), this.uploadArea = (0, n.ZP)("upload-area"), this.uploadProgressContainer = (0, n.ZP)("upload-progress"), this.goBackButton = (0, n.ZP)("go-back-button"), this.secText = (0, s.Z)("eduApplFilesSec"), this.minText = (0, s.Z)("eduApplFilesMin"), this.remainingText = (0, s.Z)("eduApplFilesRemaining"), this.setEventListeners()
//             }
//             setEventListeners() {
//                 this.fileInput.setAttribute("accept", y.map((e => ` .${e} `)).join(",")), this.dragClassHandler = this.dragClassHandler.bind(this), this.uploadFile = this.uploadFile.bind(this), this.uploadArea.addEventListener("dragenter", (e => this.dragClassHandler(e, !0))), this.uploadArea.addEventListener("dragover", (e => this.dragClassHandler(e, !0))), this.uploadArea.addEventListener("dragleave", (e => this.dragClassHandler(e, !1))), this.uploadArea.addEventListener("drop", (e => {
//                     var t;
//                     this.dragClassHandler(e, !1);
//                     const n = null === (t = e.dataTransfer) || void 0 === t ? void 0 : t.files[0];
//                     n && this.uploadFile(n)
//                 })), this.fileInput.addEventListener("change", (async () => {
//                     const e = this.fileInput.files[0];
//                     e && await this.uploadFile(e)
//                 })), this.goBackButton.addEventListener("click", (() => this.goBack())), this.form.addEventListener("submit", this.handleFormSubmit.bind(this))
//             }
//             dragClassHandler(e, t) {
//                 e.preventDefault(), this.hideFileValidationMessages(), t ? this.uploadArea.classList.add("dragover") : this.uploadArea.classList.remove("dragover")
//             }
//             stopEvent(e) {
//                 e.preventDefault(), e.stopPropagation()
//             }
//             setInvalid(e, t) {
//                 var n;
//                 this.stopEvent(e), null === (n = t.closest("[data-invalid-class-locator]")) || void 0 === n || n.classList.add("invalid")
//             }
//             setValid(e, t) {
//                 var n;
//                 this.stopEvent(e), null === (n = t.closest("[data-invalid-class-locator]")) || void 0 === n || n.classList.remove("invalid")
//             }
//             hideFileValidationMessages() {
//                 this.fileValidationMessages.style.opacity = "0"
//             }
//             showFileValidationMessages() {
//                 this.fileValidationMessages.style.opacity = "1", setTimeout((() => this.hideFileValidationMessages()), 3e3)
//             }
//             showProgress(e, t = 0, n = 0) {
//                 const i = e.querySelector(".file-item-progress"),
//                     a = e.querySelector(".file-item-cancel img");
//                 if (!i || !a) return;
//                 100 === t && (i.classList.add("completed"), a.src = "/images/education/application/remove.svg");
//                 const s = e.querySelector(".progress-bar-fill"),
//                     r = e.querySelector(".progress-percent"),
//                     o = e.querySelector(".time-remaining-divider"),
//                     l = e.querySelector(".time-remaining"),
//                     d = n ? (n / 1e3).toFixed(0) : "",
//                     c = n ? (parseInt(d) < 60 ? `${d} ${this.secText}` : `${Math.ceil(parseInt(d)/60)} ${this.minText}`) + ` ${this.remainingText}` : "";
//                 s.style.width = `${t}%`, r.textContent = `${t}%`, o.innerHTML = c ? "&centerdot;" : "", l.textContent = c
//             }
//             removeFileItem(e) {
//                 var t;
//                 this.filesMap.delete(e), null === (t = document.getElementById(e)) || void 0 === t || t.remove(), this.fileInput.value = "", 0 === this.filesMap.size && (this.uploadArea.style.display = "")
//             }
//             addRowUploadFile(e, t) {
//                 var n, i;
//                 const a = null === crypto || void 0 === crypto ? void 0 : crypto.randomUUID();
//                 this.filesMap.set(a, {
//                     file: e,
//                     response: null
//                 });
//                 const s = e.name,
//                     r = e.size,
//                     o = r < 1024 ? `${(r/1024).toFixed(2)} KB` : `${(r/1048576).toFixed(2)} MB`,
//                     l = `/images/education/application/${y.find((e=>s.endsWith(`.${e}`)))||"doc"}.svg`,
//                     d = null === (i = null === (n = this.uploadProgressContainer) || void 0 === n ? void 0 : n.firstElementChild) || void 0 === i ? void 0 : i.cloneNode(!0),
//                     c = null == d ? void 0 : d.querySelector(".file-item-logo"),
//                     u = null == d ? void 0 : d.querySelector(".file-item-name"),
//                     h = null == d ? void 0 : d.querySelector(".file-item-size"),
//                     m = null == d ? void 0 : d.querySelector(".file-item-cancel");
//                 if (!(d && c && u && h && m)) throw new Error("File item template not found or invalid.");
//                 return d.id = a, c.setAttribute("src", l), u.textContent = s, h.textContent = o, m.addEventListener("click", (() => {
//                     t.abort(), this.removeFileItem(a)
//                 })), this.showProgress(d), d.style.display = "", this.uploadProgressContainer.appendChild(d), {
//                     fileItemHtmlContainer: d,
//                     fileId: a
//                 }
//             }
//             async uploadFile(e) {
//                 if (e.size > 5242880 || !y.some((t => e.name.endsWith(`.${t}`)))) return void this.showFileValidationMessages();
//                 this.uploadArea.style.display = "none";
//                 const t = new XMLHttpRequest;
//                 return new Promise((n => {
//                     const {
//                         fileItemHtmlContainer: i,
//                         fileId: a
//                     } = this.addRowUploadFile(e, t), s = Date.now();
//                     let r = Date.now(),
//                         o = 10;
//                     t.upload.addEventListener("progress", (e => {
//                         if (!e.lengthComputable) return;
//                         const t = parseFloat((e.loaded / e.total * 100).toFixed(2)),
//                             n = Date.now(),
//                             a = n - s;
//                         if (a < 2e3) this.showProgress(i, t);
//                         else {
//                             if (n - r >= 2e3) {
//                                 r = n;
//                                 const e = 100 * a / t;
//                                 o = Math.ceil(e - a)
//                             }
//                             this.showProgress(i, t, o)
//                         }
//                     })), t.addEventListener("loadend", (() => {
//                         if (4 === t.readyState && 200 === t.status) {
//                             this.showProgress(i, 100);
//                             const e = JSON.parse(t.response),
//                                 s = this.filesMap.get(a);
//                             s && this.filesMap.set(a, Object.assign(Object.assign({}, s), {
//                                 response: e
//                             })), n(e)
//                         } else this.removeFileItem(a), n(null)
//                     }));
//                     const l = new FormData;
//                     l.append("file", e, e.name), t.open("PUT", "/learn/education/application", !0), t.send(l)
//                 }))
//             }
//             goBack() {
//                 window.location.href = window.location.href.replace(/\/files\//, "/")
//             }
//             isBodyValid(e) {
//                 const t = ["email", "organization", "firstName", "lastName", "occupation", "institutionEmail", "country", "responsibilities", "institutionType", "institutionDomain", "institutionUrl", "source", "fileKey"],
//                     n = Object.keys(e);
//                 return n.length === t.length && n.every((n => t.includes(n) && e[n]))
//             }
//             async handleFormSubmit(e) {
//                 var t, n;
//                 e.preventDefault();
//                 if (!this.form.checkValidity()) return void this.form.reportValidity();
//                 const i = null === (n = null === (t = this.filesMap.values().next()) || void 0 === t ? void 0 : t.value) || void 0 === n ? void 0 : n.response,
//                     a = this.urlPopulatedData,
//                     {
//                         sourceOther: s
//                     } = a,
//                     r = v(a, ["sourceOther"]),
//                     o = Object.assign(Object.assign({}, r), {
//                         source: s || this.urlPopulatedData.source,
//                         fileKey: i
//                     });
//                 if (!this.isBodyValid(o)) return void this.goBack();
//                 const l = await fetch("/learn/education/application", {
//                     method: "POST",
//                     headers: {
//                         "Content-Type": "application/json"
//                     },
//                     body: JSON.stringify(o)
//                 });
//                 201 !== l.status ? console.error(l) : window.location.href = "/learn/education/application/success"
//             }
//         }
//         class b extends _ {
//             constructor() {
//                 super(), this.form = (0, n.ZP)("education-application-form"), this.radioGroup = (0, n.ZP)("source"), this.sourceTextInputOther = (0, n.ZP)("sourceOther"), this.radioSource = this.radioGroup.querySelectorAll("input[type='radio']"), this.params = new URLSearchParams(window.location.search), this.setEventListeners()
//             }
//             setEventListeners() {
//                 document.addEventListener("DOMContentLoaded", (() => {
//                     const e = Object.fromEntries(this.params.entries());
//                     this.repopulateForm(e)
//                 })), this.radioSource.forEach((e => {
//                     e.addEventListener("change", (t => this.handleRadioSourceChanges(e, t)))
//                 })), this.form.addEventListener("submit", (e => this.handleFormSubmit(e)))
//             }
//             handleRadioSourceChanges(e, t) {
//                 this.sourceTextInputOther.value = "", "Other" === e.value ? (this.sourceTextInputOther.disabled = !1, this.sourceTextInputOther.focus()) : (this.setValid(t, this.sourceTextInputOther), this.sourceTextInputOther.disabled = !0)
//             }
//             async handleFormSubmit(e) {
//                 this.isFormInvalid(this.inputs) && e.preventDefault()
//             }
//             repopulateForm(e) {
//                 for (const t in e) {
//                     const n = this.form.querySelector(`[name="${t}"], [id="${t}"]`);
//                     if (n)
//                         if (n.hasAttribute("data-radio-input")) {
//                             const i = n.querySelector(`[name="${t}"][value="${e[t]}"]`);
//                             i && (i.checked = !0)
//                         } else n.value = e[t]
//                 }
//             }
//         }
//         var M = c(6817),
//             x = c(1030);
//         const L = {
//             step: [.01],
//             range: [0, 1],
//             stops: [0, 1],
//             compact: !1,
//             force: !1,
//             defaultValue: 0,
//             labelFormat: e => String(e),
//             labelParse: e => parseInt(e, 10)
//         };
//         class k {
//             constructor(e, t = {}) {
//                 if (this.findElements = () => {
//                         this.outlet = this.container.querySelector("input"), this.slider = this.container.querySelector(".slider"), this.diff = this.container.querySelector(".slider .diff"), this.label = this.container.querySelector(".info label"), this.hold = this.container.querySelector(".slider-holder"), this.bound = this.container.querySelector(".slider-holder .bound"), this.knob = this.container.querySelector(".slider-holder .bound .knob")
//                     }, this.buildElements = () => {
//                         this.container.classList.add("range-box"), this.label = document.createElement("label"), this.label.innerText = (this.options.label || this.name) + " ", this.outlet = document.createElement("input"), this.outlet.type = "text", this.outlet.autocomplete = "off", this.outlet.value = this.options.labelFormat(this.options.defaultValue);
//                         const e = document.createElement("div");
//                         e.className = "info", e.appendChild(this.label), e.appendChild(this.outlet), this.knob = document.createElement("div"), this.knob.innerHTML = "<div></div>", this.knob.className = "knob", this.bound = (0, n.T)("div", {
//                             className: "bound"
//                         }, this.knob), this.diff = (0, n.T)("div", {
//                             className: "diff"
//                         }), this.slider = (0, n.T)("div", {
//                             className: "slider"
//                         }, this.diff), this.hold = (0, n.T)("div", {
//                             className: "slider-holder"
//                         }, this.slider, this.bound), this.container.appendChild(e), this.container.appendChild(this.hold)
//                     }, this.labelOver = () => {
//                         this.value !== this.options.defaultValue && (this.label.innerText = (0, s.Z)("reset") + " ")
//                     }, this.labelOut = () => {
//                         this.label.innerText = (this.options.label || this.name) + " "
//                     }, this.labelClick = () => {
//                         if (this.value === this.options.defaultValue) return;
//                         const e = this.value;
//                         this.options.onStart && this.options.onStart(this.value, this.name), this.reset(), this.options.onChange && this.options.onChange(this.value, this.name), this.options.onEnd && this.options.onEnd(this.value, e, this.name)
//                     }, this.sliderMouseDown = e => {
//                         e.preventDefault(), e.stopPropagation(), this.knobDown(e), this.move(e.clientX)
//                     }, this.knobDown = e => {
//                         document.addEventListener("mousemove", this.knobMouseMove, !1), document.addEventListener("touchmove", this.knobTouchMove, {
//                             passive: !1
//                         }), document.addEventListener("mouseup", this.knobUp, !0), document.addEventListener("touchend", this.knobUp, {
//                             passive: !1
//                         }), this.knob.classList.add("grabbed"), e.preventDefault(), e.stopPropagation(), this.downValue = this.value, this.options.onStart && setTimeout((() => this.options.onStart(this.downValue, this.name)), 0)
//                     }, this.move = e => {
//                         const t = this.bound.getBoundingClientRect();
//                         if (e <= t.left) return void this.setAmount(0);
//                         if (e >= t.right) return void this.setAmount(1);
//                         const n = (e - t.left) / t.width;
//                         this.setAmount(n)
//                     }, this.knobMouseMove = e => {
//                         e.preventDefault(), e.stopPropagation(), this.move(e.clientX)
//                     }, this.knobTouchMove = e => {
//                         e.preventDefault(), e.stopPropagation(), this.move(e.touches[0].clientX)
//                     }, this.knobUp = () => {
//                         if (document.removeEventListener("mousemove", this.knobMouseMove, !1), document.removeEventListener("touchmove", this.knobTouchMove), document.removeEventListener("mouseup", this.knobUp, !0), document.removeEventListener("touchend", this.knobUp), this.knob.classList.remove("grabbed"), this.options.onEnd && (this.options.force || this.downValue !== this.value)) {
//                             const e = this.downValue;
//                             this.downValue = this.value, setTimeout((() => this.options.onEnd(this.value, e, this.name)), 0)
//                         }
//                     }, this.outletKeyUp = e => {
//                         const t = this.options.labelParse(this.outlet.value);
//                         if (isNaN(t)) return;
//                         const n = this.options.range[0],
//                             i = this.options.range[this.options.range.length - 1],
//                             a = Math.max(Math.min(t, i), n);
//                         this.value = a, this.hold.classList.toggle("changed", this.isChanged()), this.diff.style.backgroundImage = this.generateDiff(this.options.defaultValue, this.value);
//                         const s = this.calculateAmount(this.value);
//                         this.setKnob(100 * s), this.options.onChange && void 0 !== e && setTimeout((() => this.options.onChange(this.value, this.name)), 0)
//                     }, this.outletFocus = e => {
//                         if (this.options.onStart && (this.downValue = this.value, this.options.onStart(this.value, this.name)), this.options.compact) {
//                             this.hold.style.display = "flex";
//                             const e = m.HS(this.container);
//                             this.hold.style.left = e.x + this.container.offsetWidth - this.hold.offsetWidth + 10 + "px", this.hold.style.top = e.y + 34 + "px"
//                         }
//                     }, this.outletBlur = e => {
//                         this.options.compact && (this.hold.style.display = "none");
//                         const t = this.options.labelParse(this.outlet.value);
//                         isNaN(t) || (this.outlet.value = this.options.labelFormat(this.value), this.options.onEnd && (this.options.force || this.downValue !== this.value) && void 0 !== e && this.options.onEnd(this.value, this.downValue, this.name))
//                     }, this.calculateAmount = e => {
//                         for (let t = 1; t < this.options.range.length; t++) {
//                             const n = this.options.range[t - 1],
//                                 i = this.options.range[t];
//                             if (e >= n && e <= i) {
//                                 const a = this.options.stops[t - 1];
//                                 return a + (e - n) / (i - n) * (this.options.stops[t] - a)
//                             }
//                         }
//                         if (e == this.options.defaultValue) throw new Error("Cant recurse on default value with calculateAmount, this is a bug");
//                         return this.calculateAmount(this.options.defaultValue)
//                     }, this.setKnob = e => {
//                         const t = 100 * this.calculateAmount(this.options.defaultValue),
//                             n = this.generateDiff(t, e);
//                         requestAnimationFrame((() => {
//                             this.knob.style.marginLeft = `${e}%`, this.diff.style.backgroundImage = n
//                         }))
//                     }, this.roundToStep = (e, t, n, i) => {
//                         const a = e % t;
//                         return 0 === a || e === n || e === i ? e : e - a
//                     }, this.generateDiff = (e, t) => {
//                         if (e === t) return "none";
//                         const n = "var(--accent-color)";
//                         this.knob.clientWidth;
//                         return t > e ? `linear-gradient(to right, transparent 0%, transparent ${e}%, ${n} ${e}%, ${n} calc(${t}%), transparent calc(${t}%), transparent 100%)` : `linear-gradient(to right, transparent 0%, transparent calc(${t}% ), ${n} calc(${t}%), ${n} ${e}%, transparent ${e}%, transparent 100%)`
//                     }, this.setAmount = (e, t = !1) => {
//                         const [n, i] = this.bucket(e), a = this.options.range[n], s = this.options.range[n + 1], r = this.options.step[n];
//                         this.setKnob(100 * e), this.value = this.roundToStep(i * (s - a) + a, r, a, s), this.hold.classList.toggle("changed", this.value !== this.options.defaultValue), this.outlet.value = this.options.labelFormat(this.value), this.options.onChange && !t && setTimeout((() => this.options.onChange(this.value, this.name)), 0)
//                     }, this.bucket = e => {
//                         for (let t = 1; t < this.options.stops.length; t++) {
//                             const n = this.options.stops[t - 1],
//                                 i = this.options.stops[t];
//                             if (e >= n && e <= i) return [t - 1, (e - n) / (i - n)]
//                         }
//                         throw new Error(`Could not assign ${e} to a bucket, this is a bug`)
//                     }, this.setValue = (e, t = !1) => {
//                         const n = this.value;
//                         void 0 === e && (e = this.options.defaultValue);
//                         const i = this.options.range[0],
//                             a = this.options.range[this.options.range.length - 1];
//                         this.value = Math.max(Math.min(e, a), i), this.hold.classList.toggle("changed", this.isChanged()), this.outlet.value = this.options.labelFormat(this.value);
//                         const s = this.calculateAmount(this.value);
//                         this.setKnob(100 * s), (this.options.onChange || this.options.onEnd) && t && setTimeout((() => {
//                             this.options.onChange && this.options.onChange(this.value, this.name), this.options.onEnd && this.options.onEnd(this.value, n, this.name)
//                         }), 0)
//                     }, this.isChanged = () => this.value !== this.options.defaultValue, this.getValue = () => {
//                         var e;
//                         return null !== (e = this.value) && void 0 !== e ? e : 0
//                     }, this.reset = () => {
//                         this.value = this.options.defaultValue, this.setKnob(100 * this.calculateAmount(this.value)), this.hold.classList.remove("changed"), this.outlet.value = this.options.labelFormat(this.value), this.label.innerText = (this.options.label || this.name) + " "
//                     }, this.cleanUp = () => {
//                         document.removeEventListener("mousemove", this.knobMouseMove, !1), document.removeEventListener("touchmove", this.knobTouchMove), document.removeEventListener("mouseup", this.knobUp, !0), document.removeEventListener("touchend", this.knobUp), this.knob.removeEventListener("mousedown", this.knobDown, !1), this.knob.removeEventListener("touchstart", this.knobDown), this.hold.removeEventListener("mousedown", this.sliderMouseDown, !1), this.outlet.removeEventListener("focus", this.outletFocus, !1), this.outlet.removeEventListener("keyup", this.outletKeyUp, !1), this.outlet.removeEventListener("blur", this.outletBlur, !1), this.options.compact || (this.label.removeEventListener("mouseover", this.labelOver, !1), this.label.removeEventListener("mouseleave", this.labelOut, !1), this.label.removeEventListener("click", this.labelClick, !1))
//                     }, this.hide = () => {
//                         this.container.style.display = "none"
//                     }, this.show = () => {
//                         this.container.style.display = "block"
//                     }, this.disable = () => {
//                         this.container.classList.add("disabled")
//                     }, this.enable = () => {
//                         this.container.classList.remove("disabled")
//                     }, this.name = e, this.container = (0, n.ZP)(e), this.options = Object.assign(Object.assign({}, L), t), this.value = this.options.defaultValue, Array.isArray(this.options.step) || (this.options = Object.assign(Object.assign({}, this.options), {
//                         step: [this.options.step]
//                     })), this.options.stops.length < 2) throw new Error("Slider need to have atleast two stops, default is [0,1]");
//                 if (this.options.range.length != this.options.stops.length) throw new Error("Slider range option and slide stops option, needs to be the same length");
//                 if (this.options.step.length != this.options.stops.length - 1) throw new Error("Step array must be the same length as the number of ranges (slider options range - 1)");
//                 this.options.compact && this.container.classList.add("compact");
//                 !!this.container.querySelector(".slider") ? this.findElements() : this.buildElements(), this.knob.addEventListener("mousedown", this.knobDown, !1), this.knob.addEventListener("touchstart", this.knobDown, {
//                     passive: !1
//                 }), this.hold.addEventListener("mousedown", this.sliderMouseDown, !1), this.outlet.addEventListener("focus", this.outletFocus, !1), this.outlet.addEventListener("keyup", this.outletKeyUp, !1), this.outlet.addEventListener("blur", this.outletBlur, !1), this.options.compact || (this.label.addEventListener("mouseover", this.labelOver, !1), this.label.addEventListener("mouseleave", this.labelOut, !1), this.label.addEventListener("click", this.labelClick, !1)), this.outlet.value !== this.options.labelFormat(this.options.defaultValue) ? (this.outletKeyUp(void 0), this.outletBlur(void 0)) : this.reset()
//             }
//         }
//         class T {
//             constructor() {
//                 this.notification = e => {
//                     var t;
//                     const i = null !== (t = (0, n.ZP)("notification")) && void 0 !== t ? t : this.addNotif();
//                     this.notiId && (clearTimeout(this.notiId), i.innerHTML = "", i.style.display = "none"), requestAnimationFrame((() => {
//                         i.style.display = "block", i.innerHTML = '<div class="message">' + e.detail + "</div>", this.position(i)
//                     })), this.notiId = setTimeout((function() {
//                         i.innerHTML = "", i.style.top = "-999px", i.style.left = "-999px", i.style.display = "none"
//                     }), 1500)
//                 }, this.legend = e => {
//                     var t;
//                     const i = null !== (t = (0, n.ZP)("notification")) && void 0 !== t ? t : this.addNotif();
//                     if ("stop" === e.detail) return i.innerHTML = "", i.style.top = "-999px", i.style.left = "-999px", void(i.style.display = "none");
//                     i.style.display = "block", "" === i.innerHTML ? i.innerHTML = '<div id="legend" class="legend">' + e.detail + "</div>" : (0, n.ZP)("legend") && ((0, n.ZP)("legend").innerText = e.detail), this.position(i)
//                 }, this.loading = e => {
//                     var t;
//                     const i = null !== (t = (0, n.ZP)("notification")) && void 0 !== t ? t : this.addNotif();
//                     "stop" !== e.detail ? (this.notiId && (clearTimeout(this.notiId), i.innerHTML = "", i.style.display = "none"), this.notiId = setTimeout((() => {
//                         this.keepLoading ? this.keepLoading = !1 : (i.innerHTML = "", i.style.top = "-999px", i.style.left = "-999px", i.style.display = "none")
//                     }), 400), i.style.display = "block", i.innerHTML = `\n            <div class="spinner">\n                <label class="working">${"start"===e.detail?"Loading":e.detail}</label>\n            </div>\n        `, this.keepLoading = !0, this.position(i)) : this.keepLoading ? this.keepLoading = !1 : (i.innerHTML = "", i.style.display = "none")
//                 }, this.addNotif = () => {
//                     const e = (0, n.T)("div", {
//                         id: "notification"
//                     });
//                     return document.body.append(e), e
//                 }, this.position = e => {
//                     let t = 0 !== document.getElementsByClassName("modal").length,
//                         i = (0, n.ZP)("splash") && "none" !== (0, n.ZP)("splash").style.display,
//                         a = 0 !== document.getElementsByClassName("canvas").length;
//                     if (t || i || !a) e.style.top = Math.round(document.body.clientHeight / 2 - e.clientHeight / 2) + "px", e.style.left = Math.round(document.body.clientWidth / 2 - e.clientWidth / 2) + "px";
//                     else {
//                         const t = document.querySelector(".canvas").getBoundingClientRect();
//                         e.style.top = Math.round(t.height / 2 + t.top - e.clientHeight / 2) / 1.5 + "px", e.style.left = Math.round(t.width / 2 + t.left - e.clientWidth / 2) + "px"
//                     }
//                 }, document.addEventListener("legend", (e => this.legend(e)), !0), document.addEventListener("loading", (e => this.loading(e)), !0), document.addEventListener("notification", (e => this.notification(e)), !0)
//             }
//         }
//         class Y {
//             constructor(e, t = "right") {
//                 let i;
//                 this.position = (e = this.flow) => {
//                     let t = this.parent.getBoundingClientRect();
//                     if ("up" === e || document.body.clientWidth < 650) this.drop.style.left = m.uZ(t.right - this.drop.offsetWidth + 15, 5, document.body.clientWidth - this.drop.offsetWidth) + "px", this.drop.style.top = t.top - this.drop.offsetHeight + "px", this.drop.classList.add("up");
//                     else {
//                         switch (e) {
//                             case "right":
//                                 this.drop.style.left = t.right - 5 + "px", this.drop.style.top = t.top - 24 + "px";
//                                 break;
//                             case "left":
//                                 this.drop.style.left = t.left - this.drop.offsetWidth + this.parent.offsetWidth / 2 + 38 + "px", this.drop.style.top = t.top - this.drop.offsetHeight + "px";
//                                 break;
//                             case "down":
//                                 this.drop.style.left = t.left + this.parent.offsetWidth / 2 - 36 + "px", this.drop.style.top = t.bottom + 5 + "px"
//                         }
//                         this.drop.classList.add(e)
//                     }
//                 }, this.setContent = (...e) => {
//                     e[0] instanceof HTMLElement ? this.content.append(...e) : this.content.innerHTML += e[0], this.position()
//                 }, this.keyDown = e => {
//                     "Enter" !== e.key && "Escape" !== e.key || this.cleanUp()
//                 }, this.superClean = () => {
//                     var e;
//                     document.removeEventListener("keydown", this.keyDown, !1), this.drop.remove(), this.drop = null, null === (e = this.modal) || void 0 === e || e.remove(), this.modal = null
//                 }, this.cleanUp = () => {
//                     this.superClean()
//                 }, this.flow = t, this.parent = e, this.mid = m.Zd(), this.content = (0, n.T)("div", {
//                     className: "content"
//                 }), this.drop = (0, n.T)("div", {
//                     className: "drop"
//                 }, this.content), this.modal = (0, n.T)("div", {
//                     id: "modal-" + this.mid,
//                     className: "modal"
//                 }, this.drop), this.modal.addEventListener("mousedown", (e => {
//                     i = e.target
//                 })), this.modal.addEventListener("mouseup", (e => {
//                     e.target === i && e.target === this.modal && this.cleanUp()
//                 })), document.body.appendChild(this.modal), document.addEventListener("keydown", this.keyDown, !1), this.position(t)
//             }
//         }
//         class S {
//             constructor(e, t) {
//                 this.clear = () => {
//                     this.grid.innerHTML = ""
//                 }, this.grid = e, this.grid.classList.add("mansorary"), t && this.grid.classList.add(t), this.gridItems = [].slice.call(this.grid.children), window.onload = () => this.resizeAllGridItems(), window.addEventListener("resize", (() => this.resizeAllGridItems()))
//             }
//             addChild(e) {
//                 this.grid.appendChild(e), this.gridItems = [].slice.call(this.grid.children)
//             }
//             resizeAllGridItems() {
//                 this.grid.style.alignItems = "start", this.gridItems.forEach((e => this.resizeGridItem(e))), this.grid.style.alignItems = "stretch"
//             }
//             resizeGridItem(e) {
//                 let t = parseInt(window.getComputedStyle(this.grid).getPropertyValue("gap")),
//                     n = Math.ceil((e.clientHeight + t) / (1 + t));
//                 e.style.gridRowEnd = "span " + n
//             }
//             getContent() {
//                 return this.grid
//             }
//         }
//         var D = c(3673);
//         class P {
//             constructor(e, i = !0, a = !1) {
//                 this.setContent = (...e) => {
//                     e[0] instanceof HTMLElement ? this.content.append(...e) : this.content.innerHTML += e[0], this.position()
//                 }, this.disableApply = () => {
//                     const e = (0, n.ZP)("dialog-apply" + this.mid);
//                     e.classList.add("disabled"), e.onclick = void 0
//                 }, this.enableApply = () => {
//                     const e = (0, n.ZP)("dialog-apply" + this.mid);
//                     e.classList.remove("disabled"), e.onclick = () => this.apply()
//                 }, this.disableCancel = () => {
//                     const e = (0, n.ZP)("dialog-cancel" + this.mid);
//                     e.classList.add("disabled"), e.onclick = void 0
//                 }, this.enableCancel = () => {
//                     const e = (0, n.ZP)("dialog-cancel" + this.mid);
//                     e.classList.remove("disabled"), e.onclick = () => this.cancel()
//                 }, this.position = () => {
//                     this.dialog.style.left = Math.round((this.modal.offsetWidth - this.dialog.offsetWidth) / 2 + t.ZP.dialogPos.x) + "px", this.dialog.style.top = Math.round((this.modal.offsetHeight - this.dialog.offsetHeight) / 2 + t.ZP.dialogPos.y) + "px";
//                     let e = this.dialog.getBoundingClientRect(),
//                         n = this.modal.getBoundingClientRect();
//                     e.bottom > n.bottom && (this.dialog.style.top = n.height - e.height < 0 ? "0px" : n.height - e.height + "px"), e.right > n.right && (this.dialog.style.left = n.width - e.width < 0 ? "0px" : n.width - e.width + "px"), this.dialog.offsetTop < 0 && (this.dialog.style.top = "0px"), this.dialog.offsetLeft < 0 && (this.dialog.style.left = "0px")
//                 }, this.dragStart = e => {
//                     this.p = e, this.d = new D.Z(this.dialog.offsetLeft, this.dialog.offsetTop)
//                 }, this.dragMove = e => {
//                     this.dialog.style.left = Math.round(this.d.x + (e.x - this.p.x)) + "px", this.dialog.style.top = Math.round(this.d.y + (e.y - this.p.y)) + "px"
//                 }, this.dragEnd = e => {
//                     t.ZP.dialogPos.x = Math.round(this.dialog.offsetLeft - (this.modal.offsetWidth - this.dialog.offsetWidth) / 2), t.ZP.dialogPos.y = Math.round(this.dialog.offsetTop - (this.modal.offsetHeight - this.dialog.offsetHeight) / 2)
//                 }, this.resizeStart = e => {
//                     this.d = new D.Z(this.dialog.clientHeight, e.y)
//                 }, this.resizeMove = e => {
//                     const t = this.d.x + (e.y - this.d.y);
//                     this.dialog.style.height = (t < 320 ? 320 : t) + "px"
//                 }, this.keyDown = e => {
//                     27 != e.keyCode || "none" === (0, n.ZP)("dialog-cancel" + this.mid).style.display ? 13 != e.keyCode || "none" === (0, n.ZP)("dialog-apply" + this.mid).style.display || e.shiftKey || (0, n.ZP)("dialog-apply" + this.mid).classList.contains("disabled") || this.apply() : this.cancel()
//                 }, this.condition = () => {
//                     this.cleanUp()
//                 }, this.cancel = () => {
//                     this.cleanUp()
//                 }, this.apply = () => {
//                     this.cleanUp()
//                 }, this.cleanUp = () => {
//                     document.removeEventListener("keydown", this.keyDown, !1), this.dialog.remove(), this.dialog = null, this.modal.remove(), this.modal = null
//                 }, this.mid = m.Zd(), this.modal = (0, n.T)("div", {
//                     id: "modal-" + this.mid,
//                     className: "modal"
//                 }), i && this.modal.classList.add("dim"), document.body.appendChild(this.modal), this.dialog = (0, n.T)("div", {
//                     className: "dialog"
//                 }), this.modal.appendChild(this.dialog), this.content = (0, n.T)("div", {
//                     className: "content"
//                 });
//                 const r = (0, n.T)("div", {
//                     id: "dialog-title" + this.mid,
//                     className: "title"
//                 }, e);
//                 if (document.body.clientWidth >= 650 && (0, n.Rg)(r, this.dragStart, this.dragMove, this.dragEnd), this.dialog.append(r, (0, n.T)("img", {
//                         id: "dialog-close" + this.mid,
//                         className: "close ic",
//                         src: "/img/icon/close.svg",
//                         onclick: () => this.cancel()
//                     }), (0, n.T)("div", {
//                         id: "dialog-splitter" + this.mid,
//                         className: "splitter"
//                     }), this.content, (0, n.T)("div", {
//                         className: "buttons",
//                         id: "dialog-buttons" + this.mid
//                     }, (0, n.T)("a", {
//                         id: "dialog-cancel" + this.mid,
//                         className: "button negative",
//                         onclick: () => this.cancel()
//                     }, (0, s.Z)("cancel")), (0, n.T)("a", {
//                         id: "dialog-apply" + this.mid,
//                         className: "button positive",
//                         onclick: () => this.apply()
//                     }, (0, s.Z)("apply")))), a) {
//                     const e = (0, n.T)("img", {
//                         id: "resize-" + this.mid,
//                         src: "/img/icon/three-dot.svg",
//                         className: "resize ic"
//                     });
//                     (0, n.Rg)(e, this.resizeStart, this.resizeMove), this.dialog.append(e)
//                 }
//                 document.addEventListener("keydown", this.keyDown, !1)
//             }
//         }
//         var E = c(5574);
//         class C extends P {
//             constructor(e = {}) {
//                 super((0, s.Z)("dialogLoadTitle")), this.load = async e => {
//                     (0, x.Z)("load-url");
//                     const t = (0, n.ZP)("load-message");
//                     try {
//                         this.cancel = () => {
//                             throw C.CANCEL
//                         };
//                         const i = this.settings.title || (0, s.Z)("image"),
//                             a = this.settings.referrer || (0, s.Z)("source");
//                         t.innerText = (0, s.Z)("dialogLoadLoadingFrom", i.toLowerCase(), a.toLowerCase());
//                         const r = await (0, E.c6)(e, (e => {
//                                 const t = (0, n.ZP)("load-progress"); - 1 == e ? t.removeAttribute("value") : t.value = e
//                             })),
//                             o = new File([r], this.settings.title || e.substring(e.lastIndexOf("/") + 1), {
//                                 type: r.type
//                             });
//                         return this.cleanUp(), o
//                     } catch (i) {
//                         if (i === C.CANCEL) return void this.cleanUp();
//                         (0, n.ZP)("load-progress") && (t.innerText = (0, s.Z)("dialogLoadError"), (0, n.ZP)("load-progress").style.display = "none", this.cancel = () => {
//                             this.cleanUp()
//                         })
//                     }
//                 }, this.settings = e, this.setContent('\n            <p id="load-message"></p><br />\n\n            <progress id="load-progress" value="0" max="100" style="width: 100%;"></progress>\n            <br><br>\n        '), (0, n.ZP)("dialog-apply" + this.mid).style.display = "none";
//                 (0, n.ZP)("load-message").innerText = (0, s.Z)("dialogLoadPrepare")
//             }
//         }
//         C.CANCEL = new Error("CANCEL");
//         class H {
//             constructor(e, t, n) {
//                 this.h = e, this.s = t, this.b = n
//             }
//             toColor() {
//                 let e, t, n, i, a, s, r, o;
//                 if (0 == this.b) e = 0, t = 0, n = 0;
//                 else if (0 == this.s) e = t = n = this.b;
//                 else switch (i = this.h / 60, a = i - Math.floor(i), s = this.b * (1 - this.s), o = this.b * (1 - this.s * a), r = this.b * (1 - this.s * (1 - a)), Math.floor(i)) {
//                     case 0:
//                     case 6:
//                         e = this.b, t = r, n = s;
//                         break;
//                     case 1:
//                         e = o, t = this.b, n = s;
//                         break;
//                     case 2:
//                         e = s, t = this.b, n = r;
//                         break;
//                     case 3:
//                         e = s, t = o, n = this.b;
//                         break;
//                     case 4:
//                         e = r, t = s, n = this.b;
//                         break;
//                     case 5:
//                         e = this.b, t = s, n = o
//                 }
//                 return new Z(Math.round(255 * e), Math.round(255 * t), Math.round(255 * n))
//             }
//             toHEX() {
//                 const e = this.toColor(),
//                     t = e => {
//                         const t = e.toString(16);
//                         return 1 === t.length ? "0" + t : t
//                     };
//                 return `#${t(e.r)}${t(e.g)}${t(e.b)}`
//             }
//         }
//         class Z {
//             constructor(e = 255, t = 255, n = 255, i = 255) {
//                 this.isEqual = e => !!e && (this.r === e.r && this.g === e.g && this.b === e.b && this.a === e.a), this.toHEX = () => {
//                     const e = e => {
//                         const t = e.toString(16);
//                         return 1 === t.length ? "0" + t : t
//                     };
//                     return `#${e(this.r)}${e(this.g)}${e(this.b)}`
//                 }, this.toHEXA = () => {
//                     const e = e => {
//                         const t = e.toString(16);
//                         return 1 === t.length ? "0" + t : t
//                     };
//                     return `#${e(this.r)}${e(this.g)}${e(this.b)}${e(this.a)}`
//                 }, this.toRGBA = (e = this.a) => `rgba(${this.r},${this.g},${this.b},${e/255})`, this.toHSB = () => {
//                     let e, t, n, i = Math.min(this.r, this.g, this.b),
//                         a = Math.max(this.r, this.g, this.b);
//                     n = a / 255;
//                     let s = a - i;
//                     return s ? (t = s / a, e = this.r == a ? (this.g - this.b) / s * 60 : this.g == a ? 60 * (2 + (this.b - this.r) / s) : 60 * (4 + (this.r - this.g) / s), e > 360 ? e -= 360 : e < 0 && (e += 360)) : e = t = 0, new H(e, t, n)
//                 }, this.r = m.uZ(e, 0, 255), this.g = m.uZ(t, 0, 255), this.b = m.uZ(n, 0, 255), this.a = m.uZ(i, 0, 255)
//             }
//             rotateHue(e) {
//                 let t, n, i, a = Math.min(this.r, this.g, this.b),
//                     s = Math.max(this.r, this.g, this.b);
//                 t = s / 255;
//                 var r = s - a;
//                 return r ? (n = r / s, i = this.r == s ? (this.g - this.b) / r * 60 : this.g == s ? 60 * (2 + (this.b - this.r) / r) : 60 * (4 + (this.r - this.g) / r)) : i = n = 0, i += e, i > 360 ? i -= 360 : i < 0 && (i += 360), 360 === i && (i = 0), Z.fromHSB(i, n, t)
//             }
//             static fromRGB(e) {
//                 if (/^#[0-9A-F]{6}$/i.test(e)) return Z.fromHEX(e);
//                 let t = e.match(/^rgb\((\d+),\s*(\d+),\s*(\d+)\)$/);
//                 return !t || t.length < 4 ? new Z : new Z(Number(t[1]), Number(t[2]), Number(t[3]))
//             }
//             static fromHEXA(e) {
//                 let t = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
//                 return !t || t.length < 4 ? new Z : new Z(parseInt(t[1], 16), parseInt(t[2], 16), parseInt(t[3], 16), parseInt(t[4], 16))
//             }
//             static fromHEX(e, t = 255) {
//                 let n = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(e);
//                 return !n || n.length < 3 ? new Z : new Z(parseInt(n[1], 16), parseInt(n[2], 16), parseInt(n[3], 16), t)
//             }
//             static fromHSB(e, t, n) {
//                 let i, a, s, r, o, l, d, c;
//                 if (0 == n) i = 0, a = 0, s = 0;
//                 else if (0 == t) i = a = s = n;
//                 else switch (r = e / 60, o = r - Math.floor(r), l = n * (1 - t), c = n * (1 - t * o), d = n * (1 - t * (1 - o)), Math.floor(r)) {
//                     case 0:
//                     case 6:
//                         i = n, a = d, s = l;
//                         break;
//                     case 1:
//                         i = c, a = n, s = l;
//                         break;
//                     case 2:
//                         i = l, a = n, s = d;
//                         break;
//                     case 3:
//                         i = l, a = c, s = n;
//                         break;
//                     case 4:
//                         i = d, a = l, s = n;
//                         break;
//                     case 5:
//                         i = n, a = l, s = c
//                 }
//                 return new Z(Math.round(255 * i), Math.round(255 * a), Math.round(255 * s))
//             }
//             clone() {
//                 return new Z(this.r, this.g, this.b, this.a)
//             }
//         }
//         class A {
//             constructor(e, t, n) {
//                 this.id = e, this.color = t, this.position = n
//             }
//         }
//         class j {
//             constructor() {
//                 this.direction = 0, this.type = "linear", this.addStop = (e, t) => {
//                     t = m.uZ(t, 0, 1);
//                     const n = new A(m.Zd(), e, t);
//                     return this.stops.push(n), this.sort(), n
//                 }, this.removeStop = e => {
//                     const t = this.stops.findIndex((t => t.id === e));
//                     return -1 !== t && this.stops.splice(t, 1), this.sort(), this.stops[0].id
//                 }, this.getStop = e => {
//                     let t;
//                     return this.stops.forEach((n => {
//                         n.id === e && (t = n)
//                     })), t
//                 }, this.sort = () => {
//                     this.stops.sort(((e, t) => e.position - t.position))
//                 }, this.toCSS = () => {
//                     let e = "linear-gradient(to right";
//                     for (let t = 0; t < this.stops.length; ++t) e += ", " + this.stops[t].color.toRGBA() + " " + (100 * this.stops[t].position).toFixed(0) + "%";
//                     return e += ")", e
//                 }, this.toJSON = () => JSON.stringify(this.toIGradient()), this.toIGradient = () => {
//                     let e = new Array;
//                     return this.stops.forEach((t => {
//                         e.push({
//                             id: t.id,
//                             color: t.color.toHEXA(),
//                             position: t.position
//                         })
//                     })), {
//                         type: this.type,
//                         direction: this.direction,
//                         stops: e
//                     }
//                 }, this.createCanvasGradient = (e, t = 0, n = 0) => {
//                     let i;
//                     if ("linear" === this.type) {
//                         const a = (this.direction - 90) * Math.PI / 180,
//                             s = e.canvas.width,
//                             r = e.canvas.height;
//                         if (s < 1 || r < 1) return;
//                         const o = Math.sqrt(s * s + r * r) / 2,
//                             l = Math.asin(r / 2 / o);
//                         let d = (a % (2 * Math.PI) + 4 * Math.PI) % (2 * Math.PI);
//                         d > Math.PI && (d -= Math.PI), d > Math.PI / 2 && d <= Math.PI && (d = Math.PI / 2 - (d - Math.PI / 2));
//                         let c = Math.PI / 2 - l - Math.abs(d),
//                             u = Math.abs(l - Math.abs(d)),
//                             h = Math.max(Math.cos(u) * s, Math.cos(c) * r) / 2,
//                             m = Math.cos(a) * h,
//                             p = Math.sin(a) * h;
//                         i = e.createLinearGradient(s / 2 + m + t, r / 2 + p + n, s / 2 - m + t, r / 2 - p + n)
//                     } else {
//                         let a = e.canvas.width / 2,
//                             s = e.canvas.height / 2,
//                             r = Math.max(e.canvas.width, e.canvas.height) / 2;
//                         i = e.createRadialGradient(a + t, s + n, 0, a + t, s + n, r)
//                     }
//                     return this.addStopToCanvasGradient(i), i
//                 }, this.addStopToCanvasGradient = (e, t = !1) => {
//                     for (let n = 0; n < this.stops.length; ++n) e.addColorStop(this.stops[n].position, this.stops[n].color.toRGBA(t ? 255 - this.stops[n].color.a : this.stops[n].color.a))
//                 }, this.stops = new Array
//             }
//             static fromJSON(e) {
//                 let t = JSON.parse(e);
//                 return j.fromIGradient(t)
//             }
//             static fromIGradient(e) {
//                 const t = new j;
//                 if (t.type = e.type && "radial" === e.type ? "radial" : "linear", t.direction = e.direction, e.stops)
//                     for (let n = 0; n < e.stops.length; ++n) {
//                         let i = "string" == typeof e.stops[n].color ? Z.fromHEXA(e.stops[n].color) : new Z(e.stops[n].color.r, e.stops[n].color.g, e.stops[n].color.b, e.stops[n].color.a);
//                         t.addStop(i, e.stops[n].position)
//                     }
//                 return t
//             }
//             static fromPreset(e) {
//                 const t = new j;
//                 for (let n = 0; n < e.colors.length; ++n) t.addStop(Z.fromHEXA(e.colors[n]), e.positions[n]);
//                 return t.direction = e.direction + 180, t.type = e.type, t
//             }
//             static fromColors(e, t) {
//                 const n = new j;
//                 return n.addStop(e, 0), n.addStop(t, 1), n
//             }
//         }
//         var O;
//         class F {
//             constructor(e, t = 1, n = 0) {
//                 this.svg = e, this.scale = t, this.direction = n, this.createCanvasPattern = e => {
//                     let t;
//                     if (1 !== this.scale) {
//                         let n = m.vL(Math.round(this.image.width * this.scale), Math.round(this.image.height * this.scale));
//                         n.getContext("2d").drawImage(this.image, 0, 0, n.width, n.height), t = e.createPattern(n, "repeat")
//                     } else t = e.createPattern(this.image, "repeat");
//                     return 0 !== this.direction && t.setTransform((new DOMMatrix).rotate(this.direction)), t
//                 }, this.toCSS = () => "url(data:image/svg+xml;base64," + btoa(this.svg) + ")", this.toJSON = () => JSON.stringify(this.toIPattern())
//             }
//             toIPattern(e = this.svg) {
//                 return {
//                     svg: e,
//                     scale: this.scale,
//                     direction: this.direction
//                 }
//             }
//         }
//         O = F, F.fromIPattern = async e => {
//             let t = new O(e.svg, e.scale, e.direction),
//                 n = new Blob([t.svg], {
//                     type: "image/svg+xml"
//                 });
//             return t.image = await (0, E.s4)(n), t
//         }, F.fromJSON = async e => {
//             let t = JSON.parse(e);
//             return O.fromIPattern(t)
//         };
//         const I = F;
//         var N;
//         class R {
//             constructor(e) {
//                 this.value = e, this.getType = () => this.value instanceof Z ? "color" : this.value instanceof j ? "gradient" : this.value instanceof I ? "pattern" : void 0, this.getStringValue = () => this.value instanceof Z ? this.value.toHEX() : this.value instanceof j || this.value instanceof I ? this.value.toJSON() : void 0, this.getCssValue = () => this.value instanceof Z ? this.value.toHEX() : this.value instanceof j || this.value instanceof I ? this.value.toCSS() : void 0, this.addToCanvasFillStyle = (e, t = 0, n = 0) => {
//                     this.value instanceof Z ? e.fillStyle = this.value.toHEX() : this.value instanceof j ? e.fillStyle = this.value.createCanvasGradient(e, t, n) : this.value instanceof I && (e.fillStyle = this.value.createCanvasPattern(e))
//                 }, this.addToCanvasStrokeStyle = (e, t = 0, n = 0) => {
//                     this.value instanceof Z ? e.strokeStyle = this.value.toHEX() : this.value instanceof j ? e.strokeStyle = this.value.createCanvasGradient(e, t, n) : this.value instanceof I && (e.strokeStyle = this.value.createCanvasPattern(e))
//                 }
//             }
//         }
//         N = R, R.fromString = async (e, t) => {
//             let n;
//             return "color" === e && /^#[0-9A-F]{6}$/i.test(t) ? n = new N(Z.fromHEX(t)) : "gradient" === e ? n = new N(j.fromJSON(t)) : "pattern" === e && (n = new N(await I.fromJSON(t))), n
//         };
//         const z = R;
//         class $ {
//             constructor(e) {
//                 this.settings = {
//                     opacity: 1,
//                     blendmode: "",
//                     locked: !1,
//                     visible: !0,
//                     name: "",
//                     link: ""
//                 }, this.hasLink = () => this.settings.link && "" !== this.settings.link, this.rotate = e => {
//                     this.canvas && (this.canvas = m.Xj(this.canvas, e ? -90 : 90), this.mask && (this.mask = m.Xj(this.mask, e ? -90 : 90)), this.rect = this.rect.flipWidthAndHeight())
//                 }, this.flip = e => {
//                     this.canvas && (this.canvas = m.x2(this.canvas, e), this.mask && (this.mask = m.x2(this.mask, e)))
//                 }, this.setWidth = (e, t) => {
//                     this.rect && (e < 1 && (e = 1), this.rect.width = e, 0 !== t && (this.rect.height = Math.round(this.rect.width / t), this.rect.height < 1 && (this.rect.height = 1)))
//                 }, this.setHeight = (e, t) => {
//                     this.rect && (e < 1 && (e = 1), this.rect.height = e, 0 !== t && (this.rect.width = Math.round(this.rect.height * t), this.rect.width < 1 && (this.rect.width = 1)))
//                 }, this.position = (e, t) => {
//                     this.rect && (void 0 !== e && (this.rect.x = e), void 0 !== t && (this.rect.y = t))
//                 }, this.scale = (e, t, n) => {
//                     this.rect && (this.rect.x = Math.round(this.rect.x * e), this.rect.y = Math.round(this.rect.y * t), this.rect.width = Math.round(this.rect.width * e), this.rect.height = Math.round(this.rect.height * t), this.rect.width < 0 && (this.rect.width = 1), this.rect.height < 0 && (this.rect.height = 1))
//                 }, this.setRect = e => {
//                     this.bect ? this.bect = e : this.rect = e
//                 }, this.getRect = () => this.bect ? this.bect : this.rect, this.getCanvas = () => this.transient ? this.transient : this.baked ? this.baked : this.canvas, this.setAltCanvas = () => {
//                     this.transient = m.dN(this.canvas)
//                 }, this.replaceCanvas = e => {
//                     this.canvas ? this.canvas.width === e.width && this.canvas.height === e.height || (this.canvas.width = e.width, this.canvas.height = e.height) : this.canvas = m.vL(this.rect.width, this.rect.height);
//                     const t = this.canvas.getContext("2d");
//                     t.save(), t.imageSmoothingEnabled = !1, t.globalCompositeOperation = "copy", t.drawImage(e, 0, 0), t.restore()
//                 }, this.extendCanvas = e => {}, this.switchCanvas = (e, t) => {}, this.render = (e = !1) => {}, this.calculate = (e, t, n) => {}, this.rasterize = () => {}, this.clone = (e = !1) => {}, this.id = m.M8(), this.type = e
//             }
//         }
//         $.TYPE_GROUP = "group", $.TYPE_SCRATCH = "scratch", $.TYPE_ELEMENT = "element", $.TYPE_IMAGE = "image", $.TYPE_SHAPE = "shape", $.TYPE_FRAME = "frame", $.TYPE_TEXT = "text";
//         const W = $;
//         var U;
//         async function B() {
//             try {
//                 return await J.open()
//             } catch (e) {
//                 return Promise.resolve(new X)
//             }
//         }
//         class q {
//             constructor(e) {
//                 this.next = () => this.queue.pop(), this.queue = [new m.L5];
//                 let t = this.queue[0];
//                 e.onsuccess = () => {
//                     const n = e.result;
//                     n ? (t.resolve({
//                         done: !1,
//                         value: n.value
//                     }), t = new m.L5, this.queue.unshift(t), n.continue()) : t.resolve({
//                         done: !0,
//                         value: void 0
//                     })
//                 }, e.onerror = () => {
//                     t.reject(e.error)
//                 }
//             }[Symbol.asyncIterator]() {
//                 return this
//             }
//         }
//         class G {
//             constructor(e) {
//                 this.inner = e
//             }
//             static bound(e, t, n = !1, i = !1) {
//                 return new G(IDBKeyRange.bound(e, t, n, i))
//             }
//             static lowerBound(e, t) {
//                 return new G(IDBKeyRange.lowerBound(e, t))
//             }
//             static upperBound(e, t) {
//                 return new G(IDBKeyRange.upperBound(e, t))
//             }
//             static only(e) {
//                 return new G(IDBKeyRange.only(e))
//             }
//             static unwrap(e) {
//                 return e instanceof G ? e.inner : e
//             }
//         }
//         class J {
//             constructor(e) {
//                 this.underlying = e
//             }
//             static availiable() {
//                 return !navigator.userAgent.includes("Edge") && !!window.indexedDB
//             }
//             transaction(e, ...t) {
//                 const n = this.underlying.transaction(t, e);
//                 return t.map((e => new V(n.objectStore(e))))
//             }
//         }
//         U = J, J.open = async () => U.availiable() ? new Promise(((e, t) => {
//             const n = window.indexedDB.open("pixlr", 2);
//             n.onupgradeneeded = e => {
//                 const t = n.result;
//                 0 === e.oldVersion ? (t.createObjectStore("blobs"), t.createObjectStore("fonts"), t.createObjectStore("document-meta", {
//                     keyPath: "id"
//                 }), t.createObjectStore("document-selection"), t.createObjectStore("document-thumbnail"), t.createObjectStore("layer-meta", {
//                     keyPath: "id"
//                 }).createIndex("document", "document"), t.createObjectStore("layer-mask"), t.createObjectStore("layer-bitmap")) : t.deleteObjectStore("history")
//             }, n.onerror = e => t(n.error), n.onsuccess = () => e(new U(n.result))
//         })) : Promise.reject(new Error("Browser does not support indexedDB"));
//         class V {
//             constructor(e) {
//                 this.underlying = e
//             }
//             get(e) {
//                 return new Promise(((t, n) => {
//                     const i = this.underlying.get(e);
//                     i.onsuccess = () => t(i.result), i.onerror = () => n(i.error)
//                 }))
//             }
//             getAll(e, t) {
//                 return new Promise(((n, i) => {
//                     const a = this.underlying.getAll(G.unwrap(e), t);
//                     a.onsuccess = () => n(a.result), a.onerror = () => i(a.error)
//                 }))
//             }
//             iterate(e, t) {
//                 const n = this.underlying.openCursor(G.unwrap(e), t);
//                 return new q(n)
//             }
//             index(e) {
//                 const t = this.underlying.index(e);
//                 return new K(t)
//             }
//             cursor(e, t, n) {
//                 return new Promise(((i, a) => {
//                     const s = this.underlying.openCursor(G.unwrap(t), n);
//                     s.onsuccess = () => {
//                         const t = s.result;
//                         if (t) {
//                             const n = e(t.value, t);
//                             "number" == typeof n ? t.advance(n) : !1 !== n ? t.continue() : i()
//                         } else i()
//                     }, s.onerror = () => a(s.error)
//                 }))
//             }
//             put(e, t) {
//                 return new Promise(((n, i) => {
//                     const a = this.underlying.put(e, t);
//                     a.onsuccess = () => {
//                         n()
//                     }, a.onerror = () => {
//                         i(a.error)
//                     }
//                 }))
//             }
//             add(e, t) {
//                 return new Promise(((n, i) => {
//                     const a = this.underlying.add(e, t);
//                     a.onsuccess = () => {
//                         n()
//                     }, a.onerror = () => {
//                         i(a.error)
//                     }
//                 }))
//             }
//             clear() {
//                 return new Promise(((e, t) => {
//                     let n = this.underlying.clear();
//                     n.onsuccess = () => e(), n.onerror = () => t(n.error)
//                 }))
//             }
//             count(e) {
//                 return new Promise(((t, n) => {
//                     let i;
//                     i = void 0 === e ? this.underlying.count() : this.underlying.count(G.unwrap(e)), i.onsuccess = () => t(i.result), i.onerror = () => n(i.error)
//                 }))
//             }
//             delete(e) {
//                 return new Promise(((t, n) => {
//                     const i = this.underlying.delete(G.unwrap(e));
//                     i.onsuccess = () => t(), i.onerror = () => n(i.error)
//                 }))
//             }
//         }
//         class K {
//             constructor(e) {
//                 this.underlying = e, this.name = e.name, this.keyPath = e.keyPath, this.multiEntry = e.multiEntry, this.unique = e.unique
//             }
//             get(e) {
//                 return new Promise(((t, n) => {
//                     const i = this.underlying.get(e);
//                     i.onsuccess = () => t(i.result), i.onerror = () => n(i.error)
//                 }))
//             }
//             getAll(e, t) {
//                 return new Promise(((n, i) => {
//                     const a = this.underlying.getAll(G.unwrap(e), t);
//                     a.onsuccess = () => n(a.result), a.onerror = () => i(a.error)
//                 }))
//             }
//             count(e) {
//                 return new Promise(((t, n) => {
//                     let i;
//                     i = void 0 === e ? this.underlying.count() : this.underlying.count(G.unwrap(e)), i.onsuccess = () => t(i.result), i.onerror = () => n(i.error)
//                 }))
//             }
//             cursor(e, t, n) {
//                 return new Promise(((i, a) => {
//                     const s = this.underlying.openCursor(G.unwrap(t), n);
//                     s.onsuccess = () => {
//                         const t = s.result;
//                         t ? (e(t.value, t), t.continue()) : i()
//                     }, s.onerror = () => a(s.error)
//                 }))
//             }
//             iterate(e, t) {
//                 const n = this.underlying.openCursor(G.unwrap(e), t);
//                 return new q(n)
//             }
//             getAllKeys(e, t) {
//                 return new Promise(((n, i) => {
//                     const a = this.underlying.getAllKeys(G.unwrap(e), t);
//                     a.onsuccess = () => n(a.result), a.onerror = () => i(a.error)
//                 }))
//             }
//         }
//         class X {
//             transaction(e, ...t) {
//                 return t.map((e => new Q(e)))
//             }
//         }
//         class Q {
//             constructor(e) {
//                 this.name = e
//             }
//             index(e) {
//                 return this
//             }
//             put(e, t) {}
//             add(e, t) {}
//             clear() {}
//             delete(e) {}
//             async get(e) {}
//             async getAll(e, t) {
//                 return []
//             }
//             async count(e) {
//                 return 0
//             }
//             async cursor(e, t, n) {}
//             iterate(e, t) {
//                 return {
//                     next: () => Promise.resolve({
//                         done: !0,
//                         value: void 0
//                     }),
//                     [Symbol.asyncIterator]() {
//                         return this
//                     }
//                 }
//             }
//         }
//         class ee {
//             constructor(e, t, n = !0) {
//                 this.lineSpace = 0, this.letterSpace = 0, this.bold = !1, this.italic = !1, this.uppercase = !1, this.underline = !1, this.align = "center", this.curve = !1, this.curveAmount = 0, this.curveType = "arc", this.curveFlip = !1, this.curveSpread = !1, this.warp = !1, this.warpEdgeSize = 0, this.warpCenterSize = 0, this.warpHorizontalOffset = 0, this.warpVerticalOffset = 0, this.warpType = ee.WARP_CIRCULAR, this.warpMode = ee.WARP_UPPER, this.background = !1, this.backgroundOffset = 0, this.backgroundPunch = !1, this.backgroundColor = "#555555", this.backgroundType = ee.BACKGROUND_FULL, this.outline = !1, this.outlinePunch = !1, this.outlineColor = "#555555", this.outlineSize = .3, this.outlineDistance = 0, this.outlineDirection = 305, this.shadow = !1, this.shadowBlur = .3, this.shadowColor = "#000000", this.shadowAlpha = .6, this.shadowDistance = .3, this.shadowDirection = 160, this.font = e, this.size = t, n && this.measureText()
//             }
//             setSize(e) {
//                 this.size = e, this.measureText()
//             }
//             setFont(e) {
//                 this.font = e, this.measureText()
//             }
//             measureText() {
//                 if (this.size < 1) return;
//                 var e = document.createElement("canvas");
//                 e.width = 20 * this.size, e.height = Math.round(2 * this.size);
//                 const t = e.getContext("2d", {
//                     willReadFrequently: !0
//                 });
//                 t.textBaseline = "top", t.fillStyle = "white", t.font = this.getCssFont(), t.fillText("SfTgMjkHpqLRnliIFIABCDEFGIJKNOPQSUVXYZabcdeghmnorstuvxyz", 0, Math.round(.5 * this.size));
//                 const n = m.vO(t.getImageData(0, 0, e.width, e.height));
//                 if (n) {
//                     this.ascent = n.y - Math.round(.5 * this.size), this.height = n.height, t.clearRect(0, 0, e.width, e.height), t.fillText("SMOP", 0, Math.round(.5 * this.size));
//                     const i = m.vO(t.getImageData(0, 0, e.width, e.height));
//                     this.baseline = i.height
//                 }
//                 this.height <= 0 && this.measureTextFallback(), this.padding = Math.round(.2 * this.height)
//             }
//             measureTextFallback() {
//                 var e = document.createElement("span");
//                 e.innerHTML = "ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvxyz", e.style.fontFamily = this.font, e.style.fontSize = this.size + "px";
//                 var t = document.createElement("div");
//                 t.style.display = "inline-block", t.style.width = "1px", t.style.height = "0px";
//                 var i = document.createElement("div");
//                 i.appendChild(e), i.appendChild(t), (0, n.ZP)("workspace").appendChild(i);
//                 try {
//                     t.style.verticalAlign = "baseline", this.ascent = t.offsetTop - e.offsetTop + 1, t.style.verticalAlign = "bottom", this.height = t.offsetTop - e.offsetTop + 1, this.baseline = this.height
//                 } finally {
//                     i.remove()
//                 }
//             }
//             getLineSpacing() {
//                 var e;
//                 return Math.ceil(this.height * Number(null !== (e = this.lineSpace) && void 0 !== e ? e : 0))
//             }
//             getLetterSpacing() {
//                 var e;
//                 return Math.ceil(this.height / 2 * Number(null !== (e = this.letterSpace) && void 0 !== e ? e : 0))
//             }
//             getCssFont(e = this.size) {
//                 return (this.italic ? "italic " : "") + (this.bold ? "bold " : "") + e + "px " + this.font
//             }
//             clone() {
//                 const e = Object.create(ee.prototype);
//                 return Object.assign(e, this)
//             }
//             equalTo(e) {
//                 return !!e && (this.font === e.font && this.size === e.size && this.lineSpace === e.lineSpace && this.letterSpace === e.letterSpace && this.bold === e.bold && this.italic === e.italic && this.underline === e.underline && this.uppercase === e.uppercase && this.fillType === e.fillType && this.fillValue === e.fillValue && this.align === e.align && this.curve === e.curve && this.curveAmount === e.curveAmount && this.curveType === e.curveType && this.curveSpread === e.curveSpread && this.curveFlip === e.curveFlip && this.warp === e.curve && this.warpMode === e.warpMode && this.warpType === e.warpType && this.warpEdgeSize === e.warpEdgeSize && this.warpCenterSize === e.warpCenterSize && this.warpHorizontalOffset === e.warpHorizontalOffset && this.warpVerticalOffset === e.warpVerticalOffset && this.background === e.background && this.backgroundPunch === e.backgroundPunch && this.backgroundColor === e.backgroundColor && this.backgroundType === e.backgroundType && this.outline === e.outline && this.outlinePunch === e.outlinePunch && this.outlineSize === e.outlineSize && this.outlineColor === e.outlineColor && this.outlineDistance === e.outlineDistance && this.outlineDirection === e.outlineDirection && this.shadow === e.shadow && this.shadowBlur === e.shadowBlur && this.shadowColor === e.shadowColor && this.shadowAlpha === e.shadowAlpha && this.shadowDistance === e.shadowDistance && this.shadowDirection === e.shadowDirection)
//             }
//         }
//         ee.BACKGROUND_FULL = "full", ee.BACKGROUND_LINE = "line", ee.BACKGROUND_WORD = "word", ee.WARP_CIRCULAR = "circular", ee.WARP_ANGULAR = "angular", ee.WARP_UPPER = "upper", ee.WARP_MIDDLE = "middle", ee.WARP_LOWER = "lower";
//         const te = ee;
//         class ne {
//             constructor(e, t, n = !1, i = "woff", a, s) {
//                 this.name = e, this.short = t, this.premium = n, this.local = !!a, this.thumb = s, this.font = a, this.type = i
//             }
//             static async save(e) {
//                 const t = await B(),
//                     [n] = t.transaction("readwrite", "fonts");
//                 await n.put(e, e.name)
//             }
//             static async delete(e) {
//                 const t = await B(),
//                     [n] = t.transaction("readwrite", "fonts");
//                 await n.delete(e.name)
//             }
//         }
//         class ie {
//             static async loadFontFromTemplate(e, t, n) {
//                 var i, a;
//                 let s = null === (i = n.split(".")[0]) || void 0 === i ? void 0 : i.toLowerCase(),
//                     r = null === (a = n.split(".")[1]) || void 0 === a ? void 0 : a.toLowerCase();
//                 return await ie.createLocalFontDesc(e, t, s, r)
//             }
//             static async loadFontFromUpload(e) {
//                 var t, n;
//                 let i = null === (t = e.name.split(".")[0]) || void 0 === t ? void 0 : t.substring(0, 50).replace(/[~`!@#$%^&*()+={}\[\];:\'\"<>.,\/\\\?]/g, ""),
//                     a = null === (n = e.name.split(".")[1]) || void 0 === n ? void 0 : n.toLowerCase(),
//                     s = i.substring(0, 20).replace(" ", "").toLowerCase();
//                 if (i = (null == i ? void 0 : i.charAt(0).toUpperCase()) + (null == i ? void 0 : i.slice(1)), ie.fontList.find((e => e.name === i))) return void document.dispatchEvent(new CustomEvent("notification", {
//                     detail: "Font already exists!"
//                 }));
//                 let r = a;
//                 switch (a) {
//                     case "otf":
//                         r = "opentype";
//                         break;
//                     case "ttf":
//                         r = "truetype"
//                 }
//                 const o = new Blob([e], {
//                     type: "font/" + r
//                 });
//                 let l = await ie.createLocalFontDesc(o, i, s, a);
//                 return l && document.dispatchEvent(new CustomEvent("notification", {
//                     detail: "Font was added!"
//                 })), l
//             }
//             static async createLocalFontDesc(e, t, n, i) {
//                 const a = new ne(t, n, !1, i, e);
//                 try {
//                     await ie.addToDOM(a)
//                 } catch (d) {
//                     return console.log(d), void document.dispatchEvent(new CustomEvent("notification", {
//                         detail: "Failed to load font!"
//                     }))
//                 }
//                 let s = new te(t, 56);
//                 s.height > 72 && s.setSize(Math.floor(72 / s.height * 56));
//                 const r = m.GF(500, 80),
//                     o = r.getContext("2d");
//                 o.font = s.getCssFont(), o.fillStyle = "#ffffff", o.textBaseline = "top", o.fillText(t, 0, Math.round((80 - s.height) / 2) - s.ascent);
//                 var l;
//                 return a.thumb = await (l = r, new Promise(((e, t) => {
//                     l.toBlob((t => {
//                         e(t)
//                     }), "image/png")
//                 }))), await ne.save(a), ie.fontList.unshift(a), a
//             }
//             static async removeLocalFontDesc(e) {
//                 let t = ie.getFontDesc(e);
//                 t && (await ne.delete(t), ie.fontList = ie.fontList.filter((e => e !== t)))
//             }
//             static async addToDOM(e) {
//                 if (!e) return;
//                 const t = e.local ? new FontFace(e.name, await (0, E.h0)(e.font)) : new FontFace(e.name, `url(/font/${e.short}.woff) format('woff')`);
//                 if (document.fonts.has(t)) return Promise.resolve(t);
//                 let n = await t.load();
//                 return document.fonts.add(n), n
//             }
//             static getFontDesc(e) {
//                 return ie.fontList.find((t => t.name === e))
//             }
//             static async getFontFile(e) {
//                 let t = this.getFontDesc(e);
//                 if (!t) return;
//                 if (t.local) return new File([t.font], t.name);
//                 let n = await fetch("/font/" + t.short + ".woff").then((e => e.blob()));
//                 return n ? new File([n], t.short + ".woff", {
//                     type: "font/woff"
//                 }) : void 0
//             }
//             static async loadSaved() {
//                 const e = await B(),
//                     [t] = e.transaction("readonly", "fonts");
//                 return t.iterate()
//             }
//         }
//         ie.fontList = [new ne("Arial", "arial"), new ne("Courier New", "courier"), new ne("Georgia", "georgia"), new ne("Trebuchet MS", "trebuchet"), new ne("Verdana", "verdana"), new ne("Aberus", "aberus"), new ne("Ablation", "ablation", !0), new ne("Adeft", "adeft"), new ne("Adelya", "adelya", !0), new ne("Adios Amigos", "adios"), new ne("Adolfine", "adolfine"), new ne("Agnostic", "agnostic", !0), new ne("Aiden", "aiden"), new ne("Amaranth", "amaranth"), new ne("Amateur Typewriter", "amateur", !0), new ne("Alder", "alder", !0), new ne("Almondia", "almondia"), new ne("Aloma Island", "alomaisland", !0), new ne("Alvida", "alvida"), new ne("Amoreiza", "amoreiza"), new ne("AmoretteLight", "amorette"), new ne("Angeleno Brush Script", "angeleno", !0), new ne("Antreas", "antreas"), new ne("Arm Race", "arm"), new ne("Artick", "artick"), new ne("Asap", "asap"), new ne("Atomsfer", "atomosfer"), new ne("Atthens", "atthens"), new ne("Avocado Sans", "avocado", !0), new ne("Baangkarr Press", "baangkarr", !0), new ne("Badstar", "badstar", !0), new ne("Bahram", "bahram"), new ne("Baileyns", "baileyns"), new ne("Barooduck", "barooduck", !0), new ne("Bearley", "bearley"), new ne("Beat", "beat", !0), new ne("BebasNeue", "bebasneue"), new ne("Bellquinas", "bellquinas"), new ne("Bengrraas", "bengrraas"), new ne("Beornheard", "beornheard"), new ne("Berretti", "berretti"), new ne("Biker New", "biker", !0), new ne("Blossom Berry Script", "blossomberry", !0), new ne("Boullervard", "boullervard"), new ne("Bondie", "bondie", !0), new ne("Bondrians", "bondrians", !0), new ne("Braga Deco", "braga"), new ne("Brave Hearted", "brave"), new ne("Bright Orchid", "brightorchid", !0), new ne("Brioche", "brioche", !0), new ne("Brocklyn", "brocklyn"), new ne("Bronzier", "bronzier", !0), new ne("Brooklyn", "brooklyn", !0), new ne("Brodetto", "brodetto"), new ne("Bronela", "bronela", !0), new ne("The Brownies", "brownies"), new ne("Bubbble Gum", "bubbblegum", !0), new ne("Brushcheetah", "brushcheetah"), new ne("Butternut Script", "butternut", !0), new ne("Caang", "caang"), new ne("Cakehtreuks", "cakehtreuks"), new ne("Cannoli Poke", "cannoli", !0), new ne("Camille", "camille"), new ne("Calamandria", "calamandria"), new ne("Caldwell", "caldwell", !0), new ne("Carafun", "carafun"), new ne("Carnavonts", "carnavonts"), new ne("Carvino", "carvino"), new ne("Cervantes", "cervantes"), new ne("Chaiaathah", "chaiaathah", !0), new ne("Chalkyal", "chalkyal"), new ne("Chiqarine", "chiqarine"), new ne("Chukies", "chukies"), new ne("Cincoyo", "cincoyo"), new ne("Clockwise", "clockwise", !0), new ne("Coast Redwood", "coast"), new ne("Colombo", "colombo", !0), new ne("College", "college", !0), new ne("Companion", "companion"), new ne("Corlombus", "corlombus"), new ne("Conseration", "conseration", !0), new ne("CuprumFFU", "cuprum"), new ne("Cupello sons", "cupello", !0), new ne("Costa Mala", "costamala", !0), new ne("Cozy", "cozy", !0), new ne("CreamyMoony", "creamy"), new ne("Cross Road", "crossroad", !0), new ne("Cross Road Slab", "crossroadslab", !0), new ne("Daddy Day", "daddy"), new ne("Dankduck", "dankduck"), new ne("Darbots", "darbots", !0), new ne("Davish", "davish", !0), new ne("Davish Rounded", "davishround", !0), new ne("Dear Journal", "dearjournal", !0), new ne("Delicious", "delicious", !0), new ne("Desmodus", "desmodus"), new ne("Desmosedici", "desmosedici"), new ne("Dhangdose", "dhangdose"), new ne("Dingle", "dingle", !0), new ne("Djangart Rough", "djangart"), new ne("Dolington", "dolington", !0), new ne("Doppelganger", "doppelganger", !0), new ne("Dorr", "dorr", !0), new ne("Dustin", "dustin", !0), new ne("Earth And Sky", "earth"), new ne("Easterica", "easterica"), new ne("Eastone", "eastone"), new ne("Eastwood", "eastwood", !0), new ne("Echizen", "echizen"), new ne("El-Karnito", "elkarnito"), new ne("Elliot", "elliot"), new ne("Elysian", "elysian", !0), new ne("Emery", "emery"), new ne("Empire View", "empire"), new ne("Eugiene", "eugiene"), new ne("Espano", "espano", !0), new ne("Erleane", "erleane"), new ne("Everleigh", "everleigh", !0), new ne("Exquisite", "exquisite", !0), new ne("Espano", "espano", !0), new ne("Farewell Angelina", "angelina", !0), new ne("Father and Son", "father"), new ne("Fatherly", "fatherly"), new ne("Fenord", "fenord", !0), new ne("Finland", "finland", !0), new ne("Flamingo", "flamingo"), new ne("FoxyMist", "foxy"), new ne("Forever Freedom", "forever", !0), new ne("Game On", "game"), new ne("Gamour", "gamour", !0), new ne("Gallerina", "gallerina", !0), new ne("Geronide", "geronide", !0), new ne("Geronide Stamp", "geronidestamp", !0), new ne("Gingle Snowland", "ginglesnowland", !0), new ne("Gingerbreads", "gingerbreads"), new ne("Gladiolusy", "gladiolusy", !0), new ne("Glamper", "glamper", !0), new ne("Goldie Dreambox", "goldiedreambox", !0), new ne("Gordon", "gordon", !0), new ne("Gorgeous", "gorgeous", !0), new ne("Gingerly", "gingerly", !0), new ne("Goorraatt", "goorraatt"), new ne("Grayson", "grayson", !0), new ne("Great Again", "great"), new ne("Grovana", "grovana", !0), new ne("Gustavo", "gustavo"), new ne("Haahloddoh", "haahloddoh"), new ne("Hadrea", "hadrea"), new ne("Hairmusk", "hairmusk"), new ne("Hakushou", "hakushou"), new ne("Harietta", "harietta", !0), new ne("Hattori Hanzo", "hattori"), new ne("Haystacks", "haystacks", !0), new ne("Heater", "heater"), new ne("Hedonist", "hedonist", !0), new ne("Hello Alpha", "helloa"), new ne("Hello Daddy", "hellod", !0), new ne("Hello People", "hello"), new ne("Hello Spring", "hellospring", !0), new ne("Hellowins", "hellowins"), new ne("Heypatricks", "heypatricks"), new ne("Highway", "highway", !0), new ne("Hippo Letto", "hippo"), new ne("Historia", "historia", !0), new ne("Hollawind", "hollawind"), new ne("Hodor", "hodor", !0), new ne("Honey", "honey"), new ne("Honeyspice", "honeyspice", !0), new ne("Huckleberries", "huckleberries"), new ne("Hymned Sans", "hymnedsans", !0), new ne("Hymned Script", "hymnedscript", !0), new ne("IacottNeue", "iacottneue", !0), new ne("Icebold", "icebold", !0), new ne("Inder", "inder"), new ne("Indigo", "indigo", !0), new ne("Irish gold", "irishgold"), new ne("Irishgreen", "irishgreen"), new ne("Its mine", "itsmine"), new ne("Jacinda", "jacinda", !0), new ne("Jared", "jared"), new ne("Jarots", "jarots"), new ne("Jomantara", "jomantara"), new ne("Josefin", "josefin"), new ne("Juneville", "juneville"), new ne("Jura", "jura"), new ne("Kajika", "kajika"), new ne("Kakamora", "kakamora"), new ne("Katey Blue", "kateyblue", !0), new ne("Keripik", "keripik"), new ne("Ketapang", "ketapang"), new ne("Kindel", "kindel", !0), new ne("Kingbirds", "kingbirds", !0), new ne("Laahleggek", "laahleggek"), new ne("Laborations", "laborations"), new ne("La Fiesta", "lafiesta"), new ne("Landon", "landon"), new ne("Landre", "landre", !0), new ne("Langley", "langley"), new ne("La Vonn", "vonn"), new ne("Laudya Bloods", "laudya"), new ne("Leaderson", "leaderson"), new ne("Leath", "leath"), new ne("Legendum", "legendum"), new ne("Leobronx", "leobronx"), new ne("Little Edelweiss", "little"), new ne("Little Girl", "littlegirl"), new ne("Lotus Eater", "lotuseater", !0), new ne("Lobster", "lobster"), new ne("Lovalicious", "lovalicious", !0), new ne("Loverstruck", "loverstruck"), new ne("MaaLLaangBronks", "maallaangbronks"), new ne("Madison", "madison"), new ne("Magic Winter", "magicwinter"), new ne("Magic Trick", "magic"), new ne("Mai Leho Bahhrala", "maileho"), new ne("Maldisa", "maldisa"), new ne("Malinsha", "malinsha", !0), new ne("Maple Leaves", "mapleleaves", !0), new ne("Maxton", "maxton"), new ne("Market", "market"), new ne("Marones", "marones", !0), new ne("Me and my dog", "meandmydog", !0), new ne("Meidy", "meidy"), new ne("Menighampiil", "menighampiil"), new ne("Mewton", "mewton"), new ne("Merry Merry", "merrymerry", !0), new ne("Molot", "molot"), new ne("Momday", "momday"), new ne("Moms Note", "moms"), new ne("Monday Lovers", "monday"), new ne("Monetta", "monetta"), new ne("Mongli", "mongli"), new ne("Montour", "montour"), new ne("Morissette Script", "morissette"), new ne("Mountain", "mountain"), new ne("Mooka", "mooka", !0), new ne("More Magic", "moremagic", !0), new ne("Morgana Sonz", "morgana", !0), new ne("Nature Force", "natureforce", !0), new ne("Ms Orange Sky", "ms"), new ne("Najova", "najova"), new ne("Natarajasana", "natarajasana"), new ne("Naville", "naville"), new ne("Neorah", "neorah"), new ne("New Autumn", "new"), new ne("No Siesta", "nosiesta"), new ne("Night Jump", "nightjump"), new ne("Notes", "notes", !0), new ne("NoFire", "nofire"), new ne("North Avellion", "northavellion", !0), new ne("Northern", "northern"), new ne("North High Shadow", "northhighsdw", !0), new ne("North High", "northhigh", !0), new ne("Novante", "novante", !0), new ne("Nunu", "nunu"), new ne("Offlander", "offlander", !0), new ne("Oliemolly", "oliemolly", !0), new ne("Oracles", "oracles"), new ne("Ostern", "ostern"), new ne("Otakaku", "otakaku"), new ne("Out Hill", "out"), new ne("Overdose", "overdose"), new ne("Paabaalioot", "paabaalioot"), new ne("Painted Gallery", "paintedgallery", !0), new ne("Pandoura", "pandoura"), new ne("PapaRocknRoll", "papa"), new ne("Paradise", "paradise"), new ne("Patlabour", "patlabour", !0), new ne("Peach Market", "peachmarket", !0), new ne("Peanut", "peanut"), new ne("Peony Rose", "peonyrose", !0), new ne("Perfect Thoughts", "perfectthoughts", !0), new ne("Pina Colada", "pinacolada", !0), new ne("Piqolo", "piqolo"), new ne("Pixelo", "pixelo"), new ne("Plunge", "plunge"), new ne("Pop Fist", "pop"), new ne("Ponch", "ponch", !0), new ne("Popera", "popera"), new ne("Powder", "powder", !0), new ne("Practish", "practish"), new ne("Print Clearly", "print"), new ne("Pulsate", "pulsate", !0), new ne("Qlassik", "qlassik"), new ne("quatro", "quatro", !0), new ne("Quattrocento", "quattrocento"), new ne("Queenata", "queenata"), new ne("Quella Script", "quella"), new ne("Questro", "questro"), new ne("Quickie Sweet", "quickie"), new ne("Quill & Ink", "quillink"), new ne("Quish", "quish"), new ne("Ranania", "ranania"), new ne("Rankings Caps", "rankingscaps", !0), new ne("Raroedette", "raroedette"), new ne("Rawwwing", "rawwwing"), new ne("Raquella", "raquella"), new ne("Reepouh", "reepouh"), new ne("Regan Slab", "regan"), new ne("Reewoooh", "reewoooh", !0), new ne("Reilly", "reilly"), new ne("Remembrance", "remembrance", !0), new ne("Retrocycles", "retrocycles"), new ne("Retros", "retros"), new ne("Revans", "revans", !0), new ne("Reynolds Square", "reynoldssquare", !0), new ne("Rhapsody", "rhapsody"), new ne("Riverside", "riverside"), new ne("Republiko", "republiko", !0), new ne("Rocky", "rocky"), new ne("Roars", "roars"), new ne("Rockford", "rockford", !0), new ne("Rockrace", "rockrace", !0), new ne("Romaniesta", "romaniesta"), new ne("Romelio", "romelio"), new ne("Roossooh", "roossooh"), new ne("Ropa", "ropa"), new ne("Rolves", "rolves", !0), new ne("Roque", "roque"), new ne("Rosario", "rosario"), new ne("Roundaries", "roundaries"), new ne("Rowan", "rowan", !0), new ne("Salmonberry", "salmonberry", !0), new ne("San Barley", "san"), new ne("Saqanone", "saqanone"), new ne("Sants", "sants"), new ne("Sanur beach", "sanur"), new ne("Scriptonesia", "scriptonesia", !0), new ne("Secretary Typewriter", "secretary", !0), new ne("Sedalia", "sedalia", !0), new ne("Search", "search", !0), new ne("Searchlight", "searchlight", !0), new ne("See De Mayo", "see"), new ne("Serenity", "serenity"), new ne("The Servant", "servant"), new ne("Sheraton", "sheraton", !0), new ne("Shoelaces", "shoelaces", !0), new ne("Silvertone", "silvertone", !0), new ne("Smoother", "smoother", !0), new ne("Spring Break", "springbreak", !0), new ne("Spotlights Thin", "spotlightsthin", !0), new ne("Spotlights Chunky", "spotlightschunky", !0), new ne("Squiborn", "squiborn", !0), new ne("Staatliches", "staatliches"), new ne("Stardust Moonlight", "stardust"), new ne("The Stoothgart", "stoothgart"), new ne("Summer Coconut", "summer"), new ne("Summer Joy", "summerjoy"), new ne("Summer Nude", "summernude", !0), new ne("Summer Peach", "summerpeach"), new ne("Summer Solstice", "summersolstice", !0), new ne("Summery", "summery"), new ne("Sun Again", "sunagain"), new ne("Sun Pepper", "sun"), new ne("Sun Streets", "sunstreets"), new ne("Sunny Bay", "sunnybay", !0), new ne("Sunshine Boy", "sunshine"), new ne("Super Slayers", "super"), new ne("Surface", "surface"), new ne("Sweeneey", "sweeneey"), new ne("Teaspoon", "teaspoon"), new ne("Tabu", "tabu"), new ne("Teodore", "teodore", !0), new ne("TeXGyreHeros", "texgyreheros"), new ne("The Brocker", "brocker"), new ne("The California", "thecalifornia"), new ne("The Harison", "harison"), new ne("The Love For Money", "theloveformoney", !0), new ne("The Mastiff", "mastiff"), new ne("The Patriot", "patriot"), new ne("The Pinta", "pinta"), new ne("The Roxv", "roxv"), new ne("The Rogue", "rogue"), new ne("The Stegris", "thestegris", !0), new ne("The Queen", "queen"), new ne("Thirtylane", "thirtylane", !0), new ne("Titian", "titian"), new ne("Todes", "todes", !0), new ne("Tropical Coast", "tropicalcoast"), new ne("Torberta", "torberta"), new ne("Twigs", "twigs"), new ne("Twirly Ballerina", "twirly", !0), new ne("Unreal", "unreal"), new ne("Vaganza", "vaganza"), new ne("Valeria", "valeria", !0), new ne("Valery", "valery"), new ne("Vignette", "vignette"), new ne("Von Everect", "von"), new ne("The Voyager", "voyager", !0), new ne("Wandering Flowers", "wandering", !0), new ne("Wargate", "wargate", !0), new ne("Western Shooter", "westernshooter", !0), new ne("West Java", "westjava", !0), new ne("Winter Sunrise", "wintersunrise", !0), new ne("White Wonder", "whitewonder", !0), new ne("Yanone Kaffeesatz", "kaffeesatz"), new ne("Wonderul Wilderness", "wonderulwilderness", !0), new ne("Yoseline", "yoseline"), new ne("Zombie Dust", "zombie")], ie.loadFont = e => {
//             let t = ie.fontList.find((t => t.name === e));
//             if (t) return ie.addToDOM(t)
//         };
//         class ae {
//             constructor(e, t, n, i = 0, a = 0, s = ae.SPEED_NORMAL, r = 0, o = 0) {
//                 this.name = e, this.motions = t, this.option = n, this.duration = i, this.delay = a, this.speed = s, this.repeat = r, this.gap = o
//             }
//         }
//         ae.SPEED_SNAIL = 3, ae.SPEED_SLOW = 2, ae.SPEED_NORMAL = 1, ae.SPEED_FAST = .5, ae.SPEED_FLASH = .25;
//         const se = ae;
//         class re {
//             constructor(e, t = "top") {
//                 this.duration = e, this.metod = t
//             }
//         }
//         re.getOffset = (e, t, n) => {
//             let i = 0;
//             if (void 0 === n || 0 === n.duration || !e.rect) return i;
//             switch (n.metod) {
//                 case "top":
//                     i = e.getRect().y / t.height;
//                     break;
//                 case "bottom":
//                     i = 1 - e.getRect().y / t.height;
//                     break;
//                 case "left":
//                     i = e.getRect().x / t.width;
//                     break;
//                 case "right":
//                     i = 1 - e.getRect().x / t.width;
//                     break;
//                 case "back":
//                     i = t.layerNr(e.id) / t.layers.length;
//                     break;
//                 case "front":
//                     i = 1 - t.layerNr(e.id) / t.layers.length;
//                     break;
//                 case "center":
//                     i = new D.Z(t.width / 2, t.height / 2).distanceTo(e.getRect().center()) / Math.sqrt(t.width * t.width + t.height * t.height) / 2;
//                     break;
//                 case "bounds":
//                     i = 1 - new D.Z(t.width / 2, t.height / 2).distanceTo(e.getRect().center()) / Math.sqrt(t.width * t.width + t.height * t.height) / 2
//             }
//             return Math.round((0, m.uZ)(i * n.duration, 0, n.duration))
//         };
//         const oe = re;
//         class le {
//             constructor(e = !1, t = void 0, n = void 0, i = void 0, a = void 0) {
//                 this.block = e, this.enter = t, this.scene = n, this.exit = i, this.stagger = a
//             }
//         }
//         le.fromInjection = (e, t) => {
//             let n = t ? le.clone(t) : new le;
//             if (n.block = !1, !e) return n;
//             if (e.enter && (n.enter && (e.enter.delay = n.enter.delay, e.enter.speed = n.enter.speed), n.enter = e.enter, n.enter.duration = n.enter.duration ? n.enter.duration : le.getMotionsDuration(n.enter.motions)), e.scene && (n.scene && (e.scene.delay = n.scene.delay, e.scene.speed = n.scene.speed, e.scene.repeat = n.scene.repeat, e.scene.gap = n.scene.gap), n.scene = e.scene, n.scene.motions)) {
//                 let e = le.getMotionsDuration(n.scene.motions);
//                 n.scene.duration = e + n.scene.repeat * (e + n.scene.gap)
//             }
//             return e.exit && (n.exit && (e.exit.delay = n.exit.delay, e.exit.speed = n.exit.speed), n.exit = e.exit, n.exit.duration = le.getMotionsDuration(n.exit.motions)), e.stagger && (n.stagger = e.stagger), n
//         }, le.getSegment = (e, t) => {
//             if (t) switch (e) {
//                 case "enter":
//                     return t.enter;
//                 case "scene":
//                     return t.scene;
//                 case "exit":
//                     return t.exit
//             }
//         }, le.setSegmentSpeed = (e, t) => {
//             if (!e) return;
//             e.speed = t;
//             let n = le.getMotionsDuration(e.motions, e.speed);
//             e.duration = n + e.repeat * (n + e.gap)
//         }, le.setSegmentRepeat = (e, t) => {
//             if (!e) return;
//             let n = le.getMotionsDuration(e.motions, e.speed);
//             e.repeat = t, e.duration = n + t * (n + e.gap)
//         }, le.setSegmentGap = (e, t) => {
//             if (!e) return;
//             let n = le.getMotionsDuration(e.motions, e.speed);
//             e.gap = t, e.duration = n + e.repeat * (n + e.gap)
//         }, le.getAnimationSegment = (e, t) => {
//             if (!t) return;
//             const n = new le(t.block);
//             return "enter" === e && (n.enter = new se(t.enter.name, [...t.enter.motions], t.enter.option, t.enter.duration, t.enter.delay, t.enter.speed, t.enter.repeat, t.enter.gap)), "scene" === e && (n.scene = new se(t.scene.name, [...t.scene.motions], t.scene.option, t.scene.duration, t.scene.delay, t.scene.speed, t.scene.repeat, t.scene.gap)), "exit" === e && (n.exit = new se(t.exit.name, [...t.exit.motions], t.exit.option, t.exit.duration, t.exit.delay, t.exit.speed, t.exit.repeat, t.exit.gap)), n
//         }, le.getMotionsDuration = (e, t = 1) => {
//             if (!e || 0 === e.length) return 0;
//             let n = 0;
//             for (const i of e) n = Math.max(n, Math.round((i.delay + i.duration) * t));
//             return n
//         }, le.clone = e => {
//             if (!e) return;
//             const t = new le(e.block);
//             return e.enter && (t.enter = new se(e.enter.name, [...e.enter.motions], e.enter.option, e.enter.duration, e.enter.delay, e.enter.speed, e.enter.repeat, e.enter.gap)), e.scene && (t.scene = new se(e.scene.name, [...e.scene.motions], e.scene.option, e.scene.duration, e.scene.delay, e.scene.speed, e.scene.repeat, e.scene.gap)), e.exit && (t.exit = new se(e.exit.name, [...e.exit.motions], e.exit.option, e.exit.duration, e.exit.delay, e.exit.speed, e.exit.repeat, e.exit.gap)), e.stagger && (t.stagger = new oe(e.stagger.duration, e.stagger.metod)), t
//         };
//         const de = le;
//         class ce extends W {
//             constructor(e = m.M8(), t, n, i, a = !1) {
//                 super(W.TYPE_IMAGE), this.id = e, this.calculate = (e, t, n) => {
//                     this.canvas && (this.rect.x = Math.round(e.x), this.rect.y = Math.round(e.y), this.rect.width = Math.round(t.x - e.x), this.rect.width < 10 && (this.rect.width = 10), 0 !== n ? this.rect.height = Math.round(this.rect.width / n) : (this.rect.height = Math.round(t.y - e.y), this.rect.height < 10 && (this.rect.height = 10)))
//                 }, this.scale = (e, t, n) => {
//                     this.rect && (this.rect.x = Math.round(this.rect.x * e), this.rect.y = Math.round(this.rect.y * t), this.rect.width = Math.round(this.rect.width * e), this.rect.height = Math.round(this.rect.height * t), this.applyTransform(n))
//                 }, this.wouldApplyTransform = () => !(!this.canvas || !this.rect) && (0 !== this.rect.rotation || this.rect.width !== this.canvas.width || this.rect.height !== this.canvas.height), this.applyStraighten = e => {
//                     this.canvas = m.zs(this.canvas, this.rect.rotation, e), this.mask && (this.mask = m.zs(this.mask, this.rect.rotation, e)), this.rect = e, this.render()
//                 }, this.applyTransform = (e = !0) => {
//                     if (!this.wouldApplyTransform()) return !1;
//                     if (this.rect.width === this.canvas.width && this.rect.height === this.canvas.height || (this.canvas = e ? m.Ai(this.canvas, this.rect.width, this.rect.height) : m.ZE(this.canvas, this.rect.width, this.rect.height), this.mask && (this.mask = m.Ai(this.mask, this.rect.width, this.rect.height))), 0 !== this.rect.rotation) {
//                         this.rect = this.rect.getRotatedBounds(), this.canvas = m.zs(this.canvas, this.rect.rotation, this.rect), this.mask && (this.mask = m.zs(this.mask, this.rect.rotation, this.rect));
//                         let e = m.l(this.canvas);
//                         e.equalTo(new M.Z(0, 0, this.canvas.width, this.canvas.height)) || (this.canvas = m.fg(this.canvas, e), this.mask && (this.mask = m.fg(this.mask, e)), this.rect.width = e.width, this.rect.height = e.height, this.rect.x += e.x, this.rect.y += e.y), this.rect.rotation = 0
//                     }
//                     return this.render(), !0
//                 }, this.switchCanvas = (e, t) => {
//                     this.mask && !this.rect.equalTo(t) && (this.mask = m.ST(this.mask, this.rect, t)), this.canvas = e, this.rect = t.clone()
//                 }, this.extendCanvas = e => {
//                     if (!this.canvas) return this.rect = e, void(this.canvas = m.vL(e.width, e.height));
//                     let t = this.rect.union(e);
//                     this.rect.equalTo(t) || (this.canvas = m.ST(this.canvas, this.rect, t), this.mask && (this.mask = m.ST(this.mask, this.rect, t)), this.rect = t)
//                 }, this.hasMask = () => !!this.mask, this.addMask = (e = "clear") => {
//                     if (this.mask = m.vL(this.canvas.width, this.canvas.height), "fill" === e) {
//                         this.mask.getContext("2d").fillRect(0, 0, this.mask.width, this.mask.height)
//                     }
//                 }, this.invertMask = () => {
//                     if (this.mask) {
//                         let e = m.vL(this.mask.width, this.mask.height),
//                             t = e.getContext("2d");
//                         t.save(), t.fillRect(0, 0, e.width, e.height), t.globalCompositeOperation = "xor", t.drawImage(this.mask, 0, 0), t.restore(), this.mask = e
//                     }
//                 }, this.removeMask = () => {
//                     this.mask = void 0, this.baked = void 0
//                 }, this.render = () => {
//                     if (this.mask) {
//                         if (!this.canvas) return;
//                         this.baked && this.baked.width === this.canvas.width && this.baked.height === this.canvas.height || (this.baked = m.vL(this.canvas.width, this.canvas.height));
//                         var e = this.baked.getContext("2d");
//                         e.save(), e.globalCompositeOperation = "copy", e.drawImage(this.canvas, 0, 0), e.globalCompositeOperation = "destination-in", e.drawImage(this.mask, 0, 0), e.restore(), e = void 0
//                     }
//                 }, this.shrinkWrap = () => {
//                     const e = m.l(this.canvas);
//                     if (!e) return this.canvas = void 0, this.mask = void 0, this.baked = void 0, this.rect = void 0, !0;
//                     if (!e.equalTo(this.rect)) {
//                         const t = m.vL(e.width, e.height);
//                         return t.getContext("2d").drawImage(this.canvas, -e.x, -e.y), this.canvas = t, this.rect = e.rebase(-this.rect.x, -this.rect.y), this.mask && (this.mask = m.WL(this.mask, e)), !0
//                     }
//                     return !1
//                 }, this.rasterize = () => this.clone(), this.clone = (e = !1) => {
//                     var t;
//                     let n = new ce(e ? this.id : m.M8(), this.settings.name, m.dN(this.canvas), null === (t = this.rect) || void 0 === t ? void 0 : t.clone(), !1);
//                     return n.settings = Object.assign({}, this.settings), e || (n.settings.locked = !1), n.animation = de.clone(this.animation), this.baked && (n.baked = m.dN(this.baked)), this.hasMask() && (n.mask = m.dN(this.mask)), n
//                 }, this.canvas = n, this.rect = i, this.settings.name = t, this.settings.locked = a
//             }
//         }
//         class ue extends W {
//             constructor(e = m.M8(), t, n, i) {
//                 super(W.TYPE_TEXT), this.id = e, this.prepare = async (e = !1) => {
//                     this.fill && !e || (this.fill = await z.fromString(this.textSettings.fillType, this.textSettings.fillValue), document.dispatchEvent(new CustomEvent("layer-select"))), this.setText()
//                 }, this.setText = (e = this.text) => {
//                     this.text = e, this.settings.name = e.substring(0, 25) + "..", this.textSettings.uppercase ? this.words = this.text.replace(/[\n]/g, " §§§ ").toUpperCase().split(" ") : this.words = this.text.replace(/[\n]/g, " §§§ ").split(" "), this.render()
//                 }, this.setTextSize = e => {
//                     this.textSettings.setSize(e), this.render()
//                 }, this.setLineSpace = e => {
//                     this.textSettings.lineSpace = e, this.render()
//                 }, this.setLetterSpace = e => {
//                     this.textSettings.letterSpace = e, this.render()
//                 }, this.setTextFill = (e, t = !1) => {
//                     this.fill = e, t || (this.textSettings.fillType = e.getType(), this.textSettings.fillValue = e.getStringValue()), this.render()
//                 }, this.setTextFont = (e, t = !1) => {
//                     this.textSettings.setFont(e), this.render(t)
//                 }, this.setTextUpperCase = e => {
//                     this.textSettings.uppercase = e, this.setText(this.text)
//                 }, this.setTextItalic = e => {
//                     this.textSettings.italic = e, this.setText(this.text)
//                 }, this.setTextBold = e => {
//                     this.textSettings.bold = e, this.setText(this.text)
//                 }, this.setTextUnderline = e => {
//                     this.textSettings.underline = e, this.setText(this.text)
//                 }, this.setTextAlign = e => {
//                     this.textSettings.align = e, this.render()
//                 }, this.setCurve = (e, t, n, i, a) => {
//                     this.textSettings.curve = e, this.textSettings.curveType = t, this.textSettings.curveAmount = n, this.textSettings.curveSpread = i, this.textSettings.curveFlip = a, this.render()
//                 }, this.setWarp = (e, t, n, i, a, s, r) => {
//                     this.textSettings.warp = e, this.textSettings.warpType = t, this.textSettings.warpMode = n, this.textSettings.warpEdgeSize = i, this.textSettings.warpCenterSize = a, this.textSettings.warpHorizontalOffset = s, this.textSettings.warpVerticalOffset = r, this.render()
//                 }, this.setBackground = (e, t, n, i, a) => {
//                     this.textSettings.background = e, this.textSettings.backgroundType = t, this.textSettings.backgroundColor = n, this.textSettings.backgroundPunch = i, this.textSettings.backgroundOffset = a, this.render()
//                 }, this.setOutline = (e, t, n, i, a, s) => {
//                     this.textSettings.outline = e, this.textSettings.outlineSize = t, this.textSettings.outlineColor = n, this.textSettings.outlinePunch = i, this.textSettings.outlineDistance = a, this.textSettings.outlineDirection = s, this.render()
//                 }, this.setShadow = (e, t, n, i, a, s) => {
//                     this.textSettings.shadow = e, this.textSettings.shadowBlur = t, this.textSettings.shadowAlpha = n, this.textSettings.shadowColor = i, this.textSettings.shadowDistance = a, this.textSettings.shadowDirection = s, this.render()
//                 }, this.setTextSettings = e => {
//                     this.textSettings = e, this.render()
//                 }, this.setCanvasStyle = () => {
//                     var e;
//                     this.ctx.textBaseline = "top", this.ctx.font = this.textSettings.getCssFont(), this.ctx.strokeStyle = this.textSettings.outlineColor, this.ctx.lineWidth = Math.round(this.textSettings.outlineSize * this.textSettings.padding), this.ctx.lineJoin = "miter", this.ctx.miterLimit = 2, null === (e = this.fill) || void 0 === e || e.addToCanvasFillStyle(this.ctx)
//                 }, this.isPunchOut = !1, this.isWordBackground = !1, this.render = (e = !1) => {
//                     this.isPunchOut = void 0 === this.fill || this.textSettings.background && this.textSettings.backgroundPunch || this.textSettings.outline && this.textSettings.outlinePunch, this.isWordBackground = this.textSettings.background && this.textSettings.backgroundType === te.BACKGROUND_WORD;
//                     let t = this.textSettings.padding;
//                     this.canvas || (this.canvas = m.vL(50, 50)), this.ctx || (this.ctx = this.canvas.getContext("2d")), this.setCanvasStyle();
//                     const n = new D.Z;
//                     if (this.textSettings.outline && this.textSettings.outlineDistance > 0) {
//                         const e = (this.textSettings.outlineDirection - 90) * Math.PI / 180;
//                         n.x = Math.cos(e) * this.textSettings.outlineDistance * t, n.y = Math.sin(e) * this.textSettings.outlineDistance * t
//                     }
//                     const i = this.textSettings.getLineSpacing();
//                     let a = this.textSettings.height + t + i,
//                         s = this.textSettings.background ? Math.round(this.textSettings.backgroundOffset * t) : 0;
//                     this.textSettings.background && this.textSettings.backgroundType !== te.BACKGROUND_FULL && (a += 2 * t);
//                     let r = this.splitTextIntoLines(a);
//                     this.setCanvasSize(r.length, i), this.setCanvasStyle();
//                     let o = !1;
//                     if (this.textSettings.curve && "arc" === this.textSettings.curveType) {
//                         if (o = !0, 0 !== this.textSettings.curveAmount) {
//                             const e = this.textSettings.getLetterSpacing();
//                             let [t, n] = this.calculateArcRadius(), i = (t - this.textSettings.height / 2) * Math.PI * 2;
//                             o = (this.ctx.measureText(" ").width + e) / i * Math.PI * 2 < 5e-4
//                         }
//                         this.textSettings.curveAmount <= 0 && !o && (r = r.reverse())
//                     }
//                     for (let u = 0; u < r.length; u++) {
//                         if ("" === r[u]) continue;
//                         const e = this.lineWidth(r[u]);
//                         this.textSettings.curve && !o ? this.drawCurveLine(r[u], t + u * a, e, s, n) : this.drawLine(r[u], t + u * a, e, s, n, o)
//                     }
//                     if (this.textSettings.warp) {
//                         this.transient = m.dN(this.canvas), this.ctx.imageSmoothingEnabled = !0, this.ctx.imageSmoothingQuality = "high";
//                         let e = this.textSettings.warpMode,
//                             n = "angular" === this.textSettings.warpType,
//                             i = this.textSettings.background || this.textSettings.outline ? 0 : t,
//                             a = this.transient.width,
//                             s = this.transient.height - 2 * i,
//                             r = s + s * this.textSettings.warpEdgeSize,
//                             o = s + s * this.textSettings.warpCenterSize,
//                             l = a * (.5 + .5 * this.textSettings.warpHorizontalOffset),
//                             d = a * (1 - (.5 + .5 * this.textSettings.warpHorizontalOffset)),
//                             c = 180 / (2 * l),
//                             u = 180 / (2 * d),
//                             h = 0,
//                             p = s * this.textSettings.warpVerticalOffset;
//                         if ("upper" === e) p < 0 ? (this.rect.height = Math.max(Math.abs(p) + r, o), h -= p) : this.rect.height = Math.max(p + o, r);
//                         else if ("lower" === e) p *= -1, h = Math.max(r, o - p) - s, this.rect.height = p <= 0 ? Math.max(Math.abs(p) + o, r) : Math.max(p + r, o);
//                         else if ("middle" === e) {
//                             p *= .75, h = .5 * (Math.max(r, o) - s);
//                             let e = .5 * (r - o),
//                                 t = Math.max(o, r);
//                             if (p < 0) {
//                                 let e = .5 * (r - o),
//                                     t = Math.max(o, r);
//                                 e + o + Math.abs(p) > t ? (this.rect.height = e + o + Math.abs(p), h -= e + p, e < 0 && (h += e)) : (this.rect.height = t, o > r && (h -= p))
//                             } else e + o + p > t ? (this.rect.height = e + o + p, e < 0 && (h += e)) : (this.rect.height = t, o > r && (h -= p))
//                         }
//                         for (this.rect.height += 2 * i, this.canvas.width = this.rect.width, this.canvas.height = this.rect.height; a--;) {
//                             let t = 0;
//                             t = a > l ? n ? 1 - (a - l) / d : Math.sin((d - (a - l)) * u * Math.PI / 180) : n ? 1 - (l - a) / l : Math.sin(a * c * Math.PI / 180);
//                             let m = (1 - t) * r + o * t,
//                                 f = t * p,
//                                 g = "upper" === e ? 0 : "lower" === e ? s - m : .5 * (s - m);
//                             this.ctx.drawImage(this.transient, a, i, 1, s, a, i + f + g + h, 1, m)
//                         }
//                         this.transient = void 0
//                     }
//                     if (this.textSettings.shadow && !e) {
//                         this.baked || (this.baked = m.vL(100, 100));
//                         let e = this.baked.getContext("2d");
//                         if (this.bect = new M.Z(this.rect.x - 4 * t, this.rect.y - 4 * t, this.rect.width + 8 * t, this.rect.height + 8 * t, this.rect.rotation), this.baked.width = this.bect.width, this.baked.height = this.bect.height, this.textSettings.shadow) {
//                             e.save();
//                             var l = (this.textSettings.shadowDirection - 90) * Math.PI / 180,
//                                 d = Math.cos(l) * this.textSettings.shadowDistance,
//                                 c = Math.sin(l) * this.textSettings.shadowDistance;
//                             e.shadowBlur = this.textSettings.shadowBlur * this.textSettings.padding * 2, e.shadowOffsetX = d * this.textSettings.padding * 2, e.shadowOffsetY = c * this.textSettings.padding * 2, e.shadowColor = Z.fromHEX(this.textSettings.shadowColor, Math.round(255 * this.textSettings.shadowAlpha)).toRGBA(), e.drawImage(this.canvas, 4 * t, 4 * t), e.restore()
//                         }
//                     } else this.baked = void 0, this.bect = void 0
//                 }, this.scaleBect = e => {
//                     if (this.bect) {
//                         const t = 4 * this.textSettings.padding * e;
//                         this.bect = new M.Z(this.rect.x - t, this.rect.y - t, this.rect.width + 2 * t, this.rect.height + 2 * t, this.rect.rotation), this.bect.width < 1 && (this.bect.width = 1), this.bect.height < 1 && (this.bect.height = 1)
//                     }
//                 }, this.setCanvasSize = (e, t) => {
//                     if (this.textSettings.background && this.textSettings.backgroundType !== te.BACKGROUND_FULL ? this.rect.height = (this.textSettings.height + 3 * this.textSettings.padding) * e + t * (e - 1) - this.textSettings.padding : this.rect.height = (this.textSettings.height + this.textSettings.padding) * e + t * (e - 1) + this.textSettings.padding, this.textSettings.curve) switch (this.textSettings.curveType) {
//                         case "arc":
//                             let e = this.calculateArcHeight();
//                             this.rect.height += e;
//                             break;
//                         case "circle":
//                             this.rect.height = this.rect.width;
//                             break;
//                         case "half":
//                             this.rect.height = Math.round(this.rect.width / 2)
//                     }
//                     this.canvas.width = this.rect.width, this.canvas.height = this.rect.height, this.textSettings.background && this.textSettings.backgroundType === te.BACKGROUND_FULL && (this.ctx.fillStyle = this.textSettings.backgroundColor, this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height))
//                 }, this.splitTextIntoLines = e => {
//                     let t = "",
//                         n = new Array,
//                         i = this.textSettings.curve ? this.curveMaxWidth(0, e) : this.rect.width;
//                     for (var a = 0; a < this.words.length; a++) {
//                         let s = "" !== t ? t + " " + this.words[a] : this.words[a];
//                         if ("§§§" === this.words[a] || this.lineWidth(s) > i && s !== this.words[a]) {
//                             if (n.push(t), t = "§§§" === this.words[a] ? "" : this.words[a], this.textSettings.curve && (i = this.curveMaxWidth(n.length, e), i < 0)) return n
//                         } else t = s
//                     }
//                     return n.push(t), n
//                 }, this.lineWidth = e => {
//                     let t = 0,
//                         n = this.textSettings.getLineSpacing(),
//                         i = this.textSettings.getLetterSpacing();
//                     if (this.isWordBackground) {
//                         let a = e.split(" ").filter((e => e));
//                         for (let e = 0; e < a.length; e++) t += this.measureTextWidth(a[e], i, !0) + 2 * this.textSettings.padding, t += this.textSettings.padding + n;
//                         this.textSettings.curve && "circle" === this.textSettings.curveType || (t -= this.textSettings.padding + n)
//                     } else this.textSettings.curve && "circle" === this.textSettings.curveType ? (t = this.measureTextWidth(e, i, !1), t += this.measureTextWidth(" ", i, !1)) : (t = this.measureTextWidth(e, i, !0), t += 2 * this.textSettings.padding);
//                     return t
//                 }, this.curveMaxWidth = (e, t) => {
//                     if ("arc" === this.textSettings.curveType) {
//                         if (0 === this.textSettings.curveAmount) return this.rect.width;
//                         let [e, n] = this.calculateArcRadius();
//                         return this.textSettings.curveAmount < 0 && (n += -t / 4), n
//                     }
//                     if ("circle" === this.textSettings.curveType) {
//                         let n = this.rect.width / 2 - this.textSettings.padding - e * t;
//                         return n < t ? -1 : n * Math.PI * 2
//                     } {
//                         let n = this.rect.width / 2 - e * t - (this.textSettings.background ? this.textSettings.padding : 0);
//                         return n < t ? -1 : n * Math.PI
//                     }
//                 }, this.calculateArcHeight = () => Math.round(this.rect.width / 5 * Math.abs(this.textSettings.curveAmount)), this.calculateArcRadius = () => {
//                     let e = this.calculateArcHeight(),
//                         t = new D.Z(0, e),
//                         n = new D.Z(this.rect.width / 2, 0),
//                         i = new D.Z(this.rect.width, e),
//                         a = (n.y - t.y) / (n.x - t.x),
//                         s = (i.y - n.y) / (i.x - n.x),
//                         r = -1 * ((a * s * (t.y - i.y) + s * (t.x + n.x) - a * (n.x + i.x)) / (2 * (s - a)) - (t.x + n.x) / 2) / a + (t.y + n.y) / 2;
//                     return [r, Math.atan2(this.rect.width / 2, r - e) * r * 2]
//                 }, this.drawHalfLine = (e, t, n, i, a) => {
//                     var s;
//                     const r = this.textSettings.curveFlip,
//                         o = this.textSettings.curveSpread,
//                         l = this.textSettings.getLineSpacing(),
//                         d = this.textSettings.getLetterSpacing();
//                     let c = !1,
//                         u = this.rect.width / 2 - t,
//                         h = u * Math.PI * 2;
//                     if (this.textSettings.background)
//                         if (this.textSettings.backgroundType === te.BACKGROUND_LINE) {
//                             let e = u - this.textSettings.height / 2;
//                             e > 0 && (this.ctx.save(), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding, this.ctx.beginPath(), this.ctx.ellipse(this.rect.width / 2, r ? 0 : this.rect.width / 2, e, e, 0, Math.PI, 0, r), this.ctx.stroke(), this.ctx.restore())
//                         } else if (this.textSettings.backgroundType === te.BACKGROUND_WORD) {
//                         let t = o ? -h / 4 : -n / 2,
//                             a = (h / 2 - n) / e.replace(/\s/g, "").length;
//                         this.ctx.save(), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding;
//                         let s = e.split(" ").filter((e => e));
//                         for (var m = 0; m < s.length; m++) {
//                             let e = this.measureTextWidth(s[m], d, !0);
//                             o && (e += a * s[m].length);
//                             let n = u - this.textSettings.height / 2;
//                             if (n < this.textSettings.height) continue;
//                             let c = (e + 2 * this.textSettings.padding) / h * 360 * (Math.PI / 180),
//                                 p = t / h * 360 * (Math.PI / 180),
//                                 f = r ? 90 : 270,
//                                 g = f * (Math.PI / 180) + (r ? -p : p),
//                                 _ = f * (Math.PI / 180) + (r ? -(c + p) : c + p);
//                             if (this.ctx.beginPath(), this.ctx.arc(this.rect.width / 2, r ? 0 : this.rect.width / 2, n, g, _, r), this.ctx.stroke(), this.textSettings.underline) {
//                                 const a = Math.ceil(.06 * this.textSettings.height),
//                                     s = Math.round(this.textSettings.padding + d);
//                                 this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = a, p = (t + s) / h * 360 * (Math.PI / 180), c = (e - 2 * d) / h * 360 * (Math.PI / 180), g = f * (Math.PI / 180) + (r ? -p : p), _ = f * (Math.PI / 180) + (r ? -(c + p) : c + p);
//                                 const o = Math.round(.5 * (this.textSettings.baseline + a) + i);
//                                 this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.beginPath(), this.ctx.arc(this.rect.width / 2, r ? 0 : this.rect.width / 2, n + (r ? o : -o), g, _, r), this.ctx.stroke(), this.ctx.globalCompositeOperation = "source-over", this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding
//                             }
//                             t += Math.round(e + 3 * this.textSettings.padding + l)
//                         }
//                         this.ctx.restore(), c = !0
//                     }
//                     let p = 0;
//                     if (o) {
//                         p = (h / 2 - n) / (c ? e.replace(/\s/g, "").length : e.length + 1) / 2, n = c ? h / 2 : h / 2 - 2 * p
//                     }
//                     if (this.textSettings.underline && !this.isWordBackground) {
//                         let e = u - this.textSettings.height / 2;
//                         if (e < this.textSettings.height) {
//                             const t = Math.ceil(.06 * this.textSettings.height);
//                             let a = (n - 2 * Math.round(this.textSettings.padding + d)) / (u * Math.PI * 2) * 360 * (Math.PI / 180 / 2),
//                                 s = r ? 90 : 270,
//                                 o = s * (Math.PI / 180) - a,
//                                 l = s * (Math.PI / 180) + a;
//                             const c = Math.round(.5 * (this.textSettings.baseline + t) + i);
//                             this.ctx.save(), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = t, this.ctx.beginPath(), r ? this.ctx.arc(this.rect.width / 2, 0, e + c, o, l) : this.ctx.arc(this.rect.width / 2, this.rect.width / 2, e - c, o, l), this.ctx.stroke(), this.ctx.restore()
//                         }
//                     }
//                     if (this.ctx.save(), e.length > 0) {
//                         const t = .5 * this.rect.width,
//                             o = r ? 0 : .5 * this.rect.width;
//                         null === (s = this.fill) || void 0 === s || s.addToCanvasFillStyle(this.ctx, -t, -o), this.ctx.translate(t, o);
//                         let m = r ? u - this.textSettings.height - this.textSettings.ascent : -u - this.textSettings.ascent;
//                         this.ctx.textAlign = "center";
//                         let g = r ? -1 : 1,
//                             _ = c ? 2 * d + 2 * this.textSettings.padding : 2 * this.textSettings.padding + 2 * d;
//                         this.ctx.rotate((n - _) / h * Math.PI * -g), this.ctx.textAlign = "center";
//                         for (var f = 0; f < e.length; f++) {
//                             if (c && " " === e[f]) {
//                                 if (f > 0 && " " === e[f - 1]) continue;
//                                 this.ctx.rotate((3 * this.textSettings.padding + l + d) / h * (2 * Math.PI) * g);
//                                 continue
//                             }
//                             let t = this.ctx.measureText(e[f]).width / 2;
//                             this.ctx.rotate((t + p) / h * Math.PI * 2 * g), this.drawChar(e[f], 0, m + i, a), this.ctx.rotate((t + d + p) / h * Math.PI * 2 * g)
//                         }
//                     }
//                     this.ctx.restore()
//                 }, this.drawCircleLine = (e, t, n, i, a) => {
//                     var s;
//                     const r = this.textSettings.curveFlip,
//                         o = this.textSettings.curveSpread,
//                         l = this.textSettings.getLineSpacing(),
//                         d = this.textSettings.getLetterSpacing();
//                     let c = !1,
//                         u = this.rect.width / 2 - t,
//                         h = u * Math.PI * 2;
//                     if (this.textSettings.background)
//                         if (this.textSettings.backgroundType === te.BACKGROUND_LINE) {
//                             let e = u - this.textSettings.height / 2;
//                             e > this.textSettings.height && (this.ctx.save(), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding, this.ctx.beginPath(), this.ctx.ellipse(this.rect.width / 2, this.rect.width / 2, e, e, 0, 0, 2 * Math.PI), this.ctx.stroke(), this.ctx.restore())
//                         } else if (this.textSettings.backgroundType === te.BACKGROUND_WORD) {
//                         let t = o ? this.textSettings.padding / 2 + l / 2 - h / 2 : this.textSettings.padding / 2 + l / 2 - n / 2,
//                             a = (h - n) / e.replace(/\s/g, "").length;
//                         this.ctx.save(), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding;
//                         let s = e.split(" ").filter((e => e));
//                         for (var m = 0; m < s.length; m++) {
//                             let e = this.measureTextWidth(s[m], d, !0);
//                             o && (e += a * s[m].length);
//                             let n = u - this.textSettings.height / 2;
//                             if (n < this.textSettings.height) continue;
//                             let c = (e + 2 * this.textSettings.padding) / h * 360 * (Math.PI / 180),
//                                 p = t / h * 360 * (Math.PI / 180),
//                                 f = r ? 90 : 270,
//                                 g = f * (Math.PI / 180) + (r ? -p : p),
//                                 _ = f * (Math.PI / 180) + (r ? -(c + p) : c + p);
//                             if (this.ctx.beginPath(), this.ctx.arc(this.rect.width / 2, this.rect.width / 2, n, g, _, r), this.ctx.stroke(), this.textSettings.underline) {
//                                 const a = Math.ceil(.06 * this.textSettings.height),
//                                     s = Math.round(this.textSettings.padding + d);
//                                 this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = a, p = (t + s) / h * 360 * (Math.PI / 180), c = (e - 2 * d) / h * 360 * (Math.PI / 180), g = f * (Math.PI / 180) + (r ? -p : p), _ = f * (Math.PI / 180) + (r ? -(c + p) : c + p);
//                                 const o = Math.round(.5 * (this.textSettings.baseline + a) + i);
//                                 this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.beginPath(), this.ctx.arc(this.rect.width / 2, this.rect.width / 2, n + (r ? o : -o), g, _, r), this.ctx.stroke(), this.ctx.globalCompositeOperation = "source-over", this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding
//                             }
//                             t += Math.round(e + 3 * this.textSettings.padding + l)
//                         }
//                         this.ctx.restore(), c = !0
//                     }
//                     let p = 0;
//                     if (o) {
//                         p = (h - n) / (c ? e.replace(/\s/g, "").length : e.length + 1) / 2, n = c ? h : h - 2 * p
//                     }
//                     if (this.textSettings.underline && !this.isWordBackground) {
//                         let e = u - this.textSettings.height / 2;
//                         if (e > this.textSettings.height) {
//                             const t = Math.ceil(.06 * this.textSettings.height);
//                             let a = (n - 2 * Math.round(this.textSettings.padding + d)) / (u * Math.PI * 2) * 360 * (Math.PI / 180 / 2),
//                                 s = r ? 90 : 270,
//                                 o = s * (Math.PI / 180) - a,
//                                 l = s * (Math.PI / 180) + a;
//                             const c = Math.round(.5 * (this.textSettings.baseline + t) + i);
//                             this.ctx.save(), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = t, this.ctx.beginPath(), r ? this.ctx.arc(this.rect.width / 2, this.rect.width / 2, e + c, o, l) : this.ctx.arc(this.rect.width / 2, this.rect.width / 2, e - c, o, l), this.ctx.stroke(), this.ctx.restore()
//                         }
//                     }
//                     if (this.ctx.save(), e.length > 0) {
//                         const t = .5 * this.rect.width,
//                             o = .5 * this.rect.height;
//                         null === (s = this.fill) || void 0 === s || s.addToCanvasFillStyle(this.ctx, -t, -o), this.ctx.translate(t, o);
//                         let m = r ? u - this.textSettings.height - this.textSettings.ascent : -u - this.textSettings.ascent,
//                             g = r ? -1 : 1,
//                             _ = c ? 2 * d + 3 * this.textSettings.padding + l : this.measureTextWidth(" ", d, !0);
//                         this.ctx.rotate((n - _) / h * Math.PI * -g), this.ctx.textAlign = "center";
//                         for (var f = 0; f < e.length; f++) {
//                             if (c && " " === e[f]) {
//                                 if (f > 0 && " " === e[f - 1]) continue;
//                                 this.ctx.rotate((3 * this.textSettings.padding + l + d) / h * (2 * Math.PI) * g);
//                                 continue
//                             }
//                             let t = this.ctx.measureText(e[f]).width / 2;
//                             this.ctx.rotate((t + p) / h * Math.PI * 2 * g), this.drawChar(e[f], 0, m + i, a), this.ctx.rotate((t + d + p) / h * Math.PI * 2 * g)
//                         }
//                     }
//                     this.ctx.restore()
//                 }, this.drawArcLine = (e, t, n, i, a) => {
//                     var s;
//                     const r = this.textSettings.getLineSpacing(),
//                         o = this.textSettings.getLetterSpacing();
//                     let [l, d] = this.calculateArcRadius(), c = l - t, u = c * Math.PI * 2, h = this.textSettings.curveAmount < 0, m = !1;
//                     if (this.textSettings.background)
//                         if (this.textSettings.backgroundType === te.BACKGROUND_WORD) {
//                             let t = -n / 2;
//                             this.ctx.save(), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding;
//                             let a = e.split(" ").filter((e => e));
//                             for (var p = 0; p < a.length; p++) {
//                                 let e = this.measureTextWidth(a[p], o, !0),
//                                     n = c - this.textSettings.height / 2;
//                                 if (n < this.textSettings.height) continue;
//                                 let s = (e + 2 * this.textSettings.padding) / u * 360 * (Math.PI / 180),
//                                     d = t / u * 360 * (Math.PI / 180),
//                                     m = h ? this.canvas.height - l : l,
//                                     f = h ? 90 : 270,
//                                     g = f * (Math.PI / 180) + (h ? -d : d),
//                                     _ = f * (Math.PI / 180) + (h ? -(s + d) : s + d);
//                                 if (this.ctx.beginPath(), h ? this.ctx.arc(this.rect.width / 2, m, n, _, g) : this.ctx.arc(this.rect.width / 2, m, n, g, _), this.ctx.stroke(), this.textSettings.underline) {
//                                     const a = Math.ceil(.06 * this.textSettings.height),
//                                         r = Math.round(this.textSettings.padding + o);
//                                     this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = a, d = (t + r) / u * 360 * (Math.PI / 180), s = (e - 2 * o) / u * 360 * (Math.PI / 180), g = f * (Math.PI / 180) + (h ? -d : d), _ = f * (Math.PI / 180) + (h ? -(s + d) : s + d);
//                                     const l = Math.round(.5 * (this.textSettings.baseline + a) + i);
//                                     this.ctx.beginPath(), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), h ? this.ctx.arc(this.rect.width / 2, m, n + l, _, g) : this.ctx.arc(this.rect.width / 2, m, n - l, g, _), this.ctx.stroke(), this.ctx.globalCompositeOperation = "source-over", this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding
//                                 }
//                                 t += Math.round(e + 3 * this.textSettings.padding + r)
//                             }
//                             this.ctx.restore(), m = !0
//                         } else if (this.textSettings.backgroundType === te.BACKGROUND_LINE) {
//                         let e = c - this.textSettings.height / 2;
//                         if (e > this.textSettings.height) {
//                             let t = n / (c * Math.PI * 2) * 360 * (Math.PI / 180 / 2),
//                                 i = h ? this.canvas.height - l : l,
//                                 a = h ? 90 : 270,
//                                 s = a * (Math.PI / 180) - t,
//                                 r = a * (Math.PI / 180) + t;
//                             this.ctx.save(), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.strokeStyle = this.textSettings.backgroundColor, this.ctx.lineWidth = this.textSettings.height + 2 * this.textSettings.padding, this.ctx.beginPath(), this.ctx.arc(this.rect.width / 2, i, e, s, r), this.ctx.stroke(), this.ctx.restore()
//                         }
//                     }
//                     if (this.textSettings.underline && !this.isWordBackground) {
//                         let e = c - this.textSettings.height / 2;
//                         if (e > this.textSettings.height) {
//                             const t = Math.ceil(.06 * this.textSettings.height);
//                             let a = (n - 2 * Math.round(this.textSettings.padding + o)) / (c * Math.PI * 2) * 360 * (Math.PI / 180 / 2),
//                                 s = h ? this.canvas.height - l : l,
//                                 r = h ? 90 : 270,
//                                 d = r * (Math.PI / 180) - a,
//                                 u = r * (Math.PI / 180) + a;
//                             const m = Math.round(.5 * (this.textSettings.baseline + t) + i);
//                             this.ctx.save(), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.fill.addToCanvasStrokeStyle(this.ctx), this.ctx.lineWidth = t, this.ctx.beginPath(), h ? this.ctx.arc(this.rect.width / 2, s, e + m, d, u) : this.ctx.arc(this.rect.width / 2, s, e - m, d, u), this.ctx.stroke(), this.ctx.restore()
//                         }
//                     }
//                     if (this.ctx.save(), e.length > 0) {
//                         let t = h ? -1 : 1,
//                             d = h ? c - this.textSettings.height - this.textSettings.ascent : -c - this.textSettings.ascent;
//                         this.ctx.textAlign = "center";
//                         const p = .5 * this.ctx.canvas.width,
//                             g = h ? this.canvas.height - l : l;
//                         this.ctx.translate(p, g), null === (s = this.fill) || void 0 === s || s.addToCanvasFillStyle(this.ctx, -p, -g), this.ctx.rotate((n - 2 * o - 2 * this.textSettings.padding) / u * Math.PI * -t);
//                         for (var f = 0; f < e.length; f++) {
//                             if (m && " " === e[f]) {
//                                 if (f > 0 && " " === e[f - 1]) continue;
//                                 this.ctx.rotate((3 * this.textSettings.padding + r + o) / u * (2 * Math.PI) * t);
//                                 continue
//                             }
//                             let n = this.ctx.measureText(e[f]).width;
//                             n / u * Math.PI * 2 > 5e-4 ? (this.ctx.rotate(n / 2 / u * Math.PI * 2 * t), this.drawChar(e[f], 0, d + i, a), this.ctx.rotate((n / 2 + o) / u * Math.PI * 2 * t)) : (this.drawChar(e[f], n / 2, d + i, a), this.ctx.rotate((n + o) / u * Math.PI * 2 * t))
//                         }
//                     }
//                     this.ctx.restore()
//                 }, this.drawLine = (e, t, n, i, a, s = !1) => {
//                     var r, o;
//                     let l = 0,
//                         d = 0;
//                     const c = this.textSettings.getLineSpacing(),
//                         u = this.textSettings.getLetterSpacing(),
//                         h = Math.ceil(.06 * this.textSettings.height),
//                         m = Math.round(this.textSettings.padding + u),
//                         p = e.split(" ");
//                     if ("center" == this.textSettings.align ? l = Math.round((this.rect.width - n) / 2) : "right" == this.textSettings.align ? l = Math.round(this.rect.width - n) : "justify" == this.textSettings.align && p.length > 1 && n / this.rect.width > .7 && (d = this.isWordBackground ? (this.rect.width - n) / (e.split(" ").filter((e => e)).length - 1) : (this.rect.width - n) / (p.length - 1), n = this.rect.width), this.textSettings.background && this.textSettings.backgroundType === te.BACKGROUND_LINE && (this.ctx.fillStyle = this.textSettings.backgroundColor, this.ctx.fillRect(l, t - this.textSettings.padding, Math.round(n), this.textSettings.height + 2 * this.textSettings.padding), null === (r = this.fill) || void 0 === r || r.addToCanvasFillStyle(this.ctx)), this.textSettings.underline && !this.isWordBackground) {
//                         const e = Math.ceil(.06 * this.textSettings.height),
//                             a = Math.round(this.textSettings.padding + u);
//                         this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.fillRect(l + a, t + this.textSettings.baseline + e + i, n - 2 * a, e), this.ctx.globalCompositeOperation = "source-over"
//                     }
//                     if (0 !== d || this.isWordBackground) {
//                         let e = this.ctx.measureText(" ").width;
//                         for (let n = 0; n < p.length; n++) {
//                             const s = this.measureTextWidth(p[n], u, !0);
//                             if (this.isWordBackground) {
//                                 if (!p[n]) continue;
//                                 this.ctx.fillStyle = this.textSettings.backgroundColor, this.ctx.fillRect(l, t - this.textSettings.padding, Math.round(s + 2 * this.textSettings.padding), this.textSettings.height + 2 * this.textSettings.padding), null === (o = this.fill) || void 0 === o || o.addToCanvasFillStyle(this.ctx), e = 3 * this.textSettings.padding + c, this.textSettings.underline && (this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.fillRect(l + m, t + this.textSettings.baseline + h + i, Math.round(s + 2 * this.textSettings.padding) - 2 * m, h), this.ctx.globalCompositeOperation = "source-over")
//                             }
//                             0 === u ? this.drawText(p[n], l + this.textSettings.padding + u, t - this.textSettings.ascent + i, a) : this.drawSpacedText(p[n], l + this.textSettings.padding + u, t - this.textSettings.ascent + i, u, a), l += Math.round(s + e + d)
//                         }
//                     } else 0 !== u || s ? this.drawSpacedText(e, l + this.textSettings.padding + u, t - this.textSettings.ascent + i, u, a) : this.drawText(e, l + this.textSettings.padding + u, t - this.textSettings.ascent + i, a)
//                 }, this.drawSpacedText = (e, t, n, i, a) => {
//                     let s = 0,
//                         r = "";
//                     for (; s < e.length;) r = e[s++], this.drawChar(r, t, n, a), t += this.ctx.measureText(r).width + i
//                 }, this.drawText = (e, t, n, i) => {
//                     this.textSettings.outline && 0 === i.x && 0 === i.y && this.ctx.strokeText(e, t, n), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.fillText(e, t, n), this.ctx.globalCompositeOperation = "source-over", !this.textSettings.outline || 0 === i.x && 0 === i.y || this.ctx.strokeText(e, t + i.x, n + i.y)
//                 }, this.drawChar = (e, t, n, i) => {
//                     this.textSettings.outline && 0 === i.x && 0 === i.y && this.ctx.strokeText(e, t, n), this.isPunchOut && (this.ctx.globalCompositeOperation = "destination-out"), this.ctx.fillText(e, t, n), this.ctx.globalCompositeOperation = "source-over", !this.textSettings.outline || 0 === i.x && 0 === i.y || this.ctx.strokeText(e, t + i.x, n + i.y)
//                 }, this.measureTextWidth = (e, t, n) => {
//                     if (!e) return 0;
//                     let i = 0;
//                     if (0 !== t) {
//                         for (let t = 0; t < e.length; t++) i += this.ctx.measureText(e[t]).width;
//                         i += e.length * t
//                     } else i = this.ctx.measureText(e).width;
//                     return n && (i += t), i
//                 }, this.position = (e, t) => {
//                     this.rect && (void 0 !== e && (this.rect.x = e), void 0 !== t && (this.rect.y = t), this.bect && (this.bect.x = this.rect.x - 4 * this.textSettings.padding, this.bect.y = this.rect.y - 4 * this.textSettings.padding))
//                 }, this.scale = (e, t) => {
//                     this.textSettings.setSize(Math.round(this.textSettings.size * t)), this.rect.x = Math.round(this.rect.x * e), this.rect.y = Math.round(this.rect.y * t), this.rect.width = Math.round(this.rect.width * e), this.render()
//                 }, this.calculate = (e, t) => {
//                     this.rect.x = Math.round(e.x), this.rect.width = Math.round(t.x - e.x), this.rect.width < 20 && (this.rect.width = 20), this.render()
//                 }, this.setWidth = e => {
//                     this.rect.width = Math.round(e), this.rect.width < 20 && (this.rect.width = 20), this.render()
//                 }, this.getHeight = () => this.textSettings.height, this.setHeightScale = e => {
//                     let t = Math.round(this.textSettings.size * e);
//                     this.setTextSize(t > 1e3 ? 1e3 : t)
//                 }, this.rotate = e => {
//                     this.rect.rotation += e ? -90 : 90
//                 }, this.rasterize = () => {
//                     let e = this.baked ? this.baked : this.canvas,
//                         t = this.bect ? this.bect.clone() : this.rect.clone();
//                     const n = new ce(m.M8(), this.settings.name, e, t, this.settings.locked);
//                     return n.settings = Object.assign({}, this.settings), n.applyTransform(), n
//                 }, this.clone = (e = !1) => {
//                     let t = new ue(e ? this.id : m.M8(), this.text, this.rect.clone(), this.textSettings.clone());
//                     return t.settings = Object.assign({}, this.settings), t.animation = de.clone(this.animation), t.rect = this.rect.clone(), t.canvas = m.dN(this.canvas), t.prepare(), t
//                 }, this.textSettings = i, this.text = t, this.rect = n
//             }
//             drawCurveLine(e, t, n, i, a) {
//                 switch (this.textSettings.curveType) {
//                     case "arc":
//                         this.drawArcLine(e, t, n, i, a);
//                         break;
//                     case "circle":
//                         this.drawCircleLine(e, t, n, i, a);
//                         break;
//                     case "half":
//                         this.drawHalfLine(e, t, n, i, a)
//                 }
//             }
//         }
//         class he {
//             static roundRect(e, t, n, i, a, s = 0) {
//                 const r = Math.min(i / 2, a / 2, s);
//                 e instanceof Path2D || e.beginPath(), e.moveTo(t + r, n), e.lineTo(t + i - r, n), e.quadraticCurveTo(t + i, n, t + i, n + r), e.lineTo(t + i, n + a - r), e.quadraticCurveTo(t + i, n + a, t + i - r, n + a), e.lineTo(t + r, n + a), e.quadraticCurveTo(t, n + a, t, n + a - r), e.lineTo(t, n + r), e.quadraticCurveTo(t, n, t + r, n), e.closePath()
//             }
//             static cutRect(e, t, n, i, a, s = 0) {
//                 const r = Math.min(i / 2, a / 2, s);
//                 e.beginPath(), e.moveTo(t + r, n), e.lineTo(t + i - r, n), e.lineTo(t + i, n + r), e.lineTo(t + i, n + a - r), e.lineTo(t + i - r, n + a), e.lineTo(t + r, n + a), e.lineTo(t, n + a - r), e.lineTo(t, n + r), e.lineTo(t + r, n), e.closePath()
//             }
//         }
//         he.ellipse = (e, t, n) => {
//             let i = .5 * (n.x - t.x),
//                 a = .5 * (n.y - t.y),
//                 s = t.x + i,
//                 r = t.y + a,
//                 o = .01,
//                 l = o,
//                 d = 2 * Math.PI - o;
//             for (e.beginPath(), e.moveTo(s + i * Math.cos(0), r + a * Math.sin(0)); l < d; l += o) e.lineTo(s + i * Math.cos(l), r + a * Math.sin(l));
//             e.closePath()
//         }, he.triangle = (e, t, n) => {
//             e.beginPath(), e.moveTo(t.x, t.y), e.lineTo(n.x, n.y), e.lineTo(t.x - (n.x - t.x), n.y), e.lineTo(t.x, t.y), e.closePath()
//         }, he.star = (e, t, n) => {
//             let i = Math.sqrt(Math.pow(n.x - t.x, 2) + Math.pow(n.y - t.y, 2));
//             e.beginPath(), e.translate(t.x, t.y), e.moveTo(0, 0 - i);
//             for (var a = 0; a < 5; a++) e.rotate(Math.PI / 5), e.lineTo(0, 0 - .5 * i), e.rotate(Math.PI / 5), e.lineTo(0, 0 - i);
//             e.translate(-t.x, -t.y)
//         }, he.heart = (e, t, n) => {
//             let i = Math.sqrt(Math.pow(n.x - t.x, 2) + Math.pow(n.y - t.y, 2)),
//                 a = .8 * i;
//             e.save(), e.translate(t.x, t.y - i / 2), e.rotate(45 * Math.PI / 180), e.beginPath(), e.moveTo(0, 0), e.bezierCurveTo(-a, 0, -a, i, 0, i), e.lineTo(i, i), e.lineTo(i, 0), e.bezierCurveTo(i, -a, 0, -a, 0, 0), e.closePath(), e.restore()
//         }, he.rectangle = (e, t, n, i, a) => {
//             e.beginPath(), e.moveTo(t, n), e.lineTo(t + i, n), e.lineTo(t + i, n + a), e.lineTo(t, n + a), e.lineTo(t, n), e.closePath()
//         }, he.line = (e, t, n) => {
//             e.beginPath(), e.moveTo(t.x, t.y), e.lineTo(n.x, n.y)
//         }, he.bezier = (e, t, n, i) => {
//             e.beginPath(), e.moveTo(t.x, t.y), e.quadraticCurveTo(i.x, i.y, n.x, n.y)
//         }, he.arc = (e, t, n) => {
//             e.beginPath(), e.arc(t.x, t.y, n, 0, 2 * Math.PI)
//         }, he.fill = (e, t, n, i, a) => {
//             switch (t) {
//                 case "rectangle":
//                     e.fillRect(n.x, n.y, i.x - n.x, i.y - n.y);
//                     break;
//                 case "rounded":
//                     const t = M.Z.fromPoints([n, i]);
//                     he.roundRect(e, t.x, t.y, t.width, t.height, a), e.fill();
//                     break;
//                 case "ellipse":
//                     he.ellipse(e, n, i), e.fill();
//                     break;
//                 case "triangle":
//                     he.triangle(e, n, i), e.fill();
//                     break;
//                 case "star":
//                     he.star(e, n, i), e.fill();
//                     break;
//                 case "heart":
//                     he.heart(e, n, i), e.fill();
//                     break;
//                 case "line":
//                     he.line(e, n, i), e.stroke()
//             }
//         }, he.stroke = (e, t, n, i, a) => {
//             switch (t) {
//                 case "rectangle":
//                     e.strokeRect(n.x, n.y, i.x - n.x, i.y - n.y);
//                     break;
//                 case "rounded":
//                     const t = M.Z.fromPoints([n, i]);
//                     he.roundRect(e, t.x, t.y, t.width, t.height, a), e.stroke();
//                     break;
//                 case "ellipse":
//                     he.ellipse(e, n, i), e.stroke();
//                     break;
//                 case "triangle":
//                     he.triangle(e, n, i), e.stroke();
//                     break;
//                 case "star":
//                     he.star(e, n, i), e.stroke();
//                     break;
//                 case "heart":
//                     he.heart(e, n, i), e.stroke();
//                     break;
//                 case "line":
//                     he.line(e, n, i), e.stroke()
//             }
//         };
//         class me {
//             constructor(e) {
//                 this.id = e, this.texture = null
//             }
//             createTexture(e, t, n) {
//                 this.texture = e.createTexture(), this.width = t, this.height = n
//             }
//             uploadData(e, t, n = e.NEAREST) {
//                 e.bindTexture(e.TEXTURE_2D, this.texture), e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL, 4), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_S, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_WRAP_T, e.CLAMP_TO_EDGE), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MIN_FILTER, n), e.texParameteri(e.TEXTURE_2D, e.TEXTURE_MAG_FILTER, n), e.texImage2D(e.TEXTURE_2D, 0, e.RGBA, e.RGBA, e.UNSIGNED_BYTE, t)
//             }
//             setTexture(e) {
//                 this.texture = e
//             }
//             destroy(e) {
//                 e.deleteTexture(this.texture)
//             }
//         }
//         class pe {
//             constructor(e, t, n) {
//                 this.uniform = {}, this.attribute = {}, this.texture = new Map, this.program = e.createProgram(), e.attachShader(this.program, this.compile(e, t, e.VERTEX_SHADER)), e.attachShader(this.program, this.compile(e, n, e.FRAGMENT_SHADER)), e.linkProgram(this.program), e.useProgram(this.program), e.getProgramParameter(this.program, e.LINK_STATUS) || console.log(e.getProgramInfoLog(this.program));
//                 const i = this.collect(t, "attribute");
//                 for (const [l, d] of i) this.attribute[l] = e.getAttribLocation(this.program, l);
//                 let a = [];
//                 const s = this.collect(t, "uniform");
//                 for (const [l, d] of s) this.uniform[l] = e.getUniformLocation(this.program, l);
//                 const r = this.collect(n, "uniform");
//                 for (const [l, d] of r) this.uniform[l] = e.getUniformLocation(this.program, l), "sampler2D" === d && a.push(l);
//                 for (var o in a) {
//                     let t = a[o],
//                         n = e.getUniformLocation(this.program, t);
//                     "texture" === t ? (e.uniform1i(n, 0), this.texture.set(0, new me(t))) : (e.uniform1i(n, 1), this.texture.set(1, new me(t)))
//                 }
//             }
//             collect(e, t) {
//                 const n = [],
//                     i = new RegExp("\\b" + t + " (\\w+) (\\w+)", "ig");
//                 return e.replace(i, (function(e, t, i) {
//                     return n.push([i, t]), e
//                 })), n
//             }
//             compile(e, t, n) {
//                 var i = e.createShader(n);
//                 return e.shaderSource(i, t), e.compileShader(i), e.getShaderParameter(i, e.COMPILE_STATUS) ? i : (console.log(e.getShaderInfoLog(i)), console.log(t), null)
//             }
//             getTextureById(e) {
//                 let t = null;
//                 return this.texture.forEach((function(n) {
//                     n.id !== e || (t = n)
//                 })), t || (console.error("Having no texture that is named `%s`.", e), null)
//             }
//             destroy(e) {
//                 e.deleteProgram(this.program), this.texture.forEach((function(t) {
//                     t.destroy(e)
//                 })), this.texture.clear()
//             }
//         }
//         class fe {
//             constructor(e, t, n) {
//                 this.color = e, this.blend = t, this.amount = n
//             }
//         }
//         class ge {
//             constructor(e, t, n) {
//                 this.framebuffer = e, this.renderbuffer = t, this.texture = n
//             }
//             destroy(e) {
//                 e.deleteFramebuffer(this.framebuffer), e.deleteRenderbuffer(this.renderbuffer), e.deleteTexture(this.texture)
//             }
//         }
//         class _e {
//             constructor(e, t, n, i = 1) {
//                 this.highlight = e, this.midtone = t, this.shadow = n, this.amount = i
//             }
//             static fillPaletteMap(e, t) {
//                 if (e.midtone) {
//                     for (let n = 0; n < 128; n++) {
//                         let i = n / 127;
//                         t.data[4 * n] = Math.round(e.midtone.r * i + e.shadow.r * (1 - i)), t.data[4 * n + 1] = Math.round(e.midtone.g * i + e.shadow.g * (1 - i)), t.data[4 * n + 2] = Math.round(e.midtone.b * i + e.shadow.b * (1 - i))
//                     }
//                     for (let n = 128; n < 256; n++) {
//                         let i = (n - 127) / 128;
//                         t.data[4 * n] = Math.round(e.highlight.r * i + e.midtone.r * (1 - i)), t.data[4 * n + 1] = Math.round(e.highlight.g * i + e.midtone.g * (1 - i)), t.data[4 * n + 2] = Math.round(e.highlight.b * i + e.midtone.b * (1 - i))
//                     }
//                 } else
//                     for (let n = 0; n < 256; ++n) {
//                         let i = n / 255;
//                         t.data[4 * n] = Math.round(e.highlight.r * i + e.shadow.r * (1 - i)), t.data[4 * n + 1] = Math.round(e.highlight.g * i + e.shadow.g * (1 - i)), t.data[4 * n + 2] = Math.round(e.highlight.b * i + e.shadow.b * (1 - i))
//                     }
//             }
//         }
//         class ve {
//             constructor(e, t) {
//                 this.name = e, this.value = t
//             }
//         }
//         class ye {
//             constructor(e = 0, t = 255, n = 0, i = 255, a = 1, s = .5) {
//                 this.minin = e, this.maxin = t, this.minout = n, this.maxout = i, this.midin = a, this.mid = s, this.map = e => (e = (e - this.minin) / (this.maxin - this.minin), e = Math.pow(e, this.midin), (e = this.minout + e * (this.maxout - this.minout)) > this.maxout ? e = this.maxout : e < this.minout && (e = this.minout), Math.round(e))
//             }
//             reset() {
//                 this.minout = 0, this.maxout = 255, this.midin = 1, this.minin = 0, this.maxin = 255, this.mid = .5
//             }
//             isFlat() {
//                 return Boolean(0 == this.minout && 255 == this.maxout && .5 == this.mid && 0 == this.minin && 255 == this.maxin)
//             }
//             setMid(e) {
//                 this.mid = (e - this.minin) / (this.maxin - this.minin), this.midin = this.midToIn(this.mid)
//             }
//             midToIn(e) {
//                 return Math.min(Math.max(Math.pow(9.99, 2 * e - 1), .1), 9.99)
//             }
//             static fillPaletteMap(e, t) {
//                 for (let n = 0; n < 256; ++n) {
//                     let i = e.map(n);
//                     t.data[4 * n] = i, t.data[4 * n + 1] = i, t.data[4 * n + 2] = i
//                 }
//             }
//             static fillRGBPaletteMap(e, t, n, i) {
//                 for (let a = 0; a < 256; ++a) i.data[4 * a] = e ? e.map(a) : a, i.data[4 * a + 1] = t ? t.map(a) : a, i.data[4 * a + 2] = n ? n.map(a) : a
//             }
//         }
//         class we {
//             constructor(e, t) {
//                 var n, i, a, s, r, o, l, d, c, u, h, m, p;
//                 if (null != e && null != t) {
//                     for (d = e.length - 1, s = [], h = [], l = [], u = [], m = [], i = [], n = [], a = [], o = [], c = [], r = 0; 0 <= d ? r < d : r > d; 0 <= d ? r += 1 : r -= 1) s[r] = e[r + 1] - e[r], o[r] = t[r + 1] - t[r], c[r] = o[r] / s[r];
//                     for (r = 1; 1 <= d ? r < d : r > d; 1 <= d ? r += 1 : r -= 1) h[r] = 3 / s[r] * (t[r + 1] - t[r]) - 3 / s[r - 1] * (t[r] - t[r - 1]);
//                     for (l[0] = 1, u[0] = 0, m[0] = 0, r = 1; 1 <= d ? r < d : r > d; 1 <= d ? r += 1 : r -= 1) l[r] = 2 * (e[r + 1] - e[r - 1]) - s[r - 1] * u[r - 1], u[r] = s[r] / l[r], m[r] = (h[r] - s[r - 1] * m[r - 1]) / l[r];
//                     for (l[d] = 1, m[d] = 0, i[d] = 0, r = p = d - 1; p <= 0 ? r <= 0 : r >= 0; p <= 0 ? r += 1 : r -= 1) i[r] = m[r] - u[r] * i[r + 1], n[r] = (t[r + 1] - t[r]) / s[r] - s[r] * (i[r + 1] + 2 * i[r]) / 3, a[r] = (i[r + 1] - i[r]) / (3 * s[r]);
//                     this.x = e.slice(0, d + 1), this.a = t.slice(0, d), this.b = n, this.c = i.slice(0, d), this.d = a
//                 }
//             }
//             interpolate(e) {
//                 var t, n, i;
//                 for (n = i = this.x.length - 1;
//                     (i <= 0 ? n <= 0 : n >= 0) && !(this.x[n] <= e); i <= 0 ? n += 1 : n -= 1);
//                 return t = e - this.x[n], this.a[n] + this.b[n] * t + this.c[n] * Math.pow(t, 2) + this.d[n] * Math.pow(t, 3)
//             }
//         }
//         class be {
//             constructor(e) {
//                 this.preset = e
//             }
//             static createCurveSet(e) {
//                 const t = new Array,
//                     n = new Array,
//                     i = new Array,
//                     a = new Array;
//                 for (let s = 0; s < e.preset[0].length; s += 2) t.push(new D.Z(e.preset[0][s], e.preset[0][s + 1]));
//                 for (let s = 0; s < e.preset[1].length; s += 2) n.push(new D.Z(e.preset[1][s], e.preset[1][s + 1]));
//                 for (let s = 0; s < e.preset[2].length; s += 2) i.push(new D.Z(e.preset[2][s], e.preset[2][s + 1]));
//                 for (let s = 0; s < e.preset[3].length; s += 2) a.push(new D.Z(e.preset[3][s], e.preset[3][s + 1]));
//                 return new Me(1, t, n, i, a)
//             }
//         }
//         class Me {
//             constructor(e = 255, t = [], n = [], i = [], a = []) {
//                 this.scale = e, this.rgb = t, this.red = n, this.green = i, this.blue = a, this.percent = 1
//             }
//             static getInterpolation(e, t) {
//                 let n = [],
//                     i = [],
//                     a = new Float32Array(256);
//                 for (var s = 0; s < t.length; s++) n.push(t[s].x * e), i.push(t[s].y * e);
//                 let r = new we(n, i);
//                 for (var o = 0; o < Math.ceil(n[0]); o++) a[o] = i[0];
//                 for (o = Math.ceil(n[0]); o < Math.ceil(n[n.length - 1]); o++) a[o] = r.interpolate(o);
//                 for (o = Math.ceil(n[n.length - 1]); o < 256; o++) a[o] = i[i.length - 1];
//                 return a
//             }
//             static fillPaletteMap(e, t) {
//                 let n = Me.getInterpolation(e.scale, e.rgb),
//                     i = Me.getInterpolation(e.scale, e.red),
//                     a = Me.getInterpolation(e.scale, e.green),
//                     s = Me.getInterpolation(e.scale, e.blue);
//                 for (let r = 0; r < 256; ++r) {
//                     let o = r - n[r];
//                     t.data[4 * r] = r - Math.round((r - (i[r] - o)) * e.percent), t.data[4 * r + 1] = r - Math.round((r - (a[r] - o)) * e.percent), t.data[4 * r + 2] = r - Math.round((r - (s[r] - o)) * e.percent)
//                 }
//             }
//         }
//         class xe {
//             static init() {
//                 xe.presets || (xe.grouping = {
//                     "b-w": ["agnes", "conny", "gordon", "harrison", "henry", "logan", "olay", "porter", "sampi", "tom", "vinny"],
//                     friends: ["aladin", "alex", "amber", "anne", "antonio", "bob", "greg", "hagrid", "harry", "ivan", "jean", "josh", "karen", "lucas", "melissa", "peter", "salomon", "sara", "sophia", "tony"],
//                     instage: ["borg", "carl", "coco", "doris", "doug", "earl", "sun", "blues", "country", "lemonpell", "tiny dc", "minker"],
//                     retro: ["vib", "ranguit", "rangeen", "creamlow", "sven", "yenely", "ragwarm", "greered", "danligter", "garage"],
//                     tuning: ["punch", "bright", "contrast", "vivid", "clairify"],
//                     portrait: ["matte", "deep", "film", "sunny", "gritty"],
//                     food: ["berry", "ensalat", "morning", "corn", "sharp"],
//                     urban: ["cement", "style", "mold", "shimmer", "stalker", "sham"],
//                     nature: ["beach", "flower", "forest"],
//                     colors: ["strawberry", "clementine", "pear", "apple", "blueberry", "grapes", "dragon", "superone", "tonola", "reddish", "fellowing", "grassland", "springs", "justblues", "bluesteel", "flowerpot", "stinker", "violiin", "blupur", "beyllo", "wifortress"],
//                     artzy: ["poster", "glitch", "mozak", "frank", "pinvet", "night vision", "darkstreet", "blomberg", "lolita", "atonic"]
//                 }, xe.presets = {
//                     flower: [new ve("vibrance", .2), new ve("saturation", .1), new ve("temperature", .1)],
//                     forest: [new ve("saturation", -.2), new ve("vibrance", 1), new ve("clarity", .2), new ve("temperature", .16), new ve("tint", .2), new ve("curves", new be([
//                         [0, 0, 65, 52, 173, 190, 236, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ]))],
//                     beach: [new ve("saturation", .2), new ve("vibrance", .2), new ve("curves", new be([
//                         [0, 0, 68, 56, 199, 208, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 98, 97, 196, 201, 255, 255],
//                         [0, 0, 87, 85, 201, 182, 255, 255]
//                     ])), new ve("temperature", .1)],
//                     sham: [new ve("saturation", -.3), new ve("fill", new fe(new Z(153, 221, 255), "overlay", .3)), new ve("curves", new be([
//                         [60, 31, 191, 217],
//                         [0, 0, 120, 134, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 120, 144, 255, 255]
//                     ]))],
//                     stalker: [new ve("curves", new be([
//                         [62, 64, 190, 191],
//                         [0, 0, 133, 125, 255, 255],
//                         [0, 0, 54, 65, 209, 208, 255, 255],
//                         [60, 62, 96, 99, 240, 230, 255, 255]
//                     ])), new ve("contrast", .1), new ve("saturation", -.2)],
//                     shimmer: [new ve("temperature", -.2), new ve("tint", -.12), new ve("fill", new fe(new Z(190, 11, 255), "screen", .12)), new ve("curves", new be([
//                         [8, 23, 244, 227],
//                         [0, 0, 255, 255],
//                         [0, 0, 131, 124, 255, 255],
//                         [0, 0, 149, 112, 255, 255]
//                     ]))],
//                     mold: [new ve("curves", new be([
//                         [65, 64, 233, 233],
//                         [0, 0, 138, 121, 255, 255],
//                         [0, 0, 60, 75, 184, 184, 255, 255],
//                         [0, 0, 64, 75, 181, 176, 255, 255]
//                     ])), new ve("contrast", .1), new ve("saturation", -.12)],
//                     style: [new ve("curves", new be([
//                         [0, 0, 73, 74, 191, 177, 235, 221, 255, 255],
//                         [0, 26, 89, 64, 121, 126, 180, 213, 255, 255],
//                         [0, 0, 71, 50, 190, 210, 255, 255],
//                         [61, 64, 112, 97, 199, 198, 255, 255]
//                     ])), new ve("vibrance", -.1), new ve("saturation", -.4), new ve("temperature", .1)],
//                     cement: [new ve("curves", new be([
//                         [0, 0, 73, 74, 191, 177, 235, 221, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 60, 54, 198, 210, 255, 255],
//                         [0, 0, 73, 37, 150, 149, 199, 198, 255, 255]
//                     ])), new ve("vibrance", -.1), new ve("saturation", -.1)],
//                     sharp: [new ve("curves", new be([
//                         [0, 0, 42, 20, 199, 218, 224, 246, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("vibrance", .1), new ve("sharpen", .1), new ve("clarity", .1)],
//                     corn: [new ve("temperature", .1), new ve("vibrance", .3), new ve("contrast", .1), new ve("curves", new be([
//                         [0, 0, 66, 78, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ]))],
//                     morning: [new ve("tint", .18), new ve("temperature", .1), new ve("highlights", .08), new ve("levels", new ye(0, 245, 0, 255)), new ve("curves", new be([
//                         [64, 64, 150, 181, 254, 255],
//                         [0, 0, 122, 138, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("fill", new fe(new Z(194, 120, 41), "overlay", .2))],
//                     ensalat: [new ve("highlights", .2), new ve("shadows", -.2), new ve("brightness", .1), new ve("levels", new ye(10, 245, 0, 255)), new ve("curves", new be([
//                         [0, 0, 135, 119, 191, 193, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 129, 121, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("clarity", .2), new ve("sharpen", .15)],
//                     berry: [new ve("vibrance", .44), new ve("curves", new be([
//                         [0, 0, 62, 66, 121, 135, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("contrast", .2), new ve("highlights", .4), new ve("shadows", -.2), new ve("levels", new ye(20, 255, 0, 255))],
//                     gritty: [new ve("saturation", -.4), new ve("levels", new ye(20, 255, 0, 255)), new ve("curves", new be([
//                         [0, 0, 50, 33, 128, 112, 190, 215, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("clarity", 1), new ve("grain", .3)],
//                     sunny: [new ve("fill", new fe(new Z(255, 194, 96), "overlay", .2)), new ve("temperature", .1), new ve("glamour", .4), new ve("clarity", .3)],
//                     film: [new ve("sharpen", .2), new ve("glamour", .5), new ve("grain", .5), new ve("highlights", -.2), new ve("shadows", -.2), new ve("saturation", -.2)],
//                     matte: [new ve("curves", new be([
//                         [0, 50, 38, 56, 79, 82, 152, 153, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("contrast", .12), new ve("saturation", -.1)],
//                     deep: [new ve("curves", new be([
//                         [0, 0, 117, 99, 191, 198, 255, 255],
//                         [0, 0, 71, 38, 177, 209, 255, 255],
//                         [0, 0, 236, 255],
//                         [0, 28, 75, 101, 190, 171, 254, 233]
//                     ])), new ve("saturation", -.3)],
//                     aladin: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 52, 87, 99, 255, 255],
//                         [0, 0, 106, 107, 194, 190, 254, 212],
//                         [0, 0, 166, 129, 254, 142]
//                     ]))],
//                     amber: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 98, 150, 255, 255],
//                         [0, 0, 138, 117, 255, 255],
//                         [0, 128, 254, 129]
//                     ])), new ve("saturation", -.3), new ve("levels", new ye(20, 235, 0, 255))],
//                     anne: [new ve("contrast", .25), new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 78, 66, 135, 171, 255, 255],
//                         [0, 0, 99, 87, 180, 208, 255, 255],
//                         [0, 0, 94, 93, 171, 161, 255, 255]
//                     ]))],
//                     antonio: [new ve("glamour", .8)],
//                     alex: [new ve("glamour", .6)],
//                     bob: [new ve("saturation", -.6), new ve("highlights", .5)],
//                     greg: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 74, 50, 181, 198, 255, 255],
//                         [0, 0, 61, 41, 108, 170, 158, 207, 254, 208],
//                         [0, 0, 83, 56, 168, 204, 255, 255]
//                     ]))],
//                     hagrid: [new ve("vibrance", .9), new ve("saturation", .1), new ve("clarity", .5), new ve("shadows", -.3)],
//                     harry: [new ve("fill", new fe(new Z(214, 178, 119), "overlay", .7)), new ve("grain", .5)],
//                     ivan: [new ve("fill", new fe(new Z(255, 0, 68), "overlay", .4)), new ve("shadows", .15), new ve("levels", new ye(6, 255, 0, 255))],
//                     jean: [new ve("levels", new ye(56, 233, 0, 255)), new ve("saturation", -1), new ve("tint", .1), new ve("exposure", .78), new ve("bloom", .1)],
//                     josh: [new ve("curves", new be([
//                         [0, 0, 78, 52, 175, 207, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 64, 87, 129, 254, 193]
//                     ]))],
//                     karen: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 89, 144, 255, 255],
//                         [0, 0, 138, 112, 255, 255],
//                         [0, 0, 162, 88, 255, 255]
//                     ]))],
//                     lucas: [new ve("tint", 1), new ve("saturation", -.85), new ve("contrast", .4), new ve("shadows", 1), new ve("temperature", .1)],
//                     melissa: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 62, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 61, 254, 193]
//                     ]))],
//                     peter: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 6, 31, 20, 65, 26, 87, 51, 195, 190, 254, 230],
//                         [0, 11, 24, 27, 102, 131, 189, 195, 255, 255],
//                         [0, 40, 126, 148, 254, 177]
//                     ]))],
//                     salomon: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 83, 50, 177, 213, 255, 255],
//                         [0, 0, 69, 55, 186, 205, 255, 255],
//                         [11, 56, 254, 212]
//                     ])), new ve("contrast", -.2)],
//                     sara: [new ve("vibrance", 1), new ve("contrast", .1), new ve("highlights", .3)],
//                     sophia: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 140, 116, 222, 254],
//                         [0, 0, 70, 59, 182, 201, 255, 255],
//                         [0, 29, 252, 227]
//                     ])), new ve("saturation", .3)],
//                     tony: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 92, 42, 218, 252],
//                         [0, 0, 73, 75, 157, 194, 255, 255],
//                         [0, 27, 254, 227]
//                     ]))],
//                     agnes: [new ve("desaturate", 1), new ve("contrast", .4)],
//                     conny: [new ve("saturation", -.55), new ve("temperature", .25), new ve("brightness", -.25), new ve("levels", new ye(14, 233, 0, 255)), new ve("exposure", .35), new ve("highlights", -.9)],
//                     gordon: [new ve("desaturate", 1), new ve("temperature", .7), new ve("tint", .3), new ve("saturation", -.2)],
//                     harrison: [new ve("toning", new _e(new Z(255, 240, 215), void 0, new Z(48, 26, 24), 1)), new ve("grain", .2)],
//                     henry: [new ve("toning", new _e(new Z(255, 240, 215), void 0, new Z(48, 26, 24), 1)), new ve("saturation", -.5)],
//                     logan: [new ve("glamour", .5), new ve("tint", .4), new ve("saturation", -.35), new ve("toning", new _e(new Z(255, 240, 215), void 0, new Z(48, 26, 24), .8))],
//                     olay: [new ve("saturation", -1), new ve("grain", .5), new ve("vignette", .5)],
//                     porter: [new ve("saturation", -1), new ve("vignette", .4), new ve("levels", new ye(50, 205))],
//                     tom: [new ve("desaturate", 1)],
//                     sampi: [new ve("toning", new _e(new Z(255, 228, 196), void 0, new Z(0, 0, 0), 1)), new ve("levels", new ye(0, 217, 0, 255)), new ve("temperature", .3)],
//                     vinny: [new ve("curves", new be([
//                         [0, 0, 133, 111, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 133, 138, 255, 255]
//                     ])), new ve("vibrance", -1), new ve("saturation", 1), new ve("temperature", .8), new ve("contrast", -.1), new ve("highlights", .1)],
//                     borg: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 94, 66, 227, 255],
//                         [0, 0, 93, 94, 179, 198, 255, 255],
//                         [0, 19, 254, 228]
//                     ])), new ve("fill", new fe(new Z(204, 255, 0), "", .1))],
//                     carl: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 93, 64, 227, 255],
//                         [0, 0, 93, 94, 181, 189, 255, 255],
//                         [0, 19, 254, 228]
//                     ])), new ve("vignette", .3), new ve("contrast", .15), new ve("saturation", -.3)],
//                     coco: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 64, 97, 255, 255],
//                         [0, 0, 142, 122, 255, 255],
//                         [0, 0, 144, 112, 255, 255]
//                     ]))],
//                     doris: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 78, 48, 177, 209, 255, 255],
//                         [0, 0, 92, 94, 179, 208, 255, 255],
//                         [0, 52, 254, 215]
//                     ])), new ve("saturation", -.2)],
//                     doug: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 64, 255, 255],
//                         [0, 0, 255, 255],
//                         [1, 64, 252, 193]
//                     ])), new ve("highlights", .5), new ve("shadows", -.3)],
//                     earl: [new ve("vignette", .4), new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 222, 254],
//                         [0, 47, 223, 254],
//                         [0, 129, 222, 255]
//                     ])), new ve("fill", new fe(new Z(247, 218, 174), "multiply", .8))],
//                     sun: [new ve("fill", new fe(new Z(251, 242, 163), "multiply", .8)), new ve("vignette", -.25)],
//                     blues: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 77, 54, 181, 207, 255, 255],
//                         [0, 0, 73, 51, 180, 209, 255, 255],
//                         [0, 0, 54, 75, 201, 185, 255, 255]
//                     ]))],
//                     country: [new ve("curves", new be([
//                         [0, 0, 84, 74, 115, 105, 255, 255],
//                         [0, 0, 73, 80, 93, 124, 255, 255],
//                         [0, 0, 50, 34, 93, 105, 119, 142, 255, 255],
//                         [0, 0, 85, 85, 125, 112, 255, 255]
//                     ]))],
//                     lemonpell: [new ve("curves", new be([
//                         [0, 36, 80, 84, 156, 190, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 103, 105, 158, 176, 255, 255],
//                         [0, 19, 107, 83, 198, 196, 255, 255]
//                     ]))],
//                     "tiny dc": [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 79, 46, 199, 217, 255, 255],
//                         [9, 1, 110, 126, 254, 232],
//                         [0, 46, 92, 103, 191, 158, 254, 205]
//                     ])), new ve("grain", .3)],
//                     minker: [new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(26, 0, 77), .8)), new ve("levels", new ye(0, 247, 8, 255)), new ve("brightness", .14), new ve("contrast", .4), new ve("vibrance", .5)],
//                     superone: [new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(77, 0, 51), .8)), new ve("levels", new ye(50, 175, 0, 255))],
//                     tonola: [new ve("toning", new _e(new Z(221, 255, 153), void 0, new Z(77, 0, 51), .8)), new ve("levels", new ye(26, 213, 0, 255)), new ve("saturation", .36), new ve("temperature", .22)],
//                     reddish: [new ve("toning", new _e(new Z(255, 214, 147), void 0, new Z(110, 37, 0), .8)), new ve("contrast", .3), new ve("highlights", 1)],
//                     fellowing: [new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(77, 47, 0), .8)), new ve("levels", new ye(24, 203, 0, 255)), new ve("contrast", .14), new ve("saturation", .3), new ve("temperature", .18)],
//                     grassland: [new ve("toning", new _e(new Z(221, 255, 153), void 0, new Z(0, 77, 25), .7)), new ve("levels", new ye(18, 227, 0, 255)), new ve("contrast", .16)],
//                     springs: [new ve("toning", new _e(new Z(221, 255, 153), void 0, new Z(0, 26, 38), 1)), new ve("highlights", 1), new ve("levels", new ye(40, 155, 0, 255)), new ve("shadows", 1)],
//                     justblues: [new ve("toning", new _e(new Z(198, 236, 255), void 0, new Z(26, 0, 77), .79)), new ve("levels", new ye(16, 189, 0, 255)), new ve("saturation", .2), new ve("contrast", .2)],
//                     bluesteel: [new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(26, 0, 77), .8)), new ve("levels", new ye(0, 215, 12, 255))],
//                     flowerpot: [new ve("toning", new _e(new Z(255, 153, 221), void 0, new Z(51, 77, 0), .8)), new ve("levels", new ye(22, 215, 0, 255)), new ve("vignette", -.2)],
//                     stinker: [new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(26, 0, 77), .8)), new ve("levels", new ye(0, 247, 8, 255)), new ve("brightness", .14), new ve("contrast", .4)],
//                     violiin: [new ve("contrast", .32), new ve("toning", new _e(new Z(195, 166, 255), void 0, new Z(33, 0, 0), 1)), new ve("levels", new ye(22, 223, 0, 255)), new ve("exposure", .22), new ve("brightness", .12)],
//                     blupur: [new ve("toning", new _e(new Z(255, 153, 221), void 0, new Z(7, 68, 97), .8)), new ve("vibrance", .7), new ve("contrast", .3)],
//                     beyllo: [new ve("vibrance", 1), new ve("saturation", 1), new ve("temperature", -.55), new ve("tint", .1), new ve("levels", new ye(0, 255, 24, 249)), new ve("toning", new _e(new Z(255, 213, 0), void 0, new Z(125, 3, 84), .76)), new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 131, 115, 255, 255],
//                         [0, 0, 136, 128, 255, 255],
//                         [0, 0, 122, 145, 255, 255]
//                     ])), new ve("vignette", .28)],
//                     wifortress: [new ve("toning", new _e(new Z(108, 206, 255), void 0, new Z(0, 26, 38), 1)), new ve("highlights", 1), new ve("levels", new ye(40, 155, 0, 255)), new ve("shadows", 1)],
//                     vib: [new ve("vibrance", .1), new ve("saturation", .5), new ve("brightness", .1), new ve("temperature", .5), new ve("levels", new ye(12, 253, 0, 255)), new ve("highlights", .2), new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 70, 80, 198, 181, 255, 255],
//                         [0, 0, 140, 135, 255, 255],
//                         [0, 0, 74, 96, 200, 172, 255, 255]
//                     ])), new ve("toning", new _e(new Z(255, 238, 210), void 0, new Z(54, 6, 6), .07)), new ve("contrast", -.1)],
//                     ranguit: [new ve("saturation", .22), new ve("temperature", .96), new ve("tint", -.28), new ve("contrast", .14), new ve("brightness", -.2), new ve("levels", new ye(0, 237, 56, 255)), new ve("toning", new _e(new Z(221, 255, 153), void 0, new Z(41, 35, 33), .26))],
//                     rangeen: [new ve("vibrance", 1), new ve("saturation", .46), new ve("temperature", .36), new ve("levels", new ye(0, 251, 14, 255)), new ve("shadows", .34), new ve("highlights", .12), new ve("toning", new _e(new Z(121, 255, 224), void 0, new Z(245, 22, 107), .12)), new ve("contrast", -.1), new ve("curves", new be([
//                         [0, 0, 144, 152, 255, 255],
//                         [0, 0, 136, 107, 255, 255],
//                         [0, 0, 115, 102, 255, 255],
//                         [0, 0, 106, 91, 255, 255]
//                     ]))],
//                     creamlow: [new ve("vibrance", .82), new ve("saturation", -.24), new ve("temperature", 1), new ve("tint", .78), new ve("contrast", -.3), new ve("levels", new ye(40, 247, 0, 255)), new ve("highlights", .64), new ve("toning", new _e(new Z(221, 255, 153), void 0, new Z(145, 39, 9), .29)), new ve("curves", new be([
//                         [0, 0, 5, 13, 78, 83, 172, 162, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 131, 120, 255, 255],
//                         [0, 0, 68, 61, 175, 184, 255, 255]
//                     ]))],
//                     sven: [new ve("vibrance", .7), new ve("temperature", .5), new ve("tint", .3), new ve("exposure", .2), new ve("contrast", -.2), new ve("levels", new ye(4, 255, 0, 235)), new ve("highlights", -.3), new ve("shadows", .3), new ve("grain", .3), new ve("vignette", .45)],
//                     yenely: [new ve("tint", .5), new ve("levels", new ye(0, 235, 20, 255)), new ve("saturation", -.62), new ve("contrast", -.3), new ve("shadows", -.6), new ve("curves", new be([
//                         [0, 0, 148, 105, 255, 255],
//                         [0, 0, 92, 79, 128, 227, 255, 255],
//                         [0, 0, 74, 103, 119, 172, 255, 255],
//                         [0, 0, 111, 148, 255, 255]
//                     ])), new ve("highlights", 1), new ve("brightness", .14), new ve("temperature", .3), new ve("vibrance", 1), new ve("exposure", -.1)],
//                     ragwarm: [new ve("temperature", .62), new ve("levels", new ye(32, 255, 0, 243)), new ve("highlights", -.14), new ve("vignette", .28), new ve("toning", new _e(new Z(153, 255, 187), void 0, new Z(21, 55, 143), .07)), new ve("curves", new be([
//                         [0, 0, 126, 125, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 130, 121, 255, 255],
//                         [0, 0, 138, 124, 255, 255]
//                     ]))],
//                     greered: [new ve("vibrance", .32), new ve("temperature", .4), new ve("tint", -.5), new ve("brightness", .24), new ve("contrast", -.1), new ve("vignette", .31), new ve("shadows", .38)],
//                     danligter: [new ve("saturation", .86), new ve("temperature", -1), new ve("tint", -.92), new ve("brightness", .22), new ve("exposure", .22), new ve("contrast", .1), new ve("levels", new ye(0, 239, 0, 255)), new ve("highlights", -.12), new ve("dehaze", -.12), new ve("toning", new _e(new Z(255, 216, 153), void 0, new Z(0, 52, 77), .14)), new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [0, 0, 96, 115, 162, 194, 255, 255],
//                         [0, 0, 101, 97, 185, 189, 255, 255],
//                         [0, 0, 144, 130, 222, 228, 255, 255]
//                     ]))],
//                     garage: [new ve("tint", .6), new ve("saturation", -.04), new ve("shadows", -1), new ve("grain", .42), new ve("glamour", .3)],
//                     strawberry: [new ve("fill", new fe(new Z(255, 0, 0), "soft-light", .5))],
//                     clementine: [new ve("fill", new fe(new Z(255, 158, 0), "soft-light", .5))],
//                     pear: [new ve("fill", new fe(new Z(170, 255, 0), "soft-light", .5))],
//                     apple: [new ve("fill", new fe(new Z(0, 255, 85), "soft-light", .5))],
//                     blueberry: [new ve("fill", new fe(new Z(0, 170, 255), "soft-light", .5))],
//                     grapes: [new ve("fill", new fe(new Z(85, 0, 255), "soft-light", .5))],
//                     dragon: [new ve("fill", new fe(new Z(255, 0, 170), "soft-light", .5))],
//                     punch: [new ve("curves", new be([
//                         [0, 0, 80, 64, 173, 193, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255],
//                         [0, 0, 255, 255]
//                     ])), new ve("vibrance", .5)],
//                     bright: [new ve("highlights", -.3), new ve("shadows", .5), new ve("levels", new ye(0, 215, 10, 255))],
//                     contrast: [new ve("contrast", .2), new ve("highlights", .2), new ve("levels", new ye(20, 215, 0, 255)), new ve("shadows", .4)],
//                     vivid: [new ve("vibrance", .4), new ve("shadows", .25)],
//                     clairify: [new ve("clarity", .6), new ve("sharpen", .1), new ve("glamour", .2)],
//                     poster: [new ve("posterize", .08)],
//                     glitch: [new ve("slice", {
//                         seed: 86,
//                         amount: 4,
//                         distance: .12,
//                         line: !0
//                     }), new ve("bleed", {
//                         seed: 58,
//                         amplitude: .05,
//                         block: 1.2
//                     })],
//                     mozak: [new ve("mosaic", .5), new ve("fringe", .2)],
//                     frank: [new ve("fringe", .4)],
//                     pinvet: [new ve("bloom", .33), new ve("invert", 1), new ve("pixelate", .7)],
//                     blomberg: [new ve("bloom", .33), new ve("invert", 1), new ve("tint", 1), new ve("temperature", -.8), new ve("saturation", -.5)],
//                     lolita: [new ve("fill", new fe(new Z(255, 153, 153), "vivid-light", 1))],
//                     atonic: [new ve("curves", new be([
//                         [0, 0, 255, 255],
//                         [6, 235, 246, 4],
//                         [131, 3, 138, 255],
//                         [1, 42, 251, 213]
//                     ]))],
//                     "night vision": [new ve("fill", new fe(new Z(30, 255, 0), "multiply", 1)), new ve("levels", new ye(0, 183, 0, 255)), new ve("vignette", .85), new ve("grain", .6)],
//                     darkstreet: [new ve("temperature", -1), new ve("highlights", .58), new ve("shadows", -1), new ve("levels", new ye(100, 249, 0, 255)), new ve("grain", 1), new ve("exposure", -1)],
//                     splash: [new ve("desaturate", 1)],
//                     blur: [new ve("blur", .5)],
//                     zoom: [new ve("zoom", {
//                         x: .5,
//                         y: .5,
//                         amount: .2
//                     })],
//                     spin: [new ve("radial", {
//                         amount: .08,
//                         x: .5,
//                         y: .5,
//                         direction: 2,
//                         symmetry: !1
//                     })],
//                     motion: [new ve("motion", {
//                         amount: .7,
//                         angle: Math.PI / 1.8 * .23
//                     })],
//                     mozaik: [new ve("mosaic", .5)],
//                     pixel: [new ve("pixelate", .7)]
//                 })
//             }
//             static named(e) {
//                 return xe.init(), this.presets[e]
//             }
//             static firstInGroup(e) {
//                 return xe.init(), xe.grouping[e][0]
//             }
//             static groupLength(e) {
//                 return xe.grouping[e].length
//             }
//             static groups() {
//                 xe.init();
//                 const e = [];
//                 for (const t in xe.grouping) e.push(t);
//                 return e
//             }
//             static names(e) {
//                 xe.init();
//                 const t = [];
//                 for (const n in xe.grouping[e]) t.push(xe.grouping[e][n]);
//                 return t
//             }
//         }
//         class Le {
//             constructor(e) {
//                 this.drawShader = 0, this.sourceTexture = null, this.vertexBuffer = null, this.debug = !1, this.lastInChain = !1, this.currentFramebufferIndex = 0, this.tempFramebuffers = {}, this.width = -1, this.height = -1, this.lastTextureSlot = -1, this.handleContextLost = () => {
//                     null == this.canvas && (this.canvas = (0, m.vL)(100, 100)), this.initContext()
//                 }, this.getError = () => {
//                     this.debug && this.ctx.getError()
//                 }, this.addShader = (e, t, n = !1) => {
//                     if ("fill" == e && 0 == t.amount || "toning" == e && 0 == t.amount || "levels" == e && t.isFlat() || null == t || 0 === t) this.removeShader(e, n);
//                     else {
//                         for (var i = 0; i < this.chain.length; i++)
//                             if (this.chain[i].type === e && this.chain[i].sidekick === n) return void(this.chain[i].value = t);
//                         this.chain.push(new ke(e, t, n))
//                     }
//                 }, this.getShaderValue = e => {
//                     for (var t = 0; t < this.chain.length; t++)
//                         if (this.chain[t].type == e) return this.chain[t].value
//                 }, this.addPreset = (e, t = 1) => {
//                     const n = xe.named(e);
//                     n && (1 !== t ? n.forEach((e => {
//                         switch (e.name) {
//                             case "curves":
//                                 {
//                                     const n = e.value,
//                                         i = be.createCurveSet(n);i.percent = t,
//                                     this.addShader(e.name, i);
//                                     break
//                                 }
//                             case "levels":
//                                 {
//                                     const n = e.value,
//                                         i = new ye(Math.round(n.minin * t), Math.round(255 - (255 - n.maxin) * t));this.addShader(e.name, i);
//                                     break
//                                 }
//                             case "toning":
//                                 {
//                                     const n = e.value,
//                                         i = new _e(n.highlight, n.midtone, n.shadow, n.amount * t);this.addShader(e.name, i);
//                                     break
//                                 }
//                             case "fill":
//                                 {
//                                     const n = e.value,
//                                         i = new fe(n.color, n.blend, n.amount * t);this.addShader(e.name, i);
//                                     break
//                                 }
//                             default:
//                                 this.addShader(e.name, e.value * t)
//                         }
//                     })) : n.forEach((e => this.addShader(e.name, e.value))))
//                 }, this.removeShaderSidekick = () => {
//                     let e = new Array;
//                     for (var t = 0; t < this.chain.length; t++) this.chain[t].sidekick || e.push(this.chain[t]);
//                     this.chain = e
//                 }, this.removeShader = (e, t = !1) => {
//                     for (var n = 0; n < this.chain.length; n++)
//                         if (this.chain[n].type === e && this.chain[n].sidekick === t) return void this.chain.splice(n, 1)
//                 }, this.runShader = (e, t) => {
//                     switch (e) {
//                         case "vibrance":
//                             return this.vibrance(t);
//                         case "brightness":
//                             return this.brightness(t);
//                         case "temperature":
//                             return this.temperature(t);
//                         case "balance":
//                             return this.balance(t);
//                         case "tint":
//                             return this.tint(t);
//                         case "colorize":
//                             return this.colorize(t);
//                         case "grain":
//                             return this.grain(t);
//                         case "noise":
//                             return this.noise(t);
//                         case "vignette":
//                             return this.vignette(t);
//                         case "sharpen":
//                             return this.sharpen(t);
//                         case "blur":
//                             return this.blur(t);
//                         case "zoom":
//                             return this.zoom(t);
//                         case "bokeh":
//                             return this.bokeh(t);
//                         case "gaussian":
//                             return this.gaussian(t);
//                         case "motion":
//                             return this.motion(t);
//                         case "radial":
//                             return this.radial(t);
//                         case "smooth":
//                             return this.smooth(t);
//                         case "denoise":
//                             return this.denoise(t);
//                         case "contrast":
//                             return this.contrast(t);
//                         case "monochrome":
//                             return this.monochrome(t);
//                         case "desaturate":
//                             return this.desaturate();
//                         case "invert":
//                             return this.invert();
//                         case "exposure":
//                             return this.exposure(t);
//                         case "highlights":
//                             return this.highlights(t);
//                         case "shadows":
//                             return this.shadows(t);
//                         case "dehaze":
//                             return this.dehaze(t);
//                         case "curves":
//                             return this.curves(t);
//                         case "toning":
//                             return this.toning(t);
//                         case "lookup":
//                             return this.lookup(t);
//                         case "fill":
//                             return this.fill(t);
//                         case "bwpoint":
//                             return this.bwpoint(t);
//                         case "levels":
//                             return this.levels(t);
//                         case "multilevels":
//                             return this.multilevels(t);
//                         case "threshold":
//                             return this.threshold(t);
//                         case "bloom":
//                             return this.bloom(t);
//                         case "glamour":
//                             return this.glamour(t);
//                         case "mimichdr":
//                             return this.mimicHDR(t);
//                         case "posterize":
//                             return this.posterize(t);
//                         case "fringe":
//                             return this.fringe(t);
//                         case "pixelate":
//                             return this.pixelate(t);
//                         case "clarity":
//                             return this.clarity(t);
//                         case "mosaic":
//                             return this.mosaic(t);
//                         case "polarcoordinates":
//                             return this.polarcoordinates(t);
//                         case "kaleidoscope":
//                             return this.kaleidoscope(t);
//                         case "reflect":
//                             return this.reflect(t);
//                         case "wave":
//                             return this.wave(t);
//                         case "fisheye":
//                             return this.fisheye(t);
//                         case "scanlines":
//                             return this.scanlines(t);
//                         case "dealiasing":
//                             return this.dealiasing();
//                         case "alpha-reset":
//                             return this.alphaReset();
//                         case "alpha-invert":
//                             return this.alphaInvert();
//                         case "alpha-mask":
//                             return this.alphaMask();
//                         case "alpha-shift-mask":
//                             return this.alphaShiftMask();
//                         case "outer-glow":
//                             return this.outerGlow(t);
//                         case "inner-glow":
//                             return this.innerGlow(t);
//                         case "sobel":
//                             return this.sobel();
//                         case "solarize":
//                             return this.solarize();
//                         case "halftone":
//                             return this.halftone(t);
//                         case "stroke":
//                             return this.stroke(t);
//                         case "bevel":
//                             return this.bevel(t);
//                         case "border":
//                             return this.border(t);
//                         case "rgb-split":
//                             return this.rgbSplit(t);
//                         case "slice":
//                             return this.slice(t);
//                         case "bleed":
//                             return this.bleed(t);
//                         case "interference":
//                             return this.interference(t);
//                         case "hue":
//                             return this.hue(t);
//                         case "hue-red":
//                             return this.hue(t, 317, 46);
//                         case "hue-yellow":
//                             return this.hue(t, 17, 106);
//                         case "hue-green":
//                             return this.hue(t, 77, 166);
//                         case "hue-cyan":
//                             return this.hue(t, 137, 226);
//                         case "hue-blue":
//                             return this.hue(t, 197, 286);
//                         case "hue-magenta":
//                             return this.hue(t, 257, 346);
//                         case "saturation":
//                             return this.saturation(t);
//                         case "saturation-red":
//                             return this.saturation(t, 317, 46);
//                         case "saturation-yellow":
//                             return this.saturation(t, 17, 106);
//                         case "saturation-green":
//                             return this.saturation(t, 77, 166);
//                         case "saturation-cyan":
//                             return this.saturation(t, 137, 226);
//                         case "saturation-blue":
//                             return this.saturation(t, 197, 286);
//                         case "saturation-magenta":
//                             return this.saturation(t, 257, 346);
//                         case "lightness":
//                             return this.lightness(t);
//                         case "lightness-red":
//                             return this.lightness(t, 317, 46);
//                         case "lightness-yellow":
//                             return this.lightness(t, 17, 106);
//                         case "lightness-green":
//                             return this.lightness(t, 77, 166);
//                         case "lightness-cyan":
//                             return this.lightness(t, 137, 226);
//                         case "lightness-blue":
//                             return this.lightness(t, 197, 286);
//                         case "lightness-magenta":
//                             return this.lightness(t, 257, 346);
//                         case "melt":
//                             return this.melt(t);
//                         case "gooey":
//                             return this.gooey(t);
//                         case "block":
//                             return this.block(t);
//                         case "curtain":
//                             return this.curtain(t);
//                         case "blinds":
//                             return this.blinds(t);
//                         case "wipe":
//                             return this.wipe(t);
//                         case "slot":
//                             return this.slot(t);
//                         case "split":
//                             return this.split(t);
//                         case "circular":
//                             return this.circular(t);
//                         case "ripple":
//                             return this.ripple(t);
//                         case "warp":
//                             return this.warp(t);
//                         case "swipe":
//                             return this.swipe(t);
//                         case "marquee":
//                             return this.marquee(t);
//                         default:
//                             return console.error("We don't have this type shader, " + e)
//                     }
//                 }, this.reset = () => {
//                     this.chain = [], this.compiledProgram.forEach((function(e) {
//                         e.destroy(this.ctx)
//                     }), this), this.compiledProgram.clear(), this.sourceTexture && (this.activeSourceTexture = void 0, this.sourceTexture.destroy(this.ctx), this.sourceTexture = null);
//                     for (let e in this.tempFramebuffers) {
//                         this.tempFramebuffers[e].destroy(this.ctx)
//                     }
//                     this.tempFramebuffers = {}
//                 }, this.apply = (e, t = !1) => {
//                     if (0 == this.chain.length) return e;
//                     this.resize(e.width, e.height), this.drawShader = 0, this.sourceTexture && this.width == e.width && this.height == e.height || (this.sourceTexture && (this.sourceTexture.destroy(this.ctx), this.sourceTexture = null), this.sourceTexture = new me("texture"), this.sourceTexture.createTexture(this.ctx, e.width, e.height)), (e !== this.activeSourceTexture || t) && (this.sourceTexture.uploadData(this.ctx, e), this.activeSourceTexture = e);
//                     for (var n = 0; n < this.chain.length; n++) this.lastInChain = n == this.chain.length - 1, this.runShader(this.chain[n].type, this.chain[n].value);
//                     return this.currentFramebufferIndex = 0, this.canvas
//                 }, this.resize = (e, t) => {
//                     if (e != this.width || t != this.height) {
//                         if (this.canvas.width = this.width = e, this.canvas.height = this.height = t, !this.vertexBuffer) {
//                             var n = new Float32Array([-1, -1, 0, 0, 1, -1, 1, 0, -1, 1, 0, 1, -1, 1, 0, 1, 1, -1, 1, 0, 1, 1, 1, 1]);
//                             this.ctx || this.initContext(), this.vertexBuffer = this.ctx.createBuffer(), this.ctx.bindBuffer(this.ctx.ARRAY_BUFFER, this.vertexBuffer), this.ctx.bufferData(this.ctx.ARRAY_BUFFER, n, this.ctx.STATIC_DRAW)
//                         }
//                         this.ctx.viewport(0, 0, this.width, this.height);
//                         for (let e in this.tempFramebuffers) {
//                             this.tempFramebuffers[e].destroy(this.ctx)
//                         }
//                         this.tempFramebuffers = {}
//                     }
//                 }, this.getTempFramebuffer = e => (this.tempFramebuffers[e] = this.tempFramebuffers[e] || this.createFramebufferTexture(this.width, this.height), this.tempFramebuffers[e]), this.createFramebufferTexture = (e, t) => {
//                     let n = this.ctx.createFramebuffer();
//                     this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, n);
//                     let i = this.ctx.createRenderbuffer();
//                     this.ctx.bindRenderbuffer(this.ctx.RENDERBUFFER, i), this.ctx.renderbufferStorage(this.ctx.RENDERBUFFER, this.ctx.DEPTH_COMPONENT16, e, t);
//                     let a = this.ctx.createTexture();
//                     return this.ctx.bindTexture(this.ctx.TEXTURE_2D, a), this.ctx.texImage2D(this.ctx.TEXTURE_2D, 0, this.ctx.RGBA, e, t, 0, this.ctx.RGBA, this.ctx.UNSIGNED_BYTE, null), this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_MAG_FILTER, this.ctx.NEAREST), this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_MIN_FILTER, this.ctx.NEAREST), this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_S, this.ctx.CLAMP_TO_EDGE), this.ctx.texParameteri(this.ctx.TEXTURE_2D, this.ctx.TEXTURE_WRAP_T, this.ctx.CLAMP_TO_EDGE), this.ctx.framebufferTexture2D(this.ctx.FRAMEBUFFER, this.ctx.COLOR_ATTACHMENT0, this.ctx.TEXTURE_2D, a, 0), this.ctx.framebufferRenderbuffer(this.ctx.FRAMEBUFFER, this.ctx.DEPTH_ATTACHMENT, this.ctx.RENDERBUFFER, i), this.ctx.bindTexture(this.ctx.TEXTURE_2D, null), this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null), new ge(n, i, a)
//                 }, this.draw = (e, t = !1) => {
//                     if ((this.chain.length <= 1 || this.lastInChain) && !t) this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, null);
//                     else {
//                         let e = this.getTempFramebuffer(this.currentFramebufferIndex);
//                         this.ctx.bindFramebuffer(this.ctx.FRAMEBUFFER, e.framebuffer)
//                     }
//                     this.ctx.uniform4f(e.uniform.transform, 1, 1, 0, 0), this.ctx.clear(this.ctx.COLOR_BUFFER_BIT), this.ctx.clearColor(0, 0, 0, 0), this.setTexture(e.texture), this.ctx.drawArrays(this.ctx.TRIANGLES, 0, 6), this.drawShader++, this.currentFramebufferIndex ^= 1, this.getError()
//                 }, this.setTexture = e => {
//                     let t = -1;
//                     e.forEach((function(e, n) {
//                         if (this.ctx.activeTexture(this.ctx.TEXTURE0 + n), 0 === n && 0 === this.drawShader) this.ctx.bindTexture(this.ctx.TEXTURE_2D, this.sourceTexture.texture);
//                         else if (0 === n) {
//                             let e = 1 ^ this.currentFramebufferIndex,
//                                 t = this.getTempFramebuffer(e);
//                             this.ctx.bindTexture(this.ctx.TEXTURE_2D, t.texture)
//                         } else this.ctx.bindTexture(this.ctx.TEXTURE_2D, e.texture);
//                         t = Math.max(t, n)
//                     }), this);
//                     for (let n = t + 1; n <= this.lastTextureSlot; ++n) this.ctx.activeTexture(this.ctx.TEXTURE0 + n), this.ctx.bindTexture(this.ctx.TEXTURE_2D, null);
//                     this.lastTextureSlot = t
//                 }, this.cleanUp = () => {
//                     this.sourceTexture = null, this.canvas = null, this.ctx = null
//                 }, this.compileShader = (e, t = this.VERTEX_IDENTITY) => {
//                     let n = new pe(this.ctx, t, e);
//                     var i = Float32Array.BYTES_PER_ELEMENT;
//                     return this.ctx.enableVertexAttribArray(n.attribute.apos), this.ctx.vertexAttribPointer(n.attribute.apos, 2, this.ctx.FLOAT, !1, 4 * i, 0 * i), this.ctx.enableVertexAttribArray(n.attribute.auv), this.ctx.vertexAttribPointer(n.attribute.auv, 2, this.ctx.FLOAT, !1, 4 * i, 2 * i), n
//                 }, this.VERTEX_IDENTITY = "\n        precision highp float;\n        attribute vec2 apos;\n        attribute vec2 auv;\n        varying vec2 uv;\n        uniform vec4 transform;\n\n        void main(void) {\n            uv = auv;\n            gl_Position = vec4(apos.x * transform.x + transform.z, apos.y * transform.y + transform.w, 0.0, 1.0);\n        }", this.FRAGMENT_IDENTITY = "\n        precision highp float;\n        varying vec2 uv;\n        uniform sampler2D texture;\n\n        void main(void) {\n            gl_FragColor = texture2D(texture, uv);\n        }", this.GAUSSKERN_MAX = 15, this.cloneChain = () => {
//                     var e, t, n;
//                     const i = [];
//                     for (let a = 0; a < this.chain.length; a++) {
//                         const s = this.chain[a];
//                         let r;
//                         switch (s.type) {
//                             case "curves":
//                                 {
//                                     const e = s.value,
//                                         t = e.rgb.map((e => e.clone())),
//                                         n = e.red.map((e => e.clone())),
//                                         i = e.green.map((e => e.clone())),
//                                         a = e.blue.map((e => e.clone()));r = new Me(e.scale, t, n, i, a);
//                                     break
//                                 }
//                             case "levels":
//                                 {
//                                     const e = s.value;r = new ye(e.minin, e.maxin, e.minout, e.maxout, e.midin, e.mid);
//                                     break
//                                 }
//                             case "toning":
//                                 {
//                                     const i = s.value;r = new _e(null === (e = i.highlight) || void 0 === e ? void 0 : e.clone(), null === (t = i.midtone) || void 0 === t ? void 0 : t.clone(), null === (n = i.shadow) || void 0 === n ? void 0 : n.clone(), i.amount);
//                                     break
//                                 }
//                             case "fill":
//                                 {
//                                     const e = s.value;r = new fe(e.color.clone(), e.blend, e.amount);
//                                     break
//                                 }
//                             default:
//                                 r = s.value
//                         }
//                         i.push(new ke(s.type, r))
//                     }
//                     return i
//                 }, this.chain = e || [], this.compiledProgram = new Map, this.canvas = (0, m.vL)(100, 100), this.initContext(), this.canvas.addEventListener("webglcontextlost", this.handleContextLost, !1)
//             }
//             initContext() {
//                 this.ctx = this.canvas.getContext("webgl", {
//                     alpha: !0,
//                     premultipliedAlpha: !1,
//                     depth: !1,
//                     stencil: !1,
//                     antialias: !1
//                 }), this.ctx || (this.canvas = (0, m.vL)(100, 100), this.ctx = this.canvas.getContext("webgl"), (0, x.Z)("weg-gl-pre-error")), this.ctx || (console.log("Could not get shaders webgl canvas context!"), (0, x.Z)("weg-gl-error"))
//             }
//             bevel(e) {
//                 let t = this.compiledProgram.get("bevel");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n\n                varying vec2 uv;\n                \n                uniform float zeroPoint;\n                uniform vec3 lightNormal;\n                uniform float dz;\n                uniform float size;\n\n                uniform vec4 lowColor;\n                uniform vec4 highColor;\n                \n                uniform sampler2D dist;\n                uniform sampler2D texture;\n                uniform vec2 px;\n\n                vec4 straightBlend(vec4 src, vec4 dst) {\n                    float alpha = src.a + dst.a * (1.0 - src.a);\n\n                    return vec4(\n                        ((src.rgb * src.a) + (dst.rgb * dst.a) * (1.0 - src.a)) / alpha,\n                        alpha\n                    );\n                }\n                \n                void main() {                    \n                    vec2 flipuv = vec2(uv.x, 1.0 - uv.y);\n                                         \n                    /* PER PIXEL OPS */\n                    float tl = clamp(0.0, size, texture2D(dist, flipuv + vec2(-px.x, -px.y)).a);\n                    float tm = clamp(0.0, size, texture2D(dist, flipuv + vec2(    0, -px.y)).a);\n                    float tr = clamp(0.0, size, texture2D(dist, flipuv + vec2( px.x, -px.y)).a);\n                \n                    float ml = clamp(0.0, size, texture2D(dist, flipuv + vec2(-px.x,     0)).a);\n                    float mr = clamp(0.0, size, texture2D(dist, flipuv + vec2( px.x,     0)).a);\n                \n                    float bl = clamp(0.0, size, texture2D(dist, flipuv + vec2(-px.x,  px.y)).a);\n                    float bm = clamp(0.0, size, texture2D(dist, flipuv + vec2(    0,  px.y)).a);\n                    float br = clamp(0.0, size, texture2D(dist, flipuv + vec2( px.x,  px.y)).a);\n                \n                    float dx = (tr + 2.0 * mr + br) - (tl + 2.0 * ml + bl);\n                    float dy = (bl + 2.0 * bm + br) - (tl + 2.0 * tm + tr);\n                \n                    vec3 surfaceNormal = vec3(dx, dy, dz);\n                    float norm = sqrt(dx*dx + dy*dy + dz*dz);\n                \n                    // Calculate incident light amount, range [-1, 0]\n                    float incidentLight = ((dot(surfaceNormal, lightNormal) / norm) - zeroPoint) - (1.0 - zeroPoint);\n                    \n                    vec4 slopes = mix(lowColor, highColor, 1.0 - abs(incidentLight));\n                    \n                    // Texture\n                    vec4 color = texture2D(texture, uv);\n\n                    // Bevel color, only use the the color where we need it\n                    float alpha = smoothstep(1e-5, dz + 8.0, distance(vec3(0.0,0.0,dz), surfaceNormal));\n                    vec4 bevelColor = vec4(slopes.rgb, slopes.a * alpha);\n\n                    gl_FragColor = straightBlend(\n                        bevelColor,\n                        color\n                    );\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("bevel", t)
//                 }
//                 this.ctx.useProgram(t.program);
//                 t.getTextureById("dist").setTexture(e.distanceMap);
//                 const n = Math.sin(e.lightElevation);
//                 this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform1f(t.uniform.zeroPoint, n), this.ctx.uniform3f(t.uniform.lightNormal, Math.cos(e.lightElevation) * -Math.cos(e.lightAngle), Math.cos(e.lightElevation) * -Math.sin(e.lightAngle), n), this.ctx.uniform4f(t.uniform.lowColor, e.lowLightColor.r / 255, e.lowLightColor.g / 255, e.lowLightColor.b / 255, e.lowOpacity), this.ctx.uniform4f(t.uniform.highColor, e.highLightColor.r / 255, e.highLightColor.g / 255, e.highLightColor.b / 255, e.highOpacity), this.ctx.uniform1f(t.uniform.dz, 1 / e.depth), this.ctx.uniform1f(t.uniform.size, e.size), this.draw(t)
//             }
//             stroke(e) {
//                 const t = "stroke" + (e.cutout ? "-cutout" : "");
//                 let n = this.compiledProgram.get(t);
//                 if (!n) {
//                     let i = `\n                precision highp float;\n\n                #define CUTOUT ${e.cutout?1:0}\n\n                varying vec2 uv;\n                \n                uniform sampler2D texture;\n                uniform sampler2D distanceMap;\n                            \n                uniform vec4 glowColor;\n                uniform float size;\n\n                vec4 straightBlend(vec4 src, vec4 dst) {\n                    float alpha = src.a + dst.a * (1.0 - src.a);\n\n                    return vec4(\n                        ((src.rgb * src.a) + (dst.rgb * dst.a) * (1.0 - src.a)) / alpha,\n                        alpha\n                    );\n                }\n\n                void main(void) {           \n                    vec2 flipped = vec2(uv.x, 1.0 - uv.y);\n\n                    float distance = texture2D(distanceMap, flipped).a;\n                    float gAlpha = 1.0-smoothstep(size - 3.0, size, distance);\n\n                    vec4 gColor = vec4(\n                        glowColor.rgb, \n                        gAlpha * glowColor.a\n                    );\n\n                    vec4 texColor = texture2D(texture, uv);\n\n                    #if CUTOUT == 1\n                        vec4 tran = vec4(0);\n                        gl_FragColor = mix(gColor, tran, texColor.a);\n                    #else\n                        gl_FragColor = straightBlend(texColor, gColor);                    \n                    #endif\n                }\n            `;
//                     n = this.compileShader(i), this.compiledProgram.set(t, n)
//                 }
//                 this.ctx.useProgram(n.program), this.ctx.uniform4f(n.uniform.glowColor, e.color.r / 255, e.color.g / 255, e.color.b / 255, e.opacity);
//                 n.getTextureById("distanceMap").setTexture(e.distanceMap), this.ctx.uniform1f(n.uniform.size, e.size), this.draw(n)
//             }
//             innerGlow(e) {
//                 let t = this.compiledProgram.get("innerglow");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                \n                uniform sampler2D texture;\n                uniform sampler2D distanceMap;\n                            \n                uniform vec4 glowColor;\n                uniform float size;\n                uniform float feather;\n\n                void main(void) {           \n                    vec2 flipped = vec2(uv.x, 1.0 - uv.y);\n\n                    float distance = texture2D(distanceMap, flipped).a;\n                    float balance = 1.0-smoothstep(size * (1.0-feather), size, distance);\n\n                    vec4 texColor = texture2D(texture, uv);\n\n                    vec4 gColor = vec4(\n                        glowColor.rgb, \n                        texColor.a\n                    );\n                       \n                    gl_FragColor = mix(texColor, gColor, balance * glowColor.a);\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("innerglow", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform4f(t.uniform.glowColor, e.color.r / 255, e.color.g / 255, e.color.b / 255, e.opacity);
//                 t.getTextureById("distanceMap").setTexture(e.distanceMap), this.ctx.uniform1f(t.uniform.size, e.size), this.ctx.uniform1f(t.uniform.feather, e.feather), this.draw(t)
//             }
//             outerGlow(e) {
//                 let t = this.compiledProgram.get("outerglow");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                \n                uniform sampler2D texture;\n                uniform sampler2D distanceMap;\n                            \n                uniform vec4 glowColor;\n                uniform float size;\n                uniform float feather;\n\n                vec4 straightBlend(vec4 src, vec4 dst) {\n                    float alpha = src.a + dst.a * (1.0 - src.a);\n\n                    return vec4(\n                        ((src.rgb * src.a) + (dst.rgb * dst.a) * (1.0 - src.a)) / alpha,\n                        alpha\n                    );\n                }\n                \n                void main(void) {           \n                    vec2 flipped = vec2(uv.x, 1.0 - uv.y);\n\n                    float distance = texture2D(distanceMap, flipped).a;\n                    float gAlpha = 1.0-smoothstep(size * (1.0-feather), size, distance);\n\n                    vec4 gColor = vec4(\n                        glowColor.rgb, \n                        gAlpha * glowColor.a\n                    );\n\n                    vec4 texColor = texture2D(texture, uv);\n                    \n                    gl_FragColor = straightBlend(texColor, gColor);                    \n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("outerglow", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform4f(t.uniform.glowColor, e.color.r / 255, e.color.g / 255, e.color.b / 255, e.opacity);
//                 t.getTextureById("distanceMap").setTexture(e.distanceMap), this.ctx.uniform1f(t.uniform.size, e.size), this.ctx.uniform1f(t.uniform.feather, e.feather), this.draw(t)
//             }
//             sobel() {
//                 let e = this.compiledProgram.get("sobel");
//                 if (!e) {
//                     let t = "\n                precision mediump float;\n\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 px;\n\n                uniform float m[3];\n                #define M_PI 3.1415926535897932384626433832795\n                #define GET_PIXEL(x,y) (texture2D(texture, uv + px*vec2(x,y)))\n\n                void main() {\n\n                    float dx = (length(GET_PIXEL(-1, -1)*m[0] +\n                                GET_PIXEL(-1,  0)*m[1] +\n                                GET_PIXEL(-1, +1)*m[2]) -\n                            length(GET_PIXEL(+1, -1)*m[0] +\n                                GET_PIXEL(+1,  0)*m[1] +\n                                GET_PIXEL(+1, +1)*m[2]));\n\n                    float dy = (length(GET_PIXEL(-1, -1)*m[0] +\n                                GET_PIXEL(0, -1)*m[1] +\n                                GET_PIXEL(+1, -1)*m[2]) -\n                            length(GET_PIXEL(-1, +1)*m[0] +\n                                GET_PIXEL(0, +1)*m[1] +\n                                GET_PIXEL(+1, +1)*m[2]));\n\n                    float theta = (atan(dy, dx) + M_PI) / (2.0*M_PI);\n\n                    gl_FragColor = vec4(length(vec2(dx, dy)), theta, 0.0, 1.0);\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("sobel", e)
//                 }
//                 if (this.ctx.useProgram(e.program), this.ctx.uniform2f(e.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform1fv(e.uniform.m, [1, 2, 1]), this.draw(e, !0), e = this.compiledProgram.get("sobelNMS"), !e) {
//                     let t = "\n                precision mediump float;\n\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 px;\n\n                #define M_PI 3.1415926535897932384626433832795\n\n                void main() {\n                    vec4 cc = texture2D(texture, uv);  \n                    float theta = degrees(cc.y*M_PI*2.0); \n                    int ax = 0, ay = 0; \n                    if ((theta >= 337.5) || (theta < 22.5)) { ax = 1; ay = 0; } \n                    else if ((theta >= 22.5) && (theta < 67.5)) { ax = 1; ay = 1; } \n                    else if ((theta >= 67.5) && (theta < 112.5)) { ax = 0; ay = 1; } \n                    else if ((theta >= 112.5) && (theta < 157.5)) { ax =-1; ay = 1; } \n                    else if ((theta >= 157.5) && (theta < 202.5)) { ax =-1; ay = 0; } \n                    else if ((theta >=202.5) && (theta < 247.5)) { ax =-1; ay =-1; } \n                    else if ((theta >=247.5) && (theta < 292.5)) { ax = 0; ay =-1; } \n                    else if ((theta >= 292.5) && (theta < 337.5)) { ax = 1; ay =-1; }\n                \n                    vec4 ca = texture2D(texture, uv + px*vec2(ax, ay));\n                    vec4 cb = texture2D(texture, uv + px*vec2(-ax, -ay));\n                    gl_FragColor = vec4((((cc.x <= ca.x) || (cc.x < cb.x)) ? vec3(0) : vec3(cc.x)), 1.0);\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("sobelNMS", e)
//                 }
//                 this.ctx.useProgram(e.program), this.ctx.uniform2f(e.uniform.px, 1 / this.width, 1 / this.height), this.draw(e)
//             }
//             vibrance(e) {
//                 let t = this.compiledProgram.get("vibrance");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n\n                    vec4 col = texture2D(texture, uv.xy);\n                    vec3 color = col.rgb;\n                \n                    float luminance = color.r*0.299 + color.g*0.587 + color.b*0.114;\n                    float mn = min(min(color.r, color.g), color.b);\n                    float mx = max(max(color.r, color.g), color.b);\n                    float sat = (1.0-(mx - mn)) * (1.0-mx) * luminance * 5.0;\n                    vec3 lightness = vec3((mn + mx)/2.0);\n                \n                    // vibrance\n                    color = mix(color, mix(color, lightness, -amount), sat);\n                \n                    // negative vibrance\n                    gl_FragColor = vec4(mix(color, lightness, (1.0-lightness)*(1.0-amount)/2.0*abs(amount)), col.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("vibrance", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             brightness(e) {
//                 let t;
//                 if (e > 0) {
//                     if (t = this.compiledProgram.get("brightness-up"), !t) {
//                         let e = "\n                    precision highp float;\n                    varying vec2 uv;\n                    uniform sampler2D texture;\n                    uniform float amount;\n\n                    #define PI 3.1415926535897932384626433832795\n\n                    void main() {\n                        vec4 color = texture2D(texture, uv);\n\n                        color.r = color.r + amount * sin(color.r * PI);\n                        color.g = color.g + amount * sin(color.g * PI);\n                        color.b = color.b + amount * sin(color.b * PI);\n\n                        gl_FragColor = color;\n                    }";
//                         t = this.compileShader(e), this.compiledProgram.set("brightness-up", t)
//                     }
//                 } else if (t = this.compiledProgram.get("brightness-down"), !t) {
//                     let e = "\n                    precision highp float;\n                    varying vec2 uv;\n                    uniform sampler2D texture;\n                    uniform float amount;\n\n                    void main() {\n                        vec4 color = texture2D(texture, uv);\n     \n                        color.r = (1.0 + amount) * color.r;\n                        color.g = (1.0 + amount) * color.g;\n                        color.b = (1.0 + amount) * color.b;\n\n                        gl_FragColor = color;\n                    }";
//                     t = this.compileShader(e), this.compiledProgram.set("brightness-down", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e > 0 ? .35 * e : .75 * e), this.draw(t)
//             }
//             bwpoint(e) {
//                 let t = this.compiledProgram.get("bwpoint");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                uniform float white;\n                uniform float black;\n\n                void main() {\n\n                    float bval = black / 255.0;\n                    float wval = (255.0 / (white - black));\n                \n                    vec3 color = texture2D(texture, uv).rgb;\n                    color = color * wval - (bval *  wval);\n\n                    gl_FragColor = vec4(color, texture2D(texture, uv).a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("bwpoint", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.black, e.black), this.ctx.uniform1f(t.uniform.white, e.white), this.draw(t)
//             }
//             dealiasing() {
//                 let e = this.compiledProgram.get("dealiasing");
//                 if (!e) {
//                     let t = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    color.a = (color.a < 0.25) ? 0.0 : 1.0;\n                    gl_FragColor = color;\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("dealiasing", e)
//                 }
//                 this.ctx.useProgram(e.program), this.draw(e)
//             }
//             alphaInvert() {
//                 let e = this.compiledProgram.get("alpha-invert");
//                 if (!e) {
//                     let t = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    color.a = 1.0 - color.a;\n                    gl_FragColor = color;\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("alpha-invert", e)
//                 }
//                 this.ctx.useProgram(e.program), this.draw(e)
//             }
//             alphaMask() {
//                 let e = this.compiledProgram.get("alpha-mask");
//                 if (!e) {
//                     let t = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                void main() {\n                    gl_FragColor = vec4(0,0,0, texture2D(texture, uv).a);\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("alpha-mask", e)
//                 }
//                 this.ctx.useProgram(e.program), this.draw(e)
//             }
//             alphaShiftMask() {
//                 let e = this.compiledProgram.get("alpha-shift-mask");
//                 if (!e) {
//                     let t = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                void main() {\n                    gl_FragColor = vec4(0,0,0, texture2D(texture, uv).r);\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("alpha-shift-mask", e)
//                 }
//                 this.ctx.useProgram(e.program), this.draw(e)
//             }
//             alphaReset() {
//                 let e = this.compiledProgram.get("alpha-reset");
//                 if (!e) {
//                     let t = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    gl_FragColor = vec4(color.rgb, 1.0);\n                }";
//                     e = this.compileShader(t), this.compiledProgram.set("alpha-reset", e)
//                 }
//                 this.ctx.useProgram(e.program), this.draw(e)
//             }
//             border(e) {
//                 let t = this.compiledProgram.get("border");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n\n                uniform sampler2D texture;\n                uniform float size;\n                uniform vec4 color;\n                uniform vec2 screen;\n                uniform vec2 px;\n\n                void main() {\n                    vec4 pixel = texture2D(texture, uv);\n\n                    if(uv.y <= size*px.y || uv.y >= (screen.y-size)*px.y ||\n                       uv.x <= size*px.x || uv.x >= (screen.x-size)*px.x) {\n                        gl_FragColor = color;\n                    } else {\n                        gl_FragColor = pixel;\n                    }\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("border", t)
//                 }
//                 let n = Math.round((this.width + this.height) / 2 * e.size);
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.size, n), this.ctx.uniform2f(t.uniform.screen, this.width, this.height), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform4f(t.uniform.color, e.color.r / 255, e.color.g / 255, e.color.b / 255, 1), this.draw(t)
//             }
//             balance(e) {
//                 let t = this.compiledProgram.get("balance");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                uniform float sr;\n                uniform float sg;\n                uniform float sb;\n                uniform float mr;\n                uniform float mg;\n                uniform float mb;\n                uniform float hr;\n                uniform float hg;\n                uniform float hb;\n                uniform float preserve;\n\n                #define PI 3.1415926535897932384626433832795\n\n                float Lum(vec4 c){\n                    return 0.299*c.r + 0.587*c.g + 0.114*c.b;\n                }\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    \n                    float olum = Lum(color);\n\n                    //highlight\n                    color.r = clamp(color.r + (hr * (exp(color.r) - 1.0)), 0.0, 1.0);\n                    color.g = clamp(color.g + (hg * (exp(color.g) - 1.0)), 0.0, 1.0);\n                    color.b = clamp(color.b + (hb * (exp(color.b) - 1.0)), 0.0, 1.0);\n\n                    //midtone\n                    color.r = clamp(color.r + (mr * 0.25) * sin(color.r * PI), 0.0, 1.0);\n                    color.g = clamp(color.g + (mg * 0.25) * sin(color.g * PI), 0.0, 1.0);\n                    color.b = clamp(color.b + (mb * 0.25) * sin(color.b * PI), 0.0, 1.0);\n\n                    //shadow\n                    color.r = clamp((1.0 - sr * 0.5) * color.r + (1.0 - (1.0 - sr * 0.5)), 0.0, 1.0);\n                    color.g = clamp((1.0 - sg * 0.5) * color.g + (1.0 - (1.0 - sg * 0.5)), 0.0, 1.0);\n                    color.b = clamp((1.0 - sb * 0.5) * color.b + (1.0 - (1.0 - sb * 0.5)), 0.0, 1.0);\n                    \n                    if(preserve == 1.0) {\n                        float nlum = Lum(color);\n                        color.rgb = color.rgb * (olum/nlum);\n                    }\n\n                    gl_FragColor = color;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("balance", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.sr, e.shadowRed), this.ctx.uniform1f(t.uniform.sg, e.shadowGreen), this.ctx.uniform1f(t.uniform.sb, e.shadowBlue), this.ctx.uniform1f(t.uniform.mr, e.midtoneRed), this.ctx.uniform1f(t.uniform.mg, e.midtoneGreen), this.ctx.uniform1f(t.uniform.mb, e.midtoneBlue), this.ctx.uniform1f(t.uniform.hr, e.highlightRed), this.ctx.uniform1f(t.uniform.hg, e.highlightGreen), this.ctx.uniform1f(t.uniform.hb, e.highlightBlue), this.ctx.uniform1f(t.uniform.preserve, Number(e.preserve)), this.draw(t)
//             }
//             temperature(e) {
//                 let t = this.compiledProgram.get("temperature");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    color.r = clamp(color.r + amount, 0.0, 1.0);\n                    color.b = clamp(color.b - amount, 0.0, 1.0);\n                    gl_FragColor = color;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("temperature", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e / 6), this.draw(t)
//             }
//             tint(e) {
//                 let t = this.compiledProgram.get("tint");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    color.g = clamp(color.g + amount, 0.0, 1.0);\n                    gl_FragColor = color;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("tint", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e / 6), this.draw(t)
//             }
//             threshold(e) {
//                 let t = this.compiledProgram.get("threshold");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    float value = (color.r + color.g + color.b) / 3.0 < amount ? 0.0 : 1.0;\n                    gl_FragColor = vec4(value, value, value, color.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("threshold", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             noise(e) {
//                 let t = this.compiledProgram.get("noise");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                float random(vec2 p) {\n                    vec2 r = vec2(23.14069263277926,2.665144142690225);\n                    return fract(cos(mod(12345678.,256. * dot(p,r))));\n                }\n\n                void main() {\n                    vec4 color = texture2D(texture, uv);\n                    float noise = (random(uv) -0.5)*amount;\n\n                    gl_FragColor = vec4(color.r+noise, color.g+noise, color.b+noise, color.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("noise", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             halftone(e) {
//                 let t = this.compiledProgram.get("halftone");
//                 if (!t) {
//                     this.ctx.getExtension("OES_standard_derivatives");
//                     let e = "\n                #ifdef GL_OES_standard_derivatives\n                #extension GL_OES_standard_derivatives : enable\n                #endif\n\n                precision highp float;                \n\n                uniform sampler2D texture;\n                uniform vec2 size;\n                uniform float frequency;\n  \n                varying vec2 uv; // Texcoords\n\n                float aastep(float threshold, float value) {\n                #ifdef GL_OES_standard_derivatives\n                    float afwidth = 0.7 * length(vec2(dFdx(value), dFdy(value)));\n                #else\n                    float afwidth = frequency * (1.0/size.x);\n                #endif\n                    return smoothstep(threshold-afwidth, threshold+afwidth, value);\n                }\n\n                // Explicit bilinear texture lookup to circumvent bad hardware precision.\n                // The extra arguments specify the dimension of the texture. (GLSL 1.30\n                // introduced textureSize() to get that information from the sampler.)\n                // 'dims' is the width and height of the texture, 'one' is 1.0/dims.\n                // (Precomputing 'one' saves two divisions for each lookup.)\n                vec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\n                    vec2 uv = st * dims;\n                    vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\n                    vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\n                    vec2 st00 = (uv00 + vec2(0.5)) * one;\n                    vec4 texel00 = texture2D(tex, st00);\n                    vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\n                    vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\n                    vec4 texel11 = texture2D(tex, st00 + one);\n                    vec4 texel0 = mix(texel00, texel01, uvlerp.y); \n                    vec4 texel1 = mix(texel10, texel11, uvlerp.y); \n                    return mix(texel0, texel1, uvlerp.x);\n                }\n\n                vec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n                vec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\n                vec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\n                \n                float snoise(vec2 v) {\n                    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                                        -0.577350269189626,  // -1.0 + 2.0 * C.x\n                                        0.024390243902439); // 1.0 / 41.0\n                    // First corner\n                    vec2 i = floor(v + dot(v, C.yy) );\n                    vec2 x0 = v - i + dot(i, C.xx);\n                    // Other corners\n                    vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n                    vec4 x12 = x0.xyxy + C.xxzz;\n                    x12.xy -= i1;\n                    // Permutations\n                    i = mod289(i); // Avoid truncation effects in permutation\n                    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                                            + i.x + vec3(0.0, i1.x, 1.0 ));\n                    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\n                                            dot(x12.zw,x12.zw)), 0.0);\n                    m = m*m; m = m*m;\n                    // Gradients\n                    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n                    vec3 h = abs(x) - 0.5;\n                    vec3 a0 = x - floor(x + 0.5);\n                    // Normalise gradients implicitly by scaling m\n                    m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\n                    // Compute final noise value at P\n                    vec3 g;\n                    g.x = a0.x * x0.x + h.x * x0.y;\n                    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n                    return 130.0 * dot(m, g);\n                }\n                \n                void main() {\n                    // Correct UVs for aspect ratio so we get round balls not squished\n                    vec2 auv = uv;\n                    auv.x *= size.x / size.y;\n\n                    vec3 color = texture2D_bilinear(texture, uv, size, 1.0 / size).rgb;\n\n                    float n = 0.1*snoise(auv*200.0); // Fractal noise\n                    n += 0.05*snoise(auv*400.0);\n                    n += 0.025*snoise(auv*800.0);\n\n                    vec3 white = vec3(n*0.2 + 0.97);\n                    vec3 black = vec3(n + 0.1);\n\n                    // Perform a rough RGB-to-CMYK conversion\n                    vec4 cmyk;\n                    cmyk.xyz = 1.0 - color;\n                    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z)); // Create K\n                    cmyk.xyz -= cmyk.w; // Subtract K equivalent from CMY\n                \n                    // Distance to nearest point in a grid of\n                    // (frequency x frequency) points over the unit square\n                    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*auv;\n                    vec2 Kuv = 2.0*fract(Kst)-1.0;\n                    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\n                    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*auv;\n                    vec2 Cuv = 2.0*fract(Cst)-1.0;\n                    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\n                    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*auv;\n                    vec2 Muv = 2.0*fract(Mst)-1.0;\n                    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\n                    vec2 Yst = frequency*auv; // 0 deg\n                    vec2 Yuv = 2.0*fract(Yst)-1.0;\n                    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\n                \n                    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\n                    rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\n                \n                    #ifdef GL_OES_standard_derivatives\n                        float afwidth = 2.0 * frequency * max(length(dFdx(uv)), length(dFdy(uv)));\n                    #else\n                        float afwidth = frequency * (1.0/size.x);\n                    #endif\n                    \n                    float blend = smoothstep(0.7, 1.4, afwidth); \n                    gl_FragColor = vec4(mix(rgbscreen, color, blend), 1.0);\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("halftone", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.size, this.width, this.height), this.ctx.uniform1f(t.uniform.frequency, Math.round(100 * e)), this.draw(t)
//             }
//             vignette(e) {
//                 let t = this.compiledProgram.get(e < 0 ? "vignette-white" : "vignette-black");
//                 if (!t) {
//                     let n = ["precision highp float;", "varying vec2 uv;", "uniform sampler2D texture;", "uniform float amount;", "uniform float size;", "void main() {", "vec4 color = texture2D(texture, uv);", "float dist = distance(uv, vec2(0.5, 0.5));", "float grd = smoothstep(0.8, size * 0.799, dist * (amount*0.6 + size*2.0));", "color.rgb += vec3(1.0, 1.0, 1.0) * (1.0 - grd);", "gl_FragColor = color;", "}"].join("\n"),
//                         i = ["precision highp float;", "varying vec2 uv;", "uniform sampler2D texture;", "uniform float amount;", "uniform float size;", "void main() {", "vec4 color = texture2D(texture, uv);", "float dist = distance(uv, vec2(0.5, 0.5));", "color.rgb *= smoothstep(0.8, size * 0.799, dist * (amount*0.75 + size*2.0));", "gl_FragColor = color;", "}"].join("\n");
//                     t = this.compileShader(e < 0 ? n : i), this.compiledProgram.set(e < 0 ? "vignette-white" : "vignette-black", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.size, .25), this.ctx.uniform1f(t.uniform.amount, e < 0 ? -1 * e : e), this.draw(t)
//             }
//             grain(e) {
//                 let t = this.compiledProgram.get("grain");
//                 if (!t) {
//                     let e = ["precision highp float;", "uniform sampler2D texture;", "varying vec2 uv;", "uniform float width;", "uniform float height;", "uniform float grainamount;", "uniform float timer;", "const float permTexUnit = 1.0/256.0;", "const float permTexUnitHalf = 0.5/256.0;", "float grainsize = 1.8;", "float lumamount = 1.0;", "vec4 rnm(in vec2 tc)", "{", "float noise =  sin(dot(tc + vec2(timer,timer),vec2(12.9898,78.233))) * 43758.5453;", "float noiseR =  fract(noise)*2.0-1.0;", "float noiseG =  fract(noise*1.2154)*2.0-1.0; ", "float noiseB =  fract(noise*1.3453)*2.0-1.0;", "float noiseA =  fract(noise*1.3647)*2.0-1.0;", "return vec4(noiseR,noiseG,noiseB,noiseA);", "}", "float fade(in float t) {", "return t*t*t*(t*(t*6.0-15.0)+10.0);", "}", "float pnoise3D(in vec3 p)", "{", "vec3 pi = permTexUnit*floor(p)+permTexUnitHalf;", "vec3 pf = fract(p);", "float perm00 = rnm(pi.xy).a ;", "vec3  grad000 = rnm(vec2(perm00, pi.z)).rgb * 4.0 - 1.0;", "float n000 = dot(grad000, pf);", "vec3  grad001 = rnm(vec2(perm00, pi.z + permTexUnit)).rgb * 4.0 - 1.0;", "float n001 = dot(grad001, pf - vec3(0.0, 0.0, 1.0));", "float perm01 = rnm(pi.xy + vec2(0.0, permTexUnit)).a ;", "vec3  grad010 = rnm(vec2(perm01, pi.z)).rgb * 4.0 - 1.0;", "float n010 = dot(grad010, pf - vec3(0.0, 1.0, 0.0));", "vec3  grad011 = rnm(vec2(perm01, pi.z + permTexUnit)).rgb * 4.0 - 1.0;", "float n011 = dot(grad011, pf - vec3(0.0, 1.0, 1.0));", "float perm10 = rnm(pi.xy + vec2(permTexUnit, 0.0)).a ;", "vec3  grad100 = rnm(vec2(perm10, pi.z)).rgb * 4.0 - 1.0;", "float n100 = dot(grad100, pf - vec3(1.0, 0.0, 0.0));", "vec3  grad101 = rnm(vec2(perm10, pi.z + permTexUnit)).rgb * 4.0 - 1.0;", "float n101 = dot(grad101, pf - vec3(1.0, 0.0, 1.0));", "float perm11 = rnm(pi.xy + vec2(permTexUnit, permTexUnit)).a ;", "vec3  grad110 = rnm(vec2(perm11, pi.z)).rgb * 4.0 - 1.0;", "float n110 = dot(grad110, pf - vec3(1.0, 1.0, 0.0));", "vec3  grad111 = rnm(vec2(perm11, pi.z + permTexUnit)).rgb * 4.0 - 1.0;", "float n111 = dot(grad111, pf - vec3(1.0, 1.0, 1.0));", "vec4 n_x = mix(vec4(n000, n001, n010, n011), vec4(n100, n101, n110, n111), fade(pf.x));", "vec2 n_xy = mix(n_x.xy, n_x.zw, fade(pf.y));", "float n_xyz = mix(n_xy.x, n_xy.y, fade(pf.z));", "return n_xyz;", "}", "vec2 coordRot(in vec2 tc, in float angle)", "{", "float aspect = width/height;", "float rotX = ((tc.x*2.0-1.0)*aspect*cos(angle)) - ((tc.y*2.0-1.0)*sin(angle));", "float rotY = ((tc.y*2.0-1.0)*cos(angle)) + ((tc.x*2.0-1.0)*aspect*sin(angle));", "rotX = ((rotX/aspect)*0.5+0.5);", "rotY = rotY*0.5+0.5;", "return vec2(rotX,rotY);", "}", "void main() ", "{", "vec3 rotOffset = vec3(1.425,3.892,5.835);", "vec2 rotCoordsR = coordRot(uv, timer + rotOffset.x);", "vec3 noise = vec3(pnoise3D(vec3(rotCoordsR*vec2(width/grainsize,height/grainsize),0.0)));", "vec4 tex = texture2D(texture, uv);", "vec3 col = tex.rgb;", "vec3 lumcoeff = vec3(0.299,0.587,0.114);", "float luminance = mix(0.0,dot(col, lumcoeff),lumamount);", "float lum = smoothstep(0.2,0.0,luminance);", "lum += luminance;", "noise = mix(noise,vec3(0.0),pow(lum,4.0));", "col = col+noise*grainamount;", "gl_FragColor =  vec4(col, tex.w);", "}"].join("\n");
//                     t = this.compileShader(e), this.compiledProgram.set("grain", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.width, this.width), this.ctx.uniform1f(t.uniform.height, this.height), this.ctx.uniform1f(t.uniform.grainamount, e / 10), this.draw(t)
//             }
//             sharpen(e) {
//                 let t = this.compiledProgram.get("sharpen");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 px;\n                uniform float m[9];\n                uniform float amount;\n\n                void main(void) {\n                    vec4 c11 = texture2D(texture, uv - px); // top left\n                    vec4 c12 = texture2D(texture, vec2(uv.x, uv.y - px.y)); // top center\n                    vec4 c13 = texture2D(texture, vec2(uv.x + px.x, uv.y - px.y)); // top right\n\n                    vec4 c21 = texture2D(texture, vec2(uv.x - px.x, uv.y) ); // mid left\n                    vec4 c22 = texture2D(texture, uv); // mid center\n                    vec4 c23 = texture2D(texture, vec2(uv.x + px.x, uv.y) ); // mid right\n\n                    vec4 c31 = texture2D(texture, vec2(uv.x - px.x, uv.y + px.y) ); // bottom left\n                    vec4 c32 = texture2D(texture, vec2(uv.x, uv.y + px.y) ); // bottom center\n                    vec4 c33 = texture2D(texture, uv + px ); // bottom right\n\n                    vec4 color = \n                        c11 * m[0] + c12 * m[1] + c13 * m[2] +\n                        c21 * m[3] + c22 * m[4] + c23 * m[5] +\n                        c31 * m[6] + c32 * m[7] + c33 * m[8];\n\n                    gl_FragColor = color * amount + (c22 * (1.0 - amount));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("sharpen", t)
//                 }
//                 let n = new Float32Array([-1, -1, -1, -1, 9, -1, -1, -1, -1]);
//                 this.ctx.useProgram(t.program), this.ctx.uniform1fv(t.uniform.m, n), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform1f(t.uniform.amount, e / 2), this.draw(t)
//             }
//             blur(e, t = !1) {
//                 let n = this.compiledProgram.get("blur");
//                 if (!n) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 size;\n                float random(vec3 scale, float seed) {\n                    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n                }\n                void main() {\n                    vec4 color = vec4(0.0);\n                    float total = 0.0;\n                    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n                    for (float t = -30.0; t <= 30.0; t++) {\n                        float percent = (t + offset - 0.5) / 30.0;\n                        float weight = 1.0 - abs(percent);\n                        vec4 sample = texture2D(texture, uv + size * percent);\n                        sample.rgb *= sample.a;\n                        color += sample * weight;\n                        total += weight;\n                    }\n                    gl_FragColor = color / total;\n                    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n                }";
//                     n = this.compileShader(e), this.compiledProgram.set("blur", n)
//                 }
//                 let i = 40 * e / this.canvas.width,
//                     a = 40 * e / this.canvas.height;
//                 this.ctx.useProgram(n.program), this.ctx.uniform2f(n.uniform.size, 0, a), this.draw(n, !0), this.ctx.uniform2f(n.uniform.size, i, 0), this.draw(n, t)
//             }
//             zoom(e) {
//                 let t = this.compiledProgram.get("zoom");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n\n                uniform vec2 center;\n                uniform float amount;\n                uniform vec2 px;\n                \n                float random(vec3 scale, float seed) {\n                    /* use the fragment position for a different seed per-pixel */                    return fract(sin(dot(gl_FragCoord.xyz + seed, scale)) * 43758.5453 + seed);\n                }\n                void main() {\n                    vec4 color = vec4(0.0);\n                    float total = 0.0;\n                    vec2 toCenter = (center - uv) * px;\n                    \n                    /* randomize the lookup values to hide the fixed number of samples */\n                    float offset = random(vec3(12.9898, 78.233, 151.7182), 0.0);\n                    \n                    for (float t = 0.0; t <= 40.0; t++) {\n                        float percent = (t + offset) / 40.0;\n                        float weight = 4.0 * (percent - percent * percent);\n                        vec4 sample = texture2D(texture, uv + toCenter * percent * amount / px);\n                        \n                        /* switch to pre-multiplied alpha to correctly blur transparent images */\n                        sample.rgb *= sample.a;\n                        \n                        color += sample * weight;\n                        total += weight;\n                    }\n                    gl_FragColor = color / total;\n                    gl_FragColor.rgb /= gl_FragColor.a + 0.00001;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("zoom", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform2f(t.uniform.center, e.x, e.y), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.draw(t)
//             }
//             makeKernel(e) {
//                 const t = this.GAUSSKERN_MAX + Number(!(1 & this.GAUSSKERN_MAX)),
//                     n = Math.sqrt(2 * Math.PI) * e,
//                     i = 2 * e * e;
//                 var a, s, r = ~~(t / 2),
//                     o = new Float32Array(t);
//                 for (s = 0, a = -r; s < t; a++, s++) o[s] = Math.exp(-a * a / i) / n;
//                 return o
//             }
//             scaleKernel(e) {
//                 const t = e.reduce(((e, t) => e + t)) || 1;
//                 return e.map((e => e / t))
//             }
//             gaussian(e) {
//                 const t = this.makeKernel(10 * e),
//                     n = t.length + Number(!(1 & t.length));
//                 let i = this.compiledProgram.get(`guass-${n}`);
//                 if (!i) {
//                     let e = `\n                precision mediump float;\n                #define KERNEL_SIZE ${n}\n                #define KERNEL_HALF KERNEL_SIZE / 2\n                // our texture\n                varying vec2 uv;\n                uniform vec2 px;\n                uniform sampler2D texture;\n                uniform float kernel[KERNEL_SIZE];\n                void main() {\n                    vec4 result = vec4(0.0);\n                    for (int i = 0; i < KERNEL_SIZE; i++) {\n                        result += texture2D(texture, uv + px*vec2(i - KERNEL_HALF))*kernel[i];\n                    }\n                    gl_FragColor = result;\n                }\n            `;
//                     i = this.compileShader(e), this.compiledProgram.set(`guass-${n}`, i)
//                 }
//                 this.ctx.useProgram(i.program), this.ctx.uniform2f(i.uniform.px, 0, 1 / this.height), this.ctx.uniform1fv(i.uniform.kernel, this.scaleKernel(t)), this.draw(i, !0), this.ctx.uniform2f(i.uniform.px, 1 / this.width, 0), this.draw(i)
//             }
//             radial(e) {
//                 let t = this.compiledProgram.get("radial");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                const float PI = 3.1415926535897932384626433832795;\n                const float samples = 100.;\n\n                uniform sampler2D texture;\n\n                varying vec2 uv;\n                uniform vec2 center;\n                uniform vec2 resolution;\n\n                uniform float amount;\n                uniform int direction;\n                uniform int symmetry;\n               \n                mat2 rotate2d(float _angle){\n                    return mat2(cos(_angle),-sin(_angle),\n                                sin(_angle),cos(_angle));\n                }\n\n                vec2 rotateUV(vec2 uv, mat2 transform, vec2 centerc) {\n                    uv -= centerc;\n                    uv = transform * uv;\n                    uv += centerc;\n                    return uv;\n                }\n             \n                void main(void) {\n                    float ar = resolution.x / resolution.y;\n                    vec2 uvc = uv;\n                    vec2 centerc = center;\n\n                    if (symmetry == 1)\n                    {\n                        if (resolution.x > resolution.y) {\n                            centerc.y /= ar;\n                            uvc.y /= ar;\n                        }\n                        else {\n                            centerc.x *= ar;\n                            uvc.x *= ar;\n                        }\n                    }\n\n                    vec2 coordcw = uvc;\n                    vec2 coordccw = uvc;\n                    vec4 FragColor = vec4(0.0, 0.0, 0.0, 0.0);\n                    vec2 toCenter = uvc - centerc;\n                    float endsamples = 0.;\n\n                    float a = amount / samples;\n\n                    mat2 matcw = rotate2d(-a * PI / 180.);\n                    mat2 matccw = rotate2d(a * PI / 180.);\n\n                    for (float i = 0.; i < samples; i+=1.) {\n                        if (direction == 1 || direction == 2) {\n                            coordccw = rotateUV(coordccw, matccw, centerc);\n                            FragColor += texture2D(texture, coordccw);\n                            endsamples += 1.;\n                        }\n\n                        if (direction == 0 || direction == 2) {\n                            coordcw = rotateUV(coordcw, matcw, centerc);\n                            FragColor += texture2D(texture, coordcw);\n                            endsamples += 1.;\n                        }\n                    }\n                    FragColor /= endsamples;\n                    gl_FragColor = FragColor;\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("radial", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, 180 * e.amount), this.ctx.uniform2f(t.uniform.center, e.x, e.y), this.ctx.uniform1i(t.uniform.direction, e.direction), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.ctx.uniform1i(t.uniform.symmetry, e.symmetry ? 1 : 0), this.draw(t)
//             }
//             motion(e) {
//                 let t = this.compiledProgram.get("motion");
//                 if (!t) {
//                     let e = "\n                precision mediump float;\n                uniform float KERNEL_SIZE;\n                varying vec2 uv;\n                uniform vec2 resolution;\n                uniform sampler2D texture;\n                uniform float angle;\n\n                bool outOfRange(vec2 uv) {\n                    return uv.x < 0. || uv. y < 0. || uv.x > 1. || uv.y > 1.;\n                }\n                mat2 rotate2d(float _angle){\n                    return mat2(cos(_angle),-sin(_angle),\n                                sin(_angle),cos(_angle));\n                }\n                void main() {\n                    vec4 result = vec4(0.0);\n                    vec2 resol = vec2 (1./resolution.x, 0.);//1./resolution.y);\n                    resol = rotate2d(angle) * resol;\n                    float divcnt = 1.;\n                    for (float i=1.; i <= 100.; i+=1.) {\n                        vec2 before = uv - resol * i;\n                        if (!outOfRange(before)) {\n                            result += texture2D(texture, before);\n                            divcnt += 1.;\n                        }\n                        vec2 after = uv + resol * i;\n                        if (!outOfRange(after)) {\n                            result += texture2D(texture, after);\n                            divcnt += 1.;\n                        }\n                        if (i >= KERNEL_SIZE) break;\n                    }\n                    result += texture2D(texture, uv);\n                    result /= divcnt;\n                    gl_FragColor = result;\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("motion", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.KERNEL_SIZE, 100 * e.amount), this.ctx.uniform1f(t.uniform.angle, e.angle), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             clarity(e) {
//                 let t = this.compiledProgram.get("clarity");
//                 if (!t) {
//                     const e = "\n                #define GLSLIFY 1\n                precision highp float;\n                varying vec2 uv;\n                \n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 px;\n                           \n                float Lum(vec3 c){\n                    return 0.299*c.r + 0.587*c.g + 0.114*c.b;\n                }\n                float BlendOverlayf(float base, float blend){\n                    return (base < 0.5 ? (2.0 * base * blend) : (1.0 - 2.0 * (1.0 - base) * (1.0 - blend)));\n                }\n                vec3 BlendOverlay(vec3 base, vec3 blend){\n                    return vec3(BlendOverlayf(base.r, blend.r), BlendOverlayf(base.g, blend.g), BlendOverlayf(base.b, blend.b));\n                }\n                float BlendVividLightf(float base, float blend){\n                    float BlendColorBurnf = (((2.0 * blend) == 0.0) ? (2.0 * blend) : max((1.0 - ((1.0 - base) / (2.0 * blend))), 0.0));\n                    float BlendColorDodgef =  (((2.0 * (blend - 0.5)) == 1.0) ? (2.0 * (blend - 0.5)) : min(base / (1.0 - (2.0 * (blend - 0.5))), 1.0));\n                    return ((blend < 0.5) ? BlendColorBurnf : BlendColorDodgef);\n                }\n                vec3 BlendVividLight(vec3 base, vec3 blend){\n                    return vec3(BlendVividLightf(base.r, blend.r), BlendVividLightf(base.g, blend.g), BlendVividLightf(base.b, blend.b));\n                }\n\n                float normpdf(in float x, in float sigma) {\n                    return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n                }\n\n                vec3 blurMap() {\n                    //declare stuff\n                    const int mSize = 11;\n                    const int kSize = (mSize-1)/2;\n                    float kernel[mSize];\n                    vec3 final_colour = vec3(0.0);\n                    \n                    //create the 1-D kernel\n                    float sigma = 7.0;\n                    float Z = 0.0;\n                    for (int j = 0; j <= kSize; ++j){\n                        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n                    }\n                    \n                    //get the normalization factor (as the gaussian has been clamped)\n                    for (int j = 0; j < mSize; ++j){\n                        Z += kernel[j];\n                    }\n                    \n                    //read out the texels\n                    for (int i=-kSize; i <= kSize; ++i){\n                        for (int j=-kSize; j <= kSize; ++j){\n                            final_colour += kernel[kSize+j] * kernel[kSize+i] * texture2D(texture, (uv.xy + vec2(float(i),float(j))*px)).rgb;\n                        }\n                    }\n                    return vec3(final_colour/(Z*Z));\n                }\n    \n                void main() {\n\n                    vec4 base4 = texture2D(texture, uv.xy);\n                    \n                    vec3 blurMap = blurMap();\n                    vec3 base = base4.rgb;\n                    \n                    float intensity = (amount < 0.0) ? (amount / 2.0) : amount;\n                    float lum = Lum(base);\n                  \n                    vec3 col = vec3(lum);\n                    vec3 mask = vec3(1.0 - pow(lum, 1.8));\n                    // invert blurred texture\n                    vec3 layer = vec3(1.0 - Lum(blurMap));\n                    vec3 detail = clamp(BlendVividLight(col, layer), 0.0, 1.0);\n                    // we get negative detail by inverting the detail layer\n                    vec3 inverse = mix(1.0 - detail, detail, (intensity+1.0)/2.0);\n                  \n                    gl_FragColor = vec4(BlendOverlay(base, mix(vec3(0.5), inverse, mask)), base4.a);       \n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("clarity", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform1f(t.uniform.amount, 2 * e), this.draw(t)
//             }
//             smooth(e) {
//                 let t = this.compiledProgram.get("smooth");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 px;\n                uniform float m[9];\n                uniform float amount;\n\n                void main(void) {\n                    vec4 c11 = texture2D(texture, uv - px);\n                    vec4 c12 = texture2D(texture, vec2(uv.x, uv.y - px.y));\n                    vec4 c13 = texture2D(texture, vec2(uv.x + px.x, uv.y - px.y));\n\n                    vec4 c21 = texture2D(texture, vec2(uv.x - px.x, uv.y) );\n                    vec4 c22 = texture2D(texture, uv);\n                    vec4 c23 = texture2D(texture, vec2(uv.x + px.x, uv.y) );\n\n                    vec4 c31 = texture2D(texture, vec2(uv.x - px.x, uv.y + px.y) );\n                    vec4 c32 = texture2D(texture, vec2(uv.x, uv.y + px.y) );\n                    vec4 c33 = texture2D(texture, uv + px );\n\n                    vec4 color = \n                        c11 * m[0] + c12 * m[1] + c13 * m[2] +\n                        c21 * m[3] + c22 * m[4] + c23 * m[5] +\n                        c31 * m[6] + c32 * m[7] + c33 * m[8];\n\n                    gl_FragColor = color * amount + (c22 * (1.0 - amount));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("smooth", t)
//                 }
//                 let n = new Float32Array([1 / 16, 2 / 16, 1 / 16, 2 / 16, .25, 2 / 16, 1 / 16, 2 / 16, 1 / 16]);
//                 this.ctx.useProgram(t.program), this.ctx.uniform1fv(t.uniform.m, n), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             denoise(e) {
//                 const t = Math.round(30 * e[0]);
//                 let n = this.compiledProgram.get("denoise" + t);
//                 if (!n) {
//                     let e = "\n                precision mediump float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                \n                uniform float sigma;\n                uniform float threshold;\n                uniform vec2 resolution;\n\n                #define INV_SQRT_OF_2PI 0.39894228040143267793994605993439  // 1.0/SQRT_OF_2PI\n                #define INV_PI 0.31830988618379067153776752674503\n                #define RADIUS %radius%.0\n              \n                void main(void) {\n\n                       float invSigmaQx2 = .5 / (sigma * sigma);      // 1.0 / (sigma^2 * 2.0)\n                       float invSigmaQx2PI = INV_PI * invSigmaQx2;    // 1.0 / (sqrt(PI) * sigma)\n                       \n                       float invThresholdSqx2 = .5 / (threshold * threshold);     // 1.0 / (sigma^2 * 2.0)\n                       float invThresholdSqrt2PI = INV_SQRT_OF_2PI / threshold;   // 1.0 / (sqrt(2*PI) * sigma)\n                       \n                       vec4 center = texture2D(texture,uv); \n                       \n                       float zBuff = 0.0;\n                       vec4 aBuff = vec4(0.0);\n                       \n                       for(float x=-RADIUS; x <= RADIUS; x++) {\n                           float pt = sqrt(RADIUS*RADIUS-x*x);  // pt = yRadius: have circular trend\n                           for(float y=-RADIUS; y <= RADIUS; y++) {\n   \n                               if(y >= pt || y <= pt) {\n   \n                                   vec2 d = vec2(x,y)/resolution;\n                       \n                                   float blurFactor = exp( -dot(d , d) * invSigmaQx2 ) * invSigmaQx2;\n                                   \n                                   vec4 pxx =  texture2D(texture,uv+d);\n                       \n                                   vec4 dC = pxx-center;\n                                   float deltaFactor = exp( -dot(dC, dC) * invThresholdSqx2) * invThresholdSqrt2PI * blurFactor;\n                                                       \n                                   zBuff += deltaFactor;\n                                   aBuff += deltaFactor*pxx;\n                               }\n                           }\n                       }\n                       gl_FragColor = aBuff/zBuff;\n                } ";
//                     n = this.compileShader(e.replace(/%radius%/g, t.toString())), this.compiledProgram.set("denoise" + t, n)
//                 }
//                 this.ctx.useProgram(n.program), this.ctx.uniform1f(n.uniform.sigma, t / 3), this.ctx.uniform1f(n.uniform.threshold, e[1]), this.ctx.uniform2f(n.uniform.resolution, this.width, this.height), this.draw(n)
//             }
//             colorMatrix(e) {
//                 let t = new Float32Array(e);
//                 t[4] /= 255, t[9] /= 255, t[14] /= 255, t[19] /= 255;
//                 let n = this.compiledProgram.get("colormatrix");
//                 if (!n) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float m[20];\n\n                void main(void) {\n                    vec4 c = texture2D(texture, uv);\n                    gl_FragColor.r = m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4];\n                    gl_FragColor.g = m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9];\n                    gl_FragColor.b = m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14];\n                    gl_FragColor.a = m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19];\n                } ";
//                     n = this.compileShader(e), this.compiledProgram.set("colormatrix", n)
//                 }
//                 this.ctx.useProgram(n.program), this.ctx.uniform1fv(n.uniform.m, t), this.draw(n)
//             }
//             colorMatrixRange(e, t, n) {
//                 let i = new Float32Array(e);
//                 i[4] /= 255, i[9] /= 255, i[14] /= 255, i[19] /= 255;
//                 let a = this.compiledProgram.get("colormatrix-range");
//                 if (!a) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float m[20];\n                uniform float from;\n                uniform float to;\n\n                vec3 rgb2hsv(vec3 c) {\n                    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n                    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n                    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n                \n                    float d = q.x - min(q.w, q.y);\n                    float e = 1.0e-10;\n                    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n                }\n\n                void main(void) {\n                    vec4 c = texture2D(texture, uv);\n                    vec3 hsv = rgb2hsv(c.rgb);\n\n                    gl_FragColor = c;\n\n                    if((hsv.x >= from && hsv.x <= to) || (to < from && (hsv.x >= from || hsv.x <= to))) {\n\n                        float blend = 1.0;\n                        float grad = 29.0/360.0;\n\n                        float distFrom = distance(hsv.x, from);\n                        float distTo = distance(hsv.x, to);\n\n                        if(distFrom <= grad) blend = distFrom / grad;\n                        if(distTo <= grad) blend = distTo / grad;\n\n                        vec4 b = vec4(\n                            m[0] * c.r + m[1] * c.g + m[2] * c.b + m[3] * c.a + m[4],\n                            m[5] * c.r + m[6] * c.g + m[7] * c.b + m[8] * c.a + m[9],\n                            m[10] * c.r + m[11] * c.g + m[12] * c.b + m[13] * c.a + m[14],\n                            m[15] * c.r + m[16] * c.g + m[17] * c.b + m[18] * c.a + m[19]);\n                        \n                        gl_FragColor = mix(c, b, blend);\n                    }\n                } ";
//                     a = this.compileShader(e), this.compiledProgram.set("colormatrix-range", a)
//                 }
//                 this.ctx.useProgram(a.program), this.ctx.uniform1fv(a.uniform.m, i), this.ctx.uniform1f(a.uniform.from, t / 360), this.ctx.uniform1f(a.uniform.to, n / 360), this.draw(a)
//             }
//             desaturate() {
//                 this.saturation(-1)
//             }
//             invert() {
//                 this.colorMatrix([-1, 0, 0, 1, 0, 0, -1, 0, 1, 0, 0, 0, -1, 1, 0, 0, 0, 0, 1, 0])
//             }
//             contrast(e) {
//                 let t = e + 1,
//                     n = -128 * (t - 1);
//                 this.colorMatrix([t, 0, 0, 0, n, 0, t, 0, 0, n, 0, 0, t, 0, n, 0, 0, 0, 1, 0])
//             }
//             hue(e, t, n) {
//                 let i = this.compiledProgram.get("hue" + (t ? "-range" : ""));
//                 if (!i) {
//                     let e = "\n            precision highp float;\n            varying vec2 uv;\n            \n            uniform sampler2D texture;\n            uniform float rotation;\n            uniform float from;\n            uniform float to;\n            \n            vec3 rgb2hsv(vec3 c) {\n                vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n                vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n                vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n            \n                float d = q.x - min(q.w, q.y);\n                float e = 1.0e-10;\n                return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n            }\n            vec3 hsv2rgb(vec3 c) {\n                vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n                vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n                return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\n            }";
//                     e += t ? "\n                void main() {\n                    lowp vec4 base = texture2D(texture, uv.xy);\n                    vec3 hsv = rgb2hsv(base.rgb);\n\n                    gl_FragColor = base;\n\n                    if((hsv.x >= from && hsv.x <= to) || (to < from && (hsv.x >= from || hsv.x <= to))) {\n\n                        float blend = 1.0;\n                        float grad = 29.0/360.0;\n\n                        float distFrom = distance(hsv.x, from);\n                        float distTo = distance(hsv.x, to);\n\n                        if(distFrom <= grad) blend = distFrom / grad;\n                        if(distTo <= grad) blend = distTo / grad;\n                        \n                        hsv.x += rotation * blend;\n                        \n                        gl_FragColor.rgb = hsv2rgb(hsv);\n                    }\n                }" : "\n                void main() {\n                    lowp vec4 base = texture2D(texture, uv.xy);\n                    vec3 hsv = rgb2hsv(base.rgb);\n\n                    hsv.x += rotation;\n\n                    gl_FragColor = vec4(hsv2rgb(hsv), base.a);\n                }", i = this.compileShader(e), this.compiledProgram.set("hue" + (t ? "-range" : ""), i)
//                 }
//                 this.ctx.useProgram(i.program), this.ctx.uniform1f(i.uniform.rotation, e / 360), t && (this.ctx.uniform1f(i.uniform.from, t / 360), this.ctx.uniform1f(i.uniform.to, n / 360)), this.draw(i)
//             }
//             saturation(e, t, n) {
//                 let i = 2 * e / 3 + 1,
//                     a = -.5 * (i - 1);
//                 t ? this.colorMatrixRange([i, a, a, 0, 0, a, i, a, 0, 0, a, a, i, 0, 0, 0, 0, 0, 1, 0], t, n) : this.colorMatrix([i, a, a, 0, 0, a, i, a, 0, 0, a, a, i, 0, 0, 0, 0, 0, 1, 0])
//             }
//             lightness(e, t, n) {
//                 e *= 255, t ? this.colorMatrixRange([1, 0, 0, 0, e, 0, 1, 0, 0, e, 0, 0, 1, 0, e, 0, 0, 0, 1, 0], t, n) : this.colorMatrix([1, 0, 0, 0, e, 0, 1, 0, 0, e, 0, 0, 1, 0, e, 0, 0, 0, 1, 0])
//             }
//             colorize(e) {
//                 this.fill(new fe(Z.fromHSB(e, 1, 1), "color", 1))
//             }
//             exposure(e) {
//                 let t = this.compiledProgram.get("exposure");
//                 if (!t) {
//                     let e = ["#define GLSLIFY 1", "precision highp float;", "varying vec2 uv;", "uniform sampler2D texture;", "uniform float amount;", "const float epsilon = 0.000001;", "const float mx = 1.0 - epsilon;", "const mat3 matRGBtoROMM = mat3(0.5293459296226501, 0.3300727903842926, 0.14058130979537964, 0.09837432950735092, 0.8734610080718994, 0.028164653107523918, 0.01688321679830551, 0.11767247319221497, 0.8654443025588989);", "const mat3 matROMMtoRGB = mat3(2.0340757369995117, -0.727334201335907, -0.3067416846752167, -0.22881317138671875, 1.2317301034927368, -0.0029169507324695587, -0.008569774217903614, -0.1532866358757019, 1.1618564128875732);", "float ramp(in float t){", "t *= 2.0;", "if (t >= 1.0) {", "t -= 1.0;", "t = log(0.5) / log(0.5*(1.0-t) + 0.9332*t);", "}", "return clamp(t, 0.001, 10.0);", "}", "vec3 rgb2hsv(in vec3 c) {", "vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);", "vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));", "vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));", "float d = q.x - min(q.w, q.y);", "float e = 1.0e-10;", "return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);", "}", "vec3 hsv2rgb(in vec3 c) {", "vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);", "vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);", "return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);", "}", "vec3 setHue(in vec3 res, in vec3 base) {", "vec3 hsv = rgb2hsv(base);", "vec3 res_hsv = rgb2hsv(res);", "return hsv2rgb(vec3(hsv.x, res_hsv.y, res_hsv.z));", "}", "void main() {", "lowp vec4 col = texture2D(texture, uv.xy);", "vec3 base = col.rgb * matRGBtoROMM;", "float a = abs(amount) * col.a + epsilon;", "float v = pow(2.0, a*2.0+1.0)-2.0;", "float m = mx - exp(-v);", "vec3 res = (amount > 0.0) ? (1.0 - exp(-v*base)) / m : log(1.0-base*m) / -v;", "res = mix(base, res, min(a*100.0, 1.0));", "res = setHue(res, base);", "res = pow(res, vec3(ramp(1.0 - (0.0 * col.a + 1.0) / 2.0)));", "res = res * matROMMtoRGB;", "gl_FragColor = vec4(res, col.a);", "}"].join("\n");
//                     t = this.compileShader(e), this.compiledProgram.set("exposure", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             highlights(e) {
//                 let t = this.compiledProgram.get("highlights");
//                 if (!t) {
//                     let e = ["#define GLSLIFY 1", "precision highp float;", "varying vec2 uv;", "uniform sampler2D texture;", "uniform float amount;", "const float epsilon = 0.000001;", "const float mx = 1.0 - epsilon;", "const float PI = 3.1415926535897932384626433832795;", "const mat3 matRGBtoROMM = mat3(0.5293459296226501, 0.3300727903842926, 0.14058130979537964, 0.09837432950735092, 0.8734610080718994, 0.028164653107523918, 0.01688321679830551, 0.11767247319221497, 0.8654443025588989);", "const mat3 matROMMtoRGB = mat3(2.0340757369995117, -0.727334201335907, -0.3067416846752167, -0.22881317138671875, 1.2317301034927368, -0.0029169507324695587, -0.008569774217903614, -0.1532866358757019, 1.1618564128875732);", "float luma_romm(in vec3 color){", "return dot(color, vec3(0.242655, 0.755158, 0.002187));", "}", "float luma(in vec3 color){", "return dot(color, vec3(0.298839, 0.586811, 0.11435));", "}", "vec3 rgb2hsv(in vec3 c) {", "vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);", "vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));", "vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));", "float d = q.x - min(q.w, q.y);", "float e = 1.0e-10;", "return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);", "}", "vec3 hsv2rgb(in vec3 c) {", "vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);", "vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);", "return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);", "}", "vec3 setHue(in vec3 res, in vec3 base) {", "vec3 hsv = rgb2hsv(base);", "vec3 res_hsv = rgb2hsv(res);", "return hsv2rgb(vec3(hsv.x, res_hsv.y, res_hsv.z));", "}", "float gaussian(in float x) {", "return 1.0 - exp(-PI*2.0*x*x);", "}", "void main() {", "lowp vec4 col = texture2D(texture, uv.xy);", "lowp vec3 map = col.rgb;", "vec3 base = col.rgb * matRGBtoROMM;", "float base_lum = luma(col.rgb);", "float map_lum = luma_romm(map * matRGBtoROMM);", "float exposure = mix(amount, 0.0, 1.0 - map_lum) * col.a;", "float a = abs(exposure) * col.a + epsilon;", "float v = pow(2.0, a+1.0)-2.0;", "float m = mx - exp(-v);", "vec3 res = (exposure > 0.0) ? (1.0 - exp(-v*base)) / m : log(1.0-base*m) / -v;", "res = mix(base, res, min(a*100.0, 1.0));", "res = setHue(res, base);", "res = res * matROMMtoRGB;", "gl_FragColor = vec4(res, col.a);", "}"].join("\n");
//                     t = this.compileShader(e), this.compiledProgram.set("highlights", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             shadows(e) {
//                 let t = this.compiledProgram.get("shadows");
//                 if (!t) {
//                     let e = ["#define GLSLIFY 1", "precision highp float;", "varying vec2 uv;", "uniform sampler2D texture;", "uniform float amount;", "const float epsilon = 0.000001;", "const float mx = 1.0 - epsilon;", "const float PI = 3.1415926535897932384626433832795;", "const mat3 matRGBtoROMM = mat3(0.5293459296226501, 0.3300727903842926, 0.14058130979537964, 0.09837432950735092, 0.8734610080718994, 0.028164653107523918, 0.01688321679830551, 0.11767247319221497, 0.8654443025588989);", "const mat3 matROMMtoRGB = mat3(2.0340757369995117, -0.727334201335907, -0.3067416846752167, -0.22881317138671875, 1.2317301034927368, -0.0029169507324695587, -0.008569774217903614, -0.1532866358757019, 1.1618564128875732);", "float luma_romm(in vec3 color){", "return dot(color, vec3(0.242655, 0.755158, 0.002187));", "}", "float luma(in vec3 color){", "return dot(color, vec3(0.298839, 0.586811, 0.11435));", "}", "vec3 rgb2hsv(in vec3 c) {", "vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);", "vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));", "vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));", "float d = q.x - min(q.w, q.y);", "float e = 1.0e-10;", "return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);", "}", "vec3 hsv2rgb(in vec3 c) {", "vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);", "vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);", "return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);", "}", "vec3 setHue(in vec3 res, in vec3 base) {", "vec3 hsv = rgb2hsv(base);", "vec3 res_hsv = rgb2hsv(res);", "return hsv2rgb(vec3(hsv.x, res_hsv.y, res_hsv.z));", "}", "float gaussian(in float x) {", "return 1.0 - exp(-PI*2.0*x*x);", "}", "void main() {", "lowp vec4 col = texture2D(texture, uv.xy);", "lowp vec3 map = col.rgb;", "vec3 base = col.rgb * matRGBtoROMM;", "float base_lum = luma(col.rgb);", "float map_lum = luma_romm(map * matRGBtoROMM);", "float exposure = mix(0.0, amount, 1.0 - map_lum) * col.a;", "float a = abs(exposure) * col.a + epsilon;", "float v = pow(2.0, a+1.0)-2.0;", "float m = mx - exp(-v);", "vec3 res = (exposure > 0.0) ? (1.0 - exp(-v*base)) / m : log(1.0-base*m) / -v;", "res = mix(base, res, min(a*100.0, 1.0));", "res = setHue(res, base);", "res = res * matROMMtoRGB;", "gl_FragColor = vec4(res, col.a);", "}"].join("\n");
//                     t = this.compileShader(e), this.compiledProgram.set("shadows", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             dehaze(e) {
//                 let t = this.compiledProgram.get("dehaze");
//                 if (!t) {
//                     let e = "\n\n                #define GLSLIFY 1;\n                precision highp float;\n                varying vec2 uv;\n\n                uniform sampler2D texture;\n                uniform float amount;  // -1.0 ~ 1.0\n\n                uniform vec2 size;\n\n                float hazeMap(vec4 base) {\n                    vec3 color = vec3(1.0, 1.0, 1.0);\n                    vec2 step = vec2(1.0 / size.xy);\n                    const int patchRadius = 1; // the half size for shift in 3 x 3 patch.\n                    for (int i = -patchRadius; i <= patchRadius; ++i) {\n                       for (int j = -patchRadius; j <= patchRadius; ++j) {\n                           vec2 uv = clamp(uv + (vec2(i, j) * step), 0.0, 1.0);\n                           color = min(color, base.rgb);\n                        }\n                    }\n                    return min(color.r, min(color.g, color.b));\n                }\n\n                void main() {\n                    \n                    lowp vec4 base = texture2D(texture, uv.xy);\n                    lowp float haze = hazeMap(base);\n\n                    float transmission = 1.0 - 0.95 * haze;\n                    const float A = 0.95; //0.95 intensity. We can consider to collect 0.1% brightest pixel from the dark channel image.\n                    const float t0 = 0.1; //0.1 in the paper, we can increase it for solving the color bleeding.\n                    float t = mix(1.0, max(t0, transmission), amount);\n                    vec3 J = (base.rgb - A) / t + A;\n                    gl_FragColor = vec4(J, base.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("dehaze", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.size, this.width, this.height), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             solarize() {
//                 this.paletteMap || (this.paletteMap = new ImageData(256, 1));
//                 for (let e = 0; e < 256; ++e) {
//                     let t = 255 * (e / 255 > .5 ? 2 * (e / 255 - .5) : 2 * (.5 - e / 255));
//                     t = t > 255 ? 255 : t < 0 ? 0 : t, this.paletteMap.data[4 * e] = this.paletteMap.data[4 * e + 1] = this.paletteMap.data[4 * e + 2] = t
//                 }
//                 this.mapping(this.paletteMap)
//             }
//             monochrome(e) {
//                 let t = this.compiledProgram.get("monochrome");
//                 if (!t) {
//                     let e = "\n            precision highp float;\n            varying vec2 uv;\n            \n            uniform sampler2D texture;\n\n            uniform float r;\n            uniform float g;\n            uniform float b;\n            \n            float luma(vec3 color) {\n                return dot(color, vec3(r, g, b));\n            }\n            void main() {\n                lowp vec4 base = texture2D(texture, uv.xy);\n                float avg = luma(base.rgb);\n\n                gl_FragColor = vec4(avg, avg, avg, base.a);\n            }";
//                     t = this.compileShader(e), this.compiledProgram.set("monochrome", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.r, e.r), this.ctx.uniform1f(t.uniform.g, e.g), this.ctx.uniform1f(t.uniform.b, e.b), this.draw(t)
//             }
//             curves(e) {
//                 this.paletteMap || (this.paletteMap = new ImageData(256, 1)), void 0 !== e.preset && (e = be.createCurveSet(e)), Me.fillPaletteMap(e, this.paletteMap), this.mapping(this.paletteMap)
//             }
//             levels(e) {
//                 this.paletteMap || (this.paletteMap = new ImageData(256, 1)), ye.fillPaletteMap(e, this.paletteMap), this.mapping(this.paletteMap)
//             }
//             multilevels(e) {
//                 this.paletteMap || (this.paletteMap = new ImageData(256, 1)), ye.fillRGBPaletteMap(e[0].isFlat() ? void 0 : e[0], e[1].isFlat() ? void 0 : e[1], e[2].isFlat() ? void 0 : e[2], this.paletteMap), this.mapping(this.paletteMap)
//             }
//             mapping(e) {
//                 let t = this.compiledProgram.get("mapping");
//                 if (!t) {
//                     let e = "\n                #define GLSLIFY 1\n                precision highp float;\n                varying vec2 uv;\n\n                uniform sampler2D texture;\n                uniform sampler2D paletteMap;\n\n                void main() {\n                    lowp vec4 base = texture2D(texture, uv.xy);\n                    float r = texture2D(paletteMap, vec2(base.r, 0)).r;\n                    float g = texture2D(paletteMap, vec2(base.g, 0)).g;\n                    float b = texture2D(paletteMap, vec2(base.b, 0)).b;\n                    gl_FragColor = vec4(r, g, b, base.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("mapping", t)
//                 }
//                 this.ctx.useProgram(t.program);
//                 let n = t.getTextureById("paletteMap");
//                 n.createTexture(this.ctx, e.width, e.height), n.uploadData(this.ctx, e), this.draw(t)
//             }
//             lookup(e) {
//                 let t = this.compiledProgram.get("lookup");
//                 if (!t) {
//                     let e = "\n            precision highp float;\n            varying vec2 uv;\n\n            uniform sampler2D texture;\n            uniform sampler2D paletteMap;\n            \n            float luma(vec3 color) {\n                return dot(color, vec3(0.299, 0.587, 0.114));\n            }\n\n            void main() {\n                lowp vec4 base = texture2D(texture, uv.xy);\n                float avg = luma(base.rgb);\n                float r = texture2D(paletteMap, vec2(avg, 0)).r;\n                float g = texture2D(paletteMap, vec2(avg, 0)).g;\n                float b = texture2D(paletteMap, vec2(avg, 0)).b;\n                gl_FragColor = vec4(r, g, b, base.a);\n            }";
//                     t = this.compileShader(e), this.compiledProgram.set("lookup", t)
//                 }
//                 this.ctx.useProgram(t.program);
//                 let n = t.getTextureById("paletteMap");
//                 n.createTexture(this.ctx, e.width, e.height), n.uploadData(this.ctx, e), this.draw(t)
//             }
//             toning(e) {
//                 this.paletteMap || (this.paletteMap = new ImageData(256, 1)), _e.fillPaletteMap(e, this.paletteMap);
//                 let t = this.compiledProgram.get("toning");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n\n                uniform sampler2D texture;\n                uniform sampler2D paletteMap;\n\n                uniform float amount;\n                \n                float luma(vec3 color) {\n                    return dot(color, vec3(0.299, 0.587, 0.114));\n                }\n\n                void main() {\n                    lowp vec4 base = texture2D(texture, uv.xy);\n                    float avg = luma(base.rgb);\n                    float r = texture2D(paletteMap, vec2(avg, 0)).r;\n                    float g = texture2D(paletteMap, vec2(avg, 0)).g;\n                    float b = texture2D(paletteMap, vec2(avg, 0)).b;\n                    gl_FragColor = mix(base, vec4(r, g, b, base.a), amount);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("toning", t)
//                 }
//                 this.ctx.useProgram(t.program);
//                 let n = t.getTextureById("paletteMap");
//                 n.createTexture(this.ctx, this.paletteMap.width, this.paletteMap.height), n.uploadData(this.ctx, this.paletteMap), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             fill(e) {
//                 let t = this.compiledProgram.get("fill-" + e.blend);
//                 if (!t) {
//                     let n = "";
//                     switch (e.blend) {
//                         case "color":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        vec3 blendColor(vec3 base, vec3 blend) {\n                            vec3 color = vec3(blend.rgb);\n                            base.r = base.r * 0.30 + base.g * 0.59 + base.b * 0.11;\n                            \n                            vec3 power = (color.r+color.g+color.b) * 0.3333 - color;\n                            base.rgb = pow(base.rrr, 1.0 + power);\n\n                            return base;\n                        }\n                        vec3 blendColor(vec3 base, vec3 blend, float opacity) {\n                            return (blendColor(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendColor(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "soft-light":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n\n                        float blendSoftLight(float base, float blend) {\n                            return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n                        }\n                        vec3 blendSoftLight(vec3 base, vec3 blend) {\n                            return vec3(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b));\n                        }\n                        vec3 blendSoftLight(vec3 base, vec3 blend, float opacity) {\n                            return (blendSoftLight(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendSoftLight(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "hard-light":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n\n                        float blendOverlay(float base, float blend) {\n                            return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n                        }\n                        vec3 blendOverlay(vec3 base, vec3 blend) {\n                            return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n                        }\n                        vec3 blendHardLight(vec3 base, vec3 blend) {\n                            return blendOverlay(blend,base);\n                        }\n                        vec3 blendHardLight(vec3 base, vec3 blend, float opacity) {\n                            return (blendHardLight(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendHardLight(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "vivid-light":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n\n                        float blendColorBurn(float base, float blend) {\n                            return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n                        }\n                        float blendColorDodge(float base, float blend) {\n                            return (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n                        }\n                        float blendVividLight(float base, float blend) {\n                            return (blend<0.5)?blendColorBurn(base,(2.0*blend)):blendColorDodge(base,(2.0*(blend-0.5)));\n                        }\n                        vec3 blendVividLight(vec3 base, vec3 blend) {\n                            return vec3(blendVividLight(base.r,blend.r),blendVividLight(base.g,blend.g),blendVividLight(base.b,blend.b));\n                        }\n                        vec3 blendVividLight(vec3 base, vec3 blend, float opacity) {\n                            return (blendVividLight(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendVividLight(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "overlay":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n\n                        float blendOverlay(float base, float blend) {\n                            return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n                        }\n                        vec3 blendOverlay(vec3 base, vec3 blend) {\n                            return vec3(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b));\n                        }\n                        vec3 blendOverlay(vec3 base, vec3 blend, float opacity) {\n                            return (blendOverlay(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendOverlay(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "multiply":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        vec3 blendMultiply(vec3 base, vec3 blend) {\n                            return base*blend;\n                        }\n                        vec3 blendMultiply(vec3 base, vec3 blend, float opacity) {\n                            return (blendMultiply(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendMultiply(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "color-dodge":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        float blendColorDodge(float base, float blend) {\n                            return (blend==1.0)?blend:min(base/(1.0-blend),1.0);\n                        }\n                        vec3 blendColorDodge(vec3 base, vec3 blend) {\n                            return vec3(blendColorDodge(base.r,blend.r),blendColorDodge(base.g,blend.g),blendColorDodge(base.b,blend.b));\n                        }\n                        vec3 blendColorDodge(vec3 base, vec3 blend, float opacity) {\n                            return (blendColorDodge(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendColorDodge(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "color-burn":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        float blendColorBurn(float base, float blend) {\n                            return (blend==0.0)?blend:max((1.0-((1.0-base)/blend)),0.0);\n                        }\n                        vec3 blendColorBurn(vec3 base, vec3 blend) {\n                            return vec3(blendColorBurn(base.r,blend.r),blendColorBurn(base.g,blend.g),blendColorBurn(base.b,blend.b));\n                        }\n                        vec3 blendColorBurn(vec3 base, vec3 blend, float opacity) {\n                            return (blendColorBurn(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendColorBurn(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         case "screen":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        float blendScreen(float base, float blend) {\n                            return 1.0-((1.0-base)*(1.0-blend));\n                        }\n                        vec3 blendScreen(vec3 base, vec3 blend) {\n                            return vec3(blendScreen(base.r,blend.r),blendScreen(base.g,blend.g),blendScreen(base.b,blend.b));\n                        }\n                        vec3 blendScreen(vec3 base, vec3 blend, float opacity) {\n                            return (blendScreen(base, blend) * opacity + base * (1.0 - opacity));\n                        }\n\n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = vec4(blendScreen(base.rgb, color.rgb, amount), base.a);\n                        }";
//                             break;
//                         default:
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform vec4 color;\n                        \n                        void main() {\n                            vec4 base = texture2D(texture, uv.xy);\n                            gl_FragColor = mix(base, color, amount);\n                        }"
//                     }
//                     t = this.compileShader(n), this.compiledProgram.set("fill-" + e.blend, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform4f(t.uniform.color, e.color.r / 255, e.color.g / 255, e.color.b / 255, 1), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             glamour(e) {
//                 let t = this.compiledProgram.get("glamour");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 px;\n\n                float normpdf(in float x, in float sigma) {\n                    return 0.39894*exp(-0.5*x*x/(sigma*sigma))/sigma;\n                }\n\n                vec3 blurMap() {\n                    //declare stuff\n                    const int mSize = 11;\n                    const int kSize = (mSize-1)/2;\n                    float kernel[mSize];\n                    vec3 final_colour = vec3(0.0);\n                    \n                    //create the 1-D kernel\n                    float sigma = 7.0;\n                    float Z = 0.0;\n                    for (int j = 0; j <= kSize; ++j){\n                        kernel[kSize+j] = kernel[kSize-j] = normpdf(float(j), sigma);\n                    }\n                    \n                    //get the normalization factor (as the gaussian has been clamped)\n                    for (int j = 0; j < mSize; ++j){\n                        Z += kernel[j];\n                    }\n                    \n                    //read out the texels\n                    for (int i=-kSize; i <= kSize; ++i){\n                        for (int j=-kSize; j <= kSize; ++j){\n                            final_colour += kernel[kSize+j] * kernel[kSize+i] * texture2D(texture, (uv.xy + vec2(float(i),float(j))*px)).rgb;\n                        }\n                    }\n                    return vec3(final_colour/(Z*Z));\n                }\n\n                float luma(vec3 color) {\n                    return dot(color, vec3(0.299, 0.587, 0.114));\n                }\n\n                void main() {\n                    \n                    vec4 base = texture2D(texture, uv);\n                    vec3 color = blurMap();\n                    \n                    color = vec3(luma(color));\n\n                    color = vec3(\n                        (base.r <= 0.5) ? (2.0 * base.r * color.r) : (1.0 - 2.0 * (1.0 - base.r) * (1.0 - color.r)),\n                        (base.g <= 0.5) ? (2.0 * base.g * color.g) : (1.0 - 2.0 * (1.0 - base.g) * (1.0 - color.g)),\n                        (base.b <= 0.5) ? (2.0 * base.b * color.b) : (1.0 - 2.0 * (1.0 - base.b) * (1.0 - color.b))\n                    );\n                \n                    gl_FragColor = mix(base, vec4(color, base.a), amount);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("glamour", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.draw(t)
//             }
//             kaleidoscope(e) {
//                 let t = this.compiledProgram.get("kaleidoscope");
//                 if (!t) {
//                     let e = "\n                precision mediump float;\n                varying vec2 uv;\n                #define PI 3.14159265359\n\n                uniform sampler2D texture;\n                uniform vec2 resolution;\n\n                uniform float u_stretch;\n                uniform float u_position;\n                uniform float u_amount;\n\n                int modwhole(float a, float b) {\n                    float m = mod(a, b);\n\n                    return int (m+.5);\n                }\n\n                void main(void) {\n                    int numOfAxis = int(u_amount);\n                    float angleFrac = (2. * PI) / float ( 2 * numOfAxis);\n\n                    vec2 uvc = uv;\n                    uvc -= .5;\n\n                    // Convert to Polar\n                    float phi = abs(atan(uvc.x, uvc.y));\n                    float r = length(uvc);\n\n                    int count = int(phi / angleFrac);\n\n                    phi = mod(phi, angleFrac);\n                    if (modwhole (float(count), 2.) == 1) {\n                        phi = angleFrac - phi;\n                    }\n\n                    // from polar coordiantes\n                    float x = r * cos(phi);\n                    float y = r * sin(phi);\n\n                    float stretch = 1. + (1. - u_stretch);\n                    float position = u_position * PI * .5;\n\n                    uvc = vec2(x, y) * stretch + sin(position);\n\n                    if (uvc.x < 0.) uvc.x += 1.;\n                    if (uvc.x > 1.) uvc.x -= 1.;\n                \n                    if (uvc.y < 0.) uvc.y += 1.;\n                    if (uvc.y > 1.) uvc.y -= 1.;\n\n                    gl_FragColor = texture2D (texture, uvc);\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("kaleidoscope", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.u_amount, e.amount), this.ctx.uniform1f(t.uniform.u_stretch, e.stretch), this.ctx.uniform1f(t.uniform.u_position, e.position), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             polarcoordinates(e) {
//                 let t = this.compiledProgram.get("polarcoordinates");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                #define PI 3.14159265359\n                #define PI_2 6.2831\n\n                uniform sampler2D texture;\n                uniform int flip;\n                uniform float overlap;\n                uniform float rotate;\n                uniform vec2 resolution;\n                uniform int symmetry;\n\n                mat2 rotate2d(float _angle){\n                    return mat2(cos(_angle),-sin(_angle),\n                                sin(_angle),cos(_angle));\n                }\n\n                vec2 squareImage(vec2 uv) {\n                    // Aspect Ratio\n                    float ar = resolution.x / resolution.y;\n\n                    // Square the image at the center if rectangular\n                    if (symmetry == 1) {\n                        if (resolution.x > resolution.y) {\n                            float leftEdge = (1.0-1.0/ar) * 0.5;\n                            float rightEdge = 1.0 - leftEdge;\n\n                            if (uv.x < leftEdge) {\n                                uv = vec2(0, uv.y); // Fill in the left edge\n                            } else if (uv.x > rightEdge) {\n                                uv = vec2(1, uv.y); // Fill in the right edge\n                            }\n                            else {\n                                uv.x -= leftEdge; // Square the image on X\n                                uv.x *= ar;\n                            }\n                        } else if (resolution.y > resolution.x) {\n                            float bottomEdge = (1.0-ar) * 0.5;\n                            float topEdge = 1.0 - bottomEdge;\n\n                            if (uv.y < bottomEdge) {\n                                uv = vec2(uv.x, 0); // Fill in the bottom edge\n                            } else if (uv.y > topEdge) {\n                                uv = vec2(uv.x, 1); // Fill in the top edge\n                            }\n                            else {\n                                uv.y -= bottomEdge; // Square the image on Y\n                                uv.y /= ar;\n                            }\n                        }\n                    }\n                    return uv;\n                }\n\n                void main(void) {           \n                    // Square the image\n                    vec2 uvc = squareImage(uv);\n\n                    // Bring uv coordinates to center 0.5\n                    uvc = uvc-0.5;\n\n                    // Rotate uv by angle\n                    uvc = rotate2d( rotate ) * uvc;\n\n                    // Cartesian to polar\n                    float r = length(uvc) * 2.0;\n                    float a = atan(uvc.x, uvc.y);\n\n                    // Move from -PI -> PI to 0 -> 1\n                    vec2 uvp = vec2(a / (PI_2 + overlap) + 0.5, r);\n\n                    // Flip the image by 180 degrees\n                    uvp = flip == 1 ? 1.0 - uvp : uvp;\n\n                    // Compute color\n                    gl_FragColor = texture2D(texture, uvp);\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("polarcoordinates", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1i(t.uniform.flip, e.flip ? 1 : 0), this.ctx.uniform1i(t.uniform.symmetry, e.symmetry ? 1 : 0), this.ctx.uniform1f(t.uniform.overlap, e.overlap), this.ctx.uniform1f(t.uniform.rotate, e.rotate), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             fisheye(e) {
//                 let t = this.compiledProgram.get("fisheye");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                #define PI 3.14159265359\n\n                uniform sampler2D texture;\n                uniform vec2 center;\n                uniform float amount;\n                uniform float aperture;\n                uniform int edgeFill;\n                uniform vec2 resolution;\n\n                vec2 edgeFillReflect(vec2 uvc) {\n                    if (uvc.x < 0.) uvc.x = -uvc.x;\n                    if (uvc.y < 0.) uvc.y = -uvc.y;\n                    if (uvc.x > 1.) uvc.x = 2. - uvc.x;\n                    if (uvc.y > 1.) uvc.y = 2. - uvc.y;\n\n                    return uvc;\n                }\n\n                vec2 edgeFillRepeat(vec2 uvc) {\n                    if (uvc.x < 0.) uvc.x = 1. + uvc.x;\n                    if (uvc.y < 0.) uvc.y = 1. + uvc.y;\n                    if (uvc.x > 1.) uvc.x = uvc.x - 1.;\n                    if (uvc.y > 1.) uvc.y = uvc.y - 1.;\n\n                    return uvc;\n                }\n\n                int edgeFillNone(vec2 uvc) {\n                    if (uvc.x < 0. || uvc.y < 0. || uvc.x > 1. || uvc.y > 1.) {\n                        return 1;\n                    }\n                    return 0;\n                }\n\n                void main(void) {\n\n                    // Normalized device space i.e. range of [-1, 1]\n                    vec2 ndcPos = uv * 2. - center * 2.;\n\n                    // Aspect ratio of the viewport\n                    float aspect = resolution.x / resolution.y;\n\n                    // Relationship between the radius of the perimeter circle (r or half_dist) and\n                    // the angle (eye_angle): \n                    // Bisect the isosceles triangle\n                    float eye_angle = abs(aperture);\n                    float half_angle = eye_angle / 2.;\n                    float half_dist = tan(half_angle);\n\n                    // With the aspect ratio of the viewport (aspect)\n                    vec2 vp_scale = vec2(aspect, 1.);\n                    vec2 P = ndcPos * vp_scale;\n\n                    // Diameter or the length of the viewport\n                    float vp_dia = length(vp_scale);\n\n                    // Relative distance to the center of the viewport\n                    float rel_dist = length(P) / vp_dia;\n\n                    // Relative position of the point P in relation to the aspect ratio\n                    vec2 rel_P = normalize(P) / normalize(vp_scale);\n\n                    vec2 pos_prj = ndcPos;\n                    if (aperture > 0.) {\n                        // Projection from spherical surface to the place\n                        float beta = rel_dist * half_angle;\n                        pos_prj = rel_P * tan(beta) / half_angle * pow(.9, amount * 5.);\n                    } else if (aperture < 0.) {\n                        // Projection from the plane to the spherical surface\n                        float beta = atan(rel_dist * half_dist);\n                        pos_prj = rel_P * beta / half_angle * pow(.9, amount * 5.);\n                    }\n\n                    vec2 uv_prj = pos_prj * .5 + center;\n\n                    // Return transparent if no edge fill\n                    if (edgeFill == 0) {\n                        if (edgeFillNone(uv_prj) == 1) {\n                            discard;\n                        }\n                    }\n                    if (edgeFill == 1) {\n                        uv_prj = edgeFillReflect(uv_prj);\n                    } \n                    if (edgeFill == 2) {\n                        uv_prj = edgeFillRepeat(uv_prj);\n                    }\n\n                    gl_FragColor = texture2D(texture, uv_prj);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("fisheye", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform1f(t.uniform.aperture, e.aperture), this.ctx.uniform2f(t.uniform.center, e.x, e.y), this.ctx.uniform1i(t.uniform.edgeFill, e.edgeFill), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             wave(e) {
//                 let t = this.compiledProgram.get("wave");
//                 if (!t) {
//                     let e = "\n                precision mediump float;\n                uniform int type;\n                uniform float amplitude;\n                uniform float scale;\n                varying vec2 uv;\n                uniform int edgeApprox;\n                // uniform vec2 resolution;\n                uniform sampler2D texture;\n                uniform float rotate;\n                #define PI 3.14159265359\n\n                mat2 rotate2d(float _angle){\n                    return mat2(cos(_angle),-sin(_angle),\n                                sin(_angle),cos(_angle));\n                }\n\n                float cot(float angle) {\n                    return cos(angle) / sin(angle);\n                }\n\n                float sinewave(float rad) {\n                    return amplitude * sin(scale * 2. * PI * rad);\n                }\n\n                float trianglewave(float rad) {\n                    return amplitude * 2. / PI * asin(sin(scale * 2. * PI * rad));\n                }\n\n                float squarewave(float rad) {\n                    return amplitude * sign(sin(scale * 2. * PI * rad));\n                }\n\n                void main() {\n                    vec2 uvc = uv;\n\n                    uvc -= 0.5;\n                    uvc = rotate2d(-rotate) * uvc;\n\n                    if (type == 0) {\n                        // sine wave\n                        uvc.y = sinewave(uvc.x) + uvc.y;\n                    } else if (type == 1) {\n                        // triangular wave\n                        uvc.y = trianglewave(uvc.x) + uvc.y;\n                    } else if (type == 2) {\n                        // square wave\n                        uvc.y = squarewave(uvc.x) + uvc.y;\n                    } else {\n                        // sawtooth wave\n                        // uvc.y = amplitude * 2. / PI * atan(cot(scale * 2. * PI * uvc.x));\n                    }\n                    \n                    uvc = rotate2d(rotate) * uvc;\n                    uvc += 0.5;\n                    \n                    // Clamp\n                    // uvc = clamp(uvc, 0., 1.);\n\n                    if (edgeApprox == 2) {\n                        // Repeat acros the edges with the opposite side color\n                        if (uvc.x < 0.) uvc.x = 1. + uvc.x;\n                        if (uvc.y < 0.) uvc.y = 1. + uvc.y;\n                        if (uvc.x > 1.) uvc.x = uvc.x - 1.;\n                        if (uvc.y > 1.) uvc.y = uvc.y - 1.;\n                    } else if (edgeApprox == 1) {\n                        // Approximate (natural) around the edges with the reflection color\n                        if (uvc.x < 0.) uvc.x = -uvc.x;\n                        if (uvc.y < 0.) uvc.y = -uvc.y;\n                        if (uvc.x > 1.) uvc.x = 2. - uvc.x;\n                        if (uvc.y > 1.) uvc.y = 2. - uvc.y;    \n                    } else {\n                        // Don't approximate, render transparent\n                        if (uvc.x < 0. || uvc.x > 1. || \n                            uvc.y < 0. || uvc.y > 1.) {\n                            gl_FragColor = vec4 (0.0, 0.0, 0.0, 0.0);\n                            return;\n                        }    \n                    }\n\n                    gl_FragColor = texture2D(texture, uvc);\n                    return;\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("wave", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1i(t.uniform.type, e.type), this.ctx.uniform1f(t.uniform.amplitude, e.amplitude), this.ctx.uniform1f(t.uniform.scale, e.scale), this.ctx.uniform1f(t.uniform.rotate, e.rotate), this.ctx.uniform1i(t.uniform.edgeApprox, e.edgeApprox), this.draw(t)
//             }
//             reflect(e) {
//                 let t = this.compiledProgram.get("reflect");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                #define PI 3.14159265359\n                #define PI_2 6.2831\n\n                uniform sampler2D texture;\n                uniform int type;\n                uniform vec2 resolution;\n                uniform vec2 center;\n                uniform vec2 offset;\n\n                // constant integers for directions\n                const int RIGHT = 1, LEFT = -1, ZERO = 0;\n\n                const float ALMOST_ZERO = 0.00001;\n\n                mat2 rotate2d(float _angle){\n                    return mat2(cos(_angle),-sin(_angle),\n                                sin(_angle),cos(_angle));\n                }\n\n                vec2 squareImage(vec2 uv) {\n                    // return uv;\n\n                    float ar = resolution.x / resolution.y;\n\n                    if (resolution.x > resolution.y) {\n                        uv.y /= ar;\n                    }\n                    else {\n                        uv.x *= ar;\n                    }\n                    return uv;\n                }\n\n                vec2 squareImagereverse(vec2 uv) {\n                    float ar = resolution.x / resolution.y;\n\n                    if (resolution.x > resolution.y) {\n                        uv.y /= ar;\n                        uv.y += (1. - 1./ar) * 0.5;\n                    }\n                    else {\n                        uv.x *= ar;\n                        uv.x += (1. - ar) * 0.5;\n                    }\n                    return uv;\n                }\n\n                int direction(vec2 A, vec2 B, vec2 P) {\n                    // subtracting co-ordinates of point A from\n                    // B and P, to make A as origin\n                    B.x -= A.x;\n                    B.y -= A.y;\n                    P.x -= A.x;\n                    P.y -= A.y;\n                \n                    // Determining cross Product\n                    float cross_product = B.x * P.y - B.y * P.x;\n                \n                    // return RIGHT if cross product is positive\n                    if (cross_product > ALMOST_ZERO)\n                        return LEFT;\n                \n                    // return LEFT if cross product is negative\n                    if (cross_product < -ALMOST_ZERO)\n                        return RIGHT;\n                \n                    // return ZERO if cross product is zero.\n                    return ZERO;\n                }\n                \n                vec2 reflectmagic(vec2 uvc, int reflectfrom, mat2 transf, vec2 A, vec2 B, vec2 center) {\n\n                    vec2 cent = center - 0.5;\n                    uvc -= center;\n\n                    int dircent = direction(A, B, cent);\n                    int diruv = direction(A, B, uvc);\n\n                    uvc = dircent >= ZERO && diruv >= ZERO || dircent == LEFT && diruv == LEFT ? transf * uvc : uvc;\n\n                    uvc += center;\n\n                    uvc -= 0.5;\n\n                    if (reflectfrom == LEFT) {\n                        uvc = dircent >= ZERO ? uvc : transf * uvc;\n                    } else {\n                        uvc = dircent == LEFT ? uvc : transf * uvc;\n                    }\n\n                    uvc += 0.5;\n\n                    return uvc;\n                }\n\n                vec2 reflectx(vec2 uvc, int reflectfrom) {\n                    mat2 transf = mat2(-1., 0., 0., 1.);     \n\n                    vec2 A = vec2 (0., -1.);\n                    vec2 B = vec2 (0., 1.);\n\n                    return reflectmagic(uvc, reflectfrom, transf, A, B, center);\n                }\n\n                vec2 reflecty(vec2 uvc, int reflectfrom) {\n                    mat2 transf = mat2(1., 0., 0., -1.);    \n\n                    vec2 A = vec2 (-1., 0.);\n                    vec2 B = vec2 (1., 0.);\n\n                    return reflectmagic(uvc, reflectfrom, transf, A, B, center);\n                }\n\n                vec2 reflectxequalminusy(vec2 uvc, int reflectfrom) {\n                    mat2 transf = mat2(0., 1., 1., 0.);\n\n                    vec2 A = vec2 (-1., -1.);\n                    vec2 B = vec2 (1., 1.);\n\n                    return reflectmagic(uvc, reflectfrom, transf, A, B, vec2(center.x, 1.-center.x));\n                }\n\n                vec2 reflectxequaly(vec2 uvc, int reflectfrom) {\n                    mat2 transf = mat2(0., -1., -1., 0.);\n\n                    vec2 A = vec2 (-1., 1.);\n                    vec2 B = vec2 (1., -1.);\n\n                    return reflectmagic(uvc, reflectfrom, transf, A, B, vec2(center.x, center.x));\n                }\n\n                vec2 reflect(vec2 uvc) {\n                    //reflect-type-minus-x\n                    if (type == 1) {\n                        uvc = reflectx(uvc, LEFT);\n                    }\n                    //reflect-type-minus-y\n                    else if (type == 2) {\n                        uvc = reflecty(uvc, LEFT);\n                    }\n                    //reflect-type-plus-x\n                    if (type == 3) {\n                        uvc = reflectx(uvc, RIGHT);\n                    }\n                    //reflect-type-plus-y\n                    else if (type == 4) {\n                        uvc = reflecty(uvc, RIGHT);\n                    }\n                    //reflect-type-minus-x-minus-y\n                    else if (type == 5) {\n                        uvc = reflectx(uvc, LEFT);\n                        uvc = reflecty(uvc, LEFT);\n                    }\n                    //reflect-type-minus-x-plus-y\n                    else if (type == 6) {\n                        uvc = reflectx(uvc, LEFT);\n                        uvc = reflecty(uvc, RIGHT);\n                    }\n                    //reflect-type-plus-x-plus-y\n                    else if (type == 7) {\n                        uvc = reflectx(uvc, RIGHT);\n                        uvc = reflecty(uvc, RIGHT);\n                    }\n                    //reflect-type-plus-x-minus-y\n                    else if (type == 8) {\n                        uvc = reflectx(uvc, RIGHT);\n                        uvc = reflecty(uvc, LEFT);\n                    }\n                    //reflect-type-above-x-equalto-y\n                    else if (type == 9) {\n                        uvc = reflectxequalminusy(uvc, LEFT);\n                    }\n                    // reflect-type-below-x-equalto-minus-y\n                    else if (type == 10) {\n                        uvc = reflectxequaly(uvc, RIGHT);\n                    }\n                    // reflect-type-above-x-equalto-minus-y\n                    else if (type == 11) {\n                        uvc = reflectxequaly(uvc, LEFT);\n                    }\n                    // reflect-type-below-x-equalto-y\n                    else if (type == 12) {\n                        uvc = reflectxequalminusy(uvc, RIGHT);\n                    }\n                    return uvc;\n                }\n\n                void main(void) {\n                    vec2 uvc = reflect(uv) - offset;\n                    gl_FragColor = texture2D(texture, uvc);\n                }\n            ";
//                     t = this.compileShader(e), this.compiledProgram.set("reflect", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1i(t.uniform.type, e.type), this.ctx.uniform2f(t.uniform.center, e.x, e.y), this.ctx.uniform2f(t.uniform.offset, e.xo, e.yo), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             bloom(e) {
//                 let t = this.compiledProgram.get("bloom");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 px;\n                float thresh = .5;\n                \n                void main() {\n                    vec4 sum = vec4(0);\n                \n                    // mess of for loops due to gpu compiler/hardware limitations\n                    int j=-2;\n                    for( int i=-2; i<=2; i++) sum+=texture2D(texture,uv+vec2(i,j)*px);\n                    j=-1;\n                    for( int i=-2; i<=2; i++) sum+=texture2D(texture,uv+vec2(i,j)*px);\n                    j=0;\n                    for( int i=-2; i<=2; i++) sum+=texture2D(texture,uv+vec2(i,j)*px);\n                    j=1;\n                    for( int i=-2; i<=2; i++) sum+=texture2D(texture,uv+vec2(i,j)*px);\n                    j=2;\n                    for( int i=-2; i<=2; i++) sum+=texture2D(texture,uv+vec2(i,j)*px);\n                    sum/=25.0;\n                \n                    gl_FragColor= texture2D(texture, uv);\n                \n                    // use the blurred colour if it's bright enough\n                    if (length(sum) > thresh) {\n                        gl_FragColor += sum*amount;\n                    }\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("bloom", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.draw(t)
//             }
//             posterize(e) {
//                 let t = this.compiledProgram.get("posterize");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                float areas = 256.0 / amount;\n                float values = 255.0 / (amount - 1.0);\n                \n                void main() {\n                    vec4 px = texture2D(texture, uv);\n\n                    px.r = floor(values * floor((px.r*255.0) / areas))/255.0;\n                    px.g = floor(values * floor((px.g*255.0) / areas))/255.0;\n                    px.b = floor(values * floor((px.b*255.0) / areas))/255.0;\n\n                    gl_FragColor = px;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("posterize", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, 100 * e + 1), this.draw(t)
//             }
//             fringe(e) {
//                 let t = this.compiledProgram.get("fringe");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform vec2 amount;\n\n                void main() {\n                    vec2 dir = uv - vec2( .5 );\n                    float d = .7 * length( dir );\n                    normalize( dir );\n                    vec2 value = d * dir * amount;\n                \n                    vec4 c1 = texture2D( texture, uv - value);\n                    vec4 c2 = texture2D( texture, uv );\n                    vec4 c3 = texture2D( texture, uv + value);\n                    \n                    gl_FragColor = vec4( c1.r, c2.g, c3.b, c1.a + c2.a + c3.b);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("fringe", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.amount, e, e), this.draw(t)
//             }
//             rgbSplit(e) {
//                 let t = 0,
//                     n = 0,
//                     i = 0;
//                 const a = e.distance;
//                 switch (e.type) {
//                     case "red-blue":
//                         t = a, i = -a;
//                         break;
//                     case "green-red":
//                         t = -a, n = a;
//                         break;
//                     case "blue-green":
//                         n = -a, i = a;
//                         break;
//                     case "red":
//                         t = a;
//                         break;
//                     case "green":
//                         n = a;
//                         break;
//                     case "blue":
//                         i = a
//                 }
//                 let s = this.compiledProgram.get("rgb-split");
//                 if (!s) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                uniform vec2 r;\n                uniform vec2 g;\n                uniform vec2 b;\n\n                void main() {\n                \n                    vec4 px = texture2D(texture, uv);\n\n                    vec4 c1 = texture2D( texture, uv - r);\n                    vec4 c2 = texture2D( texture, uv - g);\n                    vec4 c3 = texture2D( texture, uv - b);\n                    \n                    gl_FragColor = mix(px, vec4( c1.r, c2.g, c3.b, (c1.a + c2.a + c3.a)/3.0), amount);\n                }";
//                     s = this.compileShader(e), this.compiledProgram.set("rgb-split", s)
//                 }
//                 this.ctx.useProgram(s.program), this.ctx.uniform1f(s.uniform.amount, e.amount);
//                 var r = e.direction * Math.PI / 180,
//                     o = Math.cos(r),
//                     l = Math.sin(r);
//                 this.ctx.uniform2f(s.uniform.r, o * t, l * t), this.ctx.uniform2f(s.uniform.g, o * n, l * n), this.ctx.uniform2f(s.uniform.b, o * i, l * i), this.draw(s)
//             }
//             interference(e) {
//                 let t = this.compiledProgram.get("interference");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float seed;\n                uniform float amount;\n                uniform int direction;\n\n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy, vec2(12.9898,78.233)*3.141)) * 43758.5453);\n                }\n\n                void main() {\n\n                    float rand1 = rand(vec2(seed,seed));\n                    float rand2 = rand(vec2(seed,rand1));\n                \n                    float rand1xy = rand(vec2(rand1*uv.x,rand2*uv.y));\n                    float rand2xy = rand(vec2(rand1*uv.y,rand2*uv.x));\n                  \n                    float rand1x = rand(vec2(rand1*uv.x,rand2));\n                    float rand2x = rand(vec2(rand1x,rand1x));     \n\n                    float rand1y = rand(vec2(rand1*uv.y,rand2));\n                    float rand2y = rand(vec2(rand1y,rand1y));                       \n                    \n                    if(direction == 0) {\n                        if(rand2y/100.0 > rand1y) {\n                            if(rand2xy < 0.3) gl_FragColor = vec4(rand1xy, rand1xy, rand1xy, 0.0);\n                            else gl_FragColor = texture2D(texture, uv);\n                        }\n                        else {\n                            gl_FragColor = texture2D(texture, vec2(uv.x + rand1y * amount, uv.y));\n                        }\n                    } else {\n                        if(rand2x/100.0 > rand1x) {\n                            if(rand2xy < 0.3) gl_FragColor = vec4(rand1xy, rand1xy, rand1xy, 0.0);\n                            else gl_FragColor = texture2D(texture, uv);\n                        }\n                        else {\n                            gl_FragColor = texture2D(texture, vec2(uv.x, uv.y + rand1x * amount));\n                        }\n                    }\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("interference", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.seed, e.seed), this.ctx.uniform1f(t.uniform.amount, e.amount / 15), this.ctx.uniform1i(t.uniform.direction, e.direction ? 1 : 0), this.draw(t)
//             }
//             bleed(e) {
//                 let t = this.compiledProgram.get("bleed");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float seed;\n                uniform float block;\n                uniform float amplitude;\n              \n                float rand(vec2 n) { \n                    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n                }\n                float randomRange (in vec2 sd, in float min, in float max) {\n                    return min + rand(sd) * (max - min);\n                }\n                float insideRange(float v, float bottom, float top) {\n                   return step(bottom, v) - step(top, v);\n                }\n\n                float noise(vec2 uv, float blockiness){   \n                    vec2 lv = fract(uv);\n                    vec2 id = floor(uv);\n                    \n                    float n1 = rand(id);\n                    float n2 = rand(id+vec2(1,0));\n                    float n3 = rand(id+vec2(0,1));\n                    float n4 = rand(id+vec2(1,1));\n                    \n                    vec2 u = smoothstep(0.0, 1.0 + blockiness, lv);\n\n                    return mix(mix(n1, n2, u.x), mix(n3, n4, u.x), u.y);\n                }\n\n                float fbm(vec2 uv, int count, float blockiness, float complexity) {\n                    float val = 0.0;\n                    float amp = 0.5;\n                    \n                    for (int i = 0; i < 1000; i++) {\n                        if(i == count) break;\n                        \n                        val += amp * noise(uv, blockiness);\n                        amp *= 0.5;\n                        uv *= complexity;    \n                    }  \n                    return val;\n                }\n\n                const float shift = 2.0; //2\n\n                void main()\n                {\n                    vec4 px = texture2D(texture, uv);\n\n                    for (float i = 0.0; i < 20.0; i += 1.0) {\n\n                        float sliceY = rand(vec2(seed, 2035.0 + float(i)));\n                        float sliceX = rand(vec2(seed, 3234.0 + float(i)));\n\n                        float sliceH = rand(vec2(seed, 2035.0 - float(i))) * 0.1;\n                        float sliceW = rand(vec2(seed, 3234.0 + float(i))) * 1.5;\n\n                        if(insideRange(uv.y, sliceY, fract(sliceY+sliceH)) == 1.0 && insideRange(uv.x, sliceX, fract(sliceX+sliceW)) == 1.0){\n                           \n                            vec2 id = floor(uv * 5.0);\n        \n                            // Generate shift amplitude\n                            float shift = amplitude * fbm(uv, int(id * 6.), shift, block);\n                            //float shift = randomRange(vec2(seed, 5234.0 + float(i)), -amplitude, amplitude);\n        \n                            float r = texture2D(texture, vec2(uv.x + shift, uv.y)).r * (1. - shift) ;\n                            float g = texture2D(texture, vec2(uv.x - shift, uv.y)).g * (1. - shift) + rand(id) * shift;\n                            float b = texture2D(texture, vec2(uv.x - shift, uv.y)).b * (1. - shift);\n        \n                            px = mix(vec4(r, g, b, px.a), px, 0.5);\n                        }\n                        gl_FragColor = px;\n                    }\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("bleed", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.seed, e.seed), this.ctx.uniform1f(t.uniform.amplitude, e.amplitude), this.ctx.uniform1f(t.uniform.block, e.block), this.draw(t)
//             }
//             slice(e) {
//                 let t = this.compiledProgram.get("slice");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float seed;\n                uniform float amount;\n                uniform float distance;\n                uniform int line;\n\n                //2D (returns 0 - 1)\n                float random2d(vec2 n) { \n                    return fract(sin(dot(n, vec2(12.9898, 4.1414))) * 43758.5453);\n                }\n                float randomRange (in vec2 sd, in float min, in float max) {\n                    return min + random2d(sd) * (max - min);\n                }\n                \n                // return 1 if v inside 1d range\n                float insideRange(float v, float bottom, float top) {\n                   return step(bottom, v) - step(top, v);\n                }\n                  \n                void main() {\n                  \n                    vec4 px = texture2D(texture, uv);\n\n                    for (float i = 0.0; i < 100.0; i += 1.0) {\n\n                        if(i == amount) break;\n\n                        float sliceY = random2d(vec2(seed, 2035.0 + float(i)));\n                        float sliceX = random2d(vec2(seed, 5234.0 + float(i)));\n\n                        float sliceH = random2d(vec2(seed, 2035.0 - float(i))) * 0.1;\n                        float sliceW = random2d(vec2(seed, 5234.0 + float(i))) * 1.5;\n\n                        float hOffset = randomRange(vec2(seed, 2035.0 + float(i)), -distance*.5, distance*.5);\n                        float wOffset = randomRange(vec2(seed, 5234.0 + float(i)), -distance, distance);\n\n                        vec2 uvOff = uv;\n                        uvOff.x += wOffset;\n                        uvOff.y += hOffset;\n\n                        if(insideRange(uv.y, sliceY, fract(sliceY+sliceH)) == 1.0 && (line == 1 || insideRange(uv.x, sliceX, fract(sliceX+sliceW)) == 1.0)){\n                            px = texture2D(texture, uvOff);\n                        }\n                    }\n                    gl_FragColor = px;\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("slice", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.seed, e.seed), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform1f(t.uniform.distance, e.distance / 3), this.ctx.uniform1i(t.uniform.line, e.line ? 1 : 0), this.draw(t)
//             }
//             mimicHDR(e) {
//                 let t = this.compiledProgram.get("mimicHDR");
//                 if (!t) {
//                     const e = "\n                precision highp float;\n\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform sampler2D blurMap;\n\n                uniform float amount;\n                uniform float contra;\n                \n                float blendSoftLight(float base, float blend) {\n                    return (blend<0.5)?(2.0*base*blend+base*base*(1.0-2.0*blend)):(sqrt(base)*(2.0*blend-1.0)+2.0*base*(1.0-blend));\n                }\n                vec4 blendSoftLight(vec4 base, vec4 blend) {\n                    return vec4(blendSoftLight(base.r,blend.r),blendSoftLight(base.g,blend.g),blendSoftLight(base.b,blend.b), base.a);\n                }\n\n                float blendOverlay(float base, float blend) {\n                    return base<0.5?(2.0*base*blend):(1.0-2.0*(1.0-base)*(1.0-blend));\n                }\n                vec4 blendOverlay(vec4 base, vec4 blend) {\n                    return vec4(blendOverlay(base.r,blend.r),blendOverlay(base.g,blend.g),blendOverlay(base.b,blend.b), base.a);\n                }\n               \n                void main() {\n                    vec4 px = texture2D(texture, uv);\n                    vec4 blur = texture2D(blurMap, uv);\n\n                    vec4 blend = blendOverlay(px, blur);\n                    blend = mix(blend, blendSoftLight(px, blend), contra);\n\n                    gl_FragColor = mix(px, blend, amount);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("mimicHDR", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform1f(t.uniform.contra, e.contra);
//                 let n = t.getTextureById("blurMap");
//                 n.createTexture(this.ctx, e.blurMap.width, e.blurMap.height), n.uploadData(this.ctx, e.blurMap), this.draw(t)
//             }
//             pixelate(e) {
//                 let t = this.compiledProgram.get("pixelate");
//                 if (!t) {
//                     const e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform vec2 resolution;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n                    float d = 1.0 / amount;\n                    float ar = resolution.x / resolution.y;\n                    float u = floor( uv.x / d ) * d + d*0.5;\n                    d = ar / amount;\n                    float v = floor( uv.y / d ) * d + d*0.5;\n                    gl_FragColor = texture2D(texture, vec2( u, v ) );\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("pixelate", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, 4 * (100 - 100 * e)), this.ctx.uniform2f(t.uniform.resolution, this.width, this.height), this.draw(t)
//             }
//             scanlines(e) {
//                 let t = this.compiledProgram.get("scanlines");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform float size;\n\n                uniform int colorize;\n                uniform int direction;\n\n                void main() {\n                    \n                    vec2 sl;\n                    vec4 scanlines;\n                    vec4 color = texture2D(texture, uv);\n\n                    if(direction == 0) {\n                        sl = vec2(sin(uv.y * size), cos(uv.y * size)) * amount;\n                    }\n                    else {\n                        sl = vec2(sin(uv.x * size), cos(uv.x * size)) * amount;\n                    }\n\n                    if(colorize == 1) {\n                        scanlines = vec4(sl.x, sl.y, sl.x, 1.0);\n                    } \n                    else {\n                        scanlines = vec4(sl.x, sl.x, sl.x, 1.0);\n                    }\n\n                    gl_FragColor = vec4(color.r + scanlines.r, color.g + scanlines.g, color.b + scanlines.b, color.a);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("scanlines", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.size, e.direction ? Math.round(this.height / e.size) : Math.round(this.width / e.size)), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform1i(t.uniform.colorize, e.colorize ? 1 : 0), this.ctx.uniform1i(t.uniform.direction, e.direction ? 1 : 0), this.draw(t)
//             }
//             mosaic(e) {
//                 let t = this.compiledProgram.get("mosaic");
//                 if (!t) {
//                     const e = "\n                precision highp float;\n                varying vec2 uv;\n                \n                uniform sampler2D texture;\n                uniform vec2 num;\n                \n                void main()\n                {\n                    vec2 uv = uv;\n                    vec2 uv2 = floor(uv*num)/num;\n                    uv -= uv2;\n                    uv *= num;\n                    gl_FragColor = texture2D(texture, \n                                    uv2 + vec2(step(1.0-uv.y,uv.x)/(2.0*num.x),\n                                    step(uv.x,uv.y)/(2.0*num.y)));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("mosaic", t)
//                 }
//                 let n = Math.round(100 * (1 - e)),
//                     i = Math.round(this.height / this.width * n);
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.num, n, i), this.draw(t)
//             }
//             bokeh(e) {
//                 let t = this.compiledProgram.get("bokeh-" + e.type);
//                 if (!t) {
//                     let n = "";
//                     switch (e.type) {
//                         case "circle":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform float size;\n                        uniform vec2 px;\n                        \n                        #define PI 3.1415926538\n                        #define KNL 100.0\n\n                        void main() {\n\n                            float spread = floor(size*30.0 + 0.5) + 1.0;\n                            float myx = spread*2.0;\n\n                            vec3 mcol = vec3(0.0);\n                            vec3 avg  = vec3(0.0);                          \n                            float rc = 0.0;\n\n                            for(float x = 0.0; x < KNL; x += 1.0)\n                            {\n                                if(x == myx) break;\n        \n                                for(float y = 0.0; y < KNL; y += 1.0)\n                                {\n                                    if(y == myx) break;\n        \n                                    float l = length(vec2(x-spread,y-spread));\n                                    if(l <= spread)\n                                    {\n                                        vec3 col = texture2D(texture, uv + px * vec2(x-spread,y-spread) * 2.0).rgb;\n                                        mcol = max(mcol, col);\n                                        avg += col;\n                                        rc += 1.0;\n                                    }\n                                }\n                            }\n                            gl_FragColor = vec4(mix(avg / rc, mcol, amount), 1.0);\n                        }";
//                             break;
//                         case "square":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform float size;\n                        uniform vec2 px;\n\n                        #define KNL 100.0\n\n                        void main() {\n\n                            float spread = floor(size*30.0 + 0.5) + 1.0;\n                            float myx = spread*2.0;\n\n                            vec3 mcol = vec3(0.0);\n                            vec3 avg = vec3(0.0);\n        \n                            for(float x = 0.0; x < KNL; x += 1.0)\n                            {\n                                if(x == myx) break;\n        \n                                for(float y = 0.0; y < KNL; y += 1.0)\n                                {\n                                    if(y == myx) break;\n        \n                                    vec3 col = texture2D(texture, uv + px * vec2(x-spread,y-spread) * 2.0).rgb;\n                                    mcol = max(mcol, col);\n                                    avg += col;\n                                }\n                            }\n                            gl_FragColor = vec4(mix(avg / (myx * myx), mcol, amount), 1.0);\n                        }";
//                             break;
//                         case "hexagon":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform float size;\n                        uniform vec2 px;\n                        \n                        #define PI 3.1415926538\n                        #define PI2 6.283185308\n                        #define KNL 100.0\n\n                        void main() {\n\n                            float spread = floor(size*30.0 + 0.5) + 1.0;\n                            float myx = spread*2.0;\n\n                            vec3 mcol = vec3(0.0);\n                            vec3 avg  = vec3(0.0);\n                            float rc = 0.0;\n        \n                            for(float x = 0.0; x < KNL; x += 1.0)\n                            {\n                                if(x == myx) break;\n        \n                                for(float y = 0.0; y < KNL; y += 1.0)\n                                {\n                                    if(y == myx) break;\n        \n                                    vec2 pt = vec2(x-spread, y-spread);\n        \n                                    float an = 0.33 + atan(pt.x, pt.y); //0.33 Angle\n                                    float ngon = cos(an - (PI2 * floor((PI + 6.0 * an) / PI2)) / 6.0) / cos(PI / 6.0); //6 corners\n                                    float ngonSdf = ngon * length(pt) - spread;\n                            \n                                    if(ngonSdf <= 0.0) {\n                                        vec3 col = texture2D(texture, uv + px * vec2(x-spread, y-spread) * 2.0).rgb;\n                                        mcol = max(mcol, col);\n                                        avg += col;\n                                        rc += 1.0;\n                                    }\n                                }\n                            }\n                            gl_FragColor = vec4(mix(avg / rc, mcol, amount), 1.0);\n                        }";
//                             break;
//                         case "cross":
//                             n = "\n                        precision highp float;\n                        varying vec2 uv;\n                        uniform sampler2D texture;\n                        uniform float amount;\n                        uniform float size;\n                        uniform vec2 px;\n                        \n                        #define KNL 100.0\n\n                        void main() {\n\n                            float spread = floor(size*30.0 + 0.5) + 1.0;\n        \n                            vec3 mcol = vec3(0.0);\n                            vec3 avg  = vec3(0.0);\n                            float rc = 0.0;\n        \n                            float myx = spread*2.0;\n                            float low = spread*.7;\n                            float high = spread*1.3;\n        \n                            for(float x = 0.0; x < KNL; x += 1.0)\n                            {\n                                if(x == myx) break;\n        \n                                for(float y = 0.0; y < KNL; y += 1.0)\n                                {\n                                    if(y == myx) break;\n        \n                                    if((y > low && y < high) || (x > low && x < high))\n                                    {\n                                        vec3 col = texture2D(texture, uv + px * vec2(x-spread,y-spread) * 2.0).rgb;\n                                        mcol = max(mcol, col);\n                                        avg += col;\n                                        rc += 1.0;\n                                    }\n                                }\n                            }\n                            gl_FragColor = vec4(mix(avg / rc, mcol, amount), 1.0);\n                        }"
//                     }
//                     t = this.compileShader(n), this.compiledProgram.set("bokeh-" + e.type, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.size, e.size), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform2f(t.uniform.px, 1 / this.width, 1 / this.height), this.draw(t)
//             }
//             art(e) {
//                 let t = this.compiledProgram.get("art");
//                 if (!t) {
//                     let e = ["precision highp float;", "uniform sampler2D texture;", "varying vec2 uv;", "void main() {", "vec4 color, tmp, add;", "vec2 uv = uv + vec2( sin( uv.y * 100.0 ), sin( uv.x * 100.0 )) * 0.0005;", "color = texture2D( texture, uv );", "add = tmp = texture2D( texture, uv + vec2( 0.0015, 0.0015 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( -0.0015, 0.0015 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( -0.0015, -0.0015 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( 0.0015, -0.0015 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( 0.002, 0.0 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( -0.002, 0.0 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( 0, 0.002 ));", "if( tmp.r < color.r ) color = tmp;", "add += tmp = texture2D( texture, uv + vec2( 0, -0.002 ));", "if( tmp.r < color.r ) color = tmp;", "uv = (uv - vec2(0.5)) * vec2(0.7);", "gl_FragColor = vec4(mix(color.rgb * color.rgb * vec3(1.8), color.ggg * color.ggg - vec3(0.4), vec3(dot(uv, uv))), 1.0);", "}"].join("\n");
//                     t = this.compileShader(e), this.compiledProgram.set("art", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.screenWidth, this.canvas.width), this.ctx.uniform1f(t.uniform.screenHeight, this.canvas.height), this.ctx.uniform1f(t.uniform.sampleDistance, e), this.ctx.uniform1f(t.uniform.waveFactor, .01), this.draw(t)
//             }
//             melt(e) {
//                 let t = this.compiledProgram.get("melt");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 center;\n              \n                float rand(vec2 co){\n                    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\n                }\n                vec3 mod289(vec3 x) {\n                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                }\n                  \n                vec2 mod289(vec2 x) {\n                    return x - floor(x * (1.0 / 289.0)) * 289.0;\n                }\n                  \n                vec3 permute(vec3 x) {\n                    return mod289(((x*34.0)+1.0)*x);\n                }\n                  \n                float snoise(vec2 v) {\n\n                    const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\n                                        0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\n                                       -0.577350269189626,  // -1.0 + 2.0 * C.x\n                                        0.024390243902439); // 1.0 / 41.0\n                  // First corner\n                    vec2 i  = floor(v + dot(v, C.yy) );\n                    vec2 x0 = v -   i + dot(i, C.xx);\n                  \n                  // Other corners\n                    vec2 i1;\n                    i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\n                    vec4 x12 = x0.xyxy + C.xxzz;\n                    x12.xy -= i1;\n                  \n                  // Permutations\n                    i = mod289(i); // Avoid truncation effects in permutation\n                    vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\n                          + i.x + vec3(0.0, i1.x, 1.0 ));\n                  \n                    vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy), dot(x12.zw,x12.zw)), 0.0);\n                    m = m*m ;\n                    m = m*m ;\n                                   \n                    vec3 x = 2.0 * fract(p * C.www) - 1.0;\n                    vec3 h = abs(x) - 0.5;\n                    vec3 ox = floor(x + 0.5);\n                    vec3 a0 = x - ox;\n                  \n                    m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\n                  \n                  // Compute final noise value at P\n                    vec3 g;\n                    g.x  = a0.x  * x0.x  + h.x  * x0.y;\n                    g.yz = a0.yz * x12.xz + h.yz * x12.yw;\n                    return 130.0 * dot(m, g);\n                }\n\n                void main() {\n                    vec4 px = texture2D(texture, uv);\n                    \n                    float opacity = 0.0;\n\n                    if(amount == 0.0 || amount == 1.0) {\n                        opacity = amount;\n                    } \n                    else {\n                        if(center.x == 0.5) {\n                            float dist = distance(center, uv)- amount*exp(snoise(vec2(uv.x, 0.0)));\n                            float r = amount - rand(vec2(uv.x, 0.1));\n                            opacity = dist <= r ? 1.0 : (amount*amount*amount);\n                        }\n                        else {\n                            float dist = distance(center, uv)- amount*exp(snoise(vec2(0.0, uv.y)));\n                            float r = amount - rand(vec2(0.1, uv.y));\n                            opacity = dist <= r ? 1.0 : (amount*amount*amount);\n                        }   \n                    }\n                    gl_FragColor = vec4(px.rgb, px.a * (1.0 - opacity));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("melt", t)
//                 }
//                 this.ctx.useProgram(t.program);
//                 let n = new D.Z(.5, .5);
//                 switch (e.direction) {
//                     case "down":
//                         n.y = 0;
//                         break;
//                     case "right":
//                         n.x = 1;
//                         break;
//                     case "left":
//                         n.x = 0;
//                         break;
//                     case "up":
//                         n.y = 1
//                 }
//                 this.ctx.uniform2f(t.uniform.center, n.x, n.y), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             gooey(e) {
//                 let t = this.compiledProgram.get("gooey");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n              \n                // http://byteblacksmith.com/improvements-to-the-canonical-one-liner-glsl-rand-for-opengl-es-2-0/\n                float random(vec2 co) {\n\n                    highp float a = 12.9898; //seed;\n                    highp float b = 78.233;\n                    highp float c = 43758.5453;\n                    highp float dt= dot(co.xy ,vec2(a,b));\n                    highp float sn= mod(dt,3.14);\n                    return fract(sin(sn) * c);\n                }\n\n                // 2D Noise based on Morgan McGuire @morgan3d\n                // https://www.shadertoy.com/view/4dS3Wd\n                float noise (in vec2 st) {\n\n                    vec2 i = floor(st);\n                    vec2 f = fract(st);\n\n                    // Four corners in 2D of a tile\n                    float a = random(i);\n                    float b = random(i + vec2(1.0, 0.0));\n                    float c = random(i + vec2(0.0, 1.0));\n                    float d = random(i + vec2(1.0, 1.0));\n\n                    // Cubic Hermine Curve.  Same as SmoothStep()\n                    vec2 u = f*f*(3.0-2.0*f);\n\n                    // Mix 4 coorners porcentages\n                    return mix(a, b, u.x) +\n                            (c - a)* u.y * (1.0 - u.x) +\n                            (d - b) * u.x * u.y;\n                }\n\n                void main() {\n\n                    vec4 col = texture2D(texture, uv);\n                    float n = noise(uv * 10.0); //scale\n                    \n                    float p = mix(-0.01, 1.0 + 0.01, amount);\n                    float lower = p - 0.01;\n                    float higher = p + 0.01;\n                    \n                    float opacity = smoothstep(lower, higher, n);\n                    \n                    gl_FragColor = vec4(col.rgb, col.a * opacity);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("gooey", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             block(e) {
//                 let t = this.compiledProgram.get("block");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n              \n                float rand (vec2 co) {\n                    return fract(sin(dot(co.xy, vec2(12.9898, 78.233))) * 43758.5453);\n                }\n\n                void main() {\n                    vec4 col = texture2D(texture, uv);\n                    \n                    float r = rand(floor(vec2(10.0) * uv)); //size\n                    float opacity = smoothstep(0.0, -0.5, r - (amount * (1.0 + 0.5)));\n                   \n                    gl_FragColor = vec4(col.rgb, col.a * (1.0 - opacity));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("block", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             curtain(e) {
//                 let t = this.compiledProgram.get("curtain-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n              \n                void main() {\n                    vec2 p = uv;\n                    vec4 col = vec4(0);\n                ";
//                     "horizontal" === e.direction ? n += "                    \n                        if(2.0 * abs(p.x-0.5) - amount > 0.0) {\n                            p = p + (p.x > 0.5 ? -1.0 : 1.0) * vec2(0.5*amount, 0.0);\n                            col = texture2D(texture, p);\n                        }\n                    " : n += "\n                        if(2.0 * abs(p.y-0.5) - amount > 0.0) {\n                            p = p + (p.y > 0.5 ? -1.0 : 1.0) * vec2(0.0, 0.5*amount);\n                            col = texture2D(texture, p);\n                        }\n                    ", n += "\n                    gl_FragColor = col;\n                }", t = this.compileShader(n), this.compiledProgram.set("curtain-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             blinds(e) {
//                 let t = this.compiledProgram.get("blinds-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n              \n                void main() {\n                    vec4 col = texture2D(texture, uv);\n                ";
//                     switch (e.direction) {
//                         case "up":
//                             n += "float opacity = step(smoothstep(-0.5, 0.0, (1.0 - uv.y) - amount * (1.0 + 0.5)), fract(12.0 * uv.y));";
//                             break;
//                         case "right":
//                             n += "float opacity = step(smoothstep(-0.5, 0.0, (1.0 - uv.x) - amount * (1.0 + 0.5)), fract(12.0 * uv.x));";
//                             break;
//                         case "left":
//                             n += "float opacity = step(smoothstep(-0.5, 0.0, uv.x - amount * (1.0 + 0.5)), fract(12.0 * uv.x));";
//                             break;
//                         case "down":
//                             n += "float opacity = step(smoothstep(-0.5, 0.0, uv.y - amount * (1.0 + 0.5)), fract(12.0 * uv.y));"
//                     }
//                     n += "\n                    gl_FragColor = vec4(col.rgb, col.a * (1.0 - opacity));\n                }", t = this.compileShader(n), this.compiledProgram.set("blinds-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             wipe(e) {
//                 let t = this.compiledProgram.get("wipe-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n              \n                void main() {\n                    vec4 col = texture2D(texture, uv);\n                ";
//                     switch (e.direction) {
//                         case "down":
//                             n += "float opacity = 1.0 - step(uv.y, amount);";
//                             break;
//                         case "right":
//                             n += "float opacity = step(uv.x, 1.0 - amount);";
//                             break;
//                         case "left":
//                             n += "float opacity = 1.0 - step(uv.x, amount);";
//                             break;
//                         case "up":
//                             n += "float opacity = step(uv.y, 1.0 - amount);"
//                     }
//                     n += "\n                    gl_FragColor = vec4(col.rgb, col.a * opacity);\n                }", t = this.compileShader(n), this.compiledProgram.set("wipe-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             swipe(e) {
//                 let t = this.compiledProgram.get("swipe-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec4 color; \n              \n                void main() {\n\n                ";
//                     switch (e.direction) {
//                         case "down":
//                             n += "\n                        if(amount > 0.5) gl_FragColor = vec4(color.rgb, 1.0 - step(1.0 + uv.y, amount*2.0));\n                        else gl_FragColor = step(uv.y, amount*2.0) == 1.0 ? color : texture2D(texture, uv);\n                    }";
//                             break;
//                         case "right":
//                             n += "\n                        if(amount > 0.5) gl_FragColor = vec4(color.rgb, 1.0 - step(2.0 - uv.x, amount*2.0));\n                        else gl_FragColor = step(1.0 - uv.x, amount*2.0) == 1.0 ? color : texture2D(texture, uv);\n                    }";
//                             break;
//                         case "left":
//                             n += "\n                        if(amount > 0.5) gl_FragColor = vec4(color.rgb, 1.0 - step(1.0 + uv.x, amount*2.0));\n                        else gl_FragColor = step(uv.x, amount*2.0) == 1.0 ? color : texture2D(texture, uv);\n                    }";
//                             break;
//                         case "up":
//                             n += "\n                        if(amount > 0.5) gl_FragColor = vec4(color.rgb, 1.0 - step(2.0 - uv.y, amount*2.0));\n                        else gl_FragColor = step(1.0 - uv.y, amount*2.0) == 1.0 ? color : texture2D(texture, uv);\n                    }"
//                     }
//                     t = this.compileShader(n), this.compiledProgram.set("swipe-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.ctx.uniform4f(t.uniform.color, e.color.r / 255, e.color.g / 255, e.color.b / 255, 1), this.draw(t)
//             }
//             slot(e) {
//                 let t = this.compiledProgram.get("slot");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 dir;\n\n                void main() {\n                   \n                    vec2 p = uv + amount * sign(dir);\n                    vec2 f = fract(p);\n                    float opacity = step(0.0, p.y) * step(p.y, 1.0) * step(0.0, p.x) * step(p.x, 1.0);\n                   \n                    vec4 col = texture2D(texture, p);\n                    gl_FragColor = vec4(col.rgb, col.a * opacity);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("slot", t)
//                 }
//                 let n = new D.Z(0, 0);
//                 switch (e.direction) {
//                     case "down":
//                         n.y = -1;
//                         break;
//                     case "right":
//                         n.x = 1;
//                         break;
//                     case "left":
//                         n.x = -1;
//                         break;
//                     case "up":
//                         n.y = 1
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.dir, n.x, n.y), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             marquee(e) {
//                 let t = this.compiledProgram.get("marquee");
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform vec2 dir;\n\n                void main() {\n                   \n                    vec2 p = uv + amount * sign(dir);\n                ";
//                     switch (e.direction) {
//                         case "up":
//                             n += "if(p.y < 0.0) p.y += 1.0;";
//                             break;
//                         case "down":
//                             n += "if(p.y > 1.0) p.y -= 1.0;";
//                             break;
//                         case "right":
//                             n += "if(p.x < 0.0) p.x += 1.0;";
//                             break;
//                         case "left":
//                             n += "if(p.x > 1.0) p.x -= 1.0;"
//                     }
//                     n += "\n         \n                    gl_FragColor = texture2D(texture, p);\n                }", t = this.compileShader(n), this.compiledProgram.set("marquee", t)
//                 }
//                 let n = new D.Z(0, 0);
//                 switch (e.direction) {
//                     case "up":
//                         n.y += -1;
//                         break;
//                     case "down":
//                         n.y += 1;
//                         break;
//                     case "right":
//                         n.x += -1;
//                         break;
//                     case "left":
//                         n.x += 1
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform2f(t.uniform.dir, n.x, n.y), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             split(e) {
//                 let t = this.compiledProgram.get("split-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n                uniform float sections;\n\n                void main() {\n                    vec2 p = uv;\n                ";
//                     "horizontal" === e.direction ? n += "float num = floor(uv.y*sections);\n                    float odd = num - (2.0 * floor(num/2.0));\n                    p.x = uv.x + amount*sign(odd-0.5);\n             \n                    float opacity = (p.x * (1.0-step(odd,0.5)*2.0) - sign(odd) > 0.0) ? 0.0 : 1.0;\n                    " : n += "float num = floor(uv.x*sections);\n                    float odd = num - (2.0 * floor(num/2.0));\n                    p.y = uv.y + amount*sign(odd-0.5);\n             \n                    float opacity = (p.y * (1.0-step(odd,0.5)*2.0) - sign(odd) > 0.0) ? 0.0 : 1.0;\n                    ", n += "vec4 col = texture2D(texture, p);\n                    gl_FragColor = vec4(col.rgb, col.a * opacity);\n                }", t = this.compileShader(n), this.compiledProgram.set("split-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.sections, e.sections), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//             circular(e) {
//                 let t = this.compiledProgram.get("circular");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                const float PI = 3.141592653589;\n\n                void main() {\n                    vec4 col = texture2D(texture, uv);\n\n                    vec2 p = uv*2.-1.;\n                    float opacity = smoothstep(0.0, 0.5, atan(p.y,p.x) - (amount-.5) * PI * 2.5);\n                   \n                    gl_FragColor = vec4(col.rgb, col.a * opacity);\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("circular", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             ripple(e) {
//                 let t = this.compiledProgram.get("ripple");
//                 if (!t) {
//                     let e = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n                    \n                    vec2 dir = uv - vec2(.5);\n                    float dist = length(dir);\n                    vec2 offset = dir * (sin(amount * dist * 100.0 - amount * 40.0) + 0.5) / 30.0; //100 amp 40 speed\n\n                    float opacity = smoothstep(0.2, 1.0, amount);\n\n                    vec4 px = texture2D(texture, uv + offset);                   \n                    gl_FragColor = vec4(px.rgb, px.a * (1.0 - opacity));\n                }";
//                     t = this.compileShader(e), this.compiledProgram.set("ripple", t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e), this.draw(t)
//             }
//             warp(e) {
//                 let t = this.compiledProgram.get("warp-" + e.direction);
//                 if (!t) {
//                     let n = "\n                precision highp float;\n                varying vec2 uv;\n                uniform sampler2D texture;\n                uniform float amount;\n\n                void main() {\n            ";
//                     switch (e.direction) {
//                         case "up":
//                             n += "float x = smoothstep(0.0, 1.0, (amount*2.0 + uv.y-1.0)); vec4 col = texture2D(texture, (uv-0.5)*(1.0-x)+0.5);";
//                             break;
//                         case "right":
//                             n += "float x = smoothstep(0.0, 1.0, (amount*2.0 + uv.x-1.0)); vec4 col = texture2D(texture, (uv-0.5)*(1.0-x)+0.5);";
//                             break;
//                         case "left":
//                             n += "float x = smoothstep(0.0, 1.0, ((1.0-amount)*2.0 + uv.x-1.0)); vec4 col = texture2D(texture, (uv-0.5)*(x)+0.5);";
//                             break;
//                         case "down":
//                             n += "float x = smoothstep(0.0, 1.0, ((1.0-amount)*2.0 + uv.y-1.0)); vec4 col = texture2D(texture, (uv-0.5)*(x)+0.5);"
//                     }
//                     n += "\n                gl_FragColor = vec4(col.rgb, col.a * (1.0 - amount));\n            }", t = this.compileShader(n), this.compiledProgram.set("warp-" + e.direction, t)
//                 }
//                 this.ctx.useProgram(t.program), this.ctx.uniform1f(t.uniform.amount, e.amount), this.draw(t)
//             }
//         }
//         class ke {
//             constructor(e, t, n = !1) {
//                 this.type = e, this.value = t, this.sidekick = n
//             }
//         }

//         function Te(e, t = !1) {
//             return new Promise(((i, a) => {
//                 (0, n.ZP)("browse") && (0, n.ZP)("browse").remove();
//                 let s = document.createElement("input");
//                 s.id = "browse", s.type = "file", s.multiple = e, s.className = "offscreen", t && (s.accept = "image/*", s.capture = "camera"), s.addEventListener("change", (() => {
//                     s.files.length > 0 ? i(s.files) : i(void 0), document.body.removeChild(s)
//                 }), !1), document.body.appendChild(s), s.click()
//             }))
//         }
//         var Ye = c(4231),
//             Se = c(2856);
//         class De {
//             constructor(e, t) {
//                 this.gen = e, this.item = t, this.parent = () => {
//                     this.gen.showGeneration(this.item.parentId)
//                 }, this.remix = () => {
//                     let e = {
//                         personal: this.item.personal,
//                         prompt: this.item.prompt,
//                         negative: this.item.negative,
//                         style: this.item.style,
//                         width: this.item.width,
//                         height: this.item.height
//                     };
//                     this.gen.setRemixPrompt(this.item.id, this.selected, (0, n.ZP)("pop-main-image"), e), this.gen.closeGeneration()
//                 }, this.prompt = () => {
//                     let e = {
//                         personal: this.item.personal,
//                         prompt: this.item.prompt,
//                         negative: this.item.negative,
//                         style: this.item.style,
//                         width: this.item.width,
//                         height: this.item.height
//                     };
//                     this.gen.setPrompt(e), this.gen.closeGeneration()
//                 }, this.setMainImage = (e, t) => {
//                     (0, n.ZP)(this.selected).classList.remove("selected"), (0, n.ZP)(e).classList.add("selected"), this.selected = e;
//                     const i = (0, n.ZP)("holder-of-" + e);
//                     i.classList.add("working");
//                     const a = (0, n.ZP)("pop-main-image");
//                     a.src = t, a.complete ? i.classList.remove("working") : a.onload = () => {
//                         i.classList.remove("working"), a.onload = void 0
//                     }, this.updatePrimaryIcon()
//                 }, this.fullscreen = () => {
//                     (0, x.Z)("generator", "fullscreen");
//                     let e = this.item.images.map((e => e.preview)),
//                         t = this.item.images.findIndex((e => e.id === this.selected));
//                     this.gen.showFullScreen(e, t)
//                 }, this.edit = async e => {
//                     (0, x.Z)("generator", "edit");
//                     const t = this.item.images.find((e => e.id === this.selected));
//                     location.href = "/express/?file=" + encodeURIComponent(t.source)
//                 }, this.download = () => {
//                     (0, x.Z)("generator", "download");
//                     const e = this.item.images.find((e => e.id === this.selected));
//                     var t = document.createElement("a");
//                     t.download = "pixlr-image-generator-" + e.id + ".png", t.href = e.source, document.body.appendChild(t), t.click(), document.body.removeChild(t)
//                 }, this.personal = async () => {
//                     if ((null === r.a || void 0 === r.a ? void 0 : r.a.id) === this.item.userId) {
//                         if ("premium" !== (null === r.a || void 0 === r.a ? void 0 : r.a.subscriptionAccess)) return (0, x.Z)("generator", "premium_block"), new Se.Z("generator", "premium");
//                         (0, x.Z)("generator", "personal"), await this.gen.personalGeneration(this.item)
//                     }
//                 }, this.report = async e => {
//                     if (!r.a) return void new l.Z;
//                     const t = e.target,
//                         i = new Y(t, "down"),
//                         a = async e => {
//                             const t = await fetch("/api/image-generator/report", {
//                                     headers: {
//                                         "Content-Type": "application/json"
//                                     },
//                                     method: "post",
//                                     body: JSON.stringify({
//                                         id: this.item.id,
//                                         reason: e
//                                     })
//                                 }),
//                                 n = await t.json();
//                             !0 !== n.status && (document.dispatchEvent(new CustomEvent("notification", {
//                                 detail: "Could not report"
//                             })), console.error("report failed with", n.message))
//                         },
//                         o = ["reportNudity", "reportViolence", "reportSelfHarm", "reportHateSpeech", "reportDepictsChild", "reportOther"].map((e => (0, n.T)("li", {
//                             onclick: () => {
//                                 i.cleanUp(), t.classList.add("disabled"), document.dispatchEvent(new CustomEvent("notification", {
//                                     detail: (0, s.Z)("reportThankyou")
//                                 })), a(e)
//                             },
//                             className: "button small outline",
//                             style: "width: 100%; margin-top: 5px"
//                         }, (0, s.Z)(e))));
//                     i.setContent((0, n.T)("div", {
//                         style: "padding: 10px"
//                     }, (0, n.T)("label", (0, s.Z)("reportReason")), (0, n.T)("ul", {
//                         style: "margin-top: 10px"
//                     }, ...o)))
//                 }, this.like = async () => {
//                     r.a ? (await this.gen.likeGeneration(this.item), (0, n.ZP)("pop-like").classList.toggle("run", this.item.liked), (0, n.ZP)("pop-like-img").src = this.item.liked ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg") : new l.Z
//                 }, this.primary = async () => {
//                     if (this.item.primary === this.selected) return;
//                     const e = await fetch("/api/image-generation/set-primary", {
//                             method: "POST",
//                             headers: {
//                                 "Content-Type": "application/json"
//                             },
//                             body: JSON.stringify({
//                                 id: this.item.id,
//                                 primary: this.selected
//                             })
//                         }),
//                         t = await e.json();
//                     if (!0 !== t.status) return document.dispatchEvent(new CustomEvent("notification", {
//                         detail: "Could not set cover"
//                     })), void console.error(t.message);
//                     this.item.primary = this.selected, this.updatePrimaryIcon()
//                 }, this.updatePrimaryIcon = () => {
//                     (0, n.ZP)("pop-primary") && ((0, n.ZP)("pop-primary").setAttribute("tooltip", this.item.primary === this.selected ? (0, s.Z)("imageGeneratorIsPrimary") : (0, s.Z)("imageGeneratorMakePrimary")), (0, n.ZP)("pop-primary-img").src = this.item.primary === this.selected ? "/img/icon/star-filled.svg" : "/img/icon/star-outline.svg")
//                 }, this.keyDown = e => {
//                     (0, n.ZP)("fullscreen") || "Escape" !== e.key && "Esc" !== e.key || this.close()
//                 }, this.close = () => {
//                     this.gen.closeGeneration()
//                 }, this.cleanUp = (e = !1) => {
//                     document.removeEventListener("keydown", this.keyDown, !1), this.dialog.classList.remove("ani"), this.modal.classList.remove("dim"), e ? (this.dialog.remove(), this.dialog = null, this.modal.remove(), this.modal = null) : setTimeout((() => {
//                         this.dialog.remove(), this.dialog = null, this.modal.remove(), this.modal = null
//                     }), 200)
//                 }, this.selected = t.primary, document.addEventListener("keydown", this.keyDown, !1), this.modal = (0, n.T)("div", {
//                     id: "modal-gen-pop",
//                     className: "modal dim"
//                 }), document.body.appendChild(this.modal), this.dialog = (0, n.T)("div", {
//                     id: "gen-pop"
//                 }), this.modal.appendChild(this.dialog), setTimeout((() => this.dialog.classList.add("ani")), 5), setTimeout((() => this.modal.classList.add("dim")), 5), this.dialog.append((0, n.T)("div", {
//                     id: "gen-pop-close",
//                     onclick: () => this.close()
//                 }, (0, n.T)("img", {
//                     src: "/img/icon/close.svg",
//                     className: "close ic"
//                 })), (0, n.T)("div", {
//                     id: "pop-left"
//                 }, (0, n.T)("div", {
//                     id: "pop-main"
//                 }), (0, n.T)("div", {
//                     id: "pop-leftover"
//                 })), (0, n.T)("div", {
//                     id: "pop-right"
//                 })), t.height > t.width && (0, n.ZP)("pop-left").classList.add("tall");
//                 const i = t.images.find((e => e.id === t.primary));
//                 (0, n.ZP)("pop-main").append((0, n.T)("img", {
//                     id: "pop-main-image",
//                     src: i.preview,
//                     onclick: this.fullscreen
//                 })), r.a && this.item.userId === r.a.id && (0, n.ZP)("pop-main").append((0, n.T)("div", {
//                     id: "pop-primary",
//                     className: "icon-button primary",
//                     tooltip: (0, s.Z)("imageGeneratorIsPrimary"),
//                     flow: "up",
//                     onclick: this.primary
//                 }, (0, n.T)("img", {
//                     id: "pop-primary-img",
//                     src: "/img/icon/star-filled.svg",
//                     width: 20,
//                     height: 20
//                 })));
//                 for (let s of t.images)(0, n.ZP)("pop-leftover").append((0, n.T)("div", {
//                     id: "holder-of-" + s.id
//                 }, (0, n.T)("img", {
//                     src: s.small,
//                     id: s.id,
//                     className: s.id === t.primary ? "selected" : "",
//                     onpointerdown: () => this.setMainImage(s.id, s.preview)
//                 })));
//                 let a = (0, n.T)("div", {
//                     id: "pop-icons",
//                     className: "buttons"
//                 });
//                 t.liked ? a.append((0, n.T)("div", {
//                     id: "pop-like",
//                     className: "icon-button like",
//                     onclick: this.like
//                 }, (0, n.T)("img", {
//                     id: "pop-like-img",
//                     src: "/img/icon/heart-filled.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 }))) : a.append((0, n.T)("div", {
//                     id: "pop-like",
//                     className: "icon-button like",
//                     onclick: this.like
//                 }, (0, n.T)("img", {
//                     id: "pop-like-img",
//                     src: "/img/icon/heart-outline.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 }))), a.append((0, n.T)("div", {
//                     className: "icon-button",
//                     tooltip: "Download",
//                     flow: "up",
//                     onclick: this.download
//                 }, (0, n.T)("img", {
//                     src: "/img/icon/download.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 }))), t.personal ? a.append((0, n.T)("div", {
//                     id: "pop-personal",
//                     className: "icon-button",
//                     tooltip: (0, s.Z)("imageGeneratorPrivate"),
//                     flow: "up",
//                     onclick: this.personal
//                 }, (0, n.T)("img", {
//                     id: "pop-personal-img",
//                     src: "/img/icon/locked.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 }))) : a.append((0, n.T)("div", {
//                     id: "pop-personal",
//                     className: "icon-button",
//                     tooltip: (0, s.Z)("imageGeneratorPublic"),
//                     flow: "up",
//                     onclick: this.personal
//                 }, (0, n.T)("img", {
//                     id: "pop-personal-img",
//                     src: "/img/icon/public.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 }))), a.append((0, n.T)("div", {
//                     className: "icon-button",
//                     tooltip: "Report Image",
//                     flow: "up",
//                     onclick: this.report
//                 }, (0, n.T)("img", {
//                     src: "/img/icon/report.svg",
//                     className: "ic",
//                     width: 20,
//                     height: 20
//                 })));
//                 let o = (0, n.ZP)("pop-right");
//                 o.append(a, (0, n.T)("h2", {
//                     className: "top-30"
//                 }, (0, s.Z)("imageGeneratorPrompt")), (0, n.T)("p", {
//                     style: "font-size: 14px;"
//                 }, t.prompt)), t.negative && o.append((0, n.T)("h3", {
//                     className: "top-20"
//                 }, (0, s.Z)("imageGeneratorNegativePrompt")), (0, n.T)("p", {
//                     style: "font-size: 14px;"
//                 }, t.negative));
//                 let d = (0, n.T)("div", {
//                     className: "tag-list top-50"
//                 });
//                 d.append((0, n.T)("span", {}, m.ly(new Date(t.createdAt)))), d.append((0, n.T)("span", {}, "Size: " + this.item.width + " x " + this.item.height + " px")), d.append((0, n.T)("span", {}, "Ratio: " + this.getRatio(this.item.width, this.item.height))), this.item.style && d.append((0, n.T)("span", {}, this.item.style.replace("-", " "))), this.item.likes > 1 && d.append((0, n.T)("span", {}, this.item.likes + " " + (0, s.Z)("like"))), o.append(d, (0, n.T)("div", {
//                     className: "buttons top-20",
//                     style: "justify-content:flex-start;flex-wrap:wrap;"
//                 }, (0, n.T)("div", {
//                     id: "pop-remix",
//                     className: "button med outline",
//                     onclick: this.remix
//                 }, (0, n.T)("img", {
//                     src: "/img/icon/remix.svg",
//                     className: "ic",
//                     width: 18,
//                     height: 18
//                 }), (0, s.Z)("imageGeneratorRemix")), (0, n.T)("div", {
//                     id: "pop-prompt",
//                     className: "button med outline",
//                     onclick: this.prompt
//                 }, (0, n.T)("img", {
//                     src: "/img/icon/prompt.svg",
//                     className: "ic",
//                     width: 18,
//                     height: 18
//                 }), (0, s.Z)("imageGeneratorUsePrompt")), (0, n.T)("div", {
//                     id: "pop-prompt",
//                     className: "button med outline",
//                     onclick: this.edit
//                 }, (0, n.T)("img", {
//                     src: "/img/tool/fill.svg",
//                     className: "ic",
//                     width: 18,
//                     height: 18
//                 }), (0, s.Z)("imageGeneratorEdit")))), t.parentId && o.append((0, n.T)("div", {
//                     id: "pop-parent",
//                     onclick: this.parent
//                 }, (0, n.T)("img", {
//                     src: t.parent.small
//                 }), (0, n.T)("span", {}, t.influence + "% " + (0, s.Z)("imageGeneratorInfluence"))))
//             }
//             getRatio(e, t) {
//                 let n = (e, t) => t <= 0 ? e : n(t, e % t),
//                     i = n(e, t);
//                 return e / i + ":" + t / i
//             }
//         }
//         class Pe {
//             constructor() {
//                 this.exp = [{
//                     prompt: "photo of a rhino dressed suit and tie sitting at a table in a bar with a bar stools, award winning photography, Elke vogelsang",
//                     negative: "cartoon, illustration, animation. face. male, female"
//                 }, {
//                     prompt: "a giant monster hybrid of dragon and spider, in dark dense foggy forest",
//                     negative: "cartoon"
//                 }, {
//                     prompt: "a little boy with ginger hair wearing denim overalls chasing bubbles. clean pastel painting, beautiful detailed face, lots of bubbles, photorealistic",
//                     negative: ""
//                 }, {
//                     prompt: "beautiful woman wearing fantastic hand-dyed cotton clothes, embellished beaded feather decorative fringe knots, colorful pigtail , subtropical flowers and plants, symmetrical face, intricate, elegant, highly detailed, 8k, digital painting,trending on pinterest, harper’s bazaar, concept, art, sharp focus, illustration, Tom Bagshaw, Lawrence Alma-Tadema, Alphonse Mucha",
//                     negative: ""
//                 }, {
//                     prompt: "a woman with black armored uniform, futuristic, giant robot, inspired by Krenz Cushart, neoism, kawacy, wlop, gits anime",
//                     negative: "disfigured, ugly, deformed"
//                 }, {
//                     prompt: "b&w photography, model shot, man in subway station, beautiful detailed eyes, professional award winning portrait photography, Zeiss 150mm f/2.8, highly detailed glossy eyes, high detailed skin, skin pores",
//                     negative: ""
//                 }, {
//                     prompt: "a painting of a fish on a black background, a digital painting, by Jason Benjamin, shutterstock, colorful vector illustration, mixed media style illustration, epic full color illustration, mascot illustration",
//                     negative: ""
//                 }, {
//                     prompt: "a woman in a pink dress walking down a street, cyberpunk art, inspired by Victor Mosquera, conceptual art, style of raymond swanland, yume nikki, restrained, robot girl, ghost in the shell",
//                     negative: ""
//                 }, {
//                     prompt: "a man in a space suit playing a guitar, inspired by Cyril Rolando, shutterstock, highly detailed illustration, full color illustration, very detailed illustration, dan mumford and alex grey style",
//                     negative: ""
//                 }, {
//                     prompt: "a realistic happy dog ​​playing in the grass",
//                     negative: ""
//                 }, {
//                     prompt: "Powerful liquid explosion, Green grapes, Green background, Commercial photography, A bright environment, Studio lighting, OC rendering, Solid color isolated platform, Professional photography, Color classification, Super detail",
//                     negative: ""
//                 }, {
//                     prompt: "Astronaut on Mars During sunset",
//                     negative: ""
//                 }, {
//                     prompt: "photo of a small cozy modern house in red woods on a mountain, solar panels, garage, driveway, great view, sunshine",
//                     negative: ""
//                 }, {
//                     prompt: "a house is reflected in the water of a lake, canon 5d mark iii photo, wlop : :, summer camp, wide shot of a cabin interior, by Henrik Weber, lush landscaping, canon 5d 50 mm lens, baris yesilbas, dramatic photograph, peacefull",
//                     negative: ""
//                 }, {
//                     prompt: "steampunk makeup, in the style of vray tracing, colorful impasto, uhd image, indonesian art, fine feather details with bright red and yellow and green and pink and orange colours, intricate patterns and details, dark cyan and amber makeup. Rich colourful plumes. Victorian style.",
//                     negative: ""
//                 }, {
//                     prompt: "Model in layered street style, standing against a vibrant graffiti wall, Vivid colors, Mirrorless, 28mm lens, f/2.5 aperture, ISO 400, natural dayligh",
//                     negative: ""
//                 }, {
//                     prompt: "fuji film candid portrait of the pope wearing sunglasses rocking out on the streets of miami at night, 80s album cover, vaporwave, synthwave, retrowave, cinematic, intense, highly detailed, dark ambient, beautiful, dramatic lighting, hyperrealistic",
//                     negative: ""
//                 }, {
//                     prompt: "an epic chibi comic book style portrait painting of a teddy bear ninja, character design by mark ryden and pixar and hayao miyazaki, unreal 5, daz, hyperrealistic, octane render, cosplay, rpg portrait, dynamic lighting, intricate detail, harvest fall vibrancy, cinematic",
//                     negative: ""
//                 }, {
//                     prompt: "a smiling beautiful sorceress with long dark hair and closed eyes wearing a dark top surrounded by glowing fire sparks at night, symmetrical body, symmetrical face, symmetrical eyes, magical light fog, deep focus+closeup, hyper-realistic, volumetric lighting, dramatic lighting, beautiful composition, intricate details, instagram, trending, photograph, film grain and noise, 8K, cinematic, post-production",
//                     negative: ""
//                 }, {
//                     prompt: "Beautiful city after rain, water over the roads, street lights fading away, street view, highly realistic and aesthetic view, beautiful landscape, wallpaper, high definition image, high quality",
//                     negative: ""
//                 }, {
//                     prompt: "ports car at highway",
//                     negative: ""
//                 }, {
//                     prompt: "Surrealist painting of a floating island with giant clock gears, populated with mythical creatures.",
//                     negative: ""
//                 }, {
//                     prompt: "Pop Art painting of a modern smartphone with classic art pieces appearing on the screen",
//                     negative: ""
//                 }, {
//                     prompt: "Baroque-style battle scene with futuristic robots and a golden palace in the background",
//                     negative: ""
//                 }, {
//                     prompt: "Black and white street photography of a rainy night in New York, reflections on wet pavement",
//                     negative: ""
//                 }, {
//                     prompt: "High-fashion photography in an abandoned industrial warehouse, with dramatic lighting and edgy outfits",
//                     negative: ""
//                 }, {
//                     prompt: "Macro photography of dewdrops on a spiderweb, with morning sunlight creating rainbows",
//                     negative: ""
//                 }, {
//                     prompt: "Aerial photography of a winding river through autumn forests, with vibrant red and orange foliage",
//                     negative: ""
//                 }, {
//                     prompt: "Urban portrait of a skateboarder in mid-jump, graffiti walls background, high shutter speed",
//                     negative: ""
//                 }, {
//                     prompt: "Underwater photography of a coral reef, with diverse marine life and a scuba diver for scale",
//                     negative: ""
//                 }, {
//                     prompt: "Vintage-style travel photography of a train station in Europe, with passengers and old luggage",
//                     negative: ""
//                 }, {
//                     prompt: "Digital painting of an astronaut floating in space, with a reflection of Earth in the helmet visor",
//                     negative: ""
//                 }, {
//                     prompt: "Concept art for a post-apocalyptic world with ruins, overgrown vegetation, and a lone survivor",
//                     negative: ""
//                 }, {
//                     prompt: "Sci-fi digital painting of an alien landscape with otherworldly plants, strange creatures, and distant planets",
//                     negative: ""
//                 }, {
//                     prompt: "Steampunk digital art of an inventor’s workshop, with intricate machines, gears, and steam engines",
//                     negative: ""
//                 }, {
//                     prompt: "A cute dog with a bowtie",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "A random person with a head that is made of flowers, photo by James C. Leyendecker, Afrofuturism, studio portrait, dynamic pose, national geographic photo, retrofuturism, biomorphic",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "robotic t-rex dinosaur, wearing robotic armor, (glowing eyes with smoke),((masterpiece)), (sci-fi background), night",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "photo of a man in the desert the style of realistic hyper-detailed portraits, transparent sunglasses, detailed facial features, dry, heat exhaustion cityscape, metallic ethereal Ian, eye-catching detail, blink-and-you-miss-it-detail ",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "A huge mothership hovering over the Sahara Desert, scale, cinematic still, dynamic composition",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "alien, glowing eyes, crystal body",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "Cute rabbit wearing a jacket, eating a carrot, 3D Style, rendering",
//                     negative: "blurry, blur, text, watermark, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "retro style, 90s photo of a captivating girl having lunch in a restaurant, a bustling metropolis, neon barrettes, enigmatic setting, retro",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "isometric view, isometric style, outdoors, sky, night, moon, neon, building, star (sky), night sky, scenery, city, sign, wide shot, crescent moon, neon lights",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "beautiful silhouette shot of a ballerina dancer",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "long exposure photography, cars, traffic, night",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "girl girl, small holographic bubbles detailed, surreal dramatic lighting shadow (lofi, analog-style), kodak film by Brandon Woelfel, Alyssa Monks",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "beautiful landscape, snow, mountains, glaciers, vivid colors",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "(dark magic), (grim), the Baphomet Unicorn, (intricate details), (hyperdetailed), 8k hdr, high detailed, lot of details, high quality, soft cinematic light, dramatic atmosphere, atmospheric perspective, standing on a nest of bones and skulls, look of disapproval, flesh hanging off its beak, pissed off look",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "sea monsters, scary, raining, storm, night, glowing eyes",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "a glowing jellyfish underwater, breathtaking",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "fashion photoshoot of a blonde man wearing sunglasses, a colorful costume, highly stylistic",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }, {
//                     prompt: "an Astronaut in space playing an electric guitar, stylistic, cinematic, earth visible in the background",
//                     negative: "blurry, blur, text, watermark, render, 3D, CGI, monochrome, B&W, cartoon, painting, smooth, plastic, blurry, low-resolution, deep-fried, oversaturated"
//                 }], this.activatePrompt = () => {
//                     (0, n.ZP)("generator-main-modal") && ((0, n.ZP)("generator-main-modal").remove(), (0, n.ZP)("generator-main").classList.remove("minimized"), this.resizeTextInput((0, n.ZP)("generator-positive")), this.resizeTextInput((0, n.ZP)("generator-negative")), r.a || ((0, n.ZP)("generator-generate").innerText = (0, s.Z)("common-signUpLogIn")), (0, n.ZP)("generator-positive").focus(), this.renderCreditAmount())
//                 }, this.toggleNegative = () => {
//                     (0, n.ZP)("prompt-negative").style.display = (0, n.ZP)("negative-prompt-toggle").checked ? "block" : "none", this.resizeTextInput((0, n.ZP)("generator-negative")), (0, n.ZP)("generator-negative").focus()
//                 }, this.selectedAspect = "square", this.selectAspect = e => {
//                     (0, n.ZP)("aspect-" + this.selectedAspect).classList.remove("selected"), (0, n.ZP)("aspect-type").classList.remove("aspect-" + this.selectedAspect), this.selectedAspect = e.currentTarget.getAttribute("data"), (0, n.ZP)("aspect-" + this.selectedAspect).classList.add("selected"), (0, n.ZP)("aspect-type").classList.add("aspect-" + this.selectedAspect), (0, n.ZP)("aspect-type-label").innerText = this.selectedAspect + " aspect"
//                 }, this.selectedStyle = "none", this.selectStyle = e => {
//                     var t;
//                     null === (t = (0, n.ZP)("style-" + this.selectedStyle)) || void 0 === t || t.classList.remove("selected"), this.selectedStyle = e.currentTarget.getAttribute("data"), (0, n.ZP)("style-" + this.selectedStyle).classList.add("selected"), "none" === this.selectedStyle ? ((0, n.ZP)("style-type-img").hidden = !0, (0, n.ZP)("style-type-img").removeAttribute("src"), (0, n.ZP)("style-type-label").innerText = "No Style") : ((0, n.ZP)("style-type-img").hidden = !1, (0, n.ZP)("style-type-img").src = "/img/preset/" + this.selectedStyle + ".webp", (0, n.ZP)("style-type-label").innerText = this.selectedStyle.replace(/-/g, " "))
//                 }, this.selectedColor = "none", this.selectColor = e => {
//                     var t;
//                     null === (t = (0, n.ZP)("color-" + this.selectedColor)) || void 0 === t || t.classList.remove("selected"), this.selectedColor = e.currentTarget.getAttribute("data"), (0, n.ZP)("color-" + this.selectedColor).classList.add("selected"), "none" === this.selectedColor ? ((0, n.ZP)("color-type-img").hidden = !0, (0, n.ZP)("color-type-img").removeAttribute("src"), (0, n.ZP)("color-type-label").innerText = "No Color") : ((0, n.ZP)("color-type-img").hidden = !1, (0, n.ZP)("color-type-img").src = "/img/preset/" + this.selectedColor + ".webp", (0, n.ZP)("color-type-label").innerText = this.selectedColor.replace(/-/g, " "))
//                 }, this.selectedLighting = "none", this.selectLighting = e => {
//                     var t;
//                     null === (t = (0, n.ZP)("lighting-" + this.selectedLighting)) || void 0 === t || t.classList.remove("selected"), this.selectedLighting = e.currentTarget.getAttribute("data"), (0, n.ZP)("lighting-" + this.selectedLighting).classList.add("selected"), "none" === this.selectedLighting ? ((0, n.ZP)("lighting-type-img").hidden = !0, (0, n.ZP)("lighting-type-img").removeAttribute("src"), (0, n.ZP)("lighting-type-label").innerText = "No Lighting") : ((0, n.ZP)("lighting-type-img").hidden = !1, (0, n.ZP)("lighting-type-img").src = "/img/preset/" + this.selectedLighting + ".webp", (0, n.ZP)("lighting-type-label").innerText = this.selectedLighting.replace(/-/g, " "))
//                 }, this.selectedComposition = "none", this.selectComposition = e => {
//                     var t;
//                     null === (t = (0, n.ZP)("composition-" + this.selectedComposition)) || void 0 === t || t.classList.remove("selected"), this.selectedComposition = e.currentTarget.getAttribute("data"), (0, n.ZP)("composition-" + this.selectedComposition).classList.add("selected"), "none" === this.selectedComposition ? ((0, n.ZP)("composition-type-img").hidden = !0, (0, n.ZP)("composition-type-img").removeAttribute("src"), (0, n.ZP)("composition-type-label").innerText = "No Composition") : ((0, n.ZP)("composition-type-img").hidden = !1, (0, n.ZP)("composition-type-img").src = "/img/preset/" + this.selectedComposition + ".webp", (0, n.ZP)("composition-type-label").innerText = this.selectedComposition.replace(/-/g, " "))
//                 }, this.random = () => {
//                     const e = (0, n.ZP)("generator-positive"),
//                         t = (0, n.ZP)("generator-negative"),
//                         i = m.sD(this.exp);
//                     e.value = i.prompt, t.value = i.negative, this.resizeTextInput((0, n.ZP)("generator-positive")), this.resizeTextInput((0, n.ZP)("generator-negative")), (0, n.ZP)("negative-prompt-toggle").checked = !!t.value, (0, n.ZP)("prompt-negative").style.display = t.value ? "block" : "none"
//                 }, this.clear = () => {
//                     (0, n.ZP)("generator-positive").value = "", (0, n.ZP)("generator-negative").value = "", (0, n.ZP)("generator-prompt-image").innerHTML = "", this.parentOriginal = void 0, (0, n.ZP)("style-" + this.selectedStyle).classList.remove("selected"), (0, n.ZP)("style-none").classList.add("selected"), this.selectedStyle = "none", (0, n.ZP)("style-type-img").hidden = !0, (0, n.ZP)("style-type-img").removeAttribute("src"), (0, n.ZP)("style-type-label").innerText = "No Style", (0, n.ZP)("color-" + this.selectedColor).classList.remove("selected"), (0, n.ZP)("color-none").classList.add("selected"), this.selectedColor = "none", (0, n.ZP)("color-type-img").hidden = !0, (0, n.ZP)("color-type-img").removeAttribute("src"), (0, n.ZP)("color-type-label").innerText = "No Color", (0, n.ZP)("lighting-" + this.selectedLighting).classList.remove("selected"), (0, n.ZP)("lighting-none").classList.add("selected"), this.selectedLighting = "none", (0, n.ZP)("lighting-type-img").hidden = !0, (0, n.ZP)("lighting-type-img").removeAttribute("src"), (0, n.ZP)("lighting-type-label").innerText = "No Lighting", (0, n.ZP)("composition-" + this.selectedComposition).classList.remove("selected"), (0, n.ZP)("composition-none").classList.add("selected"), this.selectedComposition = "none", (0, n.ZP)("composition-type-img").hidden = !0, (0, n.ZP)("composition-type-img").removeAttribute("src"), (0, n.ZP)("composition-type-label").innerText = "No Composition", this.resizeTextInput((0, n.ZP)("generator-positive")), this.resizeTextInput((0, n.ZP)("generator-negative"))
//                 }, this.resizeTextInput = e => {
//                     window.setTimeout((() => {
//                         let t = e.cloneNode();
//                         t.style.visibility = "false", e.parentNode.insertBefore(t, e), t.style.height = "auto", t.value = e.value, e.style.height = t.scrollTop + t.scrollHeight + 2 + "px", e.parentNode.removeChild(t)
//                     }), 0)
//                 }, this.addPromptImage = async () => {
//                     (0, x.Z)("open-browse"), await Te(!0).then((async e => {
//                         if (0 === e.length) return;
//                         let t = await (0, E.s4)(e[0]),
//                             n = m.qT(t, 1024);
//                         n = m._6(n, n.width, n.height, !0), this.setPromptImage(n)
//                     }))
//                 }, this.parentInfluence = 50, this.setPromptImage = (e, t, i) => {
//                     (0, n.ZP)("generator-prompt-image").innerHTML = "", this.parentOriginal = e;
//                     const a = M.Z.bestFit(e.width, e.height, 400, 400);
//                     let r = m._6(this.parentOriginal, a.width, a.height, !0);
//                     r.id = "prompt-image", t && r.setAttribute("parentid", t), i && r.setAttribute("parentImageId", i), (0, n.ZP)("generator-prompt-image").append((0, n.T)("div", {
//                         id: "prompt-image-holder",
//                         className: "flow-down",
//                         onclick: () => {
//                             this.parentOriginal = void 0, (0, n.ZP)("generator-prompt-image").innerHTML = ""
//                         }
//                     }, r));
//                     (0, n.ZP)("generator-prompt-image").append((0, n.T)("div", {
//                         id: "influence-setting",
//                         className: "quick-setting flow-down top-10",
//                         onclick: () => {
//                             const e = new Y((0, n.ZP)("influence-setting"), "down");
//                             e.content.append((0, n.T)("div", {
//                                 id: "influence-slider",
//                                 style: "padding-bottom:10px"
//                             }));
//                             new k("influence-slider", {
//                                 label: (0, s.Z)("generatorInfluence"),
//                                 range: [0, 100],
//                                 defaultValue: this.parentInfluence,
//                                 step: 1,
//                                 onChange: e => {
//                                     this.parentInfluence = e, (0, n.ZP)("influence-setting-value").innerText = e.toString() + "%"
//                                 }
//                             });
//                             e.position()
//                         }
//                     }, (0, n.T)("div", {
//                         id: "influence-setting-value",
//                         className: "icon"
//                     }, this.parentInfluence + "%"), (0, n.T)("span", {}, (0, s.Z)("imageGeneratorInfluence"))))
//                 }, this.setRemixPrompt = (e, t, n, i) => {
//                     this.setPrompt(i), this.setPromptImage(n, e, t)
//                 }, this.setPrompt = e => {
//                     var t;
//                     (0, n.ZP)("generator-wrap").scrollTop > 300 && (0, n.ZP)("generator-wrap").scrollTo(0, 0), this.activatePrompt(), this.clear(), (0, n.ZP)("generator-positive").value = e.prompt ? e.prompt : "", (0, n.ZP)("generator-negative").value = e.negative ? e.negative : "", e.style && (null === (t = (0, n.ZP)("style-" + this.selectedStyle)) || void 0 === t || t.classList.remove("selected"), this.selectedStyle = e.style, (0, n.ZP)("style-" + this.selectedStyle).classList.add("selected"), (0, n.ZP)("style-type-img").hidden = !1, (0, n.ZP)("style-type-img").src = "/img/preset/" + this.selectedStyle + ".webp", (0, n.ZP)("style-type-label").innerText = this.selectedStyle.replace(/-/g, " "));
//                     let i = e.width === e.height ? "square" : e.width > e.height ? "wide" : "tall";
//                     (0, n.ZP)("aspect-" + this.selectedAspect).classList.remove("selected"), (0, n.ZP)("aspect-type").classList.remove("aspect-" + this.selectedAspect), this.selectedAspect = i, (0, n.ZP)("aspect-" + this.selectedAspect).classList.add("selected"), (0, n.ZP)("aspect-type").classList.add("aspect-" + this.selectedAspect), (0, n.ZP)("aspect-type-label").innerText = this.selectedAspect + " aspect", this.resizeTextInput((0, n.ZP)("generator-positive")), this.resizeTextInput((0, n.ZP)("generator-negative"))
//                 }, this.generate = async () => {
//                     if (!r.a) return void new l.Z;
//                     if (!r.a.credits) return void(r.a.subscription ? new d.Z("credits") : new Se.Z("generator", "credit"));
//                     const e = (0, n.ZP)("generator-generate"),
//                         t = (0, n.ZP)("generator-result");
//                     if (e.classList.contains("working")) return;
//                     (0, x.Z)("generator", "generate");
//                     let i = {
//                         amount: 4,
//                         width: 1024,
//                         height: 1024
//                     };
//                     if (i.prompt = (0, n.ZP)("generator-positive").value, i.prompt.length < 4) return;
//                     e.classList.add("working"), i.negative = (0, n.ZP)("negative-prompt-toggle").checked ? (0, n.ZP)("generator-negative").value : void 0, i.style = "none" !== this.selectedStyle ? this.selectedStyle : void 0, i.influence = (0, n.ZP)("prompt-image") ? this.parentInfluence : void 0, i.parentId = (0, n.ZP)("prompt-image") && (0, n.ZP)("prompt-image").hasAttribute("parentid") ? (0, n.ZP)("prompt-image").getAttribute("parentid") : void 0, i.parentImageId = (0, n.ZP)("prompt-image") && (0, n.ZP)("prompt-image").hasAttribute("parentimageid") ? (0, n.ZP)("prompt-image").getAttribute("parentimageid") : void 0, i.image = (0, n.ZP)("prompt-image") ? await m._c(this.parentOriginal, {
//                         type: "image/jpeg",
//                         quality: .8
//                     }) : void 0, i.personal = (0, n.ZP)("private-prompt-toggle").checked, "tall" === this.selectedAspect && (i.width = 768, i.height = 1344), "wide" === this.selectedAspect && (i.width = 1344, i.height = 768), "none" !== this.selectedColor && (i.prompt += " (" + this.selectedColor.replace(/-/g, " ") + ")"), "none" !== this.selectedLighting && (i.prompt += " (" + this.selectedLighting.replace(/-/g, " ") + ")"), "none" !== this.selectedComposition && (i.prompt += " (" + this.selectedComposition.replace(/-/g, " ") + ")");
//                     let a = (0, n.T)("span", {});
//                     a.innerHTML = "<b>" + (i.image && i.parentId ? "Remix:" : "Generate:") + "</b> " + i.prompt + (i.negative ? " <b> Remove:</b> " + i.negative : "");
//                     const o = new Array;
//                     let c = (0, n.T)("div", {
//                         className: "pane-preview-holder"
//                     });
//                     for (let s = 0; s < i.amount; s++) {
//                         let e = (0, n.T)("div", {
//                             style: "aspect-ratio: " + i.width + "/" + i.height + " auto;",
//                             className: "pane-preview is-loading"
//                         });
//                         c.append(e), o.push(e)
//                     }
//                     let u = (0, n.T)("div", {
//                         className: "pane"
//                     }, (0, n.T)("div", {
//                         className: "pane-message"
//                     }, (0, n.T)("img", {
//                         src: "/img/icon/ai-small.svg",
//                         className: "ic"
//                     }), a), c);
//                     t.prepend(u);
//                     try {
//                         const e = i.image ? await async function(e) {
//                             const t = new FormData;
//                             t.set("amount", e.amount.toString()), t.set("width", e.width.toString()), t.set("height", e.height.toString()), t.set("personal", e.personal.toString()), t.append("prompt", e.prompt), t.set("image", e.image), e.style && t.append("style", e.style), e.negative && t.append("negative", e.negative), e.parentId && t.append("parentId", e.parentId), e.influence && t.append("influence", e.influence.toString()), e.parentImageId && t.append("parentImageId", e.parentImageId);
//                             const n = fetch("/api/openai/remix", {
//                                 method: "post",
//                                 body: t
//                             });
//                             return await (await n).json()
//                         }(i) : await async function(e) {
//                             const t = fetch("/api/openai/generate", {
//                                 method: "post",
//                                 body: JSON.stringify(Object.assign({}, e)),
//                                 headers: {
//                                     "Content-Type": "application/json"
//                                 }
//                             });
//                             return await (await t).json()
//                         }(i);
//                         if (!1 === e.status) {
//                             u.remove();
//                             let e = (0, n.T)("div", {
//                                 className: "pane"
//                             }, (0, n.T)("div", {
//                                 className: "pane-message"
//                             }, (0, n.T)("img", {
//                                 src: "/img/icon/error_alert.png"
//                             }), (0, n.T)("span", {}, (0, s.Z)("oopsGeneratorErrorPrompt")), (0, n.T)("img", {
//                                 className: "close",
//                                 src: "/img/icon/close.svg",
//                                 onclick: () => e.remove()
//                             })));
//                             return void t.prepend(e)
//                         }
//                         for (let t = 0; t < i.amount; t++) {
//                             let a = o[t];
//                             a.classList.remove("is-loading"), a.append((0, n.T)("img", {
//                                 src: e.data.images[t].image,
//                                 className: "result",
//                                 oncontextmenu: () => !1
//                             })), this.addOverlay(a, e.data.id, e.data.images[t], i)
//                         }(0, Ye.zp)("generation").then((() => {
//                             this.renderCreditAmount()
//                         }))
//                     } finally {
//                         e.classList.remove("working")
//                     }
//                 }, this.addOverlay = (e, t, i, a) => {
//                     const s = async (e, t, n, i) => {
//                             (0, x.Z)("generator", "remix");
//                             const a = await m.lU(n, !0);
//                             this.setRemixPrompt(e, t, a, i)
//                         },
//                         r = (0, n.T)("div", {
//                             className: "overlay"
//                         }, (0, n.T)("div", {
//                             className: "buttons"
//                         }, (0, n.T)("div", {
//                             className: "icon-button",
//                             tooltip: "Edit Image",
//                             flow: "up",
//                             onclick: e => {
//                                 e.stopImmediatePropagation(), (async (e, t) => {
//                                     (0, x.Z)("generator", "edit");
//                                     const n = await (0, Ye.JA)(e);
//                                     if (n.status) {
//                                         const e = n.data.images.find((e => e.id === t));
//                                         location.href = "/express/?file=" + encodeURIComponent(e.source)
//                                     }
//                                 })(t, i.id)
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/tool/fill.svg",
//                             width: 20,
//                             height: 20
//                         })), (0, n.T)("div", {
//                             className: "icon-button",
//                             tooltip: "Remix",
//                             flow: "up",
//                             onclick: e => {
//                                 e.stopImmediatePropagation(), s(t, i.id, i.image, a)
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/icon/remix.svg",
//                             width: 20,
//                             height: 20
//                         })), (0, n.T)("div", {
//                             className: "icon-button",
//                             tooltip: "Download",
//                             flow: "up",
//                             onclick: e => {
//                                 e.stopImmediatePropagation(), ((e, t) => {
//                                     (0, x.Z)("generator", "download");
//                                     var n = document.createElement("a");
//                                     n.download = "pixlr-image-generator-" + e + ".png", n.href = t, document.body.appendChild(n), n.click(), document.body.removeChild(n)
//                                 })(i.id, i.image)
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/icon/download.svg",
//                             width: 22,
//                             height: 22,
//                             style: "width:22px;height:22px"
//                         }))));
//                     e.addEventListener("click", (() => this.showFullScreen(i.image))), e.append(r)
//                 }, this.renderCreditAmount = () => {
//                     r.a ? (0, n.ZP)("generator-credit-count").innerHTML = r.a.credits + " " + (0, s.Z)("remaining") : (0, n.ZP)("generator-credit-count").style.display = "none"
//                 }, this.loadingFeed = !1, this.populateFeed = async e => {
//                     this.loadingFeed = !0, this.currentFeed !== e ? (this.currentFeed = e, this.currentPage = 1, this.mansory.clear()) : this.currentPage++;
//                     const t = await fetch(`/api/image-generator/feeds/${e}/${this.currentPage}`),
//                         i = await t.json();
//                     if (!0 !== i.status) return void console.error("fetching feed failed", i.message);
//                     let a = i.data.docs;
//                     for (let s of a) {
//                         const e = s.images.find((e => e.id === s.primary));
//                         let t = (0, n.T)("img", {
//                                 src: e.medium,
//                                 onclick: () => this.showGeneration(s.id),
//                                 alt: s.prompt
//                             }),
//                             i = (0, n.T)("div", {
//                                 className: "generator-feed-item ",
//                                 id: s.id
//                             }, (0, n.T)("div", {
//                                 id: "edit-" + s.id,
//                                 className: "icon-button edit",
//                                 onclick: () => this.editGeneration(s)
//                             }, (0, n.T)("img", {
//                                 src: "/img/tool/fill.svg",
//                                 alt: "Edit"
//                             })), (0, n.T)("div", {
//                                 id: "download-" + s.id,
//                                 className: "icon-button download",
//                                 onclick: () => this.downloadGeneration(s)
//                             }, (0, n.T)("img", {
//                                 src: "/img/icon/download.svg",
//                                 alt: "Download"
//                             })), (0, n.T)("div", {
//                                 id: "like-" + s.id,
//                                 className: "icon-button like",
//                                 onclick: () => this.likeGeneration(s)
//                             }, (0, n.T)("img", {
//                                 id: "like-img-" + s.id,
//                                 src: s.liked ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg",
//                                 alt: "Like"
//                             })), t);
//                         this.mansory.addChild(i), t.complete ? this.mansory.resizeAllGridItems() : t.onload = () => {
//                             this.mansory.resizeAllGridItems()
//                         }
//                     }
//                     this.loadingFeed = !1
//                 }, this.populateFeedWithMore = e => {
//                     e[0].intersectionRatio <= 0 || this.loadingFeed || this.populateFeed(this.currentFeed)
//                 }, this.editGeneration = async e => {
//                     (0, x.Z)("generator", "edit");
//                     const t = e.images.find((t => t.id === e.primary));
//                     location.href = "/express/?file=" + encodeURIComponent(t.source)
//                 }, this.downloadGeneration = async e => {
//                     (0, x.Z)("generator", "download");
//                     const t = e.images.find((t => t.id === e.primary));
//                     var n = document.createElement("a");
//                     n.download = "pixlr-image-generator-" + t.id + ".png", n.href = t.source, document.body.appendChild(n), n.click(), document.body.removeChild(n)
//                 }, this.likeGeneration = async e => {
//                     if (!r.a) return void new l.Z;
//                     const t = e.liked ? "unlike" : "like";
//                     (0, x.Z)("generator", t);
//                     (await fetch(`/api/image-generator/${t}`, {
//                         method: "POST",
//                         headers: {
//                             "Content-Type": "application/json"
//                         },
//                         body: JSON.stringify({
//                             id: e.id
//                         })
//                     })).json(), e.liked = !e.liked, (0, n.ZP)("like-" + e.id).classList.toggle("run", e.liked), (0, n.ZP)("like-img-" + e.id).src = e.liked ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg"
//                 }, this.personalGeneration = async e => {
//                     e.personal = !e.personal;
//                     const t = await fetch(`/api/image-generator/${e.id}/personal`, {
//                             method: "POST",
//                             headers: {
//                                 "Content-Type": "application/json"
//                             },
//                             body: JSON.stringify({
//                                 personal: e.personal
//                             })
//                         }),
//                         i = await t.json();
//                     if (!0 !== i.status) return console.error("Update personal failed", i.message), void document.dispatchEvent(new CustomEvent("notification", {
//                         detail: "Could not update personal"
//                     }));
//                     (0, n.ZP)("pop-personal").setAttribute("tooltip", e.personal ? (0, s.Z)("imageGeneratorPrivate") : (0, s.Z)("imageGeneratorPublic")), (0, n.ZP)("pop-personal-img").src = e.personal ? "/img/icon/locked.svg" : "/img/icon/public.svg"
//                 }, this.checkUrlForDirectLink = () => {
//                     var e = location.href.split("/"),
//                         t = e.pop() || e.pop();
//                     "image-generator" !== t && 24 === t.length && (this.direct = t, this.showGeneration(t))
//                 }, this.showGeneration = async e => {
//                     if (this.loading) return;
//                     (0, x.Z)("generator", "pop"), this.loading = !0;
//                     const t = await (0, Ye.JA)(e);
//                     if (t.status) {
//                         this.genpop && (this.genpop.cleanUp(!0), this.genpop = void 0);
//                         const i = t.data;
//                         this.genpop = new De(this, i);
//                         var n = location.href.split("/");
//                         (n.pop() || n.pop()) !== e && (document.title = "Image generator: " + i.prompt, window.history.pushState(e, "", "/image-generator/" + e + "/"), document.querySelector('meta[name="description"]').setAttribute("content", "Image generator: " + i.prompt))
//                     }
//                     this.loading = !1
//                 }, this.closeGeneration = () => {
//                     this.genpop && (this.genpop.cleanUp(), this.genpop = void 0), document.title = "Image generator", window.history.replaceState("", "", "/image-generator/")
//                 }, this.generationPopState = () => {
//                     this.genpop && (this.genpop.cleanUp(!0), this.genpop = void 0, document.title = "Image generator"), this.checkUrlForDirectLink()
//                 }, this.currFullScreen = 0, this.showFullScreen = (e, t = 0) => {
//                     const i = (0, n.T)("div", {
//                             id: "fullscreen",
//                             className: "full-screen"
//                         }),
//                         a = () => {
//                             i.remove(), document.onkeydown = void 0
//                         };
//                     if (Array.isArray(e)) {
//                         const s = () => {
//                                 this.currFullScreen -= 1, this.currFullScreen < 0 && (this.currFullScreen = e.length - 1), (0, n.ZP)("fullscreen-image-blur").src = e[this.currFullScreen], (0, n.ZP)("fullscreen-image-main").src = e[this.currFullScreen]
//                             },
//                             r = () => {
//                                 this.currFullScreen += 1, this.currFullScreen === e.length && (this.currFullScreen = 0), (0, n.ZP)("fullscreen-image-blur").src = e[this.currFullScreen], (0, n.ZP)("fullscreen-image-main").src = e[this.currFullScreen]
//                             };
//                         this.currFullScreen = t, i.appendChild((0, n.T)("img", {
//                             className: "blur",
//                             id: "fullscreen-image-blur",
//                             src: e[this.currFullScreen]
//                         })), i.appendChild((0, n.T)("img", {
//                             className: "main",
//                             id: "fullscreen-image-main",
//                             src: e[this.currFullScreen]
//                         })), e.length > 1 && (i.append((0, n.T)("div", {
//                             id: "fullscreen-chevron-back",
//                             className: "chevron",
//                             onclick: e => {
//                                 e.preventDefault(), e.stopImmediatePropagation(), s()
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/icon/back.svg"
//                         }))), i.append((0, n.T)("div", {
//                             id: "fullscreen-chevron-forward",
//                             className: "chevron",
//                             onclick: e => {
//                                 e.preventDefault(), e.stopImmediatePropagation(), r()
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/icon/forward.svg"
//                         })))), document.onkeydown = e => {
//                             "Escape" === e.key || "Esc" === e.key ? a() : "ArrowLeft" === e.key ? s() : "ArrowRight" === e.key && r()
//                         }
//                     } else i.appendChild((0, n.T)("img", {
//                         className: "blur",
//                         src: e
//                     })), i.appendChild((0, n.T)("img", {
//                         className: "main",
//                         src: e
//                     })), document.onkeydown = e => {
//                         "Escape" !== e.key && "Esc" !== e.key || a()
//                     };
//                     i.addEventListener("click", (() => a()), !1), document.body.append(i)
//                 }, t.ZP.product = "generator", new T, document.documentElement.classList.add(t.ZP.workspace, t.ZP.accent), this.checkUrlForDirectLink();
//                 const e = (0, n.ZP)("generator-positive"),
//                     i = (0, n.ZP)("generator-negative");
//                 (0, n.ZP)("generator-clear").onclick = () => this.clear(), (0, n.ZP)("generator-random").onclick = () => this.random(), (0, n.ZP)("generator-generate").onclick = () => this.generate(), (0, n.ZP)("generator-credit-count").onclick = () => {
//                     new d.Z("credits")
//                 }, (0, n.ZP)("generator-add-image").onclick = () => this.addPromptImage(), "premium" !== (null === r.a || void 0 === r.a ? void 0 : r.a.subscriptionAccess) && (0, n.ZP)("private-prompt-toggle").addEventListener("click", (e => {
//                     e.preventDefault(), (0, x.Z)("generator", "premium-block"), new Se.Z("generator", "premium")
//                 })), e.onkeydown = e => {
//                     this.resizeTextInput((0, n.ZP)("generator-positive")), "Enter" !== e.key || (0, n.ZP)("generator-generate").classList.contains("disabled") || (e.preventDefault(), this.generate())
//                 }, i.onkeydown = e => {
//                     this.resizeTextInput((0, n.ZP)("generator-negative")), "Enter" !== e.key || (0, n.ZP)("generator-generate").classList.contains("disabled") || (e.preventDefault(), this.generate())
//                 };
//                 let a = (0, n.ZP)("generator-aspect-selector").getElementsByTagName("li");
//                 for (var o = 0; o < a.length; o++) a[o].addEventListener("pointerdown", this.selectAspect, !1);
//                 let c = (0, n.ZP)("generator-style-selector").getElementsByTagName("li");
//                 for (o = 0; o < c.length; o++) c[o].addEventListener("pointerdown", this.selectStyle, !1);
//                 let u = (0, n.ZP)("generator-color-selector").getElementsByTagName("li");
//                 for (o = 0; o < u.length; o++) u[o].addEventListener("pointerdown", this.selectColor, !1);
//                 let h = (0, n.ZP)("generator-lighting-selector").getElementsByTagName("li");
//                 for (o = 0; o < h.length; o++) h[o].addEventListener("pointerdown", this.selectLighting, !1);
//                 let p = (0, n.ZP)("generator-composition-selector").getElementsByTagName("li");
//                 for (o = 0; o < p.length; o++) p[o].addEventListener("pointerdown", this.selectComposition, !1);
//                 (0, n.ZP)("negative-prompt-toggle").addEventListener("change", this.toggleNegative, !1), (0, n.ZP)("generator-main-modal").addEventListener("click", this.activatePrompt, !1), this.mansory = new S((0, n.ZP)("generator-feed-mansory"), "medium");
//                 let f = (0, n.ZP)("generator-feed-type").getElementsByTagName("li");
//                 for (o = 0; o < f.length; o++) f[o].addEventListener("click", (e => {
//                     var t, i;
//                     let a = e.currentTarget.getAttribute("data");
//                     this.currentFeed !== a && (null === (t = (0, n.ZP)("generator-feed-" + this.currentFeed)) || void 0 === t || t.classList.remove("selected"), null === (i = (0, n.ZP)("generator-feed-" + a)) || void 0 === i || i.classList.add("selected"), this.populateFeed(a))
//                 }), !1);
//                 this.observer = new IntersectionObserver(this.populateFeedWithMore), this.observer.observe((0, n.ZP)("can-you-see-me")), this.populateFeed("popular"), window.addEventListener("popstate", (e => {
//                     this.generationPopState()
//                 }))
//             }
//         }
//         var Ee = c(406),
//             Ce = c(9872);
//         class He {
//             constructor(e) {
//                 switch (this.type = e, this.type) {
//                     case He.EASE_LINEAR:
//                         this.calculate = He.linear;
//                         break;
//                     case He.EASE_TWENTY_LADDER:
//                         this.calculate = He.ladderTwenty;
//                         break;
//                     case He.EASE_TEN_LADDER:
//                         this.calculate = He.ladderTen;
//                         break;
//                     case He.EASE_FIVE_LADDER:
//                         this.calculate = He.ladderFive;
//                         break;
//                     case He.EASE_THREE_LADDER:
//                         this.calculate = He.ladderThree;
//                         break;
//                     case He.EASE_IN_SINE:
//                         this.calculate = He.inSine;
//                         break;
//                     case He.EASE_OUT_SINE:
//                         this.calculate = He.outSine;
//                         break;
//                     case He.EASE_IN_OUT_SINE:
//                         this.calculate = He.inOutSine;
//                         break;
//                     case He.EASE_IN_CUBIC:
//                         this.calculate = He.inCubic;
//                         break;
//                     case He.EASE_OUT_CUBIC:
//                         this.calculate = He.outCubic;
//                         break;
//                     case He.EASE_IN_OUT_CUBIC:
//                         this.calculate = He.inOutCubic;
//                         break;
//                     case He.EASE_IN_QUINT:
//                         this.calculate = He.inQuint;
//                         break;
//                     case He.EASE_OUT_QUINT:
//                         this.calculate = He.outQuint;
//                         break;
//                     case He.EASE_IN_OUT_QUINT:
//                         this.calculate = He.inOutQuint;
//                         break;
//                     case He.EASE_IN_CIRC:
//                         this.calculate = He.inCirc;
//                         break;
//                     case He.EASE_OUT_CIRC:
//                         this.calculate = He.outCirc;
//                         break;
//                     case He.EASE_IN_OUT_CIRC:
//                         this.calculate = He.inOutCirc;
//                         break;
//                     case He.EASE_IN_QUAD:
//                         this.calculate = He.inQuad;
//                         break;
//                     case He.EASE_OUT_QUAD:
//                         this.calculate = He.outQuad;
//                         break;
//                     case He.EASE_IN_OUT_QUAD:
//                         this.calculate = He.inOutQuad;
//                         break;
//                     case He.EASE_IN_QUART:
//                         this.calculate = He.inQuart;
//                         break;
//                     case He.EASE_OUT_QUART:
//                         this.calculate = He.outQuart;
//                         break;
//                     case He.EASE_IN_OUT_QUART:
//                         this.calculate = He.inOutQuart;
//                         break;
//                     case He.EASE_IN_EXPO:
//                         this.calculate = He.inExpo;
//                         break;
//                     case He.EASE_OUT_EXPO:
//                         this.calculate = He.outExpo;
//                         break;
//                     case He.EASE_IN_OUT_EXPO:
//                         this.calculate = He.inOutExpo;
//                         break;
//                     case He.EASE_IN_BACK:
//                         this.calculate = He.inBack;
//                         break;
//                     case He.EASE_OUT_BACK:
//                         this.calculate = He.outBack;
//                         break;
//                     case He.EASE_IN_OUT_BACK:
//                         this.calculate = He.inOutBack;
//                         break;
//                     case He.EASE_IN_BOUNCE:
//                         this.calculate = He.inBounce;
//                         break;
//                     case He.EASE_OUT_BOUNCE:
//                         this.calculate = He.outBounce;
//                         break;
//                     case He.EASE_IN_OUT_BOUNCE:
//                         this.calculate = He.inOutBounce;
//                         break;
//                     case He.EASE_IN_ELASTIC:
//                         this.calculate = He.inElastic;
//                         break;
//                     case He.EASE_OUT_ELASTIC:
//                         this.calculate = He.outElastic;
//                         break;
//                     case He.EASE_IN_OUT_ELASTIC:
//                         this.calculate = He.inOutElastic
//                 }
//             }
//             static inOutQuint(e) {
//                 return e < .5 ? 16 * e * e * e * e * e : 1 - Math.pow(-2 * e + 2, 5) / 2
//             }
//             static outCirc(e) {
//                 return Math.sqrt(1 - Math.pow(e - 1, 2))
//             }
//             static inOutCirc(e) {
//                 return e < .5 ? (1 - Math.sqrt(1 - Math.pow(2 * e, 2))) / 2 : (Math.sqrt(1 - Math.pow(-2 * e + 2, 2)) + 1) / 2
//             }
//         }
//         He.EASE_LINEAR = "linear", He.EASE_TWENTY_LADDER = "twenty-ladder", He.EASE_TEN_LADDER = "ten-ladder", He.EASE_FIVE_LADDER = "five-ladder", He.EASE_THREE_LADDER = "three-ladder", He.EASE_IN_SINE = "in-sine", He.EASE_OUT_SINE = "out-sine", He.EASE_IN_OUT_SINE = "in-out-sine", He.EASE_IN_CUBIC = "in-cubic", He.EASE_OUT_CUBIC = "out-cubic", He.EASE_IN_OUT_CUBIC = "in-out-cubic", He.EASE_IN_QUINT = "in-quint", He.EASE_OUT_QUINT = "out-quint", He.EASE_IN_OUT_QUINT = "in-out-quint", He.EASE_IN_CIRC = "in-circ", He.EASE_OUT_CIRC = "out-circ", He.EASE_IN_OUT_CIRC = "in-out-circ", He.EASE_IN_QUAD = "in-quad", He.EASE_OUT_QUAD = "out-quad", He.EASE_IN_OUT_QUAD = "in-out-quad", He.EASE_IN_QUART = "in-quart", He.EASE_OUT_QUART = "out-quart", He.EASE_IN_OUT_QUART = "in-out-quart", He.EASE_IN_EXPO = "in-expo", He.EASE_OUT_EXPO = "out-expo", He.EASE_IN_OUT_EXPO = "in-out-expo", He.EASE_IN_BACK = "in-back", He.EASE_OUT_BACK = "out-back", He.EASE_IN_OUT_BACK = "in-out-back", He.EASE_IN_BOUNCE = "in-bounce", He.EASE_OUT_BOUNCE = "out-bounce", He.EASE_IN_OUT_BOUNCE = "in-out-bounce", He.EASE_IN_ELASTIC = "in-elastic", He.EASE_OUT_ELASTIC = "out-elastic", He.EASE_IN_OUT_ELASTIC = "in-out-elastic", He.linear = e => e, He.ladderTwenty = e => He.ladder(e, 20), He.ladderTen = e => He.ladder(e, 10), He.ladderFive = e => He.ladder(e, 5), He.ladderThree = e => He.ladder(e, 3), He.ladder = (e, t) => Math.ceil(e * t) * (1 / t), He.inSine = e => 1 - Math.cos(e * Math.PI / 2), He.outSine = e => Math.sin(e * Math.PI / 2), He.inOutSine = e => -(Math.cos(Math.PI * e) - 1) / 2, He.inCubic = e => e * e * e, He.outCubic = e => 1 - Math.pow(1 - e, 3), He.inOutCubic = e => e < .5 ? 4 * e * e * e : 1 - Math.pow(-2 * e + 2, 3) / 2, He.inQuint = e => e * e * e * e * e, He.outQuint = e => 1 - Math.pow(1 - e, 5), He.inCirc = e => 1 - Math.sqrt(1 - Math.pow(e, 2)), He.inQuad = e => e * e, He.outQuad = e => 1 - (1 - e) * (1 - e), He.inOutQuad = e => e < .5 ? 2 * e * e : 1 - Math.pow(-2 * e + 2, 2) / 2, He.inQuart = e => e * e * e * e, He.outQuart = e => 1 - Math.pow(1 - e, 4), He.inOutQuart = e => e < .5 ? 8 * e * e * e * e : 1 - Math.pow(-2 * e + 2, 4) / 2, He.inExpo = e => 0 === e ? 0 : Math.pow(2, 10 * e - 10), He.outExpo = e => 1 === e ? 1 : 1 - Math.pow(2, -10 * e), He.inOutExpo = e => 0 === e ? 0 : 1 === e ? 1 : e < .5 ? Math.pow(2, 20 * e - 10) / 2 : (2 - Math.pow(2, -20 * e + 10)) / 2, He.inBack = e => {
//             const t = 1.70158;
//             return 2.70158 * e * e * e - t * e * e
//         }, He.outBack = e => {
//             const t = 1.70158;
//             return 1 + 2.70158 * Math.pow(e - 1, 3) + t * Math.pow(e - 1, 2)
//         }, He.inOutBack = e => {
//             const t = 2.5949095;
//             return e < .5 ? Math.pow(2 * e, 2) * (7.189819 * e - t) / 2 : (Math.pow(2 * e - 2, 2) * ((t + 1) * (2 * e - 2) + t) + 2) / 2
//         }, He.inBounce = e => 1 - He.outBounce(1 - e), He.outBounce = e => {
//             const t = 7.5625,
//                 n = 2.75;
//             return e < 1 / n ? t * e * e : e < 2 / n ? t * (e -= 1.5 / n) * e + .75 : e < 2.5 / n ? t * (e -= 2.25 / n) * e + .9375 : t * (e -= 2.625 / n) * e + .984375
//         }, He.inOutBounce = e => e < .5 ? (1 - He.outBounce(1 - 2 * e)) / 2 : (1 + He.outBounce(2 * e - 1)) / 2, He.inElastic = e => {
//             const t = 2 * Math.PI / 3;
//             return 0 === e ? 0 : 1 === e ? 1 : -Math.pow(2, 10 * e - 10) * Math.sin((10 * e - 10.75) * t)
//         }, He.outElastic = e => {
//             const t = 2 * Math.PI / 3;
//             return 0 === e ? 0 : 1 === e ? 1 : Math.pow(2, -10 * e) * Math.sin((10 * e - .75) * t) + 1
//         }, He.inOutElastic = e => {
//             const t = 2 * Math.PI / 4.5;
//             return 0 === e ? 0 : 1 === e ? 1 : e < .5 ? -Math.pow(2, 20 * e - 10) * Math.sin((20 * e - 11.125) * t) / 2 : Math.pow(2, -20 * e + 10) * Math.sin((20 * e - 11.125) * t) / 2 + 1
//         };
//         const Ze = He;
//         class Ae {
//             constructor(e, t, n = 0) {
//                 this.shouldRun = e => {
//                     const t = e < this.idelay,
//                         n = e > this.idelay + this.iduration;
//                     return n && !this.end ? (this.end = !0, !0) : !t && !n
//                 }, this.getDuration = () => this.idelay + this.iduration, this.fill = e => {
//                     this.initial = void 0 === this.motion.value.set ? e : this.motion.value.set;
//                     const t = void 0 === this.motion.value.from ? this.initial : this.motion.value.from,
//                         n = void 0 === this.motion.value.to ? this.initial : this.motion.value.to;
//                     return 2 === this.motion.direction || 4 === this.motion.direction ? n - (n - t) : t + (n - t)
//                 }, this.begin = e => {
//                     this.end = !1, this.playing = !0, this.initial = void 0 === this.motion.value.set ? e : this.motion.value.set, this.ibefore = void 0 === this.motion.value.from ? this.initial : this.motion.value.from, this.iafter = void 0 === this.motion.value.to ? this.initial : this.motion.value.to
//                 }, this.step = e => {
//                     if (0 === e || e - this.idelay < 1 || 0 === this.ipass || 0 === this.motion.iterations) return this.ibefore;
//                     let t = Math.ceil((e - this.idelay) / this.ipass),
//                         n = (e - this.idelay) % this.ipass,
//                         i = 0 === n ? 1 : n / this.ipass;
//                     (this.end || t > this.motion.iterations) && (t = this.motion.iterations, i = 1);
//                     const a = (this.iafter - this.ibefore) * this.ease.calculate(i);
//                     return this.flip(t) ? this.iafter - a : this.ibefore + a
//                 }, this.flip = e => 2 === this.motion.direction || 3 === this.motion.direction && e % 2 == 0 || 4 === this.motion.direction && e % 2 == 1, this.motion = e, this.ease = new Ze(e.easing), this.idelay = Math.round(this.motion.delay * t + n), this.iduration = Math.round(this.motion.duration * t), this.ipass = 0 === this.iduration || 0 === this.motion.iterations ? 0 : this.iduration / this.motion.iterations
//             }
//         }
//         class je {
//             constructor(e, t) {
//                 this.scantime = 0, this.scantype = "none", this.getDuration = () => {
//                     let e = 0;
//                     return this.transitions.forEach((t => {
//                         e = Math.max(e, t.getDuration())
//                     })), e
//                 }, this.prepare = e => {
//                     for (const t of this.transitions) t.motion.fill && (t.begin(this.getProperty(t.motion.method, e)), this.setProperty(t.motion.method, t.motion.manner, e, t.step(0)))
//                 }, this.step = (e, t) => {
//                     for (const n of this.transitions) n.shouldRun(e) && (n.playing || n.begin(this.getProperty(n.motion.method, t)), this.setProperty(n.motion.method, n.motion.manner, t, n.step(e)))
//                 }, this.setProperty = (e, t, n, i) => {
//                     switch (e) {
//                         case "opacity":
//                             this.layer.transform.opacity = i;
//                             break;
//                         case "rotate":
//                             this.layer.transform.rotation = 360 * i, this.layer.transform.rAnchor = this.anchorToPoint(t);
//                             break;
//                         case "scale":
//                             this.layer.transform.scale.x = i, this.layer.transform.scale.y = i, this.layer.transform.sAnchor = this.anchorToPoint(t);
//                             break;
//                         case "scale-width":
//                             this.layer.transform.scale.x = i, this.layer.transform.sAnchor = this.anchorToPoint(t);
//                             break;
//                         case "scale-height":
//                             this.layer.transform.scale.y = i, this.layer.transform.sAnchor = this.anchorToPoint(t);
//                             break;
//                         case "self-x":
//                             this.layer.transform.offset.x = i * this.layer.getRect().width;
//                             break;
//                         case "self-y":
//                             this.layer.transform.offset.y = i * this.layer.getRect().height;
//                             break;
//                         case "offset-x":
//                             this.layer.transform.offset.x = i * n.width;
//                             break;
//                         case "offset-y":
//                             this.layer.transform.offset.y = i * n.height;
//                             break;
//                         case "viewport-x":
//                             this.layer.transform.offset.x = i * n.width - this.layer.getRect().center().x;
//                             break;
//                         case "viewport-y":
//                             this.layer.transform.offset.y = i * n.height - this.layer.getRect().center().y;
//                             break;
//                         case "viewport-box-x":
//                             const a = this.transformedRectWidth();
//                             this.layer.transform.offset.x = this.layer.getRect().center().x - (.5 * a + i * (n.width - a));
//                             break;
//                         case "viewport-box-y":
//                             const s = this.transformedRectHeight();
//                             this.layer.transform.offset.y = this.layer.getRect().center().y - (.5 * s + i * (n.height - s));
//                             break;
//                         default:
//                             this.setShader(e, i, t)
//                     }
//                 }, this.transformedRectWidth = () => this.layer.getRect().width * this.layer.transform.scale.x, this.transformedRectHeight = () => this.layer.getRect().height * this.layer.transform.scale.y, this.anchorToPoint = e => {
//                     switch (e) {
//                         case "topleft":
//                             return new D.Z(0, 0);
//                         case "top":
//                             return new D.Z(.5, 0);
//                         case "topright":
//                             return new D.Z(1, 0);
//                         case "left":
//                             return new D.Z(0, .5);
//                         case "center":
//                             return new D.Z(.5, .5);
//                         case "right":
//                             return new D.Z(1, .5);
//                         case "bottomleft":
//                             return new D.Z(0, 1);
//                         case "bottom":
//                             return new D.Z(.5, 1);
//                         case "bottomright":
//                             return new D.Z(1, 1)
//                     }
//                     return new D.Z(.5, .5)
//                 }, this.setShader = (e, t, n) => {
//                     switch (this.shaders || (this.shaders = new Le), e) {
//                         case "wipe":
//                             this.shaders.addShader("wipe", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "swipe":
//                             this.shaders.addShader("swipe", {
//                                 direction: n,
//                                 amount: t,
//                                 color: this.getLayerAccent()
//                             });
//                             break;
//                         case "slot":
//                             this.shaders.addShader("slot", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "blinds":
//                             this.shaders.addShader("blinds", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "melt":
//                             this.shaders.addShader("melt", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "warp":
//                             this.shaders.addShader("warp", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "curtain":
//                             this.shaders.addShader("curtain", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         case "split":
//                             this.shaders.addShader("split", {
//                                 direction: n,
//                                 sections: 2,
//                                 amount: t
//                             });
//                             break;
//                         case "line":
//                             this.shaders.addShader("split", {
//                                 direction: n,
//                                 sections: 8,
//                                 amount: t
//                             });
//                             break;
//                         case "marquee":
//                             this.shaders.addShader("marquee", {
//                                 direction: n,
//                                 amount: t
//                             });
//                             break;
//                         default:
//                             this.shaders.addShader(e, t)
//                     }
//                     this.layer.transient = this.shaders.apply(this.layer.baked ? this.layer.baked : this.layer.canvas)
//                 }, this.getLayerAccent = () => this.layer instanceof ue && "color" === this.layer.fill.getType() ? this.layer.fill.value : new Z(255, 255, 255), this.getProperty = (e, t) => {
//                     switch (e) {
//                         case "opacity":
//                             return this.layer.transform.opacity;
//                         case "rotate":
//                             return this.layer.transform.rotation / 360;
//                         case "scale":
//                         case "scale-width":
//                             return this.layer.transform.scale.x;
//                         case "scale-height":
//                             return this.layer.transform.scale.y;
//                         case "self-x":
//                             return this.layer.transform.offset.x / this.layer.getRect().width;
//                         case "self-y":
//                             return this.layer.transform.offset.y / this.layer.getRect().height;
//                         case "offset-x":
//                             return this.layer.transform.offset.x / t.width;
//                         case "offset-y":
//                             return this.layer.transform.offset.y / t.height;
//                         case "viewport-x":
//                             return (this.layer.getRect().center().x + this.layer.transform.offset.x) / t.width;
//                         case "viewport-y":
//                             return (this.layer.getRect().center().y + this.layer.transform.offset.y) / t.height;
//                         case "viewport-box-x":
//                             return (this.layer.getRect().center().x + this.layer.transform.offset.x) / (t.width - this.transformedRectWidth());
//                         case "viewport-box-y":
//                             return (this.layer.getRect().center().y + this.layer.transform.offset.y) / (t.height - this.transformedRectHeight())
//                     }
//                     return 0
//                 }, this.finish = () => {
//                     this.layer.transient = void 0, this.layer.transform = void 0
//                 }, this.layer = e, this.transitions = t, this.layer.transform = {
//                     sAnchor: new D.Z(.5, .5),
//                     rAnchor: new D.Z(.5, .5),
//                     scale: new D.Z(1, 1),
//                     offset: new D.Z(0, 0),
//                     rotation: 0,
//                     opacity: 1
//                 }
//             }
//         }
//         je.bakeAnimators = e => {
//             const t = new Array;
//             for (const n of e.layers)
//                 if (n.rect)
//                     if (!n.animation && e.animation) {
//                         const i = je.createPageTransitions(n, e, e.animation);
//                         i.length > 0 && t.push(new je(n, i))
//                     } else if (n.animation && !n.animation.block) {
//                 const e = je.createLayerTransitions(n.animation);
//                 t.push(new je(n, e))
//             }
//             return t
//         }, je.createPageTransitions = (e, t, n) => {
//             const i = t.layerNr(e.id),
//                 a = t.layers.length,
//                 s = new Ce.Z(t.width, t.height),
//                 r = je.filterMotions(n.enter, e, i, a, s),
//                 o = je.filterMotions(n.scene, e, i, a, s),
//                 l = je.filterMotions(n.exit, e, i, a, s);
//             if (!r && !o && !l && 0 === r.length && 0 === o.length && 0 === l.length) return;
//             const d = 0 === i && e.settings.locked ? 0 : oe.getOffset(e, t, n.stagger),
//                 c = n.enter ? n.enter.duration + n.enter.delay : 0,
//                 u = n.scene ? n.scene.duration + n.scene.delay : 0,
//                 h = new Array;
//             if (r)
//                 for (const m of r) h.push(new Ae(m, n.enter.speed, n.enter.delay + d));
//             if (o)
//                 for (const m of o) h.push(new Ae(m, n.scene.speed, n.scene.delay + d + c));
//             if (l)
//                 for (const m of l) h.push(new Ae(m, n.exit.speed, n.enter.delay + d + c + u));
//             return h
//         }, je.createLayerTransitions = (e, t = !1) => {
//             const n = !!e.enter,
//                 i = !!e.scene,
//                 a = new Array;
//             let s = n ? e.enter.duration : 0,
//                 r = i ? e.scene.duration : 0;
//             if (!t && n && (s += e.enter.delay), (t && n && i || !t && i) && (r += e.scene.delay), e.enter) {
//                 const n = t ? 0 : e.enter.delay;
//                 for (const t of e.enter.motions) a.push(new Ae(t, e.enter.speed, n))
//             }
//             if (e.scene) {
//                 const i = t && !n ? 0 : e.scene.delay;
//                 for (const t of e.scene.motions) a.push(new Ae(t, e.scene.speed, i + s));
//                 if (e.scene.repeat > 0) {
//                     let t = de.getMotionsDuration(e.scene.motions, e.scene.speed),
//                         n = t + e.scene.gap;
//                     for (let r = 0; r < e.scene.repeat; r++) {
//                         for (const t of e.scene.motions) a.push(new Ae(t, e.scene.speed, n + i + s));
//                         n += t + e.scene.gap
//                     }
//                 }
//             }
//             if (e.exit) {
//                 const o = !t || n || i ? e.exit.delay : 0;
//                 for (const t of e.exit.motions) a.push(new Ae(t, e.exit.speed, o + s + r))
//             }
//             return a
//         }, je.createSegmentTransitions = e => {
//             const t = new Array;
//             if (e)
//                 for (const n of e.motions) t.push(new Ae(n, e.speed));
//             return t
//         }, je.filterMotions = (e, t, n, i, a) => {
//             if (!e || !e.motions || 0 === e.motions.length) return;
//             let s;
//             for (const r of e.motions)
//                 if (je.filterMotion(t, n, i, a, r)) {
//                     s = r.filter;
//                     break
//                 }
//             return e.motions.filter((e => e.filter === s))
//         }, je.filterMotion = (e, t, n, i, a) => {
//             if ("background" === a.filter) return 0 === t && e.settings.locked;
//             if (0 === t && e.settings.locked) return !1;
//             if ("foreground" === a.filter) return t === n - 1;
//             if ("all" === a.filter || a.filter === e.type) return !0;
//             if ("large" === a.filter) return e.getRect().width > .75 * i.width || e.getRect().height > .75 * i.height;
//             if ("medium" === a.filter) return e.getRect().width > .25 * i.width && e.getRect().width < .75 * i.width && e.getRect().height > .25 * i.height && e.getRect().height < .75 * i.height;
//             if ("small" === a.filter) return e.getRect().width < .25 * i.width || e.getRect().height < .25 * i.height;
//             switch (a.filter) {
//                 case "odd":
//                     return t % 2 == 1;
//                 case "even":
//                     return t % 2 == 0;
//                 case "1-three":
//                     return t % 3 == 0;
//                 case "2-three":
//                     return t % 3 == 1;
//                 case "3-three":
//                     return t % 3 == 2;
//                 case "1-four":
//                     return t % 4 == 0;
//                 case "2-four":
//                     return t % 4 == 1;
//                 case "3-four":
//                     return t % 4 == 2;
//                 case "4-four":
//                     return t % 4 == 3
//             }
//         };
//         class Oe extends W {
//             constructor(e = m.M8(), t, n, i, a, s = "", r = Oe.SCALE_METHOD_NONE) {
//                 super(W.TYPE_ELEMENT), this.id = e, this.rotateAndFit = (e, t) => {
//                     this.settings.locked && this.variant === Oe.VARIANT_OVERLAY ? (this.rotate(e), this.calculate(new D.Z(0, 0), new D.Z(t.width, t.height), 0)) : this.rect.rotation += e ? -90 : 90
//                 }, this.calculate = (e, t, n) => {
//                     this.rect.x = Math.round(e.x), this.rect.y = Math.round(e.y), this.rect.width = Math.round(t.x - e.x), this.rect.width < 10 && (this.rect.width = 10), 0 !== n ? this.rect.height = Math.round(this.rect.width / n) : (this.rect.height = Math.round(t.y - e.y), this.rect.height < 10 && (this.rect.height = 10))
//                 }, this.rasterize = () => {
//                     const e = new ce(m.M8(), this.settings.name, m.dN(this.canvas), this.rect.clone(), this.settings.locked);
//                     return e.settings = Object.assign({}, this.settings), e.applyTransform(), e
//                 }, this.clone = (e = !1) => {
//                     let t = new Oe(e ? this.id : m.M8(), this.settings.name, m.dN(this.canvas), this.url, this.variant, this.settings.blendmode, this.scalemethod);
//                     return t.settings = Object.assign({}, this.settings), t.rect = this.rect.clone(), t.animation = de.clone(this.animation), e && (t.id = this.id, t.settings.name = this.settings.name), t
//                 }, this.url = i, this.canvas = n, this.variant = a, this.scalemethod = r, this.settings.name = t, this.settings.blendmode = s, this.rect = new M.Z(0, 0, n.width, n.height)
//             }
//         }
//         Oe.VARIANT_OVERLAY = "overlay", Oe.VARIANT_STICKER = "sticker", Oe.SCALE_METHOD_STRETCH = "stretch", Oe.SCALE_METHOD_FILL = "fill", Oe.SCALE_METHOD_NONE = "none";

//         function Fe(e, t, i) {
//             let a = (0, n.T)("a", {
//                 id: "download-link"
//             });
//             window.document.body.append(a), a.download = t + "." + i, a.href = URL.createObjectURL(e), void 0 === a.download ? window.location = a.href : a.click(), a.remove()
//         }
//         const Ie = async (e, t, n, i, a) => {
//             const r = await async function(e, t, n, i = "image/png") {
//                 try {
//                     return await window.showSaveFilePicker({
//                         suggestedName: e + "." + t,
//                         types: [{
//                             description: n,
//                             accept: {
//                                 [i]: ["." + t]
//                             }
//                         }]
//                     })
//                 } catch (a) {
//                     return console.log(a, a.name), "AbortError" !== a.name && void 0
//                 }
//             }(e, t, n, i);
//             if (!1 !== r)
//                 if (r) {
//                     const n = await async function(e, t) {
//                         try {
//                             const n = await e.createWritable();
//                             await n.write(t), await n.close()
//                         } catch (n) {
//                             return console.log(n), !1
//                         }
//                         return !0
//                     }(r, new File([a], e + "." + t));
//                     n || Fe(new File([a], e + "." + t), e, t), document.dispatchEvent(new CustomEvent("notification", {
//                         detail: (0, s.Z)("fileSaved")
//                     }))
//                 } else Fe(new File([a], e + "." + t), e, t)
//         };
//         var Ne;
//         ! function(e) {
//             e.JPG = "jpg", e.PNG = "png", e.PDF = "pdf", e.WEBP = "webp"
//         }(Ne || (Ne = {}));
//         const Re = ["png", "jpg", "jpeg", "webp"],
//             ze = (Ne.JPG, 20971520);
//         async function $e(e, t, i) {
//             switch (e.name.split(".").slice(-1)[0]) {
//                 case "svg":
//                     {
//                         const t = await (0, E.s4)(e);
//                         let n = t.width,
//                             i = t.height;
//                         if (n < 512 || i < 512) {
//                             const e = M.Z.fillFit(t.width, t.height, 512, 512);
//                             n = e.width, i = e.height
//                         }
//                         const a = m.GF(n, i);
//                         return a.getContext("2d").drawImage(t, 0, 0, n, i),
//                         a
//                     }
//                 case "jpg":
//                 case "jpeg":
//                 case "png":
//                 case "gif":
//                 case "webp":
//                     return await m.Td(e);
//                 case "json":
//                     if ("animation" === t) return await async function(e, t) {
//                         const i = URL.createObjectURL(e);
//                         try {
//                             const e = (await c.e(9456).then(c.t.bind(c, 1248, 23))).default,
//                                 a = (0, n.T)("div", {
//                                     style: {
//                                         display: "none",
//                                         position: "abolute",
//                                         top: "-5000px",
//                                         left: "-5000px",
//                                         zIndex: "500"
//                                     }
//                                 });
//                             document.body.append(a);
//                             const s = e.loadAnimation({
//                                 container: a,
//                                 autoplay: !1,
//                                 renderer: "svg",
//                                 path: i
//                             });
//                             await new Promise(((e, n) => {
//                                 s.addEventListener("DOMLoaded", (() => {
//                                     s.goToAndStop(s.totalFrames * t, !0), e()
//                                 }))
//                             }));
//                             const r = a.querySelector("svg"),
//                                 o = new Blob([r.outerHTML], {
//                                     type: "image/svg+xml;charset=utf-8"
//                                 }),
//                                 l = await m.Td(o);
//                             return a.remove(), l
//                         } finally {
//                             URL.revokeObjectURL(i)
//                         }
//                     }(e, i);
//                     if ("color" === t) return await async function(e) {
//                         const t = m.GF(180, 180),
//                             n = t.getContext("2d"),
//                             i = await e.text(),
//                             a = JSON.parse(i),
//                             s = Math.sqrt(a.colors.length),
//                             r = Math.floor(s),
//                             o = Math.ceil(s),
//                             l = t.width / r,
//                             d = t.height / o;
//                         e: for (let c = 0; c < o; c++) {
//                             let e = c * r;
//                             for (let t = 0; t < r; t++) {
//                                 let i = e + t;
//                                 if (!a.colors[i]) break e;
//                                 n.fillStyle = a.colors[i], n.fillRect(l * t, d * c, l, d)
//                             }
//                         }
//                         return t
//                     }(e);
//                     break;
//                 case "mp4":
//                     return await async function(e, t) {
//                         const i = URL.createObjectURL(e);
//                         try {
//                             const e = (0, n.T)("video", {
//                                 autoplay: !1,
//                                 style: {
//                                     position: "abolute",
//                                     top: "-5000px",
//                                     left: "-5000px",
//                                     display: "none"
//                                 }
//                             });
//                             document.body.append(e), e.src = i, await new Promise(((n, i) => {
//                                 e.addEventListener("seeked", (() => {
//                                     n()
//                                 })), e.addEventListener("canplay", (() => {
//                                     const n = Math.floor(e.duration * t);
//                                     e.currentTime = n
//                                 }))
//                             }));
//                             const a = m.GF(e.videoWidth, e.videoHeight),
//                                 s = a.getContext("2d");
//                             return null == s || s.drawImage(e, 0, 0), e.src = "", e.remove(), a
//                         } finally {
//                             URL.revokeObjectURL(i)
//                         }
//                     }(e, i);
//                 case "ttf":
//                 case "otf":
//                     return await async function(e) {
//                         var t;
//                         let n = null === (t = e.name.split(".")[0]) || void 0 === t ? void 0 : t.toLowerCase().substring(0, 50).replace(" ", "-");
//                         n = (null == n ? void 0 : n.charAt(0).toUpperCase()) + (null == n ? void 0 : n.slice(1));
//                         const i = new FontFace(n, await (0, E.h0)(e));
//                         let a = await i.load();
//                         document.fonts.add(a);
//                         const s = new te(n, 56);
//                         s.height > 72 && s.setSize(Math.floor(72 / s.height * 56));
//                         const r = m.GF(400, 80),
//                             o = r.getContext("2d");
//                         return o.font = s.getCssFont(), o.imageSmoothingEnabled = !0, o.imageSmoothingQuality = "high", o.fillStyle = "#fff", o.textBaseline = "top", o.fillText(n, 0, Math.round((80 - s.height) / 2) - s.ascent), r
//                     }(e)
//             }
//             return null
//         }
//         const We = (e, t, n) => `\n  <select name="${t}" id="${e}" class="text-ellipsis file-type-select">\n      <option value="" disabled ${n?"":"selected"} hidden>${(0,s.Z)("selectFileFormat")}</option>\n      <option value="${Ne.JPG}" ${n===Ne.JPG?"selected":""}>JPG</option>\n      <option value="${Ne.PNG}" ${n===Ne.PNG?"selected":""}>PNG</option>\n      <option value=${Ne.PDF} ${n===Ne.PDF?"selected":""}>PDF</option>\n      <option value=${Ne.WEBP} ${n===Ne.WEBP?"selected":""}">WEBP</option>\n  </select>\n`,
//             Ue = (e, t) => {
//                 const i = (0, n.ZP)(e).querySelector(".file-converter-progress-bar"),
//                     a = (0, n.ZP)(e).querySelector(".file-converter-progress-bar-value");
//                 i && a && (i.style.width = `${t}%`, a.innerText = 100 === t ? (0, s.Z)("finished") : `${t}%`)
//             },
//             Be = e => {
//                 const t = document.querySelector("#file-converter-convert-all > button");
//                 t.classList.toggle("disabled", e), t.disabled = e
//             },
//             qe = () => Math.round(15 * Math.random()),
//             Ge = e => m.Td(e),
//             Je = {
//                 [Ne.JPG]: async e => (0, m._c)(await Ge(e), {
//                     type: "image/jpeg"
//                 }),
//                 [Ne.PNG]: async e => (0, m._c)(await Ge(e), {
//                     type: "image/png"
//                 }),
//                 [Ne.WEBP]: async e => (0, m._c)(await Ge(e), {
//                     type: "image/webp"
//                 }),
//                 [Ne.PDF]: async e => {
//                     const t = await Ge(e),
//                         n = await (0, m._c)(t, {
//                             type: "image/jpeg"
//                         });
//                     return async function(e, t, n) {
//                         const i = await c.e(4500).then(c.bind(c, 9055)),
//                             a = await i.PDFDocument.create(),
//                             s = a.addPage([e, t]),
//                             r = await a.embedJpg(await n.arrayBuffer());
//                         return s.drawImage(r, {
//                             x: 0,
//                             y: 0,
//                             width: e,
//                             height: t
//                         }), new Blob([await a.save()])
//                     }(t.width, t.height, n)
//                 }
//             };
//         class Ve {
//             constructor(e) {
//                 var t, i;
//                 this.uploadedFiles = new Map, this.convertedFiles = new Map, this.handleDrop = e => {
//                     if (e.preventDefault(), this.handleDragEnd(e), e.dataTransfer.items) {
//                         const t = Array.from(e.dataTransfer.items).reduce(((e, t) => "file" === t.kind ? [...e, t.getAsFile()] : e), []);
//                         this.uploadFiles(t)
//                     } else this.uploadFiles(e.dataTransfer.files)
//                 }, this.handleDragOver = e => {
//                     e.preventDefault(), (0, n.ZP)("file-converter-drag-and-drop").classList.add("highlighted")
//                 }, this.handleDragEnd = e => {
//                     e.preventDefault(), (0, n.ZP)("file-converter-drag-and-drop").classList.remove("highlighted")
//                 }, this.handleFormatAllChange = e => {
//                     const t = e.target.value;
//                     var i, a;
//                     this.uploadedFiles.forEach((e => this.onFormatChange(e.id, t))), i = this.uploadedFiles, a = t, i.forEach((e => {
//                         const t = (0, n.ZP)(`${e.id}-convert-to`);
//                         t && (t.value = a)
//                     })), Be(!1), document.querySelectorAll('button[name="convert"]').forEach((e => {
//                         e.classList.toggle("disabled", !1), e.disabled = !1
//                     }))
//                 }, this.onFormatChange = (e, t) => {
//                     this.uploadedFiles.get(e).convertTo = t
//                 }, this.onRemove = e => {
//                     this.uploadedFiles.delete(e), this.convertedFiles.delete(e), this.rerender(), this.uploadedFiles.size <= 1 && (Be(!0), (0, n.ZP)("convert-all-select-type").value = "")
//                 }, this.onConvert = async e => {
//                     const t = this.uploadedFiles.get(e);
//                     let i;
//                     if (t) try {
//                         const a = Je[null == t ? void 0 : t.convertTo];
//                         if (!a) return;
//                         (e => {
//                             const t = (0, n.ZP)(e);
//                             t.querySelector(".file-converter-progress-bar-wrapper").classList.remove("hidden"), t.querySelector('button[name="convert"]').remove(), t.querySelector("select").remove(), t.querySelector("label").remove()
//                         })(e);
//                         const s = (0, m.a9)(t.name) + "." + t.convertTo;
//                         t.progress = qe(), Ue(e, t.progress), i = setInterval((() => {
//                             const n = t.progress + qe();
//                             n > 98 ? clearInterval(i) : (t.progress = n, Ue(e, n))
//                         }), 300);
//                         const r = await a(t);
//                         t.progress = 75, Ue(e, t.progress);
//                         const o = new File([r], s);
//                         this.convertedFiles.set(e, o), t.progress = 100, clearInterval(i), Ue(e, t.progress), ((e, t, i) => {
//                             const a = (0, n.ZP)(e),
//                                 s = m.g4(t);
//                             a && (s === Ne.PDF && (a.querySelector(".file-converter-item-preview").innerHTML = '\n      <img src="/images/fileconverter/pdf-file.png" alt="PDF file image"/>\n    '), a.querySelector(".file-converter-item-filename").innerHTML = t, a.querySelector(".file-converter-item-filesize").innerHTML = m.jb(i), a.querySelector('button[name="save"]').classList.remove("hidden"))
//                         })(e, s, o.size), this.rerender()
//                     } catch (a) {
//                         clearInterval(i), this.displayError((0, s.Z)("errorWhileConverting", t.name))
//                     }
//                 }, this.onSaveFile = async e => {
//                     const t = this.uploadedFiles.get(e),
//                         n = this.convertedFiles.get(e);
//                     if (!t || !n) return;
//                     const i = (0, m.a9)(t.name),
//                         a = t.convertTo,
//                         {
//                             mimeType: s,
//                             fileDesc: r
//                         } = (0, m.Wb)(a);
//                     await Ie(i, r, a, s, n)
//                 }, this.handleConvertAll = () => {
//                     this.uploadedFiles.size && this.uploadedFiles.forEach(((e, t) => {
//                         this.convertedFiles.get(t) || this.onConvert(t)
//                     }))
//                 }, this.handleSaveAll = async () => {
//                     if (!this.convertedFiles.size) return;
//                     const {
//                         ZipWriter: e
//                     } = await Promise.all([c.e(2982), c.e(5215)]).then(c.bind(c, 8132)), t = new e;
//                     await Promise.all([...this.convertedFiles].map((async ([e, n]) => {
//                         const i = this.uploadedFiles.get(e);
//                         if (!i) return;
//                         const a = (0, m.a9)(i.name);
//                         t.writeFile(a + "." + i.convertTo, new Uint8Array(await n.arrayBuffer()), !1)
//                     })));
//                     const n = t.finish(),
//                         i = new File([new Blob([n.buffer])], "batch.zip", {
//                             type: "application/zip"
//                         }),
//                         {
//                             fileDesc: a,
//                             mimeType: s
//                         } = (0, m.Wb)("zip");
//                     await Ie("convertedFiles", "zip", a, s, i)
//                 }, this.uploadFiles = async e => {
//                     var t;
//                     let n = !1;
//                     for (const i of Array.from(e)) {
//                         if (i.size > ze) {
//                             this.displayError((0, s.Z)("maxFileSize", (0, m.jb)(ze)));
//                             continue
//                         }
//                         if (this.uploadedFiles.size >= 20) {
//                             this.displayError((0, s.Z)("maxFiles", 20)), this.rerenderUploadBox();
//                             break
//                         }
//                         const e = (0, m.g4)(i.name);
//                         Re.includes(e) ? await (0, m.le)(i) ? (i.id = (0, m.M8)(), i.progress = 0, i.convertTo = null === (t = this.preset) || void 0 === t ? void 0 : t.to, this.uploadedFiles.set(i.id, i), this.rerender(), this.renderNewFileItem(i)) : this.displayError((0, s.Z)("fileConverterDimensionError")) : n = !0
//                     }
//                     n && this.displayError((0, s.Z)("formatsSupported", Re.join(", ")))
//                 }, this.handleUploadClick = () => {
//                     (0, x.Z)("open-browse"), Te(!0).then(this.uploadFiles)
//                 }, this.rerenderSaveAllButton = () => {
//                     const e = this.uploadedFiles.size > 1 && this.uploadedFiles.size === this.convertedFiles.size;
//                     var t;
//                     t = e, (0, n.ZP)("file-converter-save-all").classList.toggle("hidden", !t)
//                 }, this.rerenderConvertAllButton = () => {
//                     const e = this.uploadedFiles.size > 1 && this.uploadedFiles.size !== this.convertedFiles.size;
//                     var t;
//                     t = e, (0, n.ZP)("file-converter-convert-all").classList.toggle("hidden", !t)
//                 }, this.rerenderFileUploadBox = () => {
//                     (e => {
//                         const t = (0, n.ZP)("file-converter-drag-and-drop"),
//                             i = (0, n.ZP)("file-converter-items-container"),
//                             a = t.querySelector('button[name="upload-files"]');
//                         t && i && a && (e ? (t.classList.remove("small"), i.classList.add("hidden"), a.classList.remove("white"), a.innerHTML = `\n      <img src="/images/fileconverter/upload-icon.svg" alt="Upload button icon">\n      ${(0,s.Z)("uploadFile")}\n    `) : (t.classList.add("small"), i.classList.remove("hidden"), a.classList.add("white"), a.innerHTML = `\n      <img src="/images/fileconverter/plus-icon.svg" alt="Plus button icon">\n      ${(0,s.Z)("addFiles")}\n    `))
//                     })(!this.uploadedFiles.size)
//                 }, this.rerenderUploadBox = () => {
//                     (e => {
//                         (0, n.ZP)("file-converter-drag-and-drop").classList.toggle("disabled", e)
//                     })(this.uploadedFiles.size >= 20)
//                 }, this.renderNewFileItem = e => {
//                     (0, n.ZP)("file-converter-items").appendChild(((e, t, n, i, a) => {
//                         const r = document.createElement("div");
//                         r.id = e.id, r.classList.add("file-converter-item");
//                         const o = n => {
//                                 const i = r.querySelector('button[name="convert"]');
//                                 i && (i.classList.remove("disabled"), i.disabled = !1), t(e.id, n.target.value)
//                             },
//                             l = () => {
//                                 u(), n(e.id)
//                             },
//                             d = () => {
//                                 i(e.id)
//                             },
//                             c = () => {
//                                 a(e.id)
//                             };
//                         r.innerHTML = `\n    <div>\n        <div class="file-converter-item-preview"></div>\n        <div class="bold text-ellipsis file-converter-item-filename" title="${e.name}">${e.name}</div>\n        <div class="file-converter-item-filesize non-tablet text-uppercase">${m.jb(e.size)}</div>\n    </div>\n    <div>\n        <div class="file-converter-progress-bar-wrapper hidden">\n            <div class="file-converter-progress-bar-container">\n                <div class="file-converter-progress-bar"></div>\n            </div>\n            <div class="file-converter-progress-bar-value bold">\n                0%\n            </div>\n        </div>\n        <label class="no-wrap non-tablet" for="${e.id}-convert-to">${(0,s.Z)("convertTo")}</label>\n        <div>\n            ${We(`${e.id}-convert-to`,"convert-to",e.convertTo)}\n        </div>\n        <button\n            name="convert"\n            class="button small white file-converter-button ${e.convertTo?"":"disabled"}"\n            ${e.convertTo?"":"disabled"}\n        >\n            ${(0,s.Z)("convert")}\n        </button>\n        <button name="save" class="button small white hidden file-converter-button">\n            ${(0,s.Z)("download")}\n        </button>\n        <button name="remove" class="trash-button">\n            <img src="/images/fileconverter/trash-icon.svg" alt="Trash icon">\n        </button>\n    </div>\n  `, $e(e, "", .2).then((e => {
//                             if (e instanceof OffscreenCanvas) {
//                                 let t = e;
//                                 (e = m.GF(t.width, t.height)).getContext("2d").drawImage(t, 0, 0)
//                             }
//                             r.querySelector(".file-converter-item-preview").appendChild(e)
//                         })), r.querySelector("select").addEventListener("change", o), r.querySelector('button[name="remove"]').addEventListener("click", l), r.querySelector('button[name="convert"]').addEventListener("click", d), r.querySelector('button[name="save"]').addEventListener("click", c);
//                         const u = () => {
//                             var e, t, n, i;
//                             null === (e = r.querySelector("select")) || void 0 === e || e.removeEventListener("change", o), null === (t = r.querySelector('button[name="remove"]')) || void 0 === t || t.removeEventListener("click", l), null === (n = r.querySelector('button[name="convert"]')) || void 0 === n || n.removeEventListener("click", d), null === (i = r.querySelector('button[name="save"]')) || void 0 === i || i.removeEventListener("click", c), r.remove()
//                         };
//                         return r
//                     })(e, this.onFormatChange, this.onRemove, this.onConvert, this.onSaveFile))
//                 }, this.rerender = () => {
//                     this.rerenderUploadBox(), this.rerenderSaveAllButton(), this.rerenderConvertAllButton(), this.rerenderFileUploadBox()
//                 }, (null == e ? void 0 : e.preset) && (this.preset = e.preset);
//                 const a = (0, n.ZP)("file-converter-drag-and-drop"),
//                     r = (0, n.ZP)("file-converter-convert-all");
//                 (0, n.ZP)("file-converter-upload-files").addEventListener("click", this.handleUploadClick), a.addEventListener("drop", this.handleDrop), a.addEventListener("dragover", this.handleDragOver), a.addEventListener("dragleave", this.handleDragEnd), a.addEventListener("dragend", this.handleDragEnd), (0, n.ZP)("file-converter-save-all").addEventListener("click", this.handleSaveAll), r.insertAdjacentHTML("afterbegin", `\n        ${We("convert-all-select-type","convert-all-select",this.preset.to)}\n        <button \n            class="button small ${(null===(t=this.preset)||void 0===t?void 0:t.to)?"":"disabled"}"\n            ${(null===(i=this.preset)||void 0===i?void 0:i.to)?"":"disabled"}\n          >\n            ${(0,s.Z)("convertAll")}\n        </button>\n      `), r.querySelector("button").addEventListener("click", this.handleConvertAll), r.querySelector("select").addEventListener("change", this.handleFormatAllChange)
//             }
//             displayError(e) {
//                 alert(e)
//             }
//         }
//         var Ke = c(6486),
//             Xe = c(7909);
//         async function Qe(e, t = {}, n) {
//             const i = function(e, t = {}) {
//                     const n = [];
//                     for (var i in t) n.push(`${i}=${encodeURIComponent(t[i].toString())}`);
//                     return 0 === n.length ? e : `${e}?${n.join("&")}`
//                 }(`https://${function(){const e=window.location.hostname;return"localhost"===e?"pixlr.com":"dev.pixlr.com"===e||"staging.pixlr.com"===e||"dev-robert.pixlr.com"===e?e:"pixlr.com"}()}` + e, t),
//                 a = await fetch(i, {
//                     method: n || "GET"
//                 }),
//                 s = a.headers.get("content-type");
//             if (s && -1 === s.indexOf("application/json")) return;
//             const r = await a.json();
//             if (!1 === r.status) throw new Error(r.message);
//             return r.data
//         }
//         const et = (e, t = {}) => Qe(`/api/templates/categories/${e}/`, t),
//             tt = (e = {}) => Qe("/api/templates/search/", e);
//         class nt {
//             constructor() {
//                 this.limit = 100, this.page = 1, this.favoriteLimit = 100, this.favoritePage = 1, this.init = async () => {
//                     await Promise.all([this.getTemplates(), this.loadFavoriteTemplates(), this.loadCategoryGroups()])
//                 }, this.cleanup = (e = "template-preset", t = !0) => {
//                     var i;
//                     document.querySelector("#template-preset>.templates") && document.querySelector("#template-preset>.templates").style.removeProperty("display"), document.querySelector("#template-preset>.templates>.header>h2") && (document.querySelector("#template-preset>.templates>.header>h2").innerText = "Templates"), document.querySelector("#template-preset>.templates>.header>a") && document.querySelector("#template-preset>.templates>.header>a").style.removeProperty("display"), document.querySelector("#template-preset>.collections") && document.querySelector("#template-preset>.collections").style.removeProperty("display");
//                     const a = (0, n.ZP)("blank-canvas");
//                     a.querySelectorAll(".category-group").forEach((e => {
//                         e.style.removeProperty("display"), e.querySelector(".header>a") && e.querySelector(".header>a").style.removeProperty("display"), e.querySelectorAll(".group-item").forEach(((e, t) => {
//                             t > 2 && (e.style.display = "none")
//                         }))
//                     })), (0, n.ZP)("blank-canvas").style.removeProperty("gap"), a.querySelectorAll(".breadcrumbs").forEach((e => e.remove())), a.querySelectorAll(".templates").forEach((e => e.remove())), (0, n.ZP)("template-search-feedback") && (0, n.ZP)("template-search-feedback").remove(), (0, n.ZP)("template-categories") && (0, n.ZP)("template-categories").remove(), (0, n.ZP)("breadcrumbs") && (0, n.ZP)("breadcrumbs").remove(), null === (i = (0, n.ZP)("template-preset")) || void 0 === i || i.style.removeProperty("gap"), (0, n.ZP)("collection-templates") && (0, n.ZP)("collection-templates").remove(), t && (this.page = 1), t && (this.favoritePage = 1), this.switchTab(e)
//                 }, this.handleMenuItemClick = e => {
//                     e.stopPropagation(), document.querySelector("#dropdown .dropdown-menu").classList.remove("show"), (0, n.ZP)("dropdown-icon").classList.toggle("show");
//                     let t = e.target;
//                     t.classList.add("selected"), document.querySelectorAll("#dropdown ul>li").forEach((e => {
//                         e.dataset.menuitem != t.dataset.menuitem && e.classList.remove("selected")
//                     })), document.querySelector("#dropdown #selected-tab").value = t.dataset.menuitem, document.querySelector("#dropdown div>span").innerHTML = t.innerText, this.switchTab(t.dataset.menuitem)
//                 }, this.loadFavoriteTemplates = async () => {
//                     if (!r.a) return;
//                     const {
//                         templates: e,
//                         page: t
//                     } = await ((e = {}) => Qe("/api/templates/favorites/", e))({
//                         limit: this.favoriteLimit,
//                         page: this.favoritePage
//                     });
//                     if (0 == e.length) return;
//                     const i = (0, n.ZP)("favourites-list");
//                     i.innerHTML = "", 1 == t && (i.innerHTML = "");
//                     let a = new S(i);
//                     e.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "favourite-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`,
//                             title: e.name
//                         }, (0, n.T)("img", {
//                             src: e.preview,
//                             onload: () => a.resizeAllGridItems(),
//                             style: {
//                                 width: "100%"
//                             }
//                         })), (0, n.T)("img", {
//                             className: "heart",
//                             src: "/img/icon/heart-filled.svg",
//                             width: 32,
//                             height: 32,
//                             style: "pointer-events: none;"
//                         }));
//                         a.addChild(t)
//                     }))
//                 }, this.loadCategoryGroups = async () => {
//                     const e = await Qe("/api/templates/category-groups/"),
//                         t = document.querySelector("#blank-canvas");
//                     t.innerHTML = "", e.filter((e => 0 != e.categories.length)).forEach((e => {
//                         const i = (0, n.T)("div", {
//                             className: "category-group",
//                             id: `${e.name}-group`
//                         }, (0, n.T)("div", {
//                             className: "header"
//                         }, (0, n.T)("h2", {
//                             innerText: e.name
//                         }), e.categories.length > 2 ? (0, n.T)("a", {
//                             onclick: () => {
//                                 this.loadCategoryGroup(e.name), this.scrollToTop()
//                             }
//                         }, (0, n.T)("span", {
//                             innerText: "View all"
//                         })) : null), (0, n.T)("div", {
//                             className: "group-items"
//                         }, ...e.categories.map(((t, i) => (0, n.T)("div", {
//                             className: "group-item",
//                             style: {
//                                 display: i > 2 ? "none" : ""
//                             }
//                         }, (0, n.T)("a", {
//                             onclick: () => this.loadCategoryTemplates(t.id, e.name)
//                         }, (0, n.T)("img", {
//                             src: t.thumbnailLarge
//                         }), (0, n.T)("div", (0, n.T)("h3", {
//                             innerText: t.name
//                         }), (0, n.T)("span", {
//                             innerText: `${t.ratio.height} X ${t.ratio.width}`
//                         }))))))));
//                         t.appendChild(i)
//                     }))
//                 }, this.loadCategoryGroup = async e => {
//                     const t = document.querySelector("#blank-canvas");
//                     t.querySelectorAll(".category-group").forEach((t => {
//                         t.id != `${e}-group` && (t.style.display = "none"), t.querySelector(".header>a") && (t.querySelector(".header>a").style.display = "none"), t.id == `${e}-group` && t.querySelectorAll(".group-item").forEach(((e, t) => {
//                             t >= 3 && (e.style.display = "unset")
//                         }))
//                     })), t.style.gap = "32px";
//                     const i = t.querySelector(".breadcrumbs") || (0, n.T)("div", {
//                         className: "breadcrumbs",
//                         id: "breadcrumbs"
//                     });
//                     i.innerHTML = "", i.style.removeProperty("display"), i.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: (0, s.Z)("blankCanvasTemplates"),
//                         onclick: () => this.cleanup("blank-canvas")
//                     }))), i.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), i.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: e
//                     }))), i.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), i.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: "View All"
//                     }))), t.prepend(i)
//                 }, this.loadCategoryTemplates = async (e, t) => {
//                     const i = await et(e);
//                     if (!i) return (0, n.FN)("danger", (0, s.Z)("noTemplatesFoundForThisCategory"));
//                     if (!i.templates || 0 == i.templates.length) return (0, n.FN)("danger", (0, s.Z)("noTemplatesFoundForThisCategory"));
//                     const a = document.querySelector("#blank-canvas");
//                     a.querySelectorAll(".category-group").forEach((e => e.style.display = "none")), a.style.gap = "32px";
//                     const r = a.querySelector(".breadcrumbs") || (0, n.T)("div", {
//                         className: "breadcrumbs",
//                         id: "breadcrumbs"
//                     });
//                     r.innerHTML = "", r.style.removeProperty("display"), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: (0, s.Z)("blankCanvasTemplates"),
//                         onclick: () => {
//                             this.cleanup("blank-canvas")
//                         }
//                     }))), r.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: t,
//                         onclick: () => {
//                             this.cleanup("blank-canvas"), this.loadCategoryGroup(t)
//                         }
//                     }))), r.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: i.name
//                     }))), a.appendChild(r);
//                     const o = a.querySelector(".templates") || (0, n.T)("div", {
//                         className: "templates",
//                         style: {
//                             gap: "40px"
//                         }
//                     });
//                     o.innerHTML = "";
//                     const l = (0, n.T)("div", {
//                         className: "header"
//                     }, (0, n.T)("h2", {
//                         innerText: i.name,
//                         style: {
//                             textTransform: "capitalize"
//                         }
//                     }));
//                     o.appendChild(l);
//                     const d = Math.round(i.ratio.width / i.ratio.height),
//                         c = (0, n.T)("div", {
//                             className: d > 3 ? "template-list landscape" : "template-list"
//                         });
//                     let u = new S(c);
//                     i.templates.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`,
//                             title: e.name
//                         }, (0, n.T)("img", {
//                             src: e.preview,
//                             onload: () => u.resizeAllGridItems(),
//                             style: {
//                                 width: "100%"
//                             }
//                         })));
//                         u.addChild(t)
//                     })), o.appendChild(c), a.appendChild(o)
//                 }, this.getTemplates = async (e = !0) => {
//                     let t = {};
//                     this.filters.category && (t.category = this.filters.category.join(","), this.limit = 100), this.filters.collections && (t.collection = this.filters.collections.join(",")), 1 == this.filters.animations.length && (t.animated = "animation" == this.filters.animations[0]), this.filters.prices && (t.type = this.filters.prices.join(",")), this.search.searchValue && (t.keywords = this.search.searchValue), this.search.recordKeyword && (t.recordKeyword = !0), t.page = this.page, t.limit = this.limit;
//                     const {
//                         templates: n,
//                         page: i,
//                         pages: a,
//                         total: s
//                     } = await tt(t);
//                     return this.searchResults = n, this.cleanup(void 0, e), this.filters.category.length > 0 ? (await this.renderTemplateCategories(1 == i, i != a), void this.scrollToTop()) : (this.filters.collections.length > 0 && (document.querySelector("#template-preset>.collections").style.display = "none"), this.search.searchValue ? (await this.renderSearchResult(1 == i, i != a), void this.scrollToTop()) : (await this.renderDefaultTemplateResult(1 == i, i != a), void this.scrollToTop()))
//                 }, this.renderSearchResult = async (e = !1, t = !1) => {
//                     let i = this.searchResults;
//                     const a = (0, n.ZP)("template-search-feedback") || (0, n.T)("div", {
//                         className: "search-results",
//                         id: "template-search-feedback"
//                     });
//                     if (a.style.display = "flex", document.querySelector("#template-preset>.collections").style.display = "none", document.querySelector("#template-preset>.templates>.header>h2").innerText = (0, s.Z)("otherTemplatesYouMightLike"), document.querySelector("#template-preset>.templates>.header>a").style.display = "none", !i || 0 === i.length) {
//                         let e = (0, n.T)("div", {
//                             className: "header"
//                         }, (0, n.T)("h2", {
//                             innerText: `Templates with ‘${this.search.searchValue}’`
//                         }));
//                         return a.appendChild(e), e = (0, n.T)("div", (0, n.T)("span", {
//                             innerText: (0, s.Z)("unfortunatelyThereAreNoTemplatesFoundWithThisKeyword")
//                         })), a.appendChild(e), void(0, n.ZP)("template-preset").prepend(a)
//                     }
//                     const r = (0, n.T)("div", {
//                         className: "header"
//                     }, (0, n.T)("h2", {
//                         innerText: (0, s.Z)("templateWithKeyword").replace("{keyword}", this.search.searchValue)
//                     }));
//                     a.appendChild(r);
//                     const o = (0, n.T)("div", {
//                         id: "search-list",
//                         className: "template-list grid top-60"
//                     });
//                     let l = new S(o);
//                     i.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`,
//                             title: e.name
//                         }, (0, n.T)("img", {
//                             src: e.preview,
//                             onload: () => l.resizeAllGridItems(),
//                             style: {
//                                 width: "100%"
//                             }
//                         })));
//                         l.addChild(t)
//                     })), a.appendChild(o), (0, n.ZP)("template-preset").prepend(a)
//                 }, this.renderDefaultTemplateResult = async (e = !0, t = !1) => {
//                     const i = this.searchResults,
//                         a = (0, n.ZP)("template-list");
//                     e && (a.innerHTML = "");
//                     let r = new S(a);
//                     i.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`,
//                             title: e.name
//                         }, (0, n.T)("img", {
//                             src: e.preview,
//                             onload: () => r.resizeAllGridItems(),
//                             style: {
//                                 width: "100%"
//                             }
//                         })));
//                         r.addChild(t)
//                     }));
//                     const o = a.parentElement,
//                         l = (0, n.T)("div", {
//                             id: "load-more",
//                             style: {
//                                 width: "100%",
//                                 textAlign: "center",
//                                 marginTop: "20px",
//                                 display: "none"
//                             }
//                         }, (0, n.T)("button", {
//                             className: "button positive large",
//                             innerText: (0, s.Z)("viewMore"),
//                             onclick: () => this.loadMore()
//                         }));
//                     o.querySelector("#load-more") || o.appendChild(l), t ? o.querySelector("#load-more").style.removeProperty("display") : o.querySelector("#load-more").style.display = "none"
//                 }, this.renderTemplateCategories = async (e = !1, t = !1) => {
//                     const i = this.searchResults,
//                         a = (0, Ke.groupBy)(i, (e => e.categoryId)),
//                         r = (0, Ke.uniqBy)(i.map((e => e.categoryDetails)), "id");
//                     if ((0, n.ZP)("template-preset") && ((0, n.ZP)("template-preset").style.gap = "10px"), !i || 0 === i.length) {
//                         const e = (0, n.ZP)("template-search-feedback") || (0, n.T)("div", {
//                             className: "search-results",
//                             id: "template-search-feedback"
//                         });
//                         e.style.display = "flex";
//                         let t = (0, n.T)("div", {
//                             className: "header"
//                         }, (0, n.T)("h2", {
//                             innerText: (0, s.Z)("templateCategory")
//                         }));
//                         return t = (0, n.T)("div", (0, n.T)("span", {
//                             innerText: (0, s.Z)("noTemplatesFound")
//                         })), e.appendChild(t), document.querySelector("#template-preset>.collections").style.display = "none", document.querySelector("#template-preset>.templates>.header>h2").innerText = (0, s.Z)("otherTemplatesYouMightLike"), document.querySelector("#template-preset>.templates>.header>a").style.display = "none", void(0, n.ZP)("template-preset").prepend(e)
//                     }
//                     document.querySelectorAll("#template-preset > div").forEach((e => e.style.display = "none"));
//                     const o = (0, n.ZP)("template-preset"),
//                         l = (0, n.ZP)("breadcrumbs") || (0, n.T)("div", {
//                             className: "breadcrumbs",
//                             id: "breadcrumbs"
//                         });
//                     l.innerHTML = "", l.style.removeProperty("display"), l.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: (0, s.Z)("startWithATemplatePreset"),
//                         onclick: () => {
//                             this.filters.reset(), this.cleanup()
//                         }
//                     }))), l.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), l.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: 1 == r.length ? r[0].name : (0, s.Z)("multipleFliterSelection")
//                     }))), o.appendChild(l);
//                     const d = o.querySelector("#template-categories") || (0, n.T)("div", {
//                         className: "categories",
//                         id: "template-categories"
//                     });
//                     d.innerHTML = "", d.style.removeProperty("display"), Object.keys(a).forEach((e => {
//                         const t = r.find((t => t.id === e || t.name === e)),
//                             i = Math.round(t.ratio.width / t.ratio.height),
//                             o = (0, n.T)("div", {
//                                 className: "category",
//                                 id: e
//                             }, (0, n.T)("div", {
//                                 className: "header"
//                             }, (0, n.T)("div", {}, (0, n.T)("h2", {
//                                 innerText: t.name,
//                                 style: {
//                                     textTransform: "capitalize"
//                                 }
//                             }), (0, n.T)("a", {
//                                 id: `catgeory-${t.name}-view-all`,
//                                 innerText: (0, s.Z)("viewAll"),
//                                 onclick: () => window.location.href = `/templates/categories/${t.nameKey}`
//                             })), (0, n.T)("span", {
//                                 innerText: `${a[e].length} in ${t.name}`,
//                                 style: {
//                                     textTransform: "capltalize"
//                                 }
//                             })), (0, n.T)("div", {
//                                 className: i > 3 ? "templates landscape" : "templates"
//                             })),
//                             l = o.querySelector(".templates");
//                         let c = new S(l);
//                         const u = (0, n.T)("a", {
//                             className: "blank-canvas",
//                             onclick: () => {
//                                 this.blankCanvas(t)
//                             }
//                         }, (0, n.T)("div", {
//                             style: {
//                                 aspectRatio: `${i} / 1`
//                             }
//                         }, (0, n.T)("img", {
//                             src: "/img/misc/plus.svg",
//                             style: {
//                                 width: "47.53px",
//                                 height: "51.5px"
//                             }
//                         }), (0, n.T)("div", (0, n.T)("span", {
//                             innerText: (0, s.Z)("createYourOwn")
//                         }), (0, n.T)("span", {
//                             innerText: `${t.ratio.width} X ${t.ratio.height} px`
//                         }))));
//                         c.addChild((0, n.T)("div", u)), a[e].forEach((e => {
//                             const t = (0, n.T)("a");
//                             t.title = e.name, t.href = `/templates/${e.category}/${e.slug}/${e.id}`, t.innerHTML = (0, n.T)("img", {
//                                 src: e.preview,
//                                 onload: () => c.resizeAllGridItems(),
//                                 style: {
//                                     width: "100%",
//                                     borderRadius: "4.7px"
//                                 }
//                             }).outerHTML, c.addChild((0, n.T)("div", {
//                                 id: "template-item"
//                             }, t))
//                         })), l.querySelectorAll("#template-item").forEach(((e, t) => {
//                             t > 50 && (e.style.display = "none")
//                         })), d.appendChild(o)
//                     })), o.appendChild(d)
//                 }, this.loadMore = () => {
//                     this.page++, this.getTemplates(!1)
//                 }, this.viewAllCategoryToggle = e => {
//                     const t = document.querySelectorAll(`#${e}>.templates>#template-item`);
//                     let i = new S(document.querySelector(`#${e}>.templates`));
//                     t.forEach(((e, t) => {
//                         t > 5 && ("none" == e.style.display ? e.style.removeProperty("display") : e.style.display = "none")
//                     })), i.resizeAllGridItems();
//                     const a = (0, n.ZP)(`catgeory-${e}-view-all`);
//                     a.innerText == (0, s.Z)("viewLess") ? a.innerText = (0, s.Z)("viewAll") : a.innerText = (0, s.Z)("viewLess")
//                 }, this.viewAllCollections = async (e = !1) => {
//                     document.querySelectorAll(".template-collections-list .collection-card").forEach(((t, n) => {
//                         n > 9 && ("none" == t.style.display ? t.style.display = "unset" : t.style.display = "none"), e && (t.style.display = "unset")
//                     }));
//                     const t = (0, n.ZP)("collections-view-all");
//                     t.innerText == (0, s.Z)("viewLess") ? t.innerText = "View All" : t.innerText = (0, s.Z)("viewLess"), e && (t.innerText = (0, s.Z)("viewLess"));
//                     const i = document.querySelector("#template-preset>.templates");
//                     i.style.display = t.innerText == (0, s.Z)("viewLess") ? "none" : "unset", e && (i.style.display = "none")
//                 }, this.loadCollection = async e => {
//                     const {
//                         name: t,
//                         templates: i
//                     } = await ((e, t) => Qe(`/api/templates/collections/${e}/?limit=${t}`))(e, 50);
//                     if (!i || 0 == i.length) return;
//                     this.scrollToTop(), document.querySelectorAll("#template-preset > div").forEach((e => e.style.display = "none"));
//                     const a = (0, n.ZP)("collection-templates") || (0, n.T)("div", {
//                         className: "collection-templates",
//                         id: "collection-templates"
//                     });
//                     a.innerHTML = "";
//                     const r = a.querySelector("breadcrumbs") || (0, n.T)("div", {
//                         className: "breadcrumbs",
//                         id: "breadcrumbs"
//                     });
//                     r.innerHTML = "", r.style.removeProperty("display"), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: (0, s.Z)("startWithATemplatePreset"),
//                         onclick: () => {
//                             this.filters.reset(), this.cleanup()
//                         }
//                     }))), r.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: "Collections",
//                         onclick: () => {
//                             this.cleanup(), this.viewAllCollections(!0)
//                         }
//                     }))), r.appendChild((0, n.T)("img", {
//                         src: "/img/misc/chevron-right.svg",
//                         alt: "chevron-right"
//                     })), r.appendChild((0, n.T)("span", (0, n.T)("a", {
//                         innerText: t
//                     })));
//                     const o = (0, n.T)("div", {
//                         className: "header"
//                     }, r, (0, n.T)("a", {
//                         innerText: (0, s.Z)("viewAll"),
//                         onclick: () => {
//                             window.location.href = `/templates/collections/${t.toLowerCase().replace(" ","-")}`
//                         }
//                     }));
//                     a.appendChild(o);
//                     const l = (0, n.T)("div", {
//                         className: "templates"
//                     });
//                     l.innerHTML = "";
//                     const d = (0, n.T)("div", {
//                         className: "header"
//                     });
//                     d.innerHTML = `<h2>${t}</h2>`, l.appendChild(d);
//                     const c = (0, n.T)("div", {
//                         className: "template-list"
//                     });
//                     let u = new S(c);
//                     i.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`,
//                             title: e.name
//                         }, (0, n.T)("img", {
//                             src: e.preview,
//                             onload: () => u.resizeAllGridItems(),
//                             style: {
//                                 width: "100%"
//                             }
//                         })));
//                         u.addChild(t)
//                     })), l.appendChild(c), a.appendChild(l), document.querySelector("#template-preset").appendChild(a);
//                     const h = document.querySelector("#fab") || (0, n.T)("div", {
//                         className: "fab",
//                         id: "fab",
//                         style: {
//                             display: "block"
//                         }
//                     }, (0, n.T)("img", {
//                         src: "/img/misc/arrow-up.svg",
//                         alt: "filter-icon",
//                         className: "fab-icon"
//                     }));
//                     h.style.display = "block", h.querySelector(".fab-icon").onclick = this.scrollToTop, document.querySelector("#template-preset").appendChild(h)
//                 }, this.switchTab = e => {
//                     const t = document.getElementsByClassName("tabcontent");
//                     for (let a = 0; a < t.length; a++) t[a].classList.remove("active");
//                     const n = document.getElementsByClassName("tablinks");
//                     for (let a = 0; a < n.length; a++) n[a].classList.remove("active");
//                     const i = document.querySelector(`.tablinks[data-tabname=${e}]`);
//                     i.classList.toggle("active"), i.style.display = "flex", document.getElementById(e).classList.add("active")
//                 }, this.blankCanvas = async e => {
//                     const t = new Xe.Z;
//                     t.setContent((0, n.T)("div", {
//                         className: "blank-canvas-modal"
//                     }, (0, n.T)("div", {
//                         className: "blank-canvas-modal-image"
//                     }, (0, n.T)("img", {
//                         src: e.thumbnailLarge ? e.thumbnailLarge : `/images/templates/template_category_groups/${e.name}.png`,
//                         style: {
//                             width: "100%"
//                         }
//                     })), (0, n.T)("div", {
//                         className: "blank-canvas-modal-details"
//                     }, (0, n.T)("div", {
//                         className: "blank-canvas-modal-details-header"
//                     }, (0, n.T)("h2", {
//                         innerText: e.name
//                     }), (0, n.T)("span", {
//                         className: "blank-canvas-modal-info-subtitle"
//                     }, (0, n.T)("img", {
//                         src: `/img/icon/category/${e.icon}.svg`,
//                         style: {
//                             width: "24px"
//                         }
//                     }), (0, n.T)("div", {
//                         style: {
//                             width: "100%"
//                         }
//                     }, (0, n.T)("span", {
//                         innerText: (0, s.Z)("blankCategory").replace("{category}", e.name)
//                     }), " · ", (0, n.T)("span", {
//                         innerText: `${e.ratio.width} x ${e.ratio.height} px`,
//                         style: {
//                             color: "#A3A3A3"
//                         }
//                     })))), (0, n.T)("div", {
//                         className: "blank-canvas-modal-details-body"
//                     }, (0, n.T)("div", {
//                         className: "logoed-button"
//                     }, (0, n.T)("a", {
//                         className: "button large align-center",
//                         onclick: () => {
//                             window.location.href = `/x/#editor&task=new&&witdh=${e.ratio.width}&height=${e.ratio.width}`
//                         }
//                     }, (0, n.T)("img", {
//                         src: "/img/misc/x-icon.svg",
//                         className: "radius-4",
//                         width: 24,
//                         height: 24,
//                         alt: "X icon"
//                     }), (0, s.Z)("editWithPixlrX")), (0, n.T)("span", {
//                         innerText: (0, s.Z)("indexPixlrXButton")
//                     })), (0, n.T)("div", {
//                         className: "logoed-button"
//                     }, (0, n.T)("a", {
//                         className: "button large teal align-center",
//                         onclick: () => {
//                             window.location.href = `/e/#editor&task=new&witdh=${e.ratio.width}&height=${e.ratio.width}`
//                         }
//                     }, (0, n.T)("img", {
//                         src: "/img/misc/e-icon.svg",
//                         className: "radius-4",
//                         width: 24,
//                         height: 24,
//                         alt: "X icon"
//                     }), (0, s.Z)("editWithPixlrE")), (0, n.T)("span", {
//                         innerText: (0, s.Z)("indexPixlrEButton")
//                     })))))), t.content.style.width = "100%"
//                 }, this.scrollToTop = () => {
//                     window.scrollTo({
//                         top: 0,
//                         behavior: "smooth"
//                     })
//                 }, this.filters = new at(this.getTemplates), this.search = new st(this.getTemplates, this.cleanup, this.filters), t.ZP.keywords && (this.searchValue = t.ZP.keywords, this.search.setKeyword(t.ZP.keywords)), document.querySelectorAll(".template-tab .tablinks").forEach((e => {
//                     e.addEventListener("click", (() => this.switchTab(e.dataset.tabname)))
//                 })), document.querySelectorAll(".template-collections-list .collection-card").forEach(((e, t) => {
//                     e.addEventListener("click", (() => this.loadCollection(e.dataset.id))), t > 9 && (e.style.display = "none")
//                 })), (0, n.ZP)("collections-view-all").addEventListener("click", (() => this.viewAllCollections())), document.body.addEventListener("click", (e => {
//                     null === e.target.closest("#tab-selector .dropdown-menu") && document.querySelectorAll("#tab-selector .dropdown-menu").forEach((e => {
//                         e.classList.remove("show"), document.querySelector("#tab-selector #dropdown-icon").classList.toggle("show"), document.querySelector("#tab-selector #dropdown .dropdown-menu").removeEventListener("click", (e => this.handleMenuItemClick(e)))
//                     }))
//                 })), document.querySelectorAll("#tab-selector #dropdown ul>li").forEach((e => {
//                     "selected" == e.className && (document.querySelector("#tab-selector #dropdown div>span").innerHTML = e.innerText, document.querySelector("#tab-selector #dropdown #selected-tab").value = e.dataset.menuitem, this.switchTab(e.dataset.menuitem))
//                 })), document.querySelector("#tab-selector #dropdown .select").addEventListener("click", (e => {
//                     e.stopPropagation(), document.querySelector("#tab-selector #dropdown .dropdown-menu").classList.toggle("show"), document.querySelector("#tab-selector #dropdown-icon").classList.toggle("show"), document.querySelector("#tab-selector #dropdown .dropdown-menu").addEventListener("click", (e => this.handleMenuItemClick(e)))
//                 })), document.querySelector("#mobile-filter-button").addEventListener("click", (() => {
//                     const e = (0, n.ZP)("template-filters");
//                     e && e.classList.toggle("non-mobile")
//                 })), window.onscroll = () => {
//                     const e = (0, n.ZP)("fab");
//                     e && (window.scrollY > 500 ? e.style.display = "block" : e.style.display = "none")
//                 }, this.init()
//             }
//         }
//         class it {
//             constructor() {
//                 this.findSimilar = async (e = !0) => {
//                     const t = (0, n.ZP)("template-favourite").dataset.id,
//                         i = await (a = t, Qe(`/api/templates/${a}/similar/`));
//                     var a;
//                     if (0 === i.length) return (0, n.FN)("danger", (0, s.Z)("noSimilarTemplates"));
//                     document.querySelector(".template-container").appendChild((0, n.T)("div", {
//                         className: "similar-templates-holder top-60"
//                     }, (0, n.T)("h3", {
//                         className: "title",
//                         style: "text-transform: none"
//                     }, (0, s.Z)("moreLikeThis")), (0, n.T)("div", {
//                         className: "similar-templates ",
//                         id: "similar-templates"
//                     })));
//                     const r = (0, n.ZP)("similar-templates");
//                     Math.round(i[0].ratio.width / i[0].ratio.height) > 3 && r.classList.add("landscape"), e && (r.innerHTML = "");
//                     const o = new S(r);
//                     i.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "similar-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`
//                         }, (0, n.T)("img", {
//                             src: e.thumbnailMedium,
//                             style: {
//                                 width: "100%",
//                                 borderRadius: "6px"
//                             },
//                             onload: () => o.resizeAllGridItems()
//                         })), (0, n.T)("div", {
//                             className: "overlay",
//                             onclick: () => {
//                                 window.location.href = `/templates/${e.category}/${e.slug}/${e.id}`
//                             }
//                         }, (0, n.T)("div", {
//                             className: "top"
//                         }, (0, n.T)("div", {
//                             className: "info"
//                         }, (0, n.T)("span", {}, e.name), (0, n.T)("span", {}, `${e.ratio.width} x ${e.ratio.height}px`))), (0, n.T)("div", {
//                             className: "bottom"
//                         }, (0, n.T)("div", {}, (0, n.T)("div", {
//                             className: "template-favourite",
//                             onclick: e => {
//                                 this.toggleFavorite(e)
//                             },
//                             dataset: {
//                                 id: e.id
//                             }
//                         }, (0, n.T)("img", {
//                             src: e.favourite ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg",
//                             width: 32,
//                             height: 32,
//                             style: "pointer-events: none;"
//                         }))), (0, n.T)("div", {}, (0, n.T)("img", {
//                             src: "free" == e.type ? "/img/icon/free-square.svg" : "/img/icon/premium-square.svg",
//                             height: 40,
//                             style: "pointer-events: none;border-radius: 4px 4px 0px 0px;"
//                         })))));
//                         o.addChild(t)
//                     }))
//                 }, this.toggleFavorite = async e => {
//                     if (!r.a) {
//                         const e = encodeURIComponent(window.location.href);
//                         return void new l.Z({
//                             callback: e
//                         })
//                     }
//                     const t = e.target,
//                         n = t.dataset.id;
//                     await (e => Qe(`/api/templates/${e}/favorites/`, {}, "PUT"))(n), "true" == t.dataset.favourite ? (t.dataset.favourite = "false", t.innerHTML = '<img src="/img/icon/heart-outline.svg" width="32" height="32" style="pointer-events: none;">') : (t.dataset.favourite = "true", t.innerHTML = '<img src="/img/icon/heart-filled.svg" width="32" height="32" style="pointer-events: none;">')
//                 }, this.search = new st, this.findSimilar(), (0, n.ZP)("template-favourite").addEventListener("click", (e => {
//                     this.toggleFavorite(e)
//                 }))
//             }
//         }
//         class at {
//             constructor(e = null) {
//                 this.category = [], this.collections = [], this.animations = [], this.prices = [], this.init = async () => {
//                     this.setBinders()
//                 }, this.setBinders = () => {
//                     document.querySelectorAll(".template-filter").forEach((e => {
//                         e.firstElementChild.addEventListener("click", (() => this.handleFilterSectionClick(e.id)))
//                     })), document.querySelectorAll(".template-filter").forEach((e => this.handleFilterItemsHide(e))), document.querySelectorAll(".template-filter .view-more").forEach((e => {
//                         e.addEventListener("click", (() => this.viewMore(e.parentElement.id)))
//                     })), document.querySelectorAll(".filter-item").forEach((e => {
//                         const t = e.querySelector("input");
//                         "checkbox" == t.type && e.addEventListener("click", (e => this.onCheckboxChange(e))), "radio" == t.type && e.addEventListener("click", (e => this.onRadioChange(e)))
//                     }))
//                 }, this.handleFilterItemsHide = e => {
//                     const t = e.querySelectorAll("#collections .filter-item");
//                     if (t.forEach(((e, t) => {
//                             t > 6 && e.classList.add("hidden")
//                         })), t.length < 7) {
//                         const t = e.querySelector(".view-more");
//                         t && t.classList.add("hidden")
//                     }
//                 }, this.viewMore = e => {
//                     const t = (0, n.ZP)(e).children;
//                     for (let n = 0; n < t.length; n++) {
//                         const e = t[n];
//                         e.classList.contains("view-more") || (e.classList.contains("hidden") ? e.classList.remove("hidden") : n > 6 && !e.classList.contains("hidden") && e.classList.add("hidden"))
//                     }
//                     if (t[t.length - 1].classList.contains("view-more")) {
//                         const e = t[t.length - 1].querySelector("div>span");
//                         e.innerText = e.innerHTML == (0, s.Z)("viewLess") ? (0, s.Z)("viewMore") : (0, s.Z)("viewLess");
//                         t[t.length - 1].querySelector("img").src = e.innerHTML == (0, s.Z)("viewMore") ? "/img/icon/plus-light-blue.svg" : "/img/icon/minus-light-blue.svg"
//                     }
//                 }, this.showHideFilterSection = e => {
//                     const t = (0, n.ZP)(e);
//                     t.style.display = "none" === t.style.display ? "flex" : "none"
//                 }, this.onCheckboxChange = e => {
//                     const t = e.currentTarget,
//                         n = t.querySelector("input");
//                     switch (t.parentElement.querySelectorAll(".filter-item").forEach((e => {
//                         e.querySelector("input").value !== n.value && (e.classList.remove("selected"), e.querySelector("input").checked = !1)
//                     })), "checkbox" == n.type && (t.classList.contains("selected") ? t.classList.remove("selected") : t.classList.add("selected")), "checkbox" == n.type && (n.checked = !n.checked), n.name) {
//                         case "category":
//                             n.checked ? this.category = [n.value] : this.category = this.category.filter((e => e !== n.value));
//                             break;
//                         case "collections":
//                             n.checked ? this.collections = [n.value] : this.collections = this.collections.filter((e => e !== n.value))
//                     }
//                     if (this.trigger) return this.trigger()
//                 }, this.onRadioChange = e => {
//                     const t = e.currentTarget.querySelector("input");
//                     switch (e.target instanceof HTMLInputElement || (t.checked = !0), t.name) {
//                         case "animation":
//                             t.checked ? (this.animations = [t.value], "all" == t.value && (this.animations = [])) : this.animations = this.animations.filter((e => e !== t.value));
//                             break;
//                         case "price":
//                             t.checked ? (this.prices = [t.value], "all" == t.value && (this.prices = [])) : this.prices = this.prices.filter((e => e !== t.value))
//                     }
//                     if (this.trigger) return this.trigger()
//                 }, this.getFilters = () => {
//                     const e = {
//                         category: [],
//                         collections: [],
//                         animations: [],
//                         prices: []
//                     };
//                     return this.category.length > 0 && (e.category = this.category), this.collections.length > 0 && (e.collections = this.collections), this.animations.length > 0 && (e.animations = this.animations), this.prices.length > 0 && (e.prices = this.prices), e
//                 }, this.reset = () => {
//                     this.category = [], this.collections = [], this.animations = [], this.prices = [], document.querySelectorAll(".filter-item").forEach((e => {
//                         e.classList.remove("selected"), e.querySelector("input").checked = !1
//                     }))
//                 }, t.ZP.category && (this.category = [t.ZP.category]), t.ZP.collection && (this.collections = [t.ZP.collection]), this.trigger = e, this.init()
//             }
//             handleFilterSectionClick(e) {
//                 const t = `${e}-content`;
//                 (0, n.ZP)(e).querySelector("#dropdown-icon").classList.toggle("show"), this.showHideFilterSection(t)
//             }
//         }
//         class st {
//             constructor(e = null, i = null, a = null) {
//                 this.search = () => {
//                     const e = (0, n.ZP)("template-search");
//                     if (this.searchValue = e.value, this.recordKeyword = !1, 0 == e.value.length || "" == e.value) return this.searchValue = "", document.querySelector(".search-suggesstions").style.display = "none", void(this.reset && this.reset());
//                     this.handleSearchSuggestions(e.value)
//                 }, this.handleSearchSuggestions = async e => {
//                     var t, i, a, r;
//                     let o = {
//                         limit: 50
//                     };
//                     e.length > 0 && (o.keywords = e), (null === (t = this.filters) || void 0 === t ? void 0 : t.category) && (o.category = this.filters.category.join(",")), (null === (i = this.filters) || void 0 === i ? void 0 : i.collections) && (o.collection = this.filters.collections.join(",")), 1 == (null === (a = this.filters) || void 0 === a ? void 0 : a.animations.length) && (o.animated = "animation" == this.filters.animations[0]), (null === (r = this.filters) || void 0 === r ? void 0 : r.prices) && (o.type = this.filters.prices.join(",")), this.searchValue && (o.keywords = this.searchValue), this.recordKeyword && (o.recordKeyword = !0);
//                     const {
//                         suggestions: l,
//                         templates: d,
//                         total: c
//                     } = await tt(o);
//                     document.querySelector(".search-suggesstions").style.display = "flex";
//                     const u = (0, n.ZP)("keyword-hints");
//                     u.innerHTML = "", l.forEach((e => {
//                         if (e.name && e.name.snippet) {
//                             const t = (0, n.T)("div", {
//                                 className: "suggestion-item",
//                                 onclick: () => this.handleRender(e.name.snippet)
//                             }, (0, n.T)("span", {
//                                 innerHTML: e.name.snippet
//                             }));
//                             u.appendChild(t)
//                         }
//                     }));
//                     const h = (0, n.ZP)("template-hits");
//                     h.innerHTML = "";
//                     const m = (0, n.T)("div", {
//                             className: "header"
//                         }, (0, n.T)("span", {
//                             innerText: `Suggested templates (${c})`
//                         }), 0 != c ? (0, n.T)("a", {
//                             onclick: () => this.handleRender(e),
//                             innerText: (0, s.Z)("seeAll")
//                         }) : ""),
//                         p = (0, n.T)("div", {
//                             className: "suggested-templates"
//                         }, ...d.map((e => {
//                             const t = (0, n.T)("a", {
//                                 href: `/templates/${e.category}/${e.name}/${e.id}`
//                             });
//                             return t.innerHTML = `<img src="${e.thumbnailMedium}" />`, t
//                         })));
//                     h.appendChild(m), h.appendChild(p)
//                 }, this.setKeyword = e => {
//                     (0, n.ZP)("template-search").value = e, this.search()
//                 }, this.handleRender = e => {
//                     (0, n.ZP)("template-search").value = e.replace(/<[^>]*>?/gm, ""), this.searchValue = e.replace(/<[^>]*>?/gm, ""), this.render && (document.querySelector(".search-suggesstions").style.display = "none", this.render()), null == this.render && (window.location.href = `/templates?keywords=${this.searchValue}`)
//                 }, (0, n.ZP)("template-search").addEventListener("keyup", (e => {
//                     if ("Enter" == e.key) return document.querySelector(".search-suggesstions").style.display = "none", this.recordKeyword = !0, void this.handleRender(this.searchValue);
//                     this.search()
//                 })), (0, n.ZP)("template-search-btn").addEventListener("click", (() => {
//                     document.querySelector(".search-suggesstions").style.display = "none", this.recordKeyword = !0, this.handleRender(this.searchValue)
//                 })), t.ZP.keywords && (this.searchValue = t.ZP.keywords, window.history.replaceState({}, document.title, window.location.href.split("?")[0])), this.render = e, this.filters = (null == a ? void 0 : a.getFilters()) || null, this.reset = i, document.querySelectorAll(".suggestion-item").forEach((e => {
//                     e.addEventListener("click", (() => {
//                         (0, n.ZP)("template-search").value = e.textContent, this.searchValue = e.textContent, this.recordKeyword = !0, this.handleRender(e.textContent)
//                     }))
//                 })), document.addEventListener("click", (e => {
//                     e.target != (0, n.ZP)("template-search") && (document.querySelector(".search-suggesstions").style.display = "none")
//                 })), document.addEventListener("keyup", (e => {
//                     "Escape" == e.key && (document.querySelector(".search-suggesstions").style.display = "none")
//                 }))
//             }
//         }
//         var rt = function(e, t) {
//             var n = {};
//             for (var i in e) Object.prototype.hasOwnProperty.call(e, i) && t.indexOf(i) < 0 && (n[i] = e[i]);
//             if (null != e && "function" == typeof Object.getOwnPropertySymbols) {
//                 var a = 0;
//                 for (i = Object.getOwnPropertySymbols(e); a < i.length; a++) t.indexOf(i[a]) < 0 && Object.prototype.propertyIsEnumerable.call(e, i[a]) && (n[i[a]] = e[i[a]])
//             }
//             return n
//         };
//         class ot {
//             constructor(e, t) {
//                 this.page = 2, this.aspectRatio = 1, this.init = () => {
//                     const e = (0, n.ZP)("category-templates"),
//                         t = new S(e);
//                     document.querySelectorAll(".template-item").forEach((e => {
//                         t.addChild(e)
//                     })), t.resizeAllGridItems()
//                 }, this.loadMore = async () => {
//                     const e = await et(this.id, {
//                             page: this.page,
//                             limit: 50
//                         }),
//                         {
//                             templates: t,
//                             pages: i
//                         } = e,
//                         a = (rt(e, ["templates", "pages"]), (0, n.ZP)("category-templates")),
//                         s = new S(a);
//                     t.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`
//                         }, (0, n.T)("img", {
//                             src: e.thumbnailMedium,
//                             style: {
//                                 width: "100%",
//                                 borderRadius: "6px"
//                             },
//                             onload: () => s.resizeAllGridItems()
//                         })), (0, n.T)("div", {
//                             className: "overlay",
//                             onclick: () => {
//                                 window.location.href = `/templates/${e.category}/${e.slug}/${e.id}`
//                             }
//                         }, (0, n.T)("div", {
//                             className: "top"
//                         }, (0, n.T)("div", {
//                             className: "info"
//                         }, (0, n.T)("span", {}, e.name), (0, n.T)("span", {}, `${e.ratio.width} x ${e.ratio.height}px`))), (0, n.T)("div", {
//                             className: "bottom"
//                         }, (0, n.T)("div", {}, (0, n.T)("div", {
//                             className: "template-favourite"
//                         }, (0, n.T)("img", {
//                             src: e.favourite ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg",
//                             width: 32,
//                             height: 32,
//                             style: "pointer-events: none;"
//                         }))), (0, n.T)("div", {}, (0, n.T)("img", {
//                             src: "free" == e.type ? "/img/icon/free-square.svg" : "/img/icon/premium-square.svg",
//                             height: 40,
//                             style: "pointer-events: none;border-radius: 4px 4px 0px 0px;"
//                         })))));
//                         s.addChild(t)
//                     })), this.page >= i && (0, n.ZP)("load-more").remove(), this.page++
//                 }, this.scrollToTop = () => {
//                     window.scrollTo({
//                         top: 0,
//                         behavior: "smooth"
//                     })
//                 }, this.id = e, this.search = new st, this.category = t, this.aspectRatio = Math.round(this.category.ratio.width / this.category.ratio.height), this.aspectRatio > 3 && (0, n.ZP)("category-templates").classList.add("landscape"), window.onscroll = () => {
//                     const e = (0, n.ZP)("fab");
//                     e && (window.scrollY > 500 ? e.style.display = "block" : e.style.display = "none")
//                 }, this.init()
//             }
//         }
//         class lt {
//             constructor(e, t) {
//                 this.page = 2, this.aspectRatio = 1, this.init = () => {
//                     const e = (0, n.ZP)("collection-templates"),
//                         t = new S(e);
//                     document.querySelectorAll(".template-item").forEach((e => {
//                         t.addChild(e)
//                     })), t.resizeAllGridItems()
//                 }, this.loadMore = async () => {
//                     const {
//                         templates: e,
//                         pages: t
//                     } = await ((e, t = {}) => Qe(`/api/templates/collections/${e}/templates/`, t))(this.id, {
//                         page: this.page,
//                         limit: 50
//                     }), i = (0, n.ZP)("collection-templates"), a = new S(i);
//                     e.forEach((e => {
//                         const t = (0, n.T)("div", {
//                             className: "template-item"
//                         }, (0, n.T)("a", {
//                             href: `/templates/${e.category}/${e.slug}/${e.id}`
//                         }, (0, n.T)("img", {
//                             src: e.thumbnailMedium,
//                             style: {
//                                 width: "100%",
//                                 borderRadius: "6px"
//                             },
//                             onload: () => a.resizeAllGridItems()
//                         })), (0, n.T)("div", {
//                             className: "overlay",
//                             onclick: () => {
//                                 window.location.href = `/templates/${e.category}/${e.slug}/${e.id}`
//                             }
//                         }, (0, n.T)("div", {
//                             className: "top"
//                         }, (0, n.T)("div", {
//                             className: "info"
//                         }, (0, n.T)("span", {}, e.name), (0, n.T)("span", {}, `${e.ratio.width} x ${e.ratio.height}px`))), (0, n.T)("div", {
//                             className: "bottom"
//                         }, (0, n.T)("div", {}, (0, n.T)("div", {
//                             className: "template-favourite"
//                         }, (0, n.T)("img", {
//                             src: e.favourite ? "/img/icon/heart-filled.svg" : "/img/icon/heart-outline.svg",
//                             width: 32,
//                             height: 32,
//                             style: "pointer-events: none;"
//                         }))), (0, n.T)("div", {}, (0, n.T)("img", {
//                             src: "free" == e.type ? "/img/icon/free-square.svg" : "/img/icon/premium-square.svg",
//                             height: 40,
//                             style: "pointer-events: none;border-radius: 4px 4px 0px 0px;"
//                         })))));
//                         a.addChild(t)
//                     })), this.page >= t && (0, n.ZP)("load-more").remove(), this.page++
//                 }, this.scrollToTop = () => {
//                     window.scrollTo({
//                         top: 0,
//                         behavior: "smooth"
//                     })
//                 }, this.id = e, this.search = new st, window.onscroll = () => {
//                     const e = (0, n.ZP)("fab");
//                     e && (window.scrollY > 500 ? e.style.display = "block" : e.style.display = "none")
//                 }, this.init()
//             }
//         }
//         class dt extends Xe.Z {
//             constructor(e) {
//                 var i, a;
//                 if (super(), this.selectedIndex = 0, this.dialog.classList.add("news-dialog"), e.length > 1) {
//                     const t = e => e.length > 50 ? e.slice(0, 50) + "…" : e,
//                         a = e.map(((i, a) => (0, n.T)("a", {
//                             id: `news-menu-item-${a}`,
//                             className: a === this.selectedIndex ? "item selected" : "item",
//                             href: "javascript:;",
//                             onclick: () => {
//                                 var t;
//                                 (0, n.ZP)(`news-menu-item-${this.selectedIndex}`).classList.remove("selected"), (0, n.ZP)(`news-menu-item-${a}`).classList.add("selected"), (0, n.ZP)("news-current").replaceWith(ct(e[a])), this.selectedIndex = a, null === (t = (0, n.ZP)("new-checkout-cta")) || void 0 === t || t.addEventListener("click", (() => {
//                                     new Se.Z("news", "premium"), this.cleanUp()
//                                 })), (0, x.Z)("news-select")
//                             }
//                         }, (0, n.T)("div", t(i.title)))));
//                     this.setContent((0, n.T)("div", {
//                         className: "news-split"
//                     }, (0, n.T)("div", {
//                         className: "news-menu"
//                     }, (0, n.T)("div", {
//                         className: "headline"
//                     }, (0, s.Z)("whatsNew")), (0, n.T)("div", {}, ...a)), (0, n.T)("div", {
//                         className: "news-body"
//                     }, ct(e[this.selectedIndex])))), null === (i = (0, n.ZP)("new-checkout-cta")) || void 0 === i || i.addEventListener("click", (() => {
//                         new Se.Z("news", "premium"), this.cleanUp()
//                     }))
//                 } else this.dialog.classList.add("single-news"), this.setContent(ct(e[0])), null === (a = (0, n.ZP)("new-checkout-cta")) || void 0 === a || a.addEventListener("click", (() => {
//                     new Se.Z("news", "premium"), this.cleanUp()
//                 }));
//                 (0, t.Lt)("lastNewsCheck", (new Date).toISOString())
//             }
//         }

//         function ct(e, t) {
//             const i = new Date(e.publishDate);
//             let a;
//             if (e.video) {
//                 const i = () => {
//                     const t = Math.max(360, s.getBoundingClientRect().height),
//                         i = `https://www.youtube.com/embed/${e.video}?autoplay=1&modestbranding=1`;
//                     a.style.height = t + "px", s.style.filter = "blur(6px)", (0, x.Z)("news-play"), a.append((0, n.T)("div", {
//                         className: "player-container"
//                     }, (0, n.T)("iframe", {
//                         width: "640",
//                         height: "360",
//                         src: i,
//                         className: "player",
//                         allow: "autoplay"
//                     })))
//                 };
//                 let s = (0, n.T)("img", {
//                         className: "news-cover",
//                         src: e.cover,
//                         onload: t
//                     }),
//                     r = (0, n.T)("div", {
//                         className: "play-button",
//                         onclick: i
//                     }, (0, n.T)("img", {
//                         src: "/img/icon/play-circle.svg"
//                     }));
//                 a = (0, n.T)("div", {
//                     className: "cover-stack"
//                 }, s, r)
//             } else a = (0, n.T)("img", {
//                 className: "news-cover",
//                 src: e.cover,
//                 onload: t
//             });
//             return (0, n.T)("div", {
//                 id: "news-current"
//             }, a, (0, n.T)("div", {
//                 className: "news-content"
//             }, (0, n.T)("div", {
//                 className: "news-title"
//             }, (0, n.T)("div", {
//                 className: "news-date"
//             }, (0, n.T)("span", `${i.toLocaleDateString()}`)), (0, n.T)("span", {
//                 className: "news-headline"
//             }, e.title)), (0, n.T)("div", {
//                 className: "news-text"
//             }, e.text), e.checkoutCta && "free" === (null === r.a || void 0 === r.a ? void 0 : r.a.subscriptionAccess) ? (0, n.T)("a", {
//                 className: "button med",
//                 style: "margin-left:auto;",
//                 id: "new-checkout-cta",
//                 dataset: e.ctaDataset || {}
//             }, r.a ? "GET A SUBSCRIPTION" : "SIGN UP NOW!") : e.urlWeb ? (0, n.T)("a", {
//                 className: "button med",
//                 style: "margin-left:auto;",
//                 href: e.urlWeb,
//                 target: "_blank",
//                 onmousedown: () => {
//                     (0, x.Z)("news-url-web")
//                 }
//             }, e.cta) : ""))
//         }
//         class ut extends P {
//             constructor() {
//                 super((0, s.Z)("titlePreferences"), !1), this.getLanguage = () => {
//                     const e = location.pathname.split("/");
//                     return e[1] && 2 === e[1].length ? e[1] : "us"
//                 }, this.setLanguage = e => {
//                     const t = location.pathname.split("/");
//                     t[1] && 2 === t[1].length ? t[1] = e : t.splice(1, 0, e), location.href = t.join("/")
//                 }, this.dialog.style.maxWidth = "440px", this.setContent(`\n\n                <label class="split" for="settings-language">${(0,s.Z)("language")}\n                <div class="select top-0" style="width:auto">\n                    <select id="settings-language">\n                        <option value="us">English</option>\n                        <option value="id">Bahasa Indonesia</option>\n                        <option value="ml">Bahasa Melayu</option>\n                        <option value="cz">Čeština</option>\n                        <option value="dk">Dansk</option>\n                        <option value="de">Deutsch</option>\n                        <option value="es">Español</option>\n                        <option value="ph">Filipino</option>\n                        <option value="fr">Français</option>\n                        <option value="hr">Hrvatski</option>\n                        <option value="it">Italiano</option>\n                        <option value="nl">Nederlands</option>\n                        <option value="no">Norsk</option>\n                        <option value="pl">Polski</option>\n                        <option value="pt">Português</option>\n                        <option value="br">Português (Brasileiro)</option>\n                        <option value="ro">Romanian</option>\n                        <option value="rs">Србија</option>\n                        <option value="ru">Русский</option>\n                        <option value="fi">Suomi</option>\n                        <option value="se">Svenska</option>\n                        <option value="tr">Türkçe</option>\n                        <option value="vn">Tiếng Việt</option>\n                        <option value="th">ไทย</option>\n                        <option value="gr">Ελληνικά</option>\n                        <option value="kr">한국어</option>\n                        <option value="jp">日本語</option>\n                        <option value="cn">中文</option>\n                        <option value="tw">繁體中文</option>\n                    </select> \n                </div>\n            </label>\n\n            <div class="splitter small top-10"></div>\n\n            <label class=" top-10">${(0,s.Z)("viewOBarAccent")}</label>\n            <div id="preference-accent" class="top-4 color-pod-list" style="gap:3px;">\n                <div class="color-pod small" data="ash" style="background-color:#383E42"></div>\n                <div class="color-pod small" data="brown" style="background-color:#715649"></div>\n                <div class="color-pod small" data="coral" style="background-color:#F3764C"></div>\n                <div class="color-pod small" data="pink" style="background-color:#F17686"></div>\n                <div class="color-pod small" data="rose" style="background-color:#FE5151"></div>\n                <div class="color-pod small" data="red" style="background-color:#BA2B46"></div>\n                <div class="color-pod small" data="plum" style="background-color:#5A354F"></div>\n                <div class="color-pod small" data="maroon" style="background-color:#A82068"></div>\n                <div class="color-pod small" data="purple" style="background-color:#7D4199"></div>\n                <div class="color-pod small" data="lavender" style="background-color:#6D5DD2"></div>\n                <div class="color-pod small" data="denim" style="background-color:#496171"></div>\n                <div class="color-pod small" data="blue" style="background-color:#0099CC"></div>\n                <div class="color-pod small" data="teal" style="background-color:#00A5A5"></div>\n                <div class="color-pod small" data="green" style="background-color:#48B07B"></div>\n                <div class="color-pod small" data="lime" style="background-color:#95C20F"></div>\n                <div class="color-pod small" data="mustard" style="background-color:#F5BB00"></div>\n            </div>\n\n            <label class="top-16">${(0,s.Z)("viewOBarWorkspace")}</label>\n            <div id="preference-workspace" class="color-selector-presets extended top-4" style="width:200px">\n                <div data="dark" class="color-pod square" style="background-color: #232529"></div>\n                <div data="iron" class="color-pod square" style="background-color: #606060"></div>\n                <div data="steel" class="color-pod square" style="background-color: #999999"></div>\n                <div data="light" class="color-pod square" style="background-color: #cccccc"></div>\n            </div>\n\n            <a id="preference-theme-reset" class="link top-20" style="display:inline-block;">${(0,s.Z)("reset")}</a>\n\n        `);
//                 let e = t.ZP.accent,
//                     i = (0, n.ZP)("preference-accent").getElementsByTagName("div");
//                 for (var a = 0; a < i.length; a += 1) i[a].addEventListener("click", (n => {
//                     document.documentElement.classList.remove(e), e = n.currentTarget.getAttribute("data"), document.documentElement.classList.add(e), document.dispatchEvent(new CustomEvent("layerlist-update")), (0, t.Lt)("accent", e)
//                 }));
//                 let r = t.ZP.workspace,
//                     o = (0, n.ZP)("preference-workspace").getElementsByTagName("div");
//                 for (a = 0; a < o.length; a += 1) o[a].addEventListener("click", (e => {
//                     document.documentElement.classList.remove(r), r = e.currentTarget.getAttribute("data"), document.documentElement.classList.add(r), (0, t.Lt)("workspace", r)
//                 }));
//                 (0, n.ZP)("preference-theme-reset").addEventListener("click", (() => {
//                     (0, t.Lt)("workspace", "default"), (0, t.Lt)("accent", "default"), document.documentElement.className = ""
//                 }));
//                 const l = (0, n.ZP)("settings-language");
//                 l.value = this.getLanguage(), l.onchange = () => this.setLanguage(l.value), (0, n.ZP)("dialog-apply" + this.mid).style.display = "none", (0, n.ZP)("dialog-cancel" + this.mid).innerText = (0, s.Z)("close")
//             }
//         }
//         class ht {
//             constructor() {
//                 var e, i, a, s, r, o, d, c, u;
//                 this.pollNews = async () => {
//                     const e = new Date(t.ZP.lastNewsCheck);
//                     this.news = await fetch(`https://pixlr.com/api/news/poll/?target=web&from=${e.toISOString()}&limit=5`).then((e => e.json()));
//                     const i = await this.news;
//                     !1 !== i.status ? (i.data.unread > 0 && !i.data.pop && (0, n.ZP)("head-news").append((0, n.T)("span", {
//                         id: "noti-red-dot"
//                     })), "web" !== t.ZP.product && i.data.pop && new dt(i.data.news.docs)) : console.error(i.message)
//                 }, this.newsClick = async () => {
//                     var e;
//                     (0, x.Z)("news-click");
//                     const t = await this.news;
//                     !1 !== t.status && t.data.news.docs.length ? (null === (e = (0, n.ZP)("noti-red-dot")) || void 0 === e || e.remove(), new dt(t.data.news.docs)) : document.dispatchEvent(new CustomEvent("notification", {
//                         detail: "No news :/"
//                     }))
//                 }, document.documentElement.classList.add(t.ZP.workspace, t.ZP.accent), null === (e = (0, n.ZP)("head-login")) || void 0 === e || e.addEventListener("click", (() => new l.Z)), null === (i = (0, n.ZP)("plug-login")) || void 0 === i || i.addEventListener("click", (() => new l.Z)), null === (a = (0, n.ZP)("head-menu-login")) || void 0 === a || a.addEventListener("click", (() => new l.Z)), null === (s = (0, n.ZP)("head-news")) || void 0 === s || s.addEventListener("click", this.newsClick, !0), null === (r = (0, n.ZP)("head-menu-news")) || void 0 === r || r.addEventListener("click", this.newsClick, !0), null === (o = (0, n.ZP)("head-settings")) || void 0 === o || o.addEventListener("click", (() => new ut)), null === (d = (0, n.ZP)("head-menu-settings")) || void 0 === d || d.addEventListener("click", (() => new ut)), null === (c = (0, n.ZP)("head-premium")) || void 0 === c || c.addEventListener("click", (() => new Se.Z("SPLASH", "premium"))), null === (u = (0, n.ZP)("plug-premium")) || void 0 === u || u.addEventListener("click", (() => new Se.Z("PLUG", "premium"))), this.pollNews()
//             }
//         }(async () => {
//             var e, t, i;
//             new ht;
//             const a = new URLSearchParams(window.location.search);
//             if ((0, n.ZP)("flash-toast") && (0, n.FN)("success", (0, n.ZP)("flash-toast").dataset.message), "" !== a.get("promo") && "GR" === a.get("src")) {
//                 const e = new Date;
//                 (0, n.d8)("promo-code", a.get("promo"), {
//                     expires: new Date(e.setDate(e.getDate() + 1))
//                 }), new Se.Z("web", "premium")
//             }
//             if (a.get("entry") && a.get("callback_url") && new l.Z({
//                     callback: a.get("callback_url"),
//                     email: null !== (e = a.get("email")) && void 0 !== e ? e : ""
//                 }), (0, n.ZP)("head-login")) {
//                 a.get("ckt") && new l.Z({
//                     callback: encodeURIComponent(window.location.href)
//                 });
//                 [...document.getElementsByClassName("show-auth")].forEach((e => {
//                     e.addEventListener("click", (async function(t) {
//                         var n;
//                         t.preventDefault();
//                         const i = encodeURIComponent(null !== (n = e.href) && void 0 !== n ? n : window.location.href);
//                         new l.Z({
//                             callback: i
//                         })
//                     }))
//                 }))
//             } else if (a.get("ckt") && r.a) {
//                 if (r.a.subscription) return window.location.replace("/myaccount/?tab=subscription");
//                 const e = null !== (t = a.get("ckt-plan")) && void 0 !== t ? t : "premium-yearly";
//                 new d.Z("subscription", {
//                     plan: e,
//                     platform: "web",
//                     code: null !== (i = a.get("ckt-promo")) && void 0 !== i ? i : ""
//                 })
//             }
//         })();
//         class mt {
//             constructor() {
//                 var e;
//                 null === (e = (0, n.ZP)("start-free-trial")) || void 0 === e || e.addEventListener("click", (() => {
//                     new d.Z("subscription", {
//                         platform: "web",
//                         plan: "premium-monthly"
//                     })
//                 })), window.addEventListener("DOMContentLoaded", (() => {
//                     var e;
//                     null === (e = (0, n.ZP)("testimonials-reels")) || void 0 === e || e.scrollBy(300, 0)
//                 }))
//             }
//         }
//         const pt = () => {
//             var e, t;
//             null === (e = (0, n.ZP)("start-free-trial")) || void 0 === e || e.addEventListener("click", (() => {
//                 new d.Z("subscription", {
//                     platform: "web",
//                     plan: "premium-monthly"
//                 })
//             })), null === (t = (0, n.ZP)("team-monthly")) || void 0 === t || t.addEventListener("click", (() => {
//                 new d.Z("subscription", {
//                     platform: "web",
//                     plan: "team-monthly"
//                 })
//             }))
//         }
//     })(), web = u
// })();